language: ts
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let [month, day, year] = date.split(\"-\");\n  let monthNumber\
    \ = parseInt(month);\n  let dayNumber = parseInt(day);\n  let yearNumber = parseInt(year);\n\
    \  if (\n    monthNumber < 1 ||\n    monthNumber > 12 ||\n    dayNumber < 1 ||\n\
    \    dayNumber > 31 ||\n    yearNumber < 1\n  ) {\n    return false;\n  }\n  if\
    \ (\n    (monthNumber == 4 ||\n      monthNumber == 6 ||\n      monthNumber ==\
    \ 9 ||\n      monthNumber == 11) &&\n    dayNumber > 30\n  ) {\n    return false;\n\
    \  }\n  if (monthNumber == 2 && dayNumber > 29) {\n    return false;\n  }\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzgrgcowl.js:52:12)\n    at Object.<anonymous> (/tmp/tmpzgrgcowl.js:63:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month === 4 || month ===\
    \ 6 || month === 9 || month === 11) {\n        if (day > 30) {\n            return\
    \ false;\n        }\n    }\n    if (month === 2) {\n        if (day > 29) {\n\
    \            return false;\n        }\n    }\n    if (year < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month === 2) {\n        if\
    \ (day > 29) {\n            return false;\n        }\n    }\n    if (month ===\
    \ 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  if (date.length === 0) {\n    return false;\n  }\n  const\
    \ dateArr = date.split(\"-\");\n  if (dateArr.length !== 3) {\n    return false;\n\
    \  }\n  const month = Number(dateArr[0]);\n  const day = Number(dateArr[1]);\n\
    \  const year = Number(dateArr[2]);\n  if (month < 1 || month > 12) {\n    return\
    \ false;\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return\
    \ false;\n    }\n  } else if (month === 1 || month === 3 || month === 5 || month\
    \ === 7 || month === 8 || month === 10 || month === 12) {\n    if (day < 1 ||\
    \ day > 31) {\n      return false;\n    }\n  } else {\n    if (day < 1 || day\
    \ > 30) {\n      return false;\n    }\n  }\n  if (year < 1) {\n    return false;\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (month === 2) {\n      \
    \  if (day < 1 || day > 29) {\n            return false;\n        }\n    } else\
    \ if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \  }\n    if (year < 0) {\n        return false;\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let date_arr = date.split(\"-\");\n    let month = parseInt(date_arr[0]);\n\
    \    let day = parseInt(date_arr[1]);\n    let year = parseInt(date_arr[2]);\n\
    \    let is_leap_year = year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ == 2) {\n        if (is_leap_year) {\n            if (day < 1 || day > 29) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 28) {\n                return false;\n            }\n    \
    \    }\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31)\
    \ {\n            return false;\n        }\n    } else {\n        if (day < 1 ||\
    \ day > 30) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcob24dz7.js:61:12)\n    at Object.<anonymous> (/tmp/tmpcob24dz7.js:72:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let dateArr = date.split(\"-\");\n  let month = parseInt(dateArr[0]);\n\
    \  let day = parseInt(dateArr[1]);\n  let year = parseInt(dateArr[2]);\n  if (\n\
    \    dateArr.length !== 3 ||\n    month < 1 ||\n    month > 12 ||\n    day < 1\
    \ ||\n    day > 31 ||\n    year < 1\n  ) {\n    return false;\n  }\n  if (\n \
    \   (month === 2 && day > 29) ||\n    (month === 4 && day > 30) ||\n    (month\
    \ === 6 && day > 30) ||\n    (month === 9 && day > 30) ||\n    (month === 11 &&\
    \ day > 30)\n  ) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   let isValid = false;\n    if (dateArr.length === 3) {\n        if (month >=\
    \ 1 && month <= 12) {\n            if (day >= 1 && day <= 31) {\n            \
    \    if (month === 2) {\n                    if (day <= 29) {\n              \
    \          isValid = true;\n                    }\n                } else if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n                   \
    \ if (day <= 30) {\n                        isValid = true;\n                \
    \    }\n                } else {\n                    isValid = true;\n      \
    \          }\n            }\n        }\n    }\n    return isValid;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    if (date.length === 0) {\n        return false;\n  \
    \  }\n    let dateArray = date.split(\"-\");\n    if (dateArray.length !== 3)\
    \ {\n        return false;\n    }\n    let month = parseInt(dateArray[0]);\n \
    \   let day = parseInt(dateArray[1]);\n    let year = parseInt(dateArray[2]);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    if (year < 0) {\n      \
    \  return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const [month, day, year] = date.split(\"-\");\n  const\
    \ monthNum = Number(month);\n  const dayNum = Number(day);\n  const yearNum =\
    \ Number(year);\n  if (\n    date.length === 0 ||\n    monthNum > 12 ||\n    monthNum\
    \ < 1 ||\n    yearNum < 1 ||\n    dayNum < 1\n  ) {\n    return false;\n  }\n\
    \  if (\n    (monthNum === 1 ||\n      monthNum === 3 ||\n      monthNum === 5\
    \ ||\n      monthNum === 7 ||\n      monthNum === 8 ||\n      monthNum === 10\
    \ ||\n      monthNum === 12) &&\n    dayNum > 31\n  ) {\n    return false;\n \
    \ }\n  if (\n    (monthNum === 4 ||\n      monthNum === 6 ||\n      monthNum ===\
    \ 9 ||\n      monthNum === 11) &&\n    dayNum > 30\n  ) {\n    return false;\n\
    \  }\n  if (monthNum === 2 && dayNum > 29) {\n    return false;\n  }\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    const dateArr = date.split('-');\n    const month =\
    \ parseInt(dateArr[0]);\n    const day = parseInt(dateArr[1]);\n    const year\
    \ = parseInt(dateArr[2]);\n    if (dateArr.length !== 3) {\n        return false;\n\
    \    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n   \
    \ if (month === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n\
    \        }\n    } else if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if (day < 1 || day > 30) {\n            return false;\n \
    \       }\n    } else {\n        if (day < 1 || day > 31) {\n            return\
    \ false;\n        }\n    }\n    if (year < 1) {\n        return false;\n    }\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let [month, day, year] = date.split(\"-\");\n  let daysInMonth\
    \ = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (\n    year.length\
    \ === 4 &&\n    month.length === 2 &&\n    day.length === 2 &&\n    Number(month)\
    \ > 0 &&\n    Number(month) <= 12 &&\n    Number(day) > 0 &&\n    Number(day)\
    \ <= daysInMonth[Number(month) - 1]\n  ) {\n    return true;\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpuabfemvu.js:22\n    if (year.length === 4 &&\n             ^\n\n\
    TypeError: Cannot read property 'length' of undefined\n    at valid_date (/tmp/tmpuabfemvu.js:22:14)\n\
    \    at test (/tmp/tmpuabfemvu.js:42:22)\n    at Object.<anonymous> (/tmp/tmpuabfemvu.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = +dateArr[0];\n\
    \    let day = +dateArr[1];\n    let year = +dateArr[2];\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31) {\n\
    \        return false;\n    }\n    if (month === 2) {\n        if (day > 29) {\n\
    \            return false;\n        }\n    }\n    if (month === 4 || month ===\
    \ 6 || month === 9 || month === 11) {\n        if (day > 30) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    if (year < 1) {\n      \
    \  return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = Number(dateArr[0]);\n\
    \    let month = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n   \
    \ if (dateArr.length !== 3) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month < 1 || month > 12)\
    \ {\n        return false;\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2r7ufyl5.js:42:12)\n    at Object.<anonymous> (/tmp/tmp2r7ufyl5.js:58:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 0) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n    } else {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 0) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let date_arr = date.split(\"-\");\n    if (date_arr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(date_arr[0]);\n\
    \    let day = parseInt(date_arr[1]);\n    let year = parseInt(date_arr[2]);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ != 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ == 2) {\n        if (day < 1 || day > 29) {\n            return false;\n   \
    \     }\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31)\
    \ {\n            return false;\n        }\n    } else {\n        if (day < 1 ||\
    \ day > 30) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 0) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  const month = Number(dateArr[0]);\n\
    \  const day = Number(dateArr[1]);\n  const year = Number(dateArr[2]);\n  if (\n\
    \    dateArr.length !== 3 ||\n    month < 1 ||\n    month > 12 ||\n    year <\
    \ 1 ||\n    day < 1 ||\n    (month === 2 && day > 29) ||\n    (month === 4 &&\
    \ day > 30) ||\n    (month === 6 && day > 30) ||\n    (month === 9 && day > 30)\
    \ ||\n    (month === 11 && day > 30) ||\n    (month === 1 && day > 31) ||\n  \
    \  (month === 3 && day > 31) ||\n    (month === 5 && day > 31) ||\n    (month\
    \ === 7 && day > 31) ||\n    (month === 8 && day > 31) ||\n    (month === 10 &&\
    \ day > 31) ||\n    (month === 12 && day > 31)\n  ) {\n    return false;\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   let isLeapYear = year % 4 === 0;\n    let isValidMonth = month >= 1 && month\
    \ <= 12;\n    let isValidDay = day >= 1 && day <= 31;\n    let isValidDayForMonth\
    \ = (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 ||\
    \ month === 10 || month === 12) ? isValidDay : (month === 4 || month === 6 ||\
    \ month === 9 || month === 11) ? day >= 1 && day <= 30 : isLeapYear ? day >= 1\
    \ && day <= 29 : day >= 1 && day <= 28;\n    return isValidMonth && isValidDayForMonth;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    const dateArr = date.split('-');\n    const month =\
    \ parseInt(dateArr[0]);\n    const day = parseInt(dateArr[1]);\n    const year\
    \ = parseInt(dateArr[2]);\n    if (month > 12 || month < 1) {\n        return\
    \ false;\n    }\n    if (day > 31 || day < 1) {\n        return false;\n    }\n\
    \    if (month === 2 && day > 29) {\n        return false;\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    if (year < 1000 || year\
    \ > 9999) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp5oxm9hza.js:52:12)\n    at Object.<anonymous> (/tmp/tmp5oxm9hza.js:63:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  const month = parseInt(dateArr[0]);\n\
    \  const day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n \
    \ if (\n    dateArr.length !== 3 ||\n    month < 1 ||\n    month > 12 ||\n   \
    \ year < 1 ||\n    year > 9999\n  ) {\n    return false;\n  }\n  if (\n    (month\
    \ === 1 ||\n      month === 3 ||\n      month === 5 ||\n      month === 7 ||\n\
    \      month === 8 ||\n      month === 10 ||\n      month === 12) &&\n    (day\
    \ < 1 || day > 31)\n  ) {\n    return false;\n  }\n  if (\n    (month === 4 ||\
    \ month === 6 || month === 9 || month === 11) &&\n    (day < 1 || day > 30)\n\
    \  ) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n\
    \  }\n  if (month === 2 && day === 29 && year % 4 !== 0) {\n    return false;\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  if (date.length === 0) {\n    return false;\n  }\n  let\
    \ [month, day, year] = date.split(\"-\");\n  if (\n    (month === \"01\" ||\n\
    \      month === \"03\" ||\n      month === \"05\" ||\n      month === \"07\"\
    \ ||\n      month === \"08\" ||\n      month === \"10\" ||\n      month === \"\
    12\") &&\n    (day < \"01\" || day > \"31\")\n  ) {\n    return false;\n  }\n\
    \  if (\n    (month === \"04\" ||\n      month === \"06\" ||\n      month ===\
    \ \"09\" ||\n      month === \"11\") &&\n    (day < \"01\" || day > \"30\")\n\
    \  ) {\n    return false;\n  }\n  if (month === \"02\" && (day < \"01\" || day\
    \ > \"29\")) {\n    return false;\n  }\n  if (month < \"01\" || month > \"12\"\
    ) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprtf26qu5.js:63:12)\n    at Object.<anonymous> (/tmp/tmprtf26qu5.js:69:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n\
    \        if (day < 1 || day > 29) {\n            return false;\n        }\n  \
    \  } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpp415e4fp.js:51:12)\n    at Object.<anonymous> (/tmp/tmpp415e4fp.js:67:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let dateArr2 = date.split('/');\n\
    \    if (dateArr.length !== 3 || dateArr2.length !== 3) {\n        return false;\n\
    \    }\n    let month = Number(dateArr[0]);\n    let day = Number(dateArr[1]);\n\
    \    let year = Number(dateArr[2]);\n    if (month < 1 || month > 12) {\n    \
    \    return false;\n    }\n    if (month === 2) {\n        if (day < 1 || day\
    \ > 29) {\n            return false;\n        }\n    } else if (month === 1 ||\
    \ month === 3 || month === 5 || month === 7 || month === 8 || month === 10 ||\
    \ month === 12) {\n        if (day < 1 || day > 31) {\n            return false;\n\
    \        }\n    } else {\n        if (day < 1 || day > 30) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpxg_bvswy.js:51:12)\n    at Object.<anonymous> (/tmp/tmpxg_bvswy.js:68:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  if (dateArr.length\
    \ !== 3) {\n    return false;\n  }\n  const month = parseInt(dateArr[0]);\n  const\
    \ day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (month === 2) {\n    if (day\
    \ < 1 || day > 29) {\n      return false;\n    }\n  } else if (month === 1 ||\
    \ month === 3 || month === 5 || month === 7 || month === 8 || month === 10 ||\
    \ month === 12) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n\
    \  } else {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n\
    \  if (year < 1) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (month === 1 || month ===\
    \ 3 || month === 5 || month === 7 || month === 8 || month === 10 || month ===\
    \ 12) {\n        if (day < 1 || day > 31) {\n            return false;\n     \
    \   }\n    }\n    if (month === 4 || month === 6 || month === 9 || month === 11)\
    \ {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n\
    \    }\n    if (month === 2) {\n        if (day < 1 || day > 29) {\n         \
    \   return false;\n        }\n    }\n    if (year < 0) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  const month = parseInt(dateArr[0]);\n\
    \  const day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n \
    \ if (dateArr.length !== 3) {\n    return false;\n  }\n  if (month < 1 || month\
    \ > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n\
    \  }\n  if (\n    (month === 4 ||\n      month === 6 ||\n      month === 9 ||\n\
    \      month === 11) &&\n    day > 30\n  ) {\n    return false;\n  }\n  if (month\
    \ === 2 && day > 29) {\n    return false;\n  }\n  if (year < 1) {\n    return\
    \ false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = +dateArr[0];\n    let\
    \ day = +dateArr[1];\n    let year = +dateArr[2];\n    if (month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31) {\n    \
    \    return false;\n    }\n    if (month === 2) {\n        if (day > 29) {\n \
    \           return false;\n        }\n    }\n    if (month === 4 || month ===\
    \ 6 || month === 9 || month === 11) {\n        if (day > 30) {\n            return\
    \ false;\n        }\n    }\n    if (year < 1000 || year > 9999) {\n        return\
    \ false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (month === 2) {\n      \
    \  if (day < 1 || day > 29) {\n            return false;\n        }\n    } else\
    \ if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \  }\n    if (year < 0) {\n        return false;\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    let isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n\
    \    if (dateArr.length != 3) {\n        return false;\n    }\n    if (day < 1\
    \ || day > 31) {\n        return false;\n    }\n    if (month < 1 || month > 12)\
    \ {\n        return false;\n    }\n    if (month == 2) {\n        if (isLeapYear)\
    \ {\n            if (day > 29) {\n                return false;\n            }\n\
    \        } else {\n            if (day > 28) {\n                return false;\n\
    \            }\n        }\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1r3l5azu.js:57:12)\n    at Object.<anonymous> (/tmp/tmp1r3l5azu.js:73:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let dateArr = date.split(\"-\");\n  let month = parseInt(dateArr[0]);\n\
    \  let day = parseInt(dateArr[1]);\n  let year = parseInt(dateArr[2]);\n  if (dateArr.length\
    \ !== 3) {\n    return false;\n  }\n  if (month < 1 || month > 12) {\n    return\
    \ false;\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return\
    \ false;\n    }\n  } else if (month === 1 || month === 3 || month === 5 || month\
    \ === 7 || month === 8 || month === 10 || month === 12) {\n    if (day < 1 ||\
    \ day > 31) {\n      return false;\n    }\n  } else {\n    if (day < 1 || day\
    \ > 30) {\n      return false;\n    }\n  }\n  if (year < 1) {\n    return false;\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArray = date.split(\"-\");\n    if (dateArray.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArray[0]);\n\
    \    let day = parseInt(dateArray[1]);\n    let year = parseInt(dateArray[2]);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n    } else {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 1) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let date_arr = date.split(\"-\");\n    if (date_arr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(date_arr[0]);\n\
    \    let day = parseInt(date_arr[1]);\n    let year = parseInt(date_arr[2]);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let [month, day, year] = date.split(\"-\");\n  if (\n\
    \    month.length !== 2 ||\n    day.length !== 2 ||\n    year.length !== 4 ||\n\
    \    isNaN(Number(month)) ||\n    isNaN(Number(day)) ||\n    isNaN(Number(year))\n\
    \  ) {\n    return false;\n  }\n  let monthNum = Number(month);\n  let dayNum\
    \ = Number(day);\n  if (monthNum < 1 || monthNum > 12) {\n    return false;\n\
    \  }\n  if (monthNum === 2) {\n    if (dayNum < 1 || dayNum > 29) {\n      return\
    \ false;\n    }\n  } else if (monthNum === 4 || monthNum === 6 || monthNum ===\
    \ 9 || monthNum === 11) {\n    if (dayNum < 1 || dayNum > 30) {\n      return\
    \ false;\n    }\n  } else {\n    if (dayNum < 1 || dayNum > 31) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if (month < 1 || month >\
    \ 12) {\n        return false;\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpi6_6jksh.js:42:12)\n    at Object.<anonymous> (/tmp/tmpi6_6jksh.js:58:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  const month = parseInt(dateArr[0]);\n\
    \  const day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n \
    \ if (\n    dateArr.length !== 3 ||\n    month < 1 ||\n    month > 12 ||\n   \
    \ year < 1 ||\n    year > 9999\n  ) {\n    return false;\n  }\n  if (\n    (month\
    \ === 1 ||\n      month === 3 ||\n      month === 5 ||\n      month === 7 ||\n\
    \      month === 8 ||\n      month === 10 ||\n      month === 12) &&\n    (day\
    \ < 1 || day > 31)\n  ) {\n    return false;\n  }\n  if (\n    (month === 4 ||\
    \ month === 6 || month === 9 || month === 11) &&\n    (day < 1 || day > 30)\n\
    \  ) {\n    return false;\n  }\n  if (month === 2 && (day < 1 || day > 29)) {\n\
    \    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  if (dateArr.length\
    \ !== 3) {\n    return false;\n  }\n  const month = Number(dateArr[0]);\n  const\
    \ day = Number(dateArr[1]);\n  const year = Number(dateArr[2]);\n  if (month <\
    \ 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n \
    \   return false;\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return\
    \ false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (year\
    \ < 1) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length != 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month == 2) {\n  \
    \      if (day < 1 || day > 29) {\n            return false;\n        }\n    }\
    \ else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12) {\n        if (day < 1 || day > 31) {\n     \
    \       return false;\n        }\n    } else {\n        if (day < 1 || day > 30)\
    \ {\n            return false;\n        }\n    }\n    if (year < 0) {\n      \
    \  return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (month === 2) {\n      \
    \  if (day < 1 || day > 29) {\n            return false;\n        }\n    } else\
    \ if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \  }\n    if (year < 1) {\n        return false;\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let date_arr = date.split(\"-\");\n    let day = parseInt(date_arr[0]);\n\
    \    let month = parseInt(date_arr[1]);\n    let year = parseInt(date_arr[2]);\n\
    \    if (date_arr.length !== 3) {\n        return false;\n    }\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n\
    \        if (day < 1 || day > 29) {\n            return false;\n        }\n  \
    \  } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbt2alno1.js:51:12)\n    at Object.<anonymous> (/tmp/tmpbt2alno1.js:67:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArray = date.split(\"-\");\n    if (dateArray.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArray[0]);\n\
    \    let day = parseInt(dateArray[1]);\n    let year = parseInt(dateArray[2]);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    if (year < 0) {\n      \
    \  return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if (month < 1 || month >\
    \ 12) {\n        return false;\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpi6_6jksh.js:42:12)\n    at Object.<anonymous> (/tmp/tmpi6_6jksh.js:58:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let [month, day, year] = date.split(\"-\");\n  let daysInMonth\
    \ = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (\n    date.length\
    \ === 0 ||\n    Number(month) < 1 ||\n    Number(month) > 12 ||\n    Number(day)\
    \ < 1 ||\n    Number(day) > daysInMonth[Number(month) - 1] ||\n    Number(year)\
    \ < 1\n  ) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31) {\n\
    \        return false;\n    }\n    if (month === 2 && day > 29) {\n        return\
    \ false;\n    }\n    if (month === 4 || month === 6 || month === 9 || month ===\
    \ 11) {\n        if (day > 30) {\n            return false;\n        }\n    }\n\
    \    if (year < 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1000 || year > 9999) {\n \
    \       return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let date_arr = date.split(\"-\");\n    let month = parseInt(date_arr[0]);\n\
    \    let day = parseInt(date_arr[1]);\n    let year = parseInt(date_arr[2]);\n\
    \    if (date_arr.length !== 3) {\n        return false;\n    }\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n\
    \        if (day < 1 || day > 29) {\n            return false;\n        }\n  \
    \  } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 1) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  if (dateArr.length\
    \ !== 3) {\n    return false;\n  }\n  const month = parseInt(dateArr[0]);\n  const\
    \ day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n\
    \    return false;\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return\
    \ false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (year\
    \ < 0) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let reg = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$/;\n    if (!reg.test(date)) {\n        return false;\n    }\n    let [month,\
    \ day, year] = date.split('-').map(Number);\n    if (month < 1 || month > 12)\
    \ {\n        return false;\n    }\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month === 2) {\n        if (day > 29) {\n           \
    \ return false;\n        }\n    }\n    if (month === 4 || month === 6 || month\
    \ === 9 || month === 11) {\n        if (day > 30) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  const month = parseInt(dateArr[0]);\n\
    \  const day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n \
    \ if (\n    dateArr.length !== 3 ||\n    month < 1 ||\n    month > 12 ||\n   \
    \ year < 0 ||\n    year > 9999\n  ) {\n    return false;\n  }\n  if (\n    (month\
    \ === 1 ||\n      month === 3 ||\n      month === 5 ||\n      month === 7 ||\n\
    \      month === 8 ||\n      month === 10 ||\n      month === 12) &&\n    (day\
    \ < 1 || day > 31)\n  ) {\n    return false;\n  }\n  if (\n    (month === 4 ||\
    \ month === 6 || month === 9 || month === 11) &&\n    (day < 1 || day > 30)\n\
    \  ) {\n    return false;\n  }\n  if (month === 2 && (day < 1 || day > 29)) {\n\
    \    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArray = date.split(\"-\");\n  if (dateArray.length\
    \ !== 3) {\n    return false;\n  }\n  const month = parseInt(dateArray[0]);\n\
    \  const day = parseInt(dateArray[1]);\n  const year = parseInt(dateArray[2]);\n\
    \  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day\
    \ > 31) {\n    return false;\n  }\n  if (\n    (month === 4 || month === 6 ||\
    \ month === 9 || month === 11) &&\n    day > 30\n  ) {\n    return false;\n  }\n\
    \  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (year < 1) {\n\
    \    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArray = date.split(\"-\");\n    let month =\
    \ parseInt(dateArray[0]);\n    let day = parseInt(dateArray[1]);\n    let year\
    \ = parseInt(dateArray[2]);\n    if (dateArray.length !== 3) {\n        return\
    \ false;\n    }\n    if (month > 12 || month < 1) {\n        return false;\n \
    \   }\n    if (month === 2) {\n        if (day > 29 || day < 1) {\n          \
    \  return false;\n        }\n    } else if (month === 4 || month === 6 || month\
    \ === 9 || month === 11) {\n        if (day > 30 || day < 1) {\n            return\
    \ false;\n        }\n    } else {\n        if (day > 31 || day < 1) {\n      \
    \      return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31) {\n\
    \        return false;\n    }\n    if (month === 2) {\n        if (day > 29) {\n\
    \            return false;\n        }\n    }\n    if (month === 4 || month ===\
    \ 6 || month === 9 || month === 11) {\n        if (day > 30) {\n            return\
    \ false;\n        }\n    }\n    if (year < 0) {\n        return false;\n    }\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = Number(dateArr[0]);\n\
    \    let month = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n   \
    \ let isLeapYear = false;\n    if (year % 4 === 0) {\n        isLeapYear = true;\n\
    \    }\n    if (dateArr.length === 3) {\n        if (month === 1 || month ===\
    \ 3 || month === 5 || month === 7 || month === 8 || month === 10 || month ===\
    \ 12) {\n            if (day >= 1 && day <= 31) {\n                return true;\n\
    \            }\n        } else if (month === 4 || month === 6 || month === 9 ||\
    \ month === 11) {\n            if (day >= 1 && day <= 30) {\n                return\
    \ true;\n            }\n        } else if (month === 2) {\n            if (isLeapYear)\
    \ {\n                if (day >= 1 && day <= 29) {\n                    return\
    \ true;\n                }\n            } else {\n                if (day >= 1\
    \ && day <= 28) {\n                    return true;\n                }\n     \
    \       }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpz59dax30.js:58:12)\n    at Object.<anonymous> (/tmp/tmpz59dax30.js:74:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  if (dateArr.length\
    \ !== 3) {\n    return false;\n  }\n  const month = parseInt(dateArr[0]);\n  const\
    \ day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n\
    \    return false;\n  }\n  if (\n    (month === 4 || month === 6 || month ===\
    \ 9 || month === 11) &&\n    day > 30\n  ) {\n    return false;\n  }\n  if (month\
    \ === 2 && day > 29) {\n    return false;\n  }\n  if (year < 0) {\n    return\
    \ false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    const dateRegex = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/;\n\
    \    if (!dateRegex.test(date)) {\n        return false;\n    }\n    const dateParts\
    \ = date.split('-');\n    const month = parseInt(dateParts[0]);\n    const day\
    \ = parseInt(dateParts[1]);\n    const year = parseInt(dateParts[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month === 2) {\n        if\
    \ (day > 29) {\n            return false;\n        }\n        if (day === 29)\
    \ {\n            if (year % 4 !== 0) {\n                return false;\n      \
    \      }\n            if (year % 100 === 0 && year % 400 !== 0) {\n          \
    \      return false;\n            }\n        }\n    }\n    if (month === 4 ||\
    \ month === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (month ===\
    \ 2) {\n        if (day < 1 || day > 29) {\n            return false;\n      \
    \  }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11)\
    \ {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n\
    \    } else {\n        if (day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    false

    true

    false

    '
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let dateArr = date.split(\"-\");\n  if (dateArr.length\
    \ !== 3) {\n    return false;\n  }\n  let month = Number(dateArr[0]);\n  let day\
    \ = Number(dateArr[1]);\n  let year = Number(dateArr[2]);\n  if (\n    month <\
    \ 1 ||\n    month > 12 ||\n    day < 1 ||\n    day > 31 ||\n    year < 1 ||\n\
    \    year > 9999\n  ) {\n    return false;\n  }\n  if (\n    (month === 4 ||\n\
    \      month === 6 ||\n      month === 9 ||\n      month === 11) &&\n    day >\
    \ 30\n  ) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return\
    \ false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month > 12 || month < 1) {\n        return false;\n    }\n    if (day\
    \ > 31 || day < 1) {\n        return false;\n    }\n    if (month == 2 && day\
    \ > 29) {\n        return false;\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if (day > 30) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp078kt64_.js:49:12)\n    at Object.<anonymous> (/tmp/tmp078kt64_.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (year < 1) {\n        return\
    \ false;\n    }\n    if (month === 2) {\n        if (day > 29) {\n           \
    \ return false;\n        }\n    }\n    if (month === 4 || month === 6 || month\
    \ === 9 || month === 11) {\n        if (day > 30) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let date_arr = date.split(\"-\");\n    let month = parseInt(date_arr[0]);\n\
    \    let day = parseInt(date_arr[1]);\n    let year = parseInt(date_arr[2]);\n\
    \    if (date_arr.length != 3) {\n        return false;\n    }\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day >\
    \ 31) {\n        return false;\n    }\n    if (month == 2) {\n        if (day\
    \ > 29) {\n            return false;\n        }\n    }\n    if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n        if (day > 30) {\n      \
    \      return false;\n        }\n    }\n    if (year < 0) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267973
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month === 2) {\n        if\
    \ (day > 29) {\n            return false;\n        }\n    }\n    if (month ===\
    \ 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n\
    \            return false;\n        }\n    }\n    if (year < 1) {\n        return\
    \ false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArray = date.split(\"-\");\n    let month =\
    \ parseInt(dateArray[0]);\n    let day = parseInt(dateArray[1]);\n    let year\
    \ = parseInt(dateArray[2]);\n    if (date.length === 0) {\n        return false;\n\
    \    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n   \
    \ if (month === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n\
    \        }\n    }\n    if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if (day < 1 || day > 30) {\n            return false;\n \
    \       }\n    }\n    if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n    }\n    if (year < 1000\
    \ || year > 9999) {\n        return false;\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = Number(dateArr[0]);\n\
    \    let month = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n   \
    \ if (dateArr.length !== 3) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month < 1 || month > 12)\
    \ {\n        return false;\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2r7ufyl5.js:42:12)\n    at Object.<anonymous> (/tmp/tmp2r7ufyl5.js:58:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = +dateArr[0];\n\
    \    let day = +dateArr[1];\n    let year = +dateArr[2];\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31) {\n\
    \        return false;\n    }\n    if (month === 2) {\n        if (day > 29) {\n\
    \            return false;\n        }\n    }\n    if (month === 4 || month ===\
    \ 6 || month === 9 || month === 11) {\n        if (day > 30) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    if (date.length === 0) {\n        return false;\n  \
    \  }\n    let [month, day, year] = date.split('-');\n    if (month.length !==\
    \ 2 || day.length !== 2 || year.length !== 4) {\n        return false;\n    }\n\
    \    if (Number(month) < 1 || Number(month) > 12) {\n        return false;\n \
    \   }\n    if (Number(day) < 1 || Number(day) > 31) {\n        return false;\n\
    \    }\n    if (Number(month) === 2 && Number(day) > 29) {\n        return false;\n\
    \    }\n    if (Number(month) === 4 && Number(day) > 30) {\n        return false;\n\
    \    }\n    if (Number(month) === 6 && Number(day) > 30) {\n        return false;\n\
    \    }\n    if (Number(month) === 9 && Number(day) > 30) {\n        return false;\n\
    \    }\n    if (Number(month) === 11 && Number(day) > 30) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (month === 2) {\n      \
    \  if (day < 1 || day > 29) {\n            return false;\n        }\n    } else\
    \ if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \  }\n    if (year < 1) {\n        return false;\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 0) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let [month, day, year] = dateArr;\n\
    \    if (month.length !== 2 || day.length !== 2 || year.length !== 4) {\n    \
    \    return false;\n    }\n    if (Number(month) < 1 || Number(month) > 12) {\n\
    \        return false;\n    }\n    if (Number(day) < 1 || Number(day) > 31) {\n\
    \        return false;\n    }\n    if (Number(month) === 2 && Number(day) > 29)\
    \ {\n        return false;\n    }\n    if (Number(month) === 4 || Number(month)\
    \ === 6 || Number(month) === 9 || Number(month) === 11) {\n        if (Number(day)\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) return false;\n    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month === 2 && day\
    \ > 29) return false;\n    if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if (day > 30) return false;\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if (month < 1 || month >\
    \ 12) {\n        return false;\n    }\n    if (year < 0) {\n        return false;\n\
    \    }\n    if (month === 2) {\n        if (day > 29) {\n            return false;\n\
    \        }\n    }\n    if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if (day > 30) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprikcb4tq.js:52:12)\n    at Object.<anonymous> (/tmp/tmprikcb4tq.js:68:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31) {\n\
    \        return false;\n    }\n    if (month === 2) {\n        if (day > 29) {\n\
    \            return false;\n        }\n    }\n    if (month === 4 || month ===\
    \ 6 || month === 9 || month === 11) {\n        if (day > 30) {\n            return\
    \ false;\n        }\n    }\n    if (year < 0) {\n        return false;\n    }\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (month ===\
    \ 2) {\n        if (year % 4 === 0) {\n            if (day < 1 || day > 29) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 28) {\n                return false;\n            }\n    \
    \    }\n    } else if (month === 4 || month === 6 || month === 9 || month ===\
    \ 11) {\n        if (day < 1 || day > 30) {\n            return false;\n     \
    \   }\n    } else {\n        if (day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (month ===\
    \ 2) {\n        if (day < 1 || day > 29) {\n            return false;\n      \
    \  }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11)\
    \ {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n\
    \    } else {\n        if (day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    if (year < 1) {\n        return false;\n    }\n    return\
    \ true;\n}\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"\
    15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"\
    06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    false

    true

    true

    '
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let [month, day, year] = date.split('-');\n    let isValid\
    \ = true;\n    if (month.length === 2 && day.length === 2 && year.length === 4)\
    \ {\n        if (parseInt(month) > 12 || parseInt(month) < 1) {\n            isValid\
    \ = false;\n        }\n        if (parseInt(month) === 2) {\n            if (parseInt(day)\
    \ > 29 || parseInt(day) < 1) {\n                isValid = false;\n           \
    \ }\n        } else if (parseInt(month) === 1 || parseInt(month) === 3 || parseInt(month)\
    \ === 5 || parseInt(month) === 7 || parseInt(month) === 8 || parseInt(month) ===\
    \ 10 || parseInt(month) === 12) {\n            if (parseInt(day) > 31 || parseInt(day)\
    \ < 1) {\n                isValid = false;\n            }\n        } else {\n\
    \            if (parseInt(day) > 30 || parseInt(day) < 1) {\n                isValid\
    \ = false;\n            }\n        }\n    } else {\n        isValid = false;\n\
    \    }\n    return isValid;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let [month, day, year] = date.split(\"-\");\n  let daysInMonth\
    \ = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (\n    !date ||\n\
    \    !month ||\n    !day ||\n    !year ||\n    month.length !== 2 ||\n    day.length\
    \ !== 2 ||\n    year.length !== 4\n  ) {\n    return false;\n  }\n  if (\n   \
    \ Number(month) < 1 ||\n    Number(month) > 12 ||\n    Number(day) < 1 ||\n  \
    \  Number(day) > daysInMonth[Number(month) - 1] ||\n    Number(year) < 1\n  )\
    \ {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n  \
    \      if (day < 1 || day > 30) {\n            return false;\n        }\n    }\
    \ else {\n        if (day < 1 || day > 31) {\n            return false;\n    \
    \    }\n    }\n    if (year < 0) {\n        return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    const date_arr = date.split('-');\n    const month =\
    \ parseInt(date_arr[0]);\n    const day = parseInt(date_arr[1]);\n    const year\
    \ = parseInt(date_arr[2]);\n    if (date_arr.length !== 3) {\n        return false;\n\
    \    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n   \
    \ if (month === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n\
    \        }\n    } else if (month === 1 || month === 3 || month === 5 || month\
    \ === 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1\
    \ || day > 31) {\n            return false;\n        }\n    } else {\n       \
    \ if (day < 1 || day > 30) {\n            return false;\n        }\n    }\n  \
    \  if (year < 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  const month = parseInt(dateArr[0]);\n\
    \  const day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n \
    \ if (dateArr.length !== 3) {\n    return false;\n  }\n  if (month < 1 || month\
    \ > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n\
    \  }\n  if (\n    (month === 4 || month === 6 || month === 9 || month === 11)\
    \ &&\n    day > 30\n  ) {\n    return false;\n  }\n  if (month === 2 && day >\
    \ 29) {\n    return false;\n  }\n  if (year < 0) {\n    return false;\n  }\n \
    \ return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArray = date.split(\"-\");\n    let day = parseInt(dateArray[0]);\n\
    \    let month = parseInt(dateArray[1]);\n    let year = parseInt(dateArray[2]);\n\
    \    if (dateArray.length != 3) {\n        return false;\n    }\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (month == 2) {\n\
    \        if (day < 1 || day > 29) {\n            return false;\n        }\n  \
    \  } else if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) {\n   \
    \         return false;\n        }\n    } else {\n        if (day < 1 || day >\
    \ 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpooqmeptd.js:51:12)\n    at Object.<anonymous> (/tmp/tmpooqmeptd.js:67:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ != 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month == 2) {\n  \
    \      if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let dateArr = date.split(\"-\");\n  if (dateArr.length\
    \ !== 3) {\n    return false;\n  }\n  let month = parseInt(dateArr[0]);\n  let\
    \ day = parseInt(dateArr[1]);\n  let year = parseInt(dateArr[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n\
    \    return false;\n  }\n  if (\n    (month === 4 || month === 6 || month ===\
    \ 9 || month === 11) &&\n    day > 30\n  ) {\n    return false;\n  }\n  if (month\
    \ === 2 && day > 29) {\n    return false;\n  }\n  if (year < 0) {\n    return\
    \ false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length != 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month == 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if (day > 30) {\n            return\
    \ false;\n        }\n    }\n    if (year < 0) {\n        return false;\n    }\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month === 2) {\n        if\
    \ (day > 29) {\n            return false;\n        }\n    }\n    if (month ===\
    \ 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n\
    \            return false;\n        }\n    }\n    if (year < 1) {\n        return\
    \ false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n    } else {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 1) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 1) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n\
    \        if (day < 1 || day > 29) {\n            return false;\n        }\n  \
    \  } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpp415e4fp.js:51:12)\n    at Object.<anonymous> (/tmp/tmpp415e4fp.js:67:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return\
    \ false;\n    if (month == 2 && day > 29) return false;\n    if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n        if (day > 30) return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpfg_nth2y.js:45:12)\n    at Object.<anonymous> (/tmp/tmpfg_nth2y.js:56:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if (month < 1 || month >\
    \ 12) {\n        return false;\n    }\n    if (year < 0) {\n        return false;\n\
    \    }\n    if (month === 2) {\n        if (day > 29) {\n            return false;\n\
    \        }\n    }\n    if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if (day > 30) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprikcb4tq.js:52:12)\n    at Object.<anonymous> (/tmp/tmprikcb4tq.js:68:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 1) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArray = date.split(\"-\");\n    let month =\
    \ parseInt(dateArray[0]);\n    let day = parseInt(dateArray[1]);\n    let year\
    \ = parseInt(dateArray[2]);\n    if (dateArray.length !== 3) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n    if (month\
    \ === 2 && day > 29) {\n        return false;\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 0) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbv_vpkay.js:51:12)\n    at Object.<anonymous> (/tmp/tmpbv_vpkay.js:62:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) return false;\n    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month === 2 && day\
    \ > 29) return false;\n    if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if (day > 30) return false;\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267973
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 1) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArray = date.split(\"-\");\n    let month =\
    \ parseInt(dateArray[0]);\n    let day = parseInt(dateArray[1]);\n    let year\
    \ = parseInt(dateArray[2]);\n    if (dateArray.length !== 3) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n    if (month\
    \ === 2 && day > 29) {\n        return false;\n    }\n    if ((month === 4 ||\
    \ month === 6 || month === 9 || month === 11) && day > 30) {\n        return false;\n\
    \    }\n    if (year < 1) {\n        return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   let isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ == 2) {\n        if (isLeapYear) {\n            if (day < 1 || day > 29) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 28) {\n                return false;\n            }\n    \
    \    }\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31)\
    \ {\n            return false;\n        }\n    } else {\n        if (day < 1 ||\
    \ day > 30) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpj4sg4se1.js:61:12)\n    at Object.<anonymous> (/tmp/tmpj4sg4se1.js:72:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (month === 2) {\n      \
    \  if (day < 1 || day > 29) {\n            return false;\n        }\n    } else\
    \ if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \  }\n    if (year < 0) {\n        return false;\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 0) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArray = date.split(\"-\");\n    if (dateArray.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArray[0]);\n\
    \    let day = parseInt(dateArray[1]);\n    let year = parseInt(dateArray[2]);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    if (year < 0) {\n      \
    \  return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n    } else {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    return /^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\d{4}$/.test(date);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7tss27fk.js:32:12)\n    at Object.<anonymous> (/tmp/tmp7tss27fk.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    const dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    const month = Number(dateArr[0]);\n\
    \    const day = Number(dateArr[1]);\n    const year = Number(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    if (year < 1) {\n      \
    \  return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if (month < 1 || month >\
    \ 12) {\n        return false;\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpi6_6jksh.js:42:12)\n    at Object.<anonymous> (/tmp/tmpi6_6jksh.js:58:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let dateArr = date.split(\"-\");\n  let month = parseInt(dateArr[0]);\n\
    \  let day = parseInt(dateArr[1]);\n  let year = parseInt(dateArr[2]);\n  if (\n\
    \    dateArr.length !== 3 ||\n    month < 1 ||\n    month > 12 ||\n    year <\
    \ 0 ||\n    day < 1 ||\n    (month === 2 && day > 29) ||\n    (month === 4 &&\
    \ day > 30) ||\n    (month === 6 && day > 30) ||\n    (month === 9 && day > 30)\
    \ ||\n    (month === 11 && day > 30) ||\n    (month === 1 && day > 31) ||\n  \
    \  (month === 3 && day > 31) ||\n    (month === 5 && day > 31) ||\n    (month\
    \ === 7 && day > 31) ||\n    (month === 8 && day > 31) ||\n    (month === 10 &&\
    \ day > 31) ||\n    (month === 12 && day > 31)\n  ) {\n    return false;\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267976
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (month === 2) {\n      \
    \  if (day < 1 || day > 29) {\n            return false;\n        }\n    } else\
    \ if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \  }\n    if (year < 1) {\n        return false;\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 0) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let dateArr = date.split(\"-\");\n  let days = parseInt(dateArr[1]);\n\
    \  let month = parseInt(dateArr[0]);\n  let year = parseInt(dateArr[2]);\n  if\
    \ (\n    (month == 1 ||\n      month == 3 ||\n      month == 5 ||\n      month\
    \ == 7 ||\n      month == 8 ||\n      month == 10 ||\n      month == 12) &&\n\
    \    (days < 1 || days > 31)\n  ) {\n    return false;\n  } else if (\n    (month\
    \ == 4 || month == 6 || month == 9 || month == 11) &&\n    (days < 1 || days >\
    \ 30)\n  ) {\n    return false;\n  } else if (month == 2 && (days < 1 || days\
    \ > 29)) {\n    return false;\n  } else if (month < 1 || month > 12) {\n    return\
    \ false;\n  } else if (year < 0) {\n    return false;\n  } else {\n    return\
    \ true;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcln2lv_p.js:60:12)\n    at Object.<anonymous> (/tmp/tmpcln2lv_p.js:71:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if (month < 1 || month >\
    \ 12) {\n        return false;\n    }\n    if (year < 0) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpj4iodh7y.js:42:12)\n    at Object.<anonymous> (/tmp/tmpj4iodh7y.js:58:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArray = date.split(\"-\");\n    let month =\
    \ parseInt(dateArray[0]);\n    let day = parseInt(dateArray[1]);\n    let year\
    \ = parseInt(dateArray[2]);\n    if (dateArray.length !== 3) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n    if (month\
    \ === 2 && day > 29) {\n        return false;\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 0) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let date_array = date.split(\"-\");\n    let month =\
    \ parseInt(date_array[0]);\n    let day = parseInt(date_array[1]);\n    let year\
    \ = parseInt(date_array[2]);\n    if (date_array.length !== 3) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (month === 2) {\n        if (day < 1 || day > 29) {\n          \
    \  return false;\n        }\n    } else if (month === 1 || month === 3 || month\
    \ === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n   \
    \     if (day < 1 || day > 31) {\n            return false;\n        }\n    }\
    \ else {\n        if (day < 1 || day > 30) {\n            return false;\n    \
    \    }\n    }\n    if (year < 0) {\n        return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267976
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    if (year < 1) {\n      \
    \  return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   let isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n\
    \    if (month > 12 || month < 1) {\n        return false;\n    }\n    if (month\
    \ == 2) {\n        if (isLeapYear) {\n            if (day > 29 || day < 1) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day > 28 || day < 1) {\n                return false;\n            }\n    \
    \    }\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n        if (day > 31 || day < 1)\
    \ {\n            return false;\n        }\n    } else {\n        if (day > 30\
    \ || day < 1) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp67dijiu2.js:61:12)\n    at Object.<anonymous> (/tmp/tmp67dijiu2.js:72:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n\
    \        if (day < 1 || day > 29) {\n            return false;\n        }\n  \
    \  } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpp415e4fp.js:51:12)\n    at Object.<anonymous> (/tmp/tmpp415e4fp.js:67:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month == 2 && day\
    \ > 29) {\n        return false;\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if (day > 30) {\n            return false;\n\
    \        }\n    }\n    if (year < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpz8dc_ope.js:52:12)\n    at Object.<anonymous> (/tmp/tmpz8dc_ope.js:63:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbv_vpkay.js:51:12)\n    at Object.<anonymous> (/tmp/tmpbv_vpkay.js:62:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    if (date.length === 0) {\n        return false;\n  \
    \  }\n    let dateArr = date.split('-');\n    if (dateArr.length !== 3) {\n  \
    \      return false;\n    }\n    let month = parseInt(dateArr[0]);\n    let day\
    \ = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n\
    \        if (day < 1 || day > 29) {\n            return false;\n        }\n  \
    \  } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (month ===\
    \ 2) {\n        if (day < 1 || day > 29) {\n            return false;\n      \
    \  }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11)\
    \ {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n\
    \    } else {\n        if (day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = +dateArr[0];\n\
    \    let day = +dateArr[1];\n    let year = +dateArr[2];\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        return false;\n    }\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month === 2 && day > 29) {\n        return false;\n \
    \   }\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n\
    \        if (day > 30) {\n            return false;\n        }\n    }\n    if\
    \ (year < 1) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let date_arr = date.split(\"-\");\n    if (date_arr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(date_arr[0]);\n\
    \    let day = parseInt(date_arr[1]);\n    let year = parseInt(date_arr[2]);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month === 2) {\n        if\
    \ (day > 29) {\n            return false;\n        }\n    }\n    if (month ===\
    \ 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n\
    \            return false;\n        }\n    }\n    if (year < 1000 || year > 3000)\
    \ {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ != 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month == 2) {\n  \
    \      if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArray = date.split(\"-\");\n    let day = parseInt(dateArray[0]);\n\
    \    let month = parseInt(dateArray[1]);\n    let year = parseInt(dateArray[2]);\n\
    \    if (dateArray.length != 3) {\n        return false;\n    }\n    if (day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if (month < 1 || month >\
    \ 12) {\n        return false;\n    }\n    if (year < 0) {\n        return false;\n\
    \    }\n    if (month == 2) {\n        if (day > 29) {\n            return false;\n\
    \        }\n    }\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3uxxrm1p.js:52:12)\n    at Object.<anonymous> (/tmp/tmp3uxxrm1p.js:68:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if (month < 1 || month >\
    \ 12) {\n        return false;\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpi6_6jksh.js:42:12)\n    at Object.<anonymous> (/tmp/tmpi6_6jksh.js:58:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1) {\n     \
    \   return false;\n    }\n    if (month === 2) {\n        if (day > 29) {\n  \
    \          return false;\n        }\n    }\n    if (month === 4 || month === 6\
    \ || month === 9 || month === 11) {\n        if (day > 30) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcoqymujf.js:43:12)\n    at Object.<anonymous> (/tmp/tmpcoqymujf.js:59:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n    } else {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month === 2) {\n        if\
    \ (day > 29) {\n            return false;\n        }\n    }\n    if (month ===\
    \ 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length != 3) {\n        return false;\n    }\n    if (day < 1\
    \ || day > 31) {\n        return false;\n    }\n    if (month < 1 || month > 12)\
    \ {\n        return false;\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    if (month == 2) {\n        if (day > 29) {\n            return false;\n\
    \        }\n    }\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3vk_7i41.js:52:12)\n    at Object.<anonymous> (/tmp/tmp3vk_7i41.js:68:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n\
    \        if (day < 1 || day > 29) {\n            return false;\n        }\n  \
    \  } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpp415e4fp.js:51:12)\n    at Object.<anonymous> (/tmp/tmpp415e4fp.js:67:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (year % 4 === 0) {\n            if (day < 1 || day > 29)\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if (day < 1 || day > 28) {\n                return false;\n            }\n\
    \        }\n    } else if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if (day < 1 || day > 30) {\n            return false;\n \
    \       }\n    } else {\n        if (day < 1 || day > 31) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxxq3esrj.js:60:12)\n    at Object.<anonymous> (/tmp/tmpxxq3esrj.js:71:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    const dateArray = date.split('-');\n    const month\
    \ = parseInt(dateArray[0]);\n    const day = parseInt(dateArray[1]);\n    const\
    \ year = parseInt(dateArray[2]);\n    if (dateArray.length !== 3) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n    if (month\
    \ === 2 && day > 29) {\n        return false;\n    }\n    if ((month === 4 ||\
    \ month === 6 || month === 9 || month === 11) && day > 30) {\n        return false;\n\
    \    }\n    if (year < 0) {\n        return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month === 2) {\n        if\
    \ (day > 29) {\n            return false;\n        }\n    }\n    if (month ===\
    \ 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n\
    \            return false;\n        }\n    }\n    if (year < 1000 || year > 9999)\
    \ {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  if (dateArr.length\
    \ !== 3) {\n    return false;\n  }\n  const month = parseInt(dateArr[0]);\n  const\
    \ day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n\
    \    return false;\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return\
    \ false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (year\
    \ < 1) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 1) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let day = Number(dateArr[1]);\n\
    \    let month = Number(dateArr[0]);\n    let year = Number(dateArr[2]);\n   \
    \ if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n   \
    \     if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 0) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (month === 2) {\n      \
    \  if (day < 1 || day > 29) {\n            return false;\n        }\n    } else\
    \ if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \  }\n    if (year < 1) {\n        return false;\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 1) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n\
    \        if (day < 1 || day > 29) {\n            return false;\n        }\n  \
    \  } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpp415e4fp.js:51:12)\n    at Object.<anonymous> (/tmp/tmpp415e4fp.js:67:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  if (dateArr.length\
    \ !== 3) {\n    return false;\n  }\n  const month = parseInt(dateArr[0]);\n  const\
    \ day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n\
    \    return false;\n  }\n  if (\n    (month === 4 || month === 6 || month ===\
    \ 9 || month === 11) &&\n    day > 30\n  ) {\n    return false;\n  }\n  if (month\
    \ === 2 && day > 29) {\n    return false;\n  }\n  if (year < 1) {\n    return\
    \ false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1000 || year > 9999) {\n \
    \       return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    if (date.length === 0) {\n        return false;\n  \
    \  }\n    let dateArray = date.split(\"-\");\n    if (dateArray.length !== 3)\
    \ {\n        return false;\n    }\n    let month = parseInt(dateArray[0]);\n \
    \   let day = parseInt(dateArray[1]);\n    let year = parseInt(dateArray[2]);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    if (year < 0) {\n      \
    \  return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let [month, day, year] = date.split(\"-\");\n  if (\n\
    \    month.length !== 2 ||\n    day.length !== 2 ||\n    year.length !== 4 ||\n\
    \    isNaN(Number(month)) ||\n    isNaN(Number(day)) ||\n    isNaN(Number(year))\n\
    \  ) {\n    return false;\n  }\n  month = Number(month);\n  day = Number(day);\n\
    \  year = Number(year);\n  if (month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n\
    \    }\n  } else if (month === 4 || month === 6 || month === 9 || month === 11)\
    \ {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  } else {\n\
    \    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let dateArr = date.split(\"-\");\n  let month = parseInt(dateArr[0]);\n\
    \  let day = parseInt(dateArr[1]);\n  let year = parseInt(dateArr[2]);\n  if (\n\
    \    month < 1 ||\n    month > 12 ||\n    day < 1 ||\n    day > 31 ||\n    year\
    \ < 1 ||\n    year > 9999\n  ) {\n    return false;\n  }\n  if (\n    (month ==\
    \ 4 ||\n      month == 6 ||\n      month == 9 ||\n      month == 11) &&\n    day\
    \ > 30\n  ) {\n    return false;\n  }\n  if (month == 2 && day > 29) {\n    return\
    \ false;\n  }\n  return true;\n}\n\nconsole.log(valid_date(\"03-11-2000\"));\n\
    console.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"\
    ));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp5czi69wk.js:58:12)\n    at Object.<anonymous> (/tmp/tmp5czi69wk.js:69:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    false

    true

    true

    '
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 1) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n    } else {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (month === 2) {\n      \
    \  if (day < 1 || day > 29) {\n            return false;\n        }\n    } else\
    \ if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \  }\n    if (year < 1) {\n        return false;\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (year < 1) {\n\
    \        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267969
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let dateArr = date.split(\"-\");\n  let month = parseInt(dateArr[0]);\n\
    \  let day = parseInt(dateArr[1]);\n  let year = parseInt(dateArr[2]);\n  if (\n\
    \    dateArr.length !== 3 ||\n    month < 1 ||\n    month > 12 ||\n    year <\
    \ 0 ||\n    day < 1 ||\n    day > 31\n  ) {\n    return false;\n  }\n  if (\n\
    \    (month === 4 ||\n      month === 6 ||\n      month === 9 ||\n      month\
    \ === 11) &&\n    day > 30\n  ) {\n    return false;\n  }\n  if (month === 2 &&\
    \ day > 29) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267979
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n    } else {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (day <\
    \ 1 || day > 31) {\n        return false;\n    }\n    if (month < 1 || month >\
    \ 12) {\n        return false;\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    if (month === 2) {\n        if (day > 29) {\n            return false;\n\
    \        }\n    }\n    if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if (day > 30) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpewh_6vjp.js:52:12)\n    at Object.<anonymous> (/tmp/tmpewh_6vjp.js:68:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (month ===\
    \ 2) {\n        if (day < 1 || day > 29) {\n            return false;\n      \
    \  }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11)\
    \ {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n\
    \    } else {\n        if (day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let [month, day, year] = date.split('-');\n    let isValid\
    \ = true;\n    if (month.length === 0 || day.length === 0 || year.length === 0)\
    \ {\n        isValid = false;\n    }\n    if (Number(month) < 1 || Number(month)\
    \ > 12) {\n        isValid = false;\n    }\n    if (Number(month) === 2) {\n \
    \       if (Number(day) < 1 || Number(day) > 29) {\n            isValid = false;\n\
    \        }\n    } else if (Number(month) === 4 || Number(month) === 6 || Number(month)\
    \ === 9 || Number(month) === 11) {\n        if (Number(day) < 1 || Number(day)\
    \ > 30) {\n            isValid = false;\n        }\n    } else {\n        if (Number(day)\
    \ < 1 || Number(day) > 31) {\n            isValid = false;\n        }\n    }\n\
    \    return isValid;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpsim1t7z4.js:22\n    if (month.length === 0 || day.length === 0\
    \ || year.length === 0) {\n                                  ^\n\nTypeError: Cannot\
    \ read property 'length' of undefined\n    at valid_date (/tmp/tmpsim1t7z4.js:22:35)\n\
    \    at test (/tmp/tmpsim1t7z4.js:59:22)\n    at Object.<anonymous> (/tmp/tmpsim1t7z4.js:65:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    const dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    const month = parseInt(dateArr[0]);\n\
    \    const day = parseInt(dateArr[1]);\n    const year = parseInt(dateArr[2]);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    if (year < 1) {\n      \
    \  return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267979
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  const dateArr = date.split(\"-\");\n  if (dateArr.length\
    \ !== 3) {\n    return false;\n  }\n  const month = parseInt(dateArr[0]);\n  const\
    \ day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n\
    \    return false;\n  }\n  if (\n    (month === 4 || month === 6 || month ===\
    \ 9 || month === 11) &&\n    day > 30\n  ) {\n    return false;\n  }\n  if (month\
    \ === 2 && day > 29) {\n    return false;\n  }\n  if (year < 1000 || year > 9999)\
    \ {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length != 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (month == 2) {\n  \
    \      if (day < 1 || day > 29) {\n            return false;\n        }\n    }\
    \ else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12) {\n        if (day < 1 || day > 31) {\n     \
    \       return false;\n        }\n    } else {\n        if (day < 1 || day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_8mk4s03.js:51:12)\n    at Object.<anonymous> (/tmp/tmp_8mk4s03.js:67:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (month === 2) {\n      \
    \  if (day < 1 || day > 29) {\n            return false;\n        }\n    } else\
    \ if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \  }\n    if (year < 0) {\n        return false;\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n  let [month, day, year] = date.split(\"-\");\n  if (\n\
    \    !date ||\n    Number(month) < 1 ||\n    Number(month) > 12 ||\n    Number(year)\
    \ < 1 ||\n    Number(day) < 1\n  ) {\n    return false;\n  }\n  if (\n    (Number(month)\
    \ === 1 ||\n      Number(month) === 3 ||\n      Number(month) === 5 ||\n     \
    \ Number(month) === 7 ||\n      Number(month) === 8 ||\n      Number(month) ===\
    \ 10 ||\n      Number(month) === 12) &&\n    Number(day) > 31\n  ) {\n    return\
    \ false;\n  }\n  if (\n    (Number(month) === 4 ||\n      Number(month) === 6\
    \ ||\n      Number(month) === 9 ||\n      Number(month) === 11) &&\n    Number(day)\
    \ > 30\n  ) {\n    return false;\n  }\n  if (Number(month) === 2 && Number(day)\
    \ > 29) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267979
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month === 2) {\n        if\
    \ (day > 29) {\n            return false;\n        }\n    }\n    if (month ===\
    \ 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n\
    \            return false;\n        }\n    }\n    if (year < 1000 || year > 9999)\
    \ {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267978
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month === 2) {\n        if\
    \ (day > 29) {\n            return false;\n        }\n    }\n    if (month ===\
    \ 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29)\
    \ {\n            return false;\n        }\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n         \
    \   return false;\n        }\n    }\n    if (year < 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have to write a function which validates a given\
    \ date string and\n// returns true if the date is valid otherwise false.\n// The\
    \ date is valid if all of the following rules are satisfied:\n// 1. The date string\
    \ is not empty.\n// 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n// 3. The months should not be less\
    \ than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n\
    // >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n\
    // false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\"\
    )\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date:\
    \ string): boolean {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbv_vpkay.js:51:12)\n    at Object.<anonymous> (/tmp/tmpbv_vpkay.js:62:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
