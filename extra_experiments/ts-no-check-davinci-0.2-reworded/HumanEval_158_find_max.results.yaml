language: ts
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_unique_chars = 0;\n  for (let word of words)\
    \ {\n    let unique_chars = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n   \
    \ if (unique_chars > max_unique_chars) {\n      max_unique_chars = unique_chars;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf_9cl6hg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpf_9cl6hg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpku67rrwc.js:34:12)\n    at Object.<anonymous> (/tmp/tmpku67rrwc.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let i: number = 0;\
    \ i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n  \
    \              count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp245z4rha.js:34:12)\n    at Object.<anonymous> (/tmp/tmp245z4rha.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === j) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp0mved0vo.js:35:12)\n    at Object.<anonymous> (/tmp/tmp0mved0vo.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = words[0];\n  let max_count: number = 0;\n  for (let word\
    \ of words) {\n    let count: number = 0;\n    for (let i = 0; i < word.length;\
    \ i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n\
    \    }\n    if (count > max_count) {\n      max_count = count;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp5pg0x9x5.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5pg0x9x5.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let unique_chars: string[] = [];\n        for (let char\
    \ of word) {\n            if (unique_chars.indexOf(char) === -1) {\n         \
    \       unique_chars.push(char);\n            }\n        }\n        if (unique_chars.length\
    \ > max_count) {\n            max_count = unique_chars.length;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpzceprcn7.js:35:12)\n    at Object.<anonymous> (/tmp/tmpzceprcn7.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_unique_chars = 0;\n  for (let word of words)\
    \ {\n    let unique_chars = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n   \
    \ if (unique_chars > max_unique_chars) {\n      max_unique_chars = unique_chars;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf_9cl6hg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpf_9cl6hg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp5vj8pxnv.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5vj8pxnv.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_count: number = 0;\n    for (let\
    \ word of words) {\n        let count: number = 0;\n        for (let i = 0; i\
    \ < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n    \
    \            count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp0xlt4l87.js:34:12)\n    at Object.<anonymous> (/tmp/tmp0xlt4l87.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = words[0];\n  let max_unique_chars: number = 0;\n  for (let\
    \ i = 0; i < words.length; i++) {\n    let unique_chars: number = 0;\n    for\
    \ (let j = 0; j < words[i].length; j++) {\n      if (words[i].indexOf(words[i][j])\
    \ === j) {\n        unique_chars++;\n      }\n    }\n    if (unique_chars > max_unique_chars)\
    \ {\n      max_unique_chars = unique_chars;\n      max_word = words[i];\n    }\n\
    \  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpkwvzzw8d.js:33:12)\n    at Object.<anonymous> (/tmp/tmpkwvzzw8d.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        let unique_chars: string[]\
    \ = [];\n        for (let char of word) {\n            if (unique_chars.indexOf(char)\
    \ === -1) {\n                unique_chars.push(char);\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp9tebty9n.js:37:12)\n    at Object.<anonymous> (/tmp/tmp9tebty9n.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    for (let i = 1; i < words.length; i++) {\n   \
    \     if (words[i].length > max_word.length) {\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpmybfij2p.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmybfij2p.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (unique_chars(words[i])\
    \ > unique_chars(max_word)) {\n      max_word = words[i];\n    }\n  }\n  return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3ruh164g.js:15\n        if (unique_chars(words[i]) > unique_chars(max_word))\
    \ {\n        ^\n\nReferenceError: unique_chars is not defined\n    at find_max\
    \ (/tmp/tmp3ruh164g.js:15:9)\n    at test (/tmp/tmp3ruh164g.js:24:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ruh164g.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max = 0;\n    let max_word = \"\";\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let unique_chars = new Set(word.split(\"\
    \"));\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpxyyeyq8f.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxyyeyq8f.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = \"\";\n  let max_count = 0;\n  for (let word of words) {\n    let\
    \ count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpuok4vdy7.js:34:12)\n    at Object.<anonymous> (/tmp/tmpuok4vdy7.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === j) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp0mved0vo.js:35:12)\n    at Object.<anonymous> (/tmp/tmp0mved0vo.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_count: number = 0;\n  for (let word of words)\
    \ {\n    let count: number = 0;\n    for (let i = 0; i < word.length; i++) {\n\
    \      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n    }\n\
    \    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp3dbnem55.js:34:12)\n    at Object.<anonymous> (/tmp/tmp3dbnem55.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let char of word)\
    \ {\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n      \
    \          count += 1;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp_okf37ly.js:35:12)\n    at Object.<anonymous> (/tmp/tmp_okf37ly.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n\
    \    let word = words[i];\n    let uniqueChars = 0;\n    for (let j = 0; j < word.length;\
    \ j++) {\n      let char = word[j];\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        uniqueChars++;\n      }\n    }\n    if (uniqueChars > max) {\n  \
    \    max = uniqueChars;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpqo5d4z82.js:35:12)\n    at Object.<anonymous> (/tmp/tmpqo5d4z82.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ maxWord = words[0];\n  let maxLength = words[0].length;\n  for (let i = 1; i\
    \ < words.length; i++) {\n    if (words[i].length > maxLength) {\n      maxWord\
    \ = words[i];\n      maxLength = words[i].length;\n    }\n  }\n  return maxWord;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpewsd1snr.js:27:12)\n    at Object.<anonymous> (/tmp/tmpewsd1snr.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_count: number = 0;\n  for (let word of words)\
    \ {\n    let count: number = 0;\n    for (let i = 0; i < word.length; i++) {\n\
    \      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n    }\n\
    \    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp3dbnem55.js:34:12)\n    at Object.<anonymous> (/tmp/tmp3dbnem55.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let char of word)\
    \ {\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n      \
    \          count += 1;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp_okf37ly.js:35:12)\n    at Object.<anonymous> (/tmp/tmp_okf37ly.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        count++;\n      }\n    }\n    if (count\
    \ > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpgz38deva.js:35:12)\n    at Object.<anonymous> (/tmp/tmpgz38deva.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let char of word)\
    \ {\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n      \
    \          count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpyjnza2sm.js:35:12)\n    at Object.<anonymous> (/tmp/tmpyjnza2sm.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = \"\";\n  let max_count = 0;\n  for (let word of words) {\n    let\
    \ count = 0;\n    let seen = {};\n    for (let char of word) {\n      if (!seen[char])\
    \ {\n        count++;\n        seen[char] = true;\n      }\n    }\n    if (count\
    \ > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpw9nh9t9m.js:37:12)\n    at Object.<anonymous> (/tmp/tmpw9nh9t9m.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpku67rrwc.js:34:12)\n    at Object.<anonymous> (/tmp/tmpku67rrwc.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let unique_chars = new Set(word);\n    if (unique_chars.size > max_count) {\n\
    \      max_count = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp4bcz7n6b.js:29:12)\n    at Object.<anonymous> (/tmp/tmp4bcz7n6b.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length\
    \ > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp85penvf1.js:25:12)\n    at Object.<anonymous> (/tmp/tmp85penvf1.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let i: number = 0;\
    \ i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n  \
    \              count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp245z4rha.js:34:12)\n    at Object.<anonymous> (/tmp/tmp245z4rha.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_count: number = 0;\n  for (let word of words)\
    \ {\n    let count: number = 0;\n    for (let i: number = 0; i < word.length;\
    \ i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n\
    \    }\n    if (count > max_count) {\n      max_count = count;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp6mnijotf.js:34:12)\n    at Object.<anonymous> (/tmp/tmp6mnijotf.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_unique_chars: number = 0;\n  \
    \  for (let word of words) {\n        let unique_chars: number = 0;\n        for\
    \ (let char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                unique_chars++;\n            }\n        }\n        if (unique_chars\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars;\n      \
    \      max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp0r7g7hlw.js:35:12)\n    at Object.<anonymous> (/tmp/tmp0r7g7hlw.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max = 0;\n    let max_word = \"\";\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let unique_chars = new Set(word);\n\
    \        if (unique_chars.size > max) {\n            max = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpzq14c8df.js:29:12)\n    at Object.<anonymous> (/tmp/tmpzq14c8df.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        let chars = new Set();\n        for (let\
    \ char of word) {\n            if (!chars.has(char)) {\n                chars.add(char);\n\
    \                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp6ih2qp6e.js:37:12)\n    at Object.<anonymous> (/tmp/tmp6ih2qp6e.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars\
    \ = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpilvqoie7.js:29:12)\n    at Object.<anonymous> (/tmp/tmpilvqoie7.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_count: number = 0;\n    for (let\
    \ word of words) {\n        let count: number = 0;\n        for (let i = 0; i\
    \ < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n    \
    \            count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp0xlt4l87.js:34:12)\n    at Object.<anonymous> (/tmp/tmp0xlt4l87.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = words[0];\n  let max_count: number = 0;\n  for (let word\
    \ of words) {\n    let count: number = 0;\n    for (let i = 0; i < word.length;\
    \ i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n\
    \    }\n    if (count > max_count) {\n      max_count = count;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp5pg0x9x5.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5pg0x9x5.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let char of word) {\n            if\
    \ (word.indexOf(char) === word.lastIndexOf(char)) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp9b0h360j.js:35:12)\n    at Object.<anonymous> (/tmp/tmp9b0h360j.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpku67rrwc.js:34:12)\n    at Object.<anonymous> (/tmp/tmpku67rrwc.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  const\
    \ uniqueChars = words.map(word => [...new Set(word)]);\n  const maxLength = Math.max(...uniqueChars.map(word\
    \ => word.length));\n  const maxLengthWords = uniqueChars.filter(\n    word =>\
    \ word.length === maxLength\n  );\n  const lexicographicallyFirst = maxLengthWords.sort()[0];\n\
    \  const index = uniqueChars.indexOf(lexicographicallyFirst);\n  return words[index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpaoqe793l.js:32:12)\n    at Object.<anonymous> (/tmp/tmpaoqe793l.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        count++;\n      }\n    }\n    if (count\
    \ > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpgz38deva.js:35:12)\n    at Object.<anonymous> (/tmp/tmpgz38deva.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpku67rrwc.js:34:12)\n    at Object.<anonymous> (/tmp/tmpku67rrwc.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_count: number = 0;\n    for (let\
    \ i: number = 0; i < words.length; i++) {\n        let count: number = 0;\n  \
    \      for (let j: number = 0; j < words[i].length; j++) {\n            if (words[i].indexOf(words[i][j])\
    \ === j) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmprcyxv98e.js:33:12)\n    at Object.<anonymous> (/tmp/tmprcyxv98e.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_unique_chars: number = 0;\n  \
    \  for (let word of words) {\n        let unique_chars: number = 0;\n        for\
    \ (let char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                unique_chars++;\n            }\n        }\n        if (unique_chars\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars;\n      \
    \      max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp0r7g7hlw.js:35:12)\n    at Object.<anonymous> (/tmp/tmp0r7g7hlw.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_count: number = 0;\n  for (let i = 0; i\
    \ < words.length; i++) {\n    let word: string = words[i];\n    let count: number\
    \ = 0;\n    for (let j = 0; j < word.length; j++) {\n      let char: string =\
    \ word[j];\n      if (word.indexOf(char) === j) {\n        count++;\n      }\n\
    \    }\n    if (count > max_count) {\n      max_count = count;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp8trkyoi6.js:35:12)\n    at Object.<anonymous> (/tmp/tmp8trkyoi6.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = \"\";\n    let max_unique_chars = 0;\n    for (let word of words)\
    \ {\n        let unique_chars = 0;\n        for (let char of word) {\n       \
    \     if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpvnxlswvg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpvnxlswvg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = words[0];\n  let max_unique_chars: number = 0;\n  for (let\
    \ word of words) {\n    let unique_chars: number = 0;\n    for (let char of word)\
    \ {\n      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique_chars++;\n\
    \      }\n    }\n    if (unique_chars > max_unique_chars) {\n      max_unique_chars\
    \ = unique_chars;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpxy2fjwyg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpxy2fjwyg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_count: number = count_unique_chars(words[0]);\n\
    \    for (let i = 1; i < words.length; i++) {\n        let count: number = count_unique_chars(words[i]);\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmp9motrfzq.js:14\n    var max_count = count_unique_chars(words[0]);\n\
    \                    ^\n\nReferenceError: count_unique_chars is not defined\n\
    \    at find_max (/tmp/tmp9motrfzq.js:14:21)\n    at test (/tmp/tmp9motrfzq.js:27:22)\n\
    \    at Object.<anonymous> (/tmp/tmp9motrfzq.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let char of word) {\n            if\
    \ (word.indexOf(char) === word.lastIndexOf(char)) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp9b0h360j.js:35:12)\n    at Object.<anonymous> (/tmp/tmp9b0h360j.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpku67rrwc.js:34:12)\n    at Object.<anonymous> (/tmp/tmpku67rrwc.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = \"\";\n  let max_count = 0;\n  for (let word of words) {\n    let\
    \ unique_chars = new Set(word);\n    if (unique_chars.size > max_count) {\n  \
    \    max_count = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp3z6ck2dv.js:29:12)\n    at Object.<anonymous> (/tmp/tmp3z6ck2dv.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = \"\";\n    let max_unique_chars = 0;\n    for (let word of words)\
    \ {\n        let unique_chars = 0;\n        for (let i = 0; i < word.length; i++)\
    \ {\n            if (word.indexOf(word[i]) === i) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp9sthelhj.js:34:12)\n    at Object.<anonymous> (/tmp/tmp9sthelhj.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = words[0];\n  let max_unique: number = 0;\n  for (let word\
    \ of words) {\n    let unique: number = 0;\n    for (let i = 0; i < word.length;\
    \ i++) {\n      if (word.indexOf(word[i]) === i) {\n        unique++;\n      }\n\
    \    }\n    if (unique > max_unique) {\n      max_unique = unique;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpa2r9my5l.js:34:12)\n    at Object.<anonymous> (/tmp/tmpa2r9my5l.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpku67rrwc.js:34:12)\n    at Object.<anonymous> (/tmp/tmpku67rrwc.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_count: number = 0;\n  for (let word of words)\
    \ {\n    let chars: string[] = word.split(\"\");\n    let unique_chars: string[]\
    \ = [];\n    for (let char of chars) {\n      if (unique_chars.indexOf(char) ===\
    \ -1) {\n        unique_chars.push(char);\n      }\n    }\n    if (unique_chars.length\
    \ > max_count) {\n      max_count = unique_chars.length;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpr7ehcizi.js:36:12)\n    at Object.<anonymous> (/tmp/tmpr7ehcizi.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let i: number = 0;\
    \ i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n  \
    \              count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp245z4rha.js:34:12)\n    at Object.<anonymous> (/tmp/tmp245z4rha.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === j) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp0mved0vo.js:35:12)\n    at Object.<anonymous> (/tmp/tmp0mved0vo.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (word.indexOf(char) === j) {\n                count++;\n            }\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpk_omta15.js:35:12)\n    at Object.<anonymous> (/tmp/tmpk_omta15.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_count: number = 0;\n  for (let word of words)\
    \ {\n    let count: number = 0;\n    for (let i = 0; i < word.length; i++) {\n\
    \      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n    }\n\
    \    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp3dbnem55.js:34:12)\n    at Object.<anonymous> (/tmp/tmp3dbnem55.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_unique_chars = unique_chars(words[0]);\n\
    \    for (let i = 1; i < words.length; i++) {\n        let unique_chars = unique_chars(words[i]);\n\
    \        if (unique_chars > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = words[i];\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_8au39xh.js:14\n    var max_unique_chars = unique_chars(words[0]);\n\
    \                           ^\n\nTypeError: unique_chars is not a function\n \
    \   at find_max (/tmp/tmp_8au39xh.js:14:28)\n    at test (/tmp/tmp_8au39xh.js:27:22)\n\
    \    at Object.<anonymous> (/tmp/tmp_8au39xh.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_count: number = 0;\n  for (let word of words)\
    \ {\n    let count: number = 0;\n    for (let i: number = 0; i < word.length;\
    \ i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n\
    \    }\n    if (count > max_count) {\n      max_count = count;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp6mnijotf.js:34:12)\n    at Object.<anonymous> (/tmp/tmp6mnijotf.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (word.indexOf(char) === j) {\n                count++;\n            }\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpk_omta15.js:35:12)\n    at Object.<anonymous> (/tmp/tmpk_omta15.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n\
    \    const word = words[i];\n    const uniqueChars = new Set(word);\n    if (uniqueChars.size\
    \ > max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  }\n\
    \  return maxWord;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpsiu22l_j.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsiu22l_j.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_count: number = 0;\n  for (let word of words)\
    \ {\n    let unique_chars: string[] = [];\n    for (let char of word) {\n    \
    \  if (unique_chars.indexOf(char) === -1) {\n        unique_chars.push(char);\n\
    \      }\n    }\n    if (unique_chars.length > max_count) {\n      max_count =\
    \ unique_chars.length;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpp9vtx9bp.js:35:12)\n    at Object.<anonymous> (/tmp/tmpp9vtx9bp.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (word.indexOf(char) === j) {\n                count++;\n            }\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpk_omta15.js:35:12)\n    at Object.<anonymous> (/tmp/tmpk_omta15.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (unique_chars(words[i])\
    \ > unique_chars(max_word)) {\n      max_word = words[i];\n    }\n  }\n  return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3ruh164g.js:15\n        if (unique_chars(words[i]) > unique_chars(max_word))\
    \ {\n        ^\n\nReferenceError: unique_chars is not defined\n    at find_max\
    \ (/tmp/tmp3ruh164g.js:15:9)\n    at test (/tmp/tmp3ruh164g.js:24:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ruh164g.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let i\
    \ = 0; i < words.length; i++) {\n        let word: string = words[i];\n      \
    \  let count: number = 0;\n        for (let j = 0; j < word.length; j++) {\n \
    \           let char: string = word[j];\n            if (word.indexOf(char) ===\
    \ j) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpw4mdm4l9.js:35:12)\n    at Object.<anonymous> (/tmp/tmpw4mdm4l9.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = words[0];\n  let max_count: number = 0;\n  for (let i = 0;\
    \ i < words.length; i++) {\n    let word: string = words[i];\n    let count: number\
    \ = 0;\n    for (let j = 0; j < word.length; j++) {\n      let char: string =\
    \ word[j];\n      if (word.indexOf(char) === j) {\n        count++;\n      }\n\
    \    }\n    if (count > max_count) {\n      max_count = count;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpmi58_ptl.js:35:12)\n    at Object.<anonymous> (/tmp/tmpmi58_ptl.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = \"\";\n  let max_unique_chars = 0;\n  for (let word of words) {\n\
    \    let unique_chars = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n   \
    \ if (unique_chars > max_unique_chars) {\n      max_unique_chars = unique_chars;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpu8xjfg2b.js:35:12)\n    at Object.<anonymous> (/tmp/tmpu8xjfg2b.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_unique_chars = 0;\n  for (let word of words)\
    \ {\n    let unique_chars = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n   \
    \ if (unique_chars > max_unique_chars) {\n      max_unique_chars = unique_chars;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf_9cl6hg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpf_9cl6hg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_count: number = 0;\n    for (let\
    \ word of words) {\n        let count: number = 0;\n        for (let char of word)\
    \ {\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n      \
    \          count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpebkcfvz5.js:35:12)\n    at Object.<anonymous> (/tmp/tmpebkcfvz5.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = count_unique_chars(words[0]);\n\
    \    for (let i = 1; i < words.length; i++) {\n        const count = count_unique_chars(words[i]);\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmpv7toh1d1.js:14\n    var max_count = count_unique_chars(words[0]);\n\
    \                    ^\n\nReferenceError: count_unique_chars is not defined\n\
    \    at find_max (/tmp/tmpv7toh1d1.js:14:21)\n    at test (/tmp/tmpv7toh1d1.js:27:22)\n\
    \    at Object.<anonymous> (/tmp/tmpv7toh1d1.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_unique_chars: number = 0;\n  for (let word\
    \ of words) {\n    let unique_chars: number = 0;\n    for (let char of word) {\n\
    \      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique_chars++;\n\
    \      }\n    }\n    if (unique_chars > max_unique_chars) {\n      max_unique_chars\
    \ = unique_chars;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmps570l9ea.js:35:12)\n    at Object.<anonymous> (/tmp/tmps570l9ea.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let unique_chars = new Set(word);\n    if (unique_chars.size > max_count) {\n\
    \      max_count = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp4bcz7n6b.js:29:12)\n    at Object.<anonymous> (/tmp/tmp4bcz7n6b.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = 0;\n  let max_word = \"\";\n  for (let i = 0; i < words.length; i++) {\n\
    \    let word = words[i];\n    let unique_chars = 0;\n    for (let j = 0; j <\
    \ word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n   \
    \ if (unique_chars > max) {\n      max = unique_chars;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpu6ue30px.js:35:12)\n    at Object.<anonymous> (/tmp/tmpu6ue30px.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let char of word)\
    \ {\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n      \
    \          count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpyjnza2sm.js:35:12)\n    at Object.<anonymous> (/tmp/tmpyjnza2sm.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpku67rrwc.js:34:12)\n    at Object.<anonymous> (/tmp/tmpku67rrwc.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_unique_chars: number = 0;\n  \
    \  for (let i: number = 0; i < words.length; i++) {\n        let unique_chars:\
    \ number = 0;\n        for (let j: number = 0; j < words[i].length; j++) {\n \
    \           if (words[i].indexOf(words[i][j]) === j) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp32g4dfa7.js:33:12)\n    at Object.<anonymous> (/tmp/tmp32g4dfa7.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = unique_chars(word);\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqgela7a1.js:17\n        var count = unique_chars(word);\n     \
    \               ^\n\nReferenceError: unique_chars is not defined\n    at find_max\
    \ (/tmp/tmpqgela7a1.js:17:21)\n    at test (/tmp/tmpqgela7a1.js:28:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpqgela7a1.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp5vj8pxnv.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5vj8pxnv.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_count: number = 0;\n  for (let word of words)\
    \ {\n    let count: number = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        count++;\n      }\n    }\n    if (count\
    \ > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp5lm4wr0f.js:35:12)\n    at Object.<anonymous> (/tmp/tmp5lm4wr0f.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let unique_chars: string[] = [];\n        for (let char\
    \ of word) {\n            if (unique_chars.indexOf(char) === -1) {\n         \
    \       unique_chars.push(char);\n            }\n        }\n        if (unique_chars.length\
    \ > max_count) {\n            max_count = unique_chars.length;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpzceprcn7.js:35:12)\n    at Object.<anonymous> (/tmp/tmpzceprcn7.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_unique_chars = 0;\n  for (let word of words)\
    \ {\n    let unique_chars = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n   \
    \ if (unique_chars > max_unique_chars) {\n      max_unique_chars = unique_chars;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf_9cl6hg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpf_9cl6hg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = words[0];\n  let max_unique_chars: number = 0;\n  for (let\
    \ word of words) {\n    let unique_chars: number = 0;\n    for (let char of word)\
    \ {\n      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique_chars++;\n\
    \      }\n    }\n    if (unique_chars > max_unique_chars) {\n      max_unique_chars\
    \ = unique_chars;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpxy2fjwyg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpxy2fjwyg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word);\n        if (unique_chars.size\
    \ > max_count) {\n            max_count = unique_chars.size;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpucg949im.js:29:12)\n    at Object.<anonymous> (/tmp/tmpucg949im.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let char of word)\
    \ {\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n      \
    \          count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpyjnza2sm.js:35:12)\n    at Object.<anonymous> (/tmp/tmpyjnza2sm.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = words[0];\n  let max_unique_chars: number = 0;\n  for (let\
    \ word of words) {\n    let unique_chars: string[] = [];\n    for (let char of\
    \ word) {\n      if (unique_chars.indexOf(char) === -1) {\n        unique_chars.push(char);\n\
    \      }\n    }\n    if (unique_chars.length > max_unique_chars) {\n      max_unique_chars\
    \ = unique_chars.length;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpewbk6co7.js:35:12)\n    at Object.<anonymous> (/tmp/tmpewbk6co7.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp5vj8pxnv.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5vj8pxnv.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max: string = words[0];\n    let max_count: number = 0;\n    for (let i\
    \ = 0; i < words.length; i++) {\n        let count: number = 0;\n        for (let\
    \ j = 0; j < words[i].length; j++) {\n            if (words[i].indexOf(words[i][j])\
    \ === j) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max = words[i];\n            max_count = count;\n\
    \        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp7za030nz.js:33:12)\n    at Object.<anonymous> (/tmp/tmp7za030nz.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = words[0];\n  let max_unique_chars: number = 0;\n  for (let\
    \ word of words) {\n    let unique_chars = 0;\n    for (let char of word) {\n\
    \      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique_chars++;\n\
    \      }\n    }\n    if (unique_chars > max_unique_chars) {\n      max_unique_chars\
    \ = unique_chars;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf5exzj2z.js:35:12)\n    at Object.<anonymous> (/tmp/tmpf5exzj2z.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = words[0];\n  let max_unique = unique_chars(max);\n  for (let i = 1; i\
    \ < words.length; i++) {\n    let word = words[i];\n    let unique = unique_chars(word);\n\
    \    if (unique > max_unique) {\n      max = word;\n      max_unique = unique;\n\
    \    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpu765hgd6.js:14\n    var max_unique = unique_chars(max);\n     \
    \                ^\n\nReferenceError: unique_chars is not defined\n    at find_max\
    \ (/tmp/tmpu765hgd6.js:14:22)\n    at test (/tmp/tmpu765hgd6.js:28:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpu765hgd6.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let count = 0;\n    let word = words[i];\n    for (let j = 0; j\
    \ < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === j) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpxaj_f7n7.js:35:12)\n    at Object.<anonymous> (/tmp/tmpxaj_f7n7.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = count_unique(words[0]);\n  for (let\
    \ i = 1; i < words.length; i++) {\n    let count = count_unique(words[i]);\n \
    \   if (count > max_count) {\n      max_count = count;\n      max_word = words[i];\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp7eg2yzhg.js:14\n    var max_count = count_unique(words[0]);\n \
    \                   ^\n\nReferenceError: count_unique is not defined\n    at find_max\
    \ (/tmp/tmp7eg2yzhg.js:14:21)\n    at test (/tmp/tmp7eg2yzhg.js:27:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp7eg2yzhg.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n    \
    \    let unique = new Set(word);\n        if (unique.size > max) {\n         \
    \   max = unique.size;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp1td2hfia.js:29:12)\n    at Object.<anonymous> (/tmp/tmp1td2hfia.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_chars = 0;\n  for (let word of words) {\n  \
    \  let chars = new Set(word);\n    if (chars.size > max_chars) {\n      max_chars\
    \ = chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp7mxg5q4d.js:29:12)\n    at Object.<anonymous> (/tmp/tmp7mxg5q4d.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let unique_chars = new Set(word);\n        if (unique_chars.size\
    \ > max_count) {\n            max_count = unique_chars.size;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpucg949im.js:29:12)\n    at Object.<anonymous> (/tmp/tmpucg949im.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_count: number = 0;\n  for (let word of words)\
    \ {\n    let count: number = 0;\n    for (let i = 0; i < word.length; i++) {\n\
    \      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n    }\n\
    \    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp3dbnem55.js:34:12)\n    at Object.<anonymous> (/tmp/tmp3dbnem55.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_unique_chars = count_unique_chars(max_word);\n\
    \    for (let i = 1; i < words.length; i++) {\n        let word = words[i];\n\
    \        let unique_chars = count_unique_chars(word);\n        if (unique_chars\
    \ > max_unique_chars) {\n            max_word = word;\n            max_unique_chars\
    \ = unique_chars;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbilh4_x4.js:14\n    var max_unique_chars = count_unique_chars(max_word);\n\
    \                           ^\n\nReferenceError: count_unique_chars is not defined\n\
    \    at find_max (/tmp/tmpbilh4_x4.js:14:28)\n    at test (/tmp/tmpbilh4_x4.js:28:22)\n\
    \    at Object.<anonymous> (/tmp/tmpbilh4_x4.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let unique_chars: string[] = [];\n        for (let char\
    \ of word) {\n            if (unique_chars.indexOf(char) === -1) {\n         \
    \       unique_chars.push(char);\n            }\n        }\n        if (unique_chars.length\
    \ > max_count) {\n            max_count = unique_chars.length;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpzceprcn7.js:35:12)\n    at Object.<anonymous> (/tmp/tmpzceprcn7.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpku67rrwc.js:34:12)\n    at Object.<anonymous> (/tmp/tmpku67rrwc.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_uniq_chars: number = unique_chars(words[0]);\n\
    \    for (let i = 1; i < words.length; i++) {\n        let uniq_chars: number\
    \ = unique_chars(words[i]);\n        if (uniq_chars > max_uniq_chars) {\n    \
    \        max_uniq_chars = uniq_chars;\n            max_word = words[i];\n    \
    \    }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpz53n1tio.js:14\n    var max_uniq_chars = unique_chars(words[0]);\n\
    \                         ^\n\nReferenceError: unique_chars is not defined\n \
    \   at find_max (/tmp/tmpz53n1tio.js:14:26)\n    at test (/tmp/tmpz53n1tio.js:27:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz53n1tio.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (word.indexOf(char) === j) {\n                count++;\n            }\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpk_omta15.js:35:12)\n    at Object.<anonymous> (/tmp/tmpk_omta15.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_unique_chars = unique_chars(words[0]);\n\
    \    for (let i = 1; i < words.length; i++) {\n        let unique_chars = unique_chars(words[i]);\n\
    \        if (unique_chars > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = words[i];\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_8au39xh.js:14\n    var max_unique_chars = unique_chars(words[0]);\n\
    \                           ^\n\nTypeError: unique_chars is not a function\n \
    \   at find_max (/tmp/tmp_8au39xh.js:14:28)\n    at test (/tmp/tmp_8au39xh.js:27:22)\n\
    \    at Object.<anonymous> (/tmp/tmp_8au39xh.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n\
    \    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length;\
    \ j++) {\n      if (word.indexOf(word[j]) === word.lastIndexOf(word[j])) {\n \
    \       unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmps8t17a46.js:34:12)\n    at Object.<anonymous> (/tmp/tmps8t17a46.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let char of word) {\n            if\
    \ (word.indexOf(char) === word.lastIndexOf(char)) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp9b0h360j.js:35:12)\n    at Object.<anonymous> (/tmp/tmp9b0h360j.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = \"\";\n  let max_count = 0;\n  for (let word of words) {\n    let\
    \ unique_chars = new Set(word);\n    if (unique_chars.size > max_count) {\n  \
    \    max_count = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp3z6ck2dv.js:29:12)\n    at Object.<anonymous> (/tmp/tmp3z6ck2dv.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let i: number = 0;\
    \ i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n  \
    \              count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\nconsole.log(find_max([\"name\", \"of\", \"string\"\
    ]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpb443ft3m.js:37:12)\n    at Object.<anonymous> (/tmp/tmpb443ft3m.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: 'string

    name

    aaaaaaa

    '
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max = 0;\n    let max_word = \"\";\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let unique_chars = 0;\n      \
    \  for (let j = 0; j < word.length; j++) {\n            let char = word[j];\n\
    \            if (word.indexOf(char) === word.lastIndexOf(char)) {\n          \
    \      unique_chars++;\n            }\n        }\n        if (unique_chars > max)\
    \ {\n            max = unique_chars;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpskce8ss8.js:35:12)\n    at Object.<anonymous> (/tmp/tmpskce8ss8.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_unique_char = unique_char(words[0]);\n  for\
    \ (let i = 1; i < words.length; i++) {\n    let unique_char = unique_char(words[i]);\n\
    \    if (unique_char > max_unique_char) {\n      max_unique_char = unique_char;\n\
    \      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmp2_g3e83q.js:14\n    var max_unique_char = unique_char(words[0]);\n\
    \                          ^\n\nTypeError: unique_char is not a function\n   \
    \ at find_max (/tmp/tmp2_g3e83q.js:14:27)\n    at test (/tmp/tmp2_g3e83q.js:27:22)\n\
    \    at Object.<anonymous> (/tmp/tmp2_g3e83q.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    for (let i = 1; i < words.length; i++) {\n   \
    \     if (words[i].length > max_word.length) {\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpmybfij2p.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmybfij2p.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (word.indexOf(word[j]) === j)\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp9iwfl9w6.js:34:12)\n    at Object.<anonymous> (/tmp/tmp9iwfl9w6.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_count: number = 0;\n    for (let\
    \ word of words) {\n        let count: number = 0;\n        for (let i: number\
    \ = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n\
    \                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp5yklvfjg.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5yklvfjg.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_unique_chars = 0;\n  for (let word of words)\
    \ {\n    let unique_chars = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n   \
    \ if (unique_chars > max_unique_chars) {\n      max_unique_chars = unique_chars;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf_9cl6hg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpf_9cl6hg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (word.indexOf(char) === j) {\n                count++;\n            }\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpk_omta15.js:35:12)\n    at Object.<anonymous> (/tmp/tmpk_omta15.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n\
    \    const word = words[i];\n    const uniqueChars = getUniqueChars(word);\n \
    \   if (uniqueChars.length > max) {\n      max = uniqueChars.length;\n      maxWord\
    \ = word;\n    }\n  }\n  return maxWord;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxbu5x06e.js:17\n        var uniqueChars = getUniqueChars(word);\n\
    \                          ^\n\nReferenceError: getUniqueChars is not defined\n\
    \    at find_max (/tmp/tmpxbu5x06e.js:17:27)\n    at test (/tmp/tmpxbu5x06e.js:28:22)\n\
    \    at Object.<anonymous> (/tmp/tmpxbu5x06e.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp5vj8pxnv.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5vj8pxnv.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n\
    \    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length;\
    \ j++) {\n      let char = word[j];\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpji1zhm78.js:35:12)\n    at Object.<anonymous> (/tmp/tmpji1zhm78.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_word_len = words[0].length;\n  let max_unique_chars\
    \ = new Set(words[0]).size;\n  for (let i = 1; i < words.length; i++) {\n    let\
    \ unique_chars = new Set(words[i]).size;\n    if (unique_chars > max_unique_chars)\
    \ {\n      max_word = words[i];\n      max_word_len = words[i].length;\n     \
    \ max_unique_chars = unique_chars;\n    } else if (unique_chars === max_unique_chars)\
    \ {\n      if (words[i].length > max_word_len) {\n        max_word = words[i];\n\
    \        max_word_len = words[i].length;\n        max_unique_chars = unique_chars;\n\
    \      }\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp9hfw2af9.js:37:12)\n    at Object.<anonymous> (/tmp/tmp9hfw2af9.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        count++;\n      }\n    }\n    if (count\
    \ > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpgz38deva.js:35:12)\n    at Object.<anonymous> (/tmp/tmpgz38deva.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_unique_chars = 0;\n    for (let word of\
    \ words) {\n        let unique_chars = 0;\n        for (let char of word) {\n\
    \            if (word.indexOf(char) === word.lastIndexOf(char)) {\n          \
    \      unique_chars++;\n            }\n        }\n        if (unique_chars > max_unique_chars)\
    \ {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp8ku0hrzs.js:35:12)\n    at Object.<anonymous> (/tmp/tmp8ku0hrzs.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        count++;\n      }\n    }\n    if (count\
    \ > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpgz38deva.js:35:12)\n    at Object.<anonymous> (/tmp/tmpgz38deva.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === word.lastIndexOf(word[i])) {\n        unique++;\n      }\n    }\n    if\
    \ (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n \
    \ return maxWord;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpzku2ynpb.js:34:12)\n    at Object.<anonymous> (/tmp/tmpzku2ynpb.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_unique_chars: number = 0;\n  \
    \  for (let word of words) {\n        let unique_chars: number = 0;\n        for\
    \ (let char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                unique_chars++;\n            }\n        }\n        if (unique_chars\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars;\n      \
    \      max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp0r7g7hlw.js:35:12)\n    at Object.<anonymous> (/tmp/tmp0r7g7hlw.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        count++;\n      }\n    }\n    if (count\
    \ > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpgz38deva.js:35:12)\n    at Object.<anonymous> (/tmp/tmpgz38deva.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_unique_chars = 0;\n  for (let word of words)\
    \ {\n    let unique_chars = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n   \
    \ if (unique_chars > max_unique_chars) {\n      max_unique_chars = unique_chars;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf_9cl6hg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpf_9cl6hg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = \"\";\n  let max_count = 0;\n  for (let word of words) {\n    let\
    \ count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpuok4vdy7.js:34:12)\n    at Object.<anonymous> (/tmp/tmpuok4vdy7.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      if (word.indexOf(word[j]) === j) {\n        count++;\n\
    \      }\n    }\n    if (count > max_count) {\n      max_count = count;\n    \
    \  max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmptk0696on.js:34:12)\n    at Object.<anonymous> (/tmp/tmptk0696on.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp5vj8pxnv.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5vj8pxnv.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n    \
    \    let unique_chars = new Set(word);\n        if (unique_chars.size > max) {\n\
    \            max = unique_chars.size;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpgw5n6h64.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgw5n6h64.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_count: number = count_unique_chars(words[0]);\n\
    \    for (let i = 1; i < words.length; i++) {\n        let count: number = count_unique_chars(words[i]);\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmp9motrfzq.js:14\n    var max_count = count_unique_chars(words[0]);\n\
    \                    ^\n\nReferenceError: count_unique_chars is not defined\n\
    \    at find_max (/tmp/tmp9motrfzq.js:14:21)\n    at test (/tmp/tmp9motrfzq.js:27:22)\n\
    \    at Object.<anonymous> (/tmp/tmp9motrfzq.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = words[0];\n  let max_count = 0;\n  for (let i = 0; i < words.length; i++)\
    \ {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length;\
    \ j++) {\n      let char = word[j];\n      if (word.indexOf(char) === j) {\n \
    \       count++;\n      }\n    }\n    if (count > max_count) {\n      max = word;\n\
    \      max_count = count;\n    }\n  }\n  return max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpkls8mh9f.js:35:12)\n    at Object.<anonymous> (/tmp/tmpkls8mh9f.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = \"\";\n  let max_count = 0;\n  for (let word of words) {\n    let\
    \ unique_chars = new Set(word);\n    if (unique_chars.size > max_count) {\n  \
    \    max_count = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp3z6ck2dv.js:29:12)\n    at Object.<anonymous> (/tmp/tmp3z6ck2dv.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpku67rrwc.js:34:12)\n    at Object.<anonymous> (/tmp/tmpku67rrwc.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      let ch =\
    \ word[i];\n      if (word.indexOf(ch) === i) {\n        count++;\n      }\n \
    \   }\n    if (count > max_count) {\n      max_count = count;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpe2o6ykpk.js:35:12)\n    at Object.<anonymous> (/tmp/tmpe2o6ykpk.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = \"\";\n  let max_count = 0;\n  for (let word of words) {\n    let\
    \ count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpuok4vdy7.js:34:12)\n    at Object.<anonymous> (/tmp/tmpuok4vdy7.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = words[0];\n  let max_unique: number = unique_chars(words[0]);\n\
    \  for (let word of words) {\n    let unique: number = unique_chars(word);\n \
    \   if (unique > max_unique) {\n      max_unique = unique;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpcl3jyes0.js:14\n    var max_unique = unique_chars(words[0]);\n\
    \                     ^\n\nReferenceError: unique_chars is not defined\n    at\
    \ find_max (/tmp/tmpcl3jyes0.js:14:22)\n    at test (/tmp/tmpcl3jyes0.js:28:22)\n\
    \    at Object.<anonymous> (/tmp/tmpcl3jyes0.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_count: number = 0;\n    for (let\
    \ i = 0; i < words.length; i++) {\n        let word: string = words[i];\n    \
    \    let count: number = 0;\n        for (let j = 0; j < word.length; j++) {\n\
    \            let char: string = word[j];\n            if (word.indexOf(char) ===\
    \ j) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpq8xp29no.js:35:12)\n    at Object.<anonymous> (/tmp/tmpq8xp29no.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268097
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let unique_chars = new Set(word);\n    if (unique_chars.size > max_count) {\n\
    \      max_count = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp4bcz7n6b.js:29:12)\n    at Object.<anonymous> (/tmp/tmp4bcz7n6b.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let unique_count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if\
    \ (word.indexOf(word[i]) === i) {\n        unique_count++;\n      }\n    }\n \
    \   if (unique_count > max_count) {\n      max_count = unique_count;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpov74v6k2.js:34:12)\n    at Object.<anonymous> (/tmp/tmpov74v6k2.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_count: number = 0;\n    for (let\
    \ word of words) {\n        let count: number = 0;\n        for (let i = 0; i\
    \ < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n    \
    \            count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp0xlt4l87.js:34:12)\n    at Object.<anonymous> (/tmp/tmp0xlt4l87.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = words[0];\n  let max_unique_chars: number = 0;\n  for (let\
    \ word of words) {\n    let unique_chars: number = 0;\n    for (let char of word)\
    \ {\n      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique_chars++;\n\
    \      }\n    }\n    if (unique_chars > max_unique_chars) {\n      max_unique_chars\
    \ = unique_chars;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpxy2fjwyg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpxy2fjwyg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    for (let i = 1; i < words.length; i++) {\n   \
    \     if (words[i].length > max_word.length) {\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpmybfij2p.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmybfij2p.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let char of word)\
    \ {\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n      \
    \          count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpyjnza2sm.js:35:12)\n    at Object.<anonymous> (/tmp/tmpyjnza2sm.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (unique_chars(words[i])\
    \ > unique_chars(max)) {\n      max = words[i];\n    }\n  }\n  return max;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp7sl1mzj7.js:15\n        if (unique_chars(words[i]) > unique_chars(max))\
    \ {\n        ^\n\nReferenceError: unique_chars is not defined\n    at find_max\
    \ (/tmp/tmp7sl1mzj7.js:15:9)\n    at test (/tmp/tmp7sl1mzj7.js:24:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp7sl1mzj7.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_unique_chars = 0;\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique_chars = 0;\n    for (let j\
    \ = 0; j < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n   \
    \ if (unique_chars > max_unique_chars) {\n      max_unique_chars = unique_chars;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpajeiesi8.js:35:12)\n    at Object.<anonymous> (/tmp/tmpajeiesi8.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpku67rrwc.js:34:12)\n    at Object.<anonymous> (/tmp/tmpku67rrwc.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        count++;\n      }\n    }\n    if (count\
    \ > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpgz38deva.js:35:12)\n    at Object.<anonymous> (/tmp/tmpgz38deva.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_unique_char = 0;\n  for (let word of words)\
    \ {\n    let unique_char = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique_char++;\n      }\n    }\n    if\
    \ (unique_char > max_unique_char) {\n      max_unique_char = unique_char;\n  \
    \    max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpgh9lkznm.js:35:12)\n    at Object.<anonymous> (/tmp/tmpgh9lkznm.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let unique_chars: string[] = [];\n        for (let char\
    \ of word) {\n            if (unique_chars.indexOf(char) === -1) {\n         \
    \       unique_chars.push(char);\n            }\n        }\n        if (unique_chars.length\
    \ > max_count) {\n            max_count = unique_chars.length;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpzceprcn7.js:35:12)\n    at Object.<anonymous> (/tmp/tmpzceprcn7.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_unique_chars: number = 0;\n    for\
    \ (let word of words) {\n        let unique_chars: number = 0;\n        for (let\
    \ char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                unique_chars++;\n            }\n        }\n        if (unique_chars\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars;\n      \
    \      max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpb25dsyrd.js:35:12)\n    at Object.<anonymous> (/tmp/tmpb25dsyrd.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_count: number = 0;\n    for (let\
    \ word of words) {\n        let count: number = 0;\n        for (let i: number\
    \ = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n\
    \                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp5yklvfjg.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5yklvfjg.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let char of word) {\n            if\
    \ (word.indexOf(char) === word.lastIndexOf(char)) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp9b0h360j.js:35:12)\n    at Object.<anonymous> (/tmp/tmp9b0h360j.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_unique_chars = 0;\n    for (let word of\
    \ words) {\n        let unique_chars = 0;\n        for (let char of word) {\n\
    \            if (word.indexOf(char) === word.lastIndexOf(char)) {\n          \
    \      unique_chars++;\n            }\n        }\n        if (unique_chars > max_unique_chars)\
    \ {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp8ku0hrzs.js:35:12)\n    at Object.<anonymous> (/tmp/tmp8ku0hrzs.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n\
    \    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length;\
    \ j++) {\n      let char = word[j];\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpji1zhm78.js:35:12)\n    at Object.<anonymous> (/tmp/tmpji1zhm78.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp3ehu3pa2.js:37:12)\n    at Object.<anonymous> (/tmp/tmp3ehu3pa2.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: 'string

    name

    aaaaaaa

    '
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = words[0];\n  let max_count: number = 0;\n  for (let word\
    \ of words) {\n    let count: number = 0;\n    for (let i = 0; i < word.length;\
    \ i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n\
    \    }\n    if (count > max_count) {\n      max_count = count;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp5pg0x9x5.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5pg0x9x5.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_unique_chars = 0;\n    for (let word of\
    \ words) {\n        let unique_chars = 0;\n        for (let char of word) {\n\
    \            if (word.indexOf(char) === word.lastIndexOf(char)) {\n          \
    \      unique_chars++;\n            }\n        }\n        if (unique_chars > max_unique_chars)\
    \ {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp8ku0hrzs.js:35:12)\n    at Object.<anonymous> (/tmp/tmp8ku0hrzs.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (unique_chars(words[i])\
    \ > unique_chars(max_word)) {\n      max_word = words[i];\n    }\n  }\n  return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3ruh164g.js:15\n        if (unique_chars(words[i]) > unique_chars(max_word))\
    \ {\n        ^\n\nReferenceError: unique_chars is not defined\n    at find_max\
    \ (/tmp/tmp3ruh164g.js:15:9)\n    at test (/tmp/tmp3ruh164g.js:24:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ruh164g.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_count: number = 0;\n  for (let word of words)\
    \ {\n    let count: number = 0;\n    for (let i = 0; i < word.length; i++) {\n\
    \      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n    }\n\
    \    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp3dbnem55.js:34:12)\n    at Object.<anonymous> (/tmp/tmp3dbnem55.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = \"\";\n    let max_count: number = 0;\n    for (let word\
    \ of words) {\n        let count: number = 0;\n        for (let i: number = 0;\
    \ i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n  \
    \              count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp245z4rha.js:34:12)\n    at Object.<anonymous> (/tmp/tmp245z4rha.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_unique_chars: number = 0;\n  for (let word\
    \ of words) {\n    let unique_chars: number = 0;\n    for (let char of word) {\n\
    \      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique_chars++;\n\
    \      }\n    }\n    if (unique_chars > max_unique_chars) {\n      max_unique_chars\
    \ = unique_chars;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmps570l9ea.js:35:12)\n    at Object.<anonymous> (/tmp/tmps570l9ea.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf8coel2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpf8coel2o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max = 0;\n    let maxWord = \"\";\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let uniqueChars = 0;\n       \
    \ for (let j = 0; j < word.length; j++) {\n            let char = word[j];\n \
    \           if (word.indexOf(char) === word.lastIndexOf(char)) {\n           \
    \     uniqueChars++;\n            }\n        }\n        if (uniqueChars > max)\
    \ {\n            max = uniqueChars;\n            maxWord = word;\n        }\n\
    \    }\n    return maxWord;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpgh2cuohs.js:35:12)\n    at Object.<anonymous> (/tmp/tmpgh2cuohs.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_unique_chars = 0;\n  for (let word of words)\
    \ {\n    let unique_chars = 0;\n    for (let char of word) {\n      if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n   \
    \ if (unique_chars > max_unique_chars) {\n      max_unique_chars = unique_chars;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpf_9cl6hg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpf_9cl6hg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word: string = words[0];\n    let max_count: number = 0;\n    for (let\
    \ word of words) {\n        let count: number = 0;\n        for (let i: number\
    \ = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n\
    \                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp5yklvfjg.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5yklvfjg.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n  \
    \  let unique_chars = new Set(word);\n    if (unique_chars.size > max_count) {\n\
    \      max_count = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp4bcz7n6b.js:29:12)\n    at Object.<anonymous> (/tmp/tmp4bcz7n6b.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    for (let i = 1; i < words.length; i++) {\n   \
    \     if (words[i].length > max_word.length) {\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpmybfij2p.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmybfij2p.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n    \
    \    let unique_chars = new Set(word);\n        if (unique_chars.size > max) {\n\
    \            max = unique_chars.size;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpgw5n6h64.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgw5n6h64.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word = words[0];\n  let max_count = 0;\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const unique_chars = new Set(word);\n\
    \    if (unique_chars.size > max_count) {\n      max_count = unique_chars.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpqdfzaxl0.js:29:12)\n    at Object.<anonymous> (/tmp/tmpqdfzaxl0.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let\
    \ max_word: string = \"\";\n  let max_count: number = 0;\n  for (let word of words)\
    \ {\n    let unique_count: number = 0;\n    for (let i = 0; i < word.length; i++)\
    \ {\n      if (word.indexOf(word[i]) === i) {\n        unique_count++;\n     \
    \ }\n    }\n    if (unique_count > max_count) {\n      max_count = unique_count;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpnmarn0z_.js:34:12)\n    at Object.<anonymous> (/tmp/tmpnmarn0z_.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268097
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let char of word) {\n            if\
    \ (word.indexOf(char) === word.lastIndexOf(char)) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp9b0h360j.js:35:12)\n    at Object.<anonymous> (/tmp/tmp9b0h360j.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts an array of strings.\n\
    // The array contains different words. Return the word with maximum number\n//\
    \ of unique characters. If multiple strings have maximum number of unique\n//\
    \ characters, return the one which comes first in lexicographical order.\n// >>>\
    \ find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"\
    name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n   \
    \ let max_word = words[0];\n    let max_count = 0;\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpku67rrwc.js:34:12)\n    at Object.<anonymous> (/tmp/tmpku67rrwc.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
