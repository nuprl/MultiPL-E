language: notypes.py
name: HumanEval_128_prod_signs
results:
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs,\
    \ arr)) * reduce(lambda x, y: x * y, map(lambda x: 1 if x > 0 else -1 if x < 0\
    \ else 0, arr))\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2c23ttj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpq2c23ttj.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpq2c23ttj.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpq2c23ttj.py\"\
    , line 18, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))\nNameError: name\
    \ 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num == 0:\n            continue\n\
    \        sum_ += abs(num)\n        prod *= num / abs(num)\n    return sum_ * prod\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphrexsnpx.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphrexsnpx.py\", line 39,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmphrexsnpx.py\", line 30,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(abs(x) for x in arr) * reduce(lambda x, y: x * y, [1 if x > 0 else\
    \ -1 if x < 0 else 0 for x in arr])\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu281272j.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu281272j.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpu281272j.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpu281272j.py\"\
    , line 19, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, [1 if x > 0 else -1 if x < 0 else 0 for x in arr])\nNameError:\
    \ name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_magn += abs(num)\n    return sum_magn * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_magn += abs(num)\n    return sum_magn * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(map(abs, arr)) * reduce(lambda x, y: x * y, map(lambda x: 1 if\
    \ x > 0 else -1 if x < 0 else 0, arr))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbg7ihqhw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbg7ihqhw.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpbg7ihqhw.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpbg7ihqhw.py\"\
    , line 19, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))\nNameError: name\
    \ 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x)\
    \ for x in arr) * reduce(lambda x, y: x * y, (1 if x > 0 else -1 if x < 0 else\
    \ 0 for x in arr))\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdnhaslj0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdnhaslj0.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpdnhaslj0.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpdnhaslj0.py\"\
    , line 18, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, (1 if x > 0 else -1 if x < 0 else 0 for x in arr))\nNameError:\
    \ name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs,\
    \ arr)) * reduce(lambda x, y: x * y, map(sign, arr))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0516n79t.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0516n79t.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp0516n79t.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp0516n79t.py\"\
    , line 18, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(sign, arr))\nNameError: name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n  \
    \      elif i == 0:\n            prod = 0\n        sum_ += abs(i)\n    return\
    \ sum_ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(i)\
    \ for i in arr) * reduce(lambda x, y: x * y, (1 if i >= 0 else -1 for i in arr))\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3gidkcst.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3gidkcst.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp3gidkcst.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp3gidkcst.py\"\
    , line 18, in prod_signs\n    return sum(abs(i) for i in arr) * reduce(lambda\
    \ x, y: x * y, (1 if i >= 0 else -1 for i in arr))\nNameError: name 'reduce' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x)\
    \ for x in arr) * reduce(lambda x, y: x * y, (1 if x >= 0 else -1 if x < 0 else\
    \ 0 for x in arr))\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6384f1a5.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6384f1a5.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp6384f1a5.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp6384f1a5.py\"\
    , line 18, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, (1 if x >= 0 else -1 if x < 0 else 0 for x in arr))\nNameError:\
    \ name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i == 0:\n            prod = 0\n   \
    \         break\n        elif i > 0:\n            prod *= 1\n        else:\n \
    \           prod *= -1\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_magn += abs(num)\n    return sum_magn * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(map(abs, arr)) * reduce(lambda x, y: x * y, map(lambda x: 1 if\
    \ x > 0 else -1 if x < 0 else 0, arr))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbg7ihqhw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbg7ihqhw.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpbg7ihqhw.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpbg7ihqhw.py\"\
    , line 19, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))\nNameError: name\
    \ 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i == 0:\n            prod = 0\n   \
    \         break\n        elif i > 0:\n            prod *= 1\n        else:\n \
    \           prod *= -1\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n\
    \        elif i < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_magn += abs(i)\n    return sum_magn * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n\
    \        elif i < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_magn += abs(i)\n    return sum_magn * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_of_magnitudes = 0\n    for i in arr:\n        if i > 0:\n            prod\
    \ *= 1\n        elif i < 0:\n            prod *= -1\n        else:\n         \
    \   prod *= 0\n        sum_of_magnitudes += abs(i)\n    return sum_of_magnitudes\
    \ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_of_magnitudes = 0\n    for num in arr:\n        if num > 0:\n         \
    \   prod *= 1\n        elif num < 0:\n            prod *= -1\n        else:\n\
    \            prod *= 0\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes\
    \ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x)\
    \ for x in arr) * reduce(lambda x, y: x * y, (1 if x >= 0 else -1 if x < 0 else\
    \ 0 for x in arr))\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6384f1a5.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6384f1a5.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp6384f1a5.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp6384f1a5.py\"\
    , line 18, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, (1 if x >= 0 else -1 if x < 0 else 0 for x in arr))\nNameError:\
    \ name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i < 0:\n\
    \            prod *= -1\n        else:\n            prod *= 0\n    return sum(map(abs,\
    \ arr)) * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    signs = [1 if\
    \ x >= 0 else -1 for x in arr]\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, signs)\n\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7fm39jth.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7fm39jth.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp7fm39jth.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp7fm39jth.py\"\
    , line 19, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, signs)\nNameError: name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_of_magnitudes = 0\n    for num in arr:\n        if num > 0:\n         \
    \   prod *= 1\n        elif num < 0:\n            prod *= -1\n        else:\n\
    \            prod *= 0\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes\
    \ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    product = 1\n\
    \    sum_of_magnitudes = 0\n    for num in arr:\n        if num > 0:\n       \
    \     product *= 1\n        elif num < 0:\n            product *= -1\n       \
    \ else:\n            product *= 0\n        sum_of_magnitudes += abs(num)\n   \
    \ return sum_of_magnitudes * product\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_of_magnitudes = 0\n    for i in arr:\n        if i > 0:\n            prod\
    \ *= 1\n        elif i < 0:\n            prod *= -1\n        else:\n         \
    \   prod *= 0\n        sum_of_magnitudes += abs(i)\n    return sum_of_magnitudes\
    \ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num == 0:\n            prod = 0\n\
    \            break\n        elif num > 0:\n            prod *= 1\n        else:\n\
    \            prod *= -1\n        sum_ += abs(num)\n    return sum_ * prod\n\n\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x)\
    \ for x in arr) * reduce(lambda x, y: x * y, [1 if x >= 0 else -1 for x in arr])\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4q918w7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpg4q918w7.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpg4q918w7.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpg4q918w7.py\"\
    , line 18, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, [1 if x >= 0 else -1 for x in arr])\nNameError: name 'reduce' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n\
    \        prod = 1\n        sum = 0\n        for i in arr:\n            if i ==\
    \ 0:\n                prod = 0\n                break\n            else:\n   \
    \             prod *= i/abs(i)\n                sum += abs(i)\n        return\
    \ prod * sum\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) ==\
    \ -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3,\
    \ -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,\
    \ 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(abs(x) for x in arr) * reduce(lambda x, y: x * y, [1 if x > 0 else\
    \ -1 if x < 0 else 0 for x in arr])\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu281272j.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu281272j.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpu281272j.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpu281272j.py\"\
    , line 19, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, [1 if x > 0 else -1 if x < 0 else 0 for x in arr])\nNameError:\
    \ name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(abs(x) for x in arr) * reduce(lambda x, y: x * y, (1 if x > 0 else\
    \ -1 if x < 0 else 0 for x in arr))\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ijex7o0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9ijex7o0.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp9ijex7o0.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp9ijex7o0.py\"\
    , line 19, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, (1 if x > 0 else -1 if x < 0 else 0 for x in arr))\nNameError:\
    \ name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_magn += abs(num)\n    return sum_magn * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_of_magnitudes = 0\n    for i in arr:\n        if i > 0:\n            prod\
    \ *= 1\n        elif i < 0:\n            prod *= -1\n        else:\n         \
    \   prod *= 0\n        sum_of_magnitudes += abs(i)\n    return sum_of_magnitudes\
    \ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i == 0:\n            prod = 0\n   \
    \         break\n        elif i > 0:\n            prod *= 1\n        else:\n \
    \           prod *= -1\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    prod =\
    \ 1\n    sum = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n\
    \            sum += i\n        elif i < 0:\n            prod *= -1\n         \
    \   sum += i\n        else:\n            prod *= 0\n    return sum * prod\n\n\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsxf8pbsu.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpsxf8pbsu.py\", line 43,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpsxf8pbsu.py\", line 33,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(abs(x) for x in arr) * prod(sign(x) for x in arr)\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3wfi8pa.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmps3wfi8pa.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmps3wfi8pa.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmps3wfi8pa.py\"\
    , line 19, in prod_signs\n    return sum(abs(x) for x in arr) * prod(sign(x) for\
    \ x in arr)\nNameError: name 'prod' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n  \
    \      elif i == 0:\n            prod = 0\n        sum_ += abs(i)\n    return\
    \ sum_ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_magn += abs(num)\n    return sum_magn * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        sum_ += abs(num)\n        prod *= sign(num)\n\
    \    return sum_ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzqtolzj1.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpzqtolzj1.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpzqtolzj1.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpzqtolzj1.py\"\
    , line 22, in prod_signs\n    prod *= sign(num)\nNameError: name 'sign' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n   \
    \     elif i == 0:\n            prod = 0\n        sum += abs(i)\n    return sum\
    \ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_magn += abs(num)\n    return sum_magn * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x)\
    \ for x in arr) * reduce(lambda x, y: x * y, [1 if x >= 0 else -1 for x in arr])\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4q918w7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpg4q918w7.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpg4q918w7.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpg4q918w7.py\"\
    , line 18, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, [1 if x >= 0 else -1 for x in arr])\nNameError: name 'reduce' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i == 0:\n            prod = 0\n   \
    \         break\n        elif i > 0:\n            prod *= 1\n        else:\n \
    \           prod *= -1\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_magn += abs(num)\n    return sum_magn * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x)\
    \ for x in arr) * reduce(lambda x, y: x * y,\n                               \
    \              (1 if x > 0 else -1 if x < 0 else 0 for x in arr))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcmb8cd0b.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpcmb8cd0b.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpcmb8cd0b.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpcmb8cd0b.py\"\
    , line 18, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y,\nNameError: name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n\
    \        prod = 1\n        sum = 0\n        for i in arr:\n            if i ==\
    \ 0:\n                prod = 0\n                break\n            else:\n   \
    \             prod *= i / abs(i)\n                sum += abs(i)\n        return\
    \ prod * sum\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) ==\
    \ -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3,\
    \ -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,\
    \ 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n  \
    \      elif i == 0:\n            prod = 0\n        sum_ += abs(i)\n    return\
    \ sum_ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x)\
    \ for x in arr) * reduce(lambda x, y: x * y, (1 if x > 0 else -1 if x < 0 else\
    \ 0 for x in arr))\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdnhaslj0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdnhaslj0.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpdnhaslj0.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpdnhaslj0.py\"\
    , line 18, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, (1 if x > 0 else -1 if x < 0 else 0 for x in arr))\nNameError:\
    \ name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n  \
    \      elif i == 0:\n            prod = 0\n        sum_ += abs(i)\n    return\
    \ sum_ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(map(abs, arr)) * reduce(lambda x, y: x * y, map(lambda x: 1 if\
    \ x > 0 else -1 if x < 0 else 0, arr))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbg7ihqhw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbg7ihqhw.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpbg7ihqhw.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpbg7ihqhw.py\"\
    , line 19, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))\nNameError: name\
    \ 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n\
    \        product = 1\n        sum = 0\n        for i in arr:\n            if i\
    \ > 0:\n                product *= 1\n                sum += i\n            elif\
    \ i < 0:\n                product *= -1\n                sum += abs(i)\n     \
    \       else:\n                product *= 0\n        return product * sum\n\n\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(abs(x) for x in arr) * reduce(lambda x, y: x * y, [1 if x > 0 else\
    \ -1 if x < 0 else 0 for x in arr])\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu281272j.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu281272j.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpu281272j.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpu281272j.py\"\
    , line 19, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, [1 if x > 0 else -1 if x < 0 else 0 for x in arr])\nNameError:\
    \ name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n\
    \        elif i < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_magn += abs(i)\n    return sum_magn * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs,\
    \ arr)) * reduce(lambda x, y: x * y, map(sign, arr))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0516n79t.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0516n79t.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp0516n79t.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp0516n79t.py\"\
    , line 18, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(sign, arr))\nNameError: name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num == 0:\n            prod = 0\n\
    \            break\n        prod *= num / abs(num)\n        sum_ += abs(num)\n\
    \    return prod * sum_\n\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n\
    \        product = 1\n        sum_of_magnitudes = 0\n        for i in arr:\n \
    \           if i == 0:\n                product = 0\n                break\n \
    \           elif i > 0:\n                product *= 1\n            else:\n   \
    \             product *= -1\n            sum_of_magnitudes += abs(i)\n       \
    \ return sum_of_magnitudes * product\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    prod =\
    \ 1\n    sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n\
    \        elif i < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n  \
    \      elif i == 0:\n            prod = 0\n        sum_ += abs(i)\n    return\
    \ sum_ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for num in arr:\n        if num > 0:\n            sum_magn\
    \ += num\n            prod *= 1\n        elif num < 0:\n            sum_magn +=\
    \ abs(num)\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \ return sum_magn * prod\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n  \
    \      elif i == 0:\n            prod = 0\n        sum_ += abs(i)\n    return\
    \ sum_ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n\
    \        elif i == 0:\n            prod = 0\n            break\n        sum_magn\
    \ += abs(i)\n    return sum_magn * prod\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n\
    \        return sum(abs(x) for x in arr) * reduce(lambda x, y: x * y, [sign(x)\
    \ for x in arr])\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp81i74d20.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp81i74d20.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp81i74d20.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp81i74d20.py\"\
    , line 19, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, [sign(x) for x in arr])\nNameError: name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    prod =\
    \ 1\n    sum = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n\
    \        elif i < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum += abs(i)\n    return sum * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_magn += abs(num)\n    return sum_magn * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  for num in arr:\n        if num > 0:\n            prod *= 1\n        elif num\
    \ < 0:\n            prod *= -1\n        else:\n            prod *= 0\n    return\
    \ sum(abs(num) for num in arr) * prod\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  for num in arr:\n        if num > 0:\n            prod *= 1\n        elif num\
    \ < 0:\n            prod *= -1\n        else:\n            prod *= 0\n    return\
    \ sum(map(abs, arr)) * prod\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n  \
    \      elif i == 0:\n            prod = 0\n        sum_ += abs(i)\n    return\
    \ sum_ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    product = 1\n\
    \    summ = 0\n    for i in arr:\n        if i > 0:\n            product *= 1\n\
    \        elif i < 0:\n            product *= -1\n        else:\n            product\
    \ *= 0\n        summ += abs(i)\n    return summ * product\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(abs(i) for i in arr) * reduce(lambda x, y: x * y, [1 if i > 0 else\
    \ -1 if i < 0 else 0 for i in arr])\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9__hn9ej.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9__hn9ej.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp9__hn9ej.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp9__hn9ej.py\"\
    , line 19, in prod_signs\n    return sum(abs(i) for i in arr) * reduce(lambda\
    \ x, y: x * y, [1 if i > 0 else -1 if i < 0 else 0 for i in arr])\nNameError:\
    \ name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n\
    \        prod = 1\n        sum_mag = 0\n        for i in arr:\n            if\
    \ i > 0:\n                prod *= 1\n                sum_mag += i\n          \
    \  elif i < 0:\n                prod *= -1\n                sum_mag += abs(i)\n\
    \            else:\n                prod *= 0\n        return sum_mag * prod\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_magn += abs(num)\n    return sum_magn * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_mag = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_mag += abs(num)\n    return sum_mag * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        elif i == 0:\n            prod\
    \ *= 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(abs(x) for x in arr) * reduce(lambda x, y: x * y, [1 if x >= 0\
    \ else -1 for x in arr])\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd2z67jhc.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpd2z67jhc.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpd2z67jhc.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpd2z67jhc.py\"\
    , line 19, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, [1 if x >= 0 else -1 for x in arr])\nNameError: name 'reduce' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i == 0:\n            prod = 0\n   \
    \         break\n        elif i > 0:\n            prod *= 1\n        else:\n \
    \           prod *= -1\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(i)\
    \ for i in arr) * reduce(lambda x, y: x * y, [1 if i >= 0 else -1 for i in arr])\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ngr5aov.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5ngr5aov.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp5ngr5aov.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp5ngr5aov.py\"\
    , line 18, in prod_signs\n    return sum(abs(i) for i in arr) * reduce(lambda\
    \ x, y: x * y, [1 if i >= 0 else -1 for i in arr])\nNameError: name 'reduce' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    prod =\
    \ 1\n    sum_magn = 0\n    for i in arr:\n        if i == 0:\n            prod\
    \ = 0\n            break\n        elif i > 0:\n            prod *= 1\n       \
    \ else:\n            prod *= -1\n        sum_magn += abs(i)\n    return sum_magn\
    \ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_mag = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_mag += abs(num)\n    return sum_mag * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs,\
    \ arr)) * reduce(lambda x, y: x * y, map(sign, arr))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0516n79t.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0516n79t.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp0516n79t.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp0516n79t.py\"\
    , line 18, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(sign, arr))\nNameError: name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(abs(x) for x in arr) * reduce(lambda x, y: x * y, [1 if x >= 0\
    \ else -1 for x in arr])\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd2z67jhc.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpd2z67jhc.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpd2z67jhc.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpd2z67jhc.py\"\
    , line 19, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, [1 if x >= 0 else -1 for x in arr])\nNameError: name 'reduce' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_magn += abs(num)\n    return sum_magn * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n\
    \        elif i < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_magn += abs(i)\n    return sum_magn * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i < 0:\n\
    \            prod *= -1\n        else:\n            prod *= 0\n    return sum(map(abs,\
    \ arr)) * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num < 0:\n            prod *= -1\n\
    \        elif num == 0:\n            prod = 0\n        sum_ += abs(num)\n    return\
    \ sum_ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for num in arr:\n        if num > 0:\n            prod *=\
    \ 1\n        elif num < 0:\n            prod *= -1\n        else:\n          \
    \  prod *= 0\n        sum_magn += abs(num)\n    return sum_magn * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(num)\
    \ for num in arr) * reduce(lambda x, y: x * y, (1 if num >= 0 else -1 if num <\
    \ 0 else 0 for num in arr))\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphuhdqjj9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphuhdqjj9.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmphuhdqjj9.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmphuhdqjj9.py\"\
    , line 18, in prod_signs\n    return sum(abs(num) for num in arr) * reduce(lambda\
    \ x, y: x * y, (1 if num >= 0 else -1 if num < 0 else 0 for num in arr))\nNameError:\
    \ name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n   \
    \     elif i == 0:\n            prod = 0\n        sum += abs(i)\n    return sum\
    \ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(map(abs, arr)) * reduce(lambda x, y: x * y, map(lambda x: 0 if\
    \ x == 0 else x / abs(x), arr))\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_5dz8l7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpe_5dz8l7.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpe_5dz8l7.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpe_5dz8l7.py\"\
    , line 19, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: 0 if x == 0 else x / abs(x), arr))\nNameError: name 'reduce'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n  \
    \      elif i == 0:\n            prod = 0\n        sum_ += abs(i)\n    return\
    \ sum_ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    product\
    \ = 1\n    sum_of_magnitudes = 0\n    for i in arr:\n        if i == 0:\n    \
    \        product = 0\n            break\n        elif i > 0:\n            product\
    \ *= 1\n        else:\n            product *= -1\n        sum_of_magnitudes +=\
    \ abs(i)\n    return sum_of_magnitudes * product\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    signs = [1 if\
    \ x > 0 else -1 if x < 0 else 0 for x in arr]\n    return sum(abs(x) for x in\
    \ arr) * reduce(lambda x, y: x * y, signs)\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv82i_ko6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv82i_ko6.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpv82i_ko6.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpv82i_ko6.py\"\
    , line 19, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, signs)\nNameError: name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x)\
    \ for x in arr) * reduce(lambda x, y: x * y, [1 if x > 0 else -1 if x < 0 else\
    \ 0 for x in arr])\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq3jnwi2a.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpq3jnwi2a.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpq3jnwi2a.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpq3jnwi2a.py\"\
    , line 18, in prod_signs\n    return sum(abs(x) for x in arr) * reduce(lambda\
    \ x, y: x * y, [1 if x > 0 else -1 if x < 0 else 0 for x in arr])\nNameError:\
    \ name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    else:\n     \
    \   return sum(map(abs, arr)) * reduce(lambda x, y: x * y, map(sign, arr))\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx59aigj6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpx59aigj6.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpx59aigj6.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpx59aigj6.py\"\
    , line 19, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(sign, arr))\nNameError: name 'reduce' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n  \
    \      elif i == 0:\n            prod = 0\n        sum_ += abs(i)\n    return\
    \ sum_ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    prod =\
    \ 1\n    sum_magn = 0\n    for i in arr:\n        if i == 0:\n            prod\
    \ = 0\n            break\n        elif i > 0:\n            prod *= 1\n       \
    \ else:\n            prod *= -1\n        sum_magn += abs(i)\n    return sum_magn\
    \ * prod\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i == 0:\n            prod = 0\n   \
    \         break\n        elif i > 0:\n            prod *= 1\n        else:\n \
    \           prod *= -1\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_magn = 0\n    for i in arr:\n        if i < 0:\n            prod *= -1\n\
    \        elif i == 0:\n            prod = 0\n            break\n        sum_magn\
    \ += abs(i)\n    return sum_magn * prod\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n\
    \        elif num < 0:\n            prod *= -1\n        else:\n            prod\
    \ *= 0\n        sum_ += abs(num)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers\
    \ and you need to return\n    sum of magnitudes of integers multiplied by product\
    \ of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\
    \    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
    \ 2, 2, -4])\n    9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n\
    \    None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n  \
    \  sum_ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n   \
    \     elif i < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_ += abs(i)\n    return sum_ * prod\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
