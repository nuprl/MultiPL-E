language: notypes.py
name: HumanEval_77_iscube
results:
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    # YOUR CODE HERE\n    if a == 0:\n        return True\n\
    \    elif a < 0:\n        a = -a\n    for i in range(a):\n        if i**3 == a:\n\
    \            return True\n    return False\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7l62ejp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_7l62ejp.py\", line 41,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_7l62ejp.py\", line 31, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(a):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2osx37c.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpb2osx37c.py\", line 40,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpb2osx37c.py\", line 30, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a+1):\n        if i*i*i == a:\n           \
    \ return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a+1):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3)))\
    \ ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv6x_q9no.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv6x_q9no.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpv6x_q9no.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a+1):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and round(a ** (1. / 3)) ** 3\
    \ == a)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbgn463td.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbgn463td.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbgn463td.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    # YOUR CODE HERE\n    if a == 0:\n        return True\n\
    \    if a < 0:\n        a = -a\n    for i in range(1, a+1):\n        if i**3 ==\
    \ a:\n            return True\n    return False\n\ndef check(candidate):\n   \
    \ assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      return iscube(-a)\n    else:\n        return iscube_helper(a, 1)\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpavlo2e0z.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpavlo2e0z.py\", line 38,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpavlo2e0z.py\", line 28, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmpavlo2e0z.py\", line\
    \ 25, in iscube\n    return iscube_helper(a, 1)\nNameError: name 'iscube_helper'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i**3 < a:\n        i += 1\n    return i**3 == a\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    if a == 2:\n        return False\n\
    \    if a == 3:\n        return False\n    if a == 4:\n        return True\n \
    \   if a == 5:\n        return False\n    if a == 6:\n        return False\n \
    \   if a == 7:\n        return False\n    if a == 8:\n        return True\n  \
    \  if a == 9:\n        return True\n    if a == 10:\n        return False\n  \
    \  if a == 11:\n        return False\n    if a == 12:\n        return False\n\
    \    if a == 13:\n        return False\n    if a == 14:\n        return False\n\
    \    if a == 15:\n        return False\n    if a == 16:\n        return True\n\
    \    if a == 17:\n        return False\n    if a == 18:\n        return False\n\
    \    if a == 19:\n        return False\n    if a == 20:\n        return False\n\
    \    if a == 21:\n        return False\n    if a == 22:\n        return False\n\
    \    if a == 23:\n        return False\n    if a == 24:\n        return False\n\
    \    if a == 25:\n        return True\n    if a == 26:\n        return False\n\
    \    if a == 27:\n        return True\n    if a == 28:\n        return False\n\
    \    if a == 29:\n        return False\n    if a == 30:\n        return False\n\
    \    if a == 31:\n        return False\n    if a == 32:\n        return True\n\
    \    if a == 33:\n        return False\n    if a == 34:\n        return False\n\
    \    if a == 35:\n        return False\n    if a == 36:\n        return False\n\
    \    if a == 37:\n        return False\n    if a == 38:\n        return False\n\
    \    if a == 39:\n        return False\n    if a == 40:\n        return False\n\
    \    if a == 41:\n        return False\n    if a == 42:\n        return False\n\
    \    if a == 43:\n        return False\n    if a == 44:\n        return False\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5vep5m4f.py\", line 112\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i * i * i == a:\n          \
    \  return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i * i * i == a:\n          \
    \  return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        return iscube(-a)\n    if a == 0:\n\
    \        return True\n    if a == 1:\n        return True\n    if a == 2:\n  \
    \      return False\n    if a == 3:\n        return True\n    if a == 4:\n   \
    \     return False\n    if a == 5:\n        return False\n    if a == 6:\n   \
    \     return False\n    if a == 7:\n        return False\n    if a == 8:\n   \
    \     return True\n    if a == 9:\n        return True\n    if a == 10:\n    \
    \    return False\n    if a == 11:\n        return False\n    if a == 12:\n  \
    \      return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return True\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n   \ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpatyjszyv.py\", line\
    \ 126, in <module>\n    test_check()\n  File \"/tmp/tmpatyjszyv.py\", line 124,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpatyjszyv.py\", line 117,\
    \ in check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    if a == 2:\n        return False\n\
    \    if a == 3:\n        return False\n    if a == 4:\n        return True\n \
    \   if a == 5:\n        return False\n    if a == 6:\n        return False\n \
    \   if a == 7:\n        return False\n    if a == 8:\n        return True\n  \
    \  if a == 9:\n        return True\n    if a == 10:\n        return False\n  \
    \  if a == 11:\n        return False\n    if a == 12:\n        return False\n\
    \    if a == 13:\n        return False\n    if a == 14:\n        return False\n\
    \    if a == 15:\n        return False\n    if a == 16:\n        return True\n\
    \    if a == 17:\n        return False\n    if a == 18:\n        return False\n\
    \    if a == 19:\n        return False\n    if a == 20:\n        return False\n\
    \    if a == 21:\n        return False\n    if a == 22:\n        return False\n\
    \    if a == 23:\n        return False\n    if a == 24:\n        return False\n\
    \    if a == 25:\n        return True\n    if a == 26:\n        return False\n\
    \    if a == 27:\n        return True\n    if a == 28:\n        return False\n\
    \    if a == 29:\n        return False\n    if a == 30:\n        return False\n\
    \    if a == 31:\n        return False\n    if a == 32:\n        return True\n\
    \    if a == 33:\n        return False\n    if a == 34:\n        return False\n\
    \    if a == 35:\n        return False\n    if a == 36:\n        return False\n\
    \    if a == 37:\n        return False\n    if a == 38:\n        return False\n\
    \    if a == 39:\n        return False\n    if a == 40:\n        return False\n\
    \    if a == 41:\n        return False\n    if a == 42:\n        return False\n\
    \    if a == 43:\n        return False\n    if a == 44:\n        return False\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5vep5m4f.py\", line 112\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0680ed9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpf0680ed9.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpf0680ed9.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and a == round(a ** (1. / 3)))\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9mt47hvb.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9mt47hvb.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9mt47hvb.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n      \
    \      return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(a+1):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    for i in range(2, a):\n     \
    \   if i ** 3 == a:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a+1):\n        if i*i*i == a:\n           \
    \ return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    if a == 2:\n        return False\n\
    \    if a == 3:\n        return False\n    if a == 4:\n        return True\n \
    \   if a == 5:\n        return False\n    if a == 6:\n        return False\n \
    \   if a == 7:\n        return False\n    if a == 8:\n        return True\n  \
    \  if a == 9:\n        return True\n    if a == 10:\n        return False\n  \
    \  if a == 11:\n        return False\n    if a == 12:\n        return False\n\
    \    if a == 13:\n        return False\n    if a == 14:\n        return False\n\
    \    if a == 15:\n        return False\n    if a == 16:\n        return True\n\
    \    if a == 17:\n        return False\n    if a == 18:\n        return False\n\
    \    if a == 19:\n        return False\n    if a == 20:\n        return False\n\
    \    if a == 21:\n        return False\n    if a == 22:\n        return False\n\
    \    if a == 23:\n        return False\n    if a == 24:\n        return False\n\
    \    if a == 25:\n        return True\n    if a == 26:\n        return False\n\
    \    if a == 27:\n        return True\n    if a == 28:\n        return False\n\
    \    if a == 29:\n        return False\n    if a == 30:\n        return False\n\
    \    if a == 31:\n        return False\n    if a == 32:\n        return True\n\
    \    if a == 33:\n        return False\n    if a == 34:\n        return False\n\
    \    if a == 35:\n        return False\n    if a == 36:\n        return False\n\
    \    if a == 37:\n        return False\n    if a == 38:\n        return False\n\
    \    if a == 39:\n        return False\n    if a == 40:\n        return False\n\
    \    if a == 41:\n        return False\n    if a == 42:\n        return False\n\
    \    if a == 43:\n        return False\n    if a == 44:\n        return False\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5vep5m4f.py\", line 112\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a+1):\n        if i**3 == a:\n          \
    \  return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a+1):\n        if i*i*i == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    # YOUR CODE HERE\n    if a == 0:\n        return True\n\
    \    elif a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i\
    \ ** 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(a):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10zho6fi.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp10zho6fi.py\", line 41,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp10zho6fi.py\", line 31, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    for i in range(2, a):\n     \
    \   if i ** 3 == a:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(a):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcsu_3gy7.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpcsu_3gy7.py\", line 40,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcsu_3gy7.py\", line 30, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or abs(a) == round(abs(a) ** (1. / 3))\
    \ ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0680ed9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpf0680ed9.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpf0680ed9.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    for i in range(1, a):\n     \
    \   if i * i * i == a:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    for i in range(1, a+1):\n   \
    \     if i*i*i == a:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a+1):\n        if i*i*i == a:\n         \
    \   return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a+1):\n        if i**3 == a:\n          \
    \  return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n      \
    \      return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a+1):\n        if i**3 == a:\n          \
    \  return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a+1):\n        if i*i*i == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i**3 <= a:\n        if i**3 == a:\n            return\
    \ True\n        i += 1\n    return False\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    if a == 2:\n        return False\n\
    \    if a == 3:\n        return False\n    if a == 4:\n        return True\n \
    \   if a == 5:\n        return False\n    if a == 6:\n        return False\n \
    \   if a == 7:\n        return False\n    if a == 8:\n        return True\n  \
    \  if a == 9:\n        return True\n    if a == 10:\n        return False\n  \
    \  if a == 11:\n        return False\n    if a == 12:\n        return False\n\
    \    if a == 13:\n        return False\n    if a == 14:\n        return False\n\
    \    if a == 15:\n        return False\n    if a == 16:\n        return True\n\
    \    if a == 17:\n        return False\n    if a == 18:\n        return False\n\
    \    if a == 19:\n        return False\n    if a == 20:\n        return False\n\
    \    if a == 21:\n        return False\n    if a == 22:\n        return False\n\
    \    if a == 23:\n        return False\n    if a == 24:\n        return False\n\
    \    if a == 25:\n        return True\n    if a == 26:\n        return False\n\
    \    if a == 27:\n        return True\n    if a == 28:\n        return False\n\
    \    if a == 29:\n        return False\n    if a == 30:\n        return False\n\
    \    if a == 31:\n        return False\n    if a == 32:\n        return True\n\
    \    if a == 33:\n        return False\n    if a == 34:\n        return False\n\
    \    if a == 35:\n        return False\n    if a == 36:\n        return False\n\
    \    if a == 37:\n        return False\n    if a == 38:\n        return False\n\
    \    if a == 39:\n        return False\n    if a == 40:\n        return False\n\
    \    if a == 41:\n        return False\n    if a == 42:\n        return False\n\
    \    if a == 43:\n        return False\n    if a == 44:\n        return False\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5vep5m4f.py\", line 112\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i*i*i <= a:\n        if i*i*i == a:\n           \
    \ return True\n        i += 1\n    return False\n\ndef check(candidate):\n   \
    \ assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    # YOUR CODE HERE\n    if a == 0:\n        return True\n\
    \    if a < 0:\n        a = -a\n    for i in range(1, a+1):\n        if i*i*i\
    \ == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i**3 <= a:\n        if i**3 == a:\n            return\
    \ True\n        i += 1\n    return False\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and a == int(round(a\
    \ ** (1.0 / 3))))\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsm0cdfz6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpsm0cdfz6.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpsm0cdfz6.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n      \
    \      return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a+1):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a in [i**3 for i in range(abs(a)+1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0thuapxv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0thuapxv.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0thuapxv.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    for i in range(2, a):\n     \
    \   if i * i * i == a:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    for i in range(1, a):\n     \
    \   if i * i * i == a:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a+1):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6zb8kwj4.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp6zb8kwj4.py\", line 40,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6zb8kwj4.py\", line 30, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 ==\
    \ a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjp9py6k3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpjp9py6k3.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjp9py6k3.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        return iscube(-a)\n    if a == 0:\n\
    \        return True\n    if a == 1:\n        return True\n    if a == 2:\n  \
    \      return False\n    if a == 3:\n        return True\n    if a == 4:\n   \
    \     return False\n    if a == 5:\n        return False\n    if a == 6:\n   \
    \     return False\n    if a == 7:\n        return False\n    if a == 8:\n   \
    \     return True\n    if a == 9:\n        return True\n    if a == 10:\n    \
    \    return False\n    if a == 11:\n        return False\n    if a == 12:\n  \
    \      return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return True\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n   \ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpatyjszyv.py\", line\
    \ 126, in <module>\n    test_check()\n  File \"/tmp/tmpatyjszyv.py\", line 124,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpatyjszyv.py\", line 117,\
    \ in check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i**3 < a:\n        i += 1\n    return i**3 == a\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a+1):\n        if i*i*i == a:\n           \
    \ return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(a):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcsu_3gy7.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpcsu_3gy7.py\", line 40,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcsu_3gy7.py\", line 30, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i * i * i == a:\n          \
    \  return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a in [i**3 for i in range(abs(a)+1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0thuapxv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0thuapxv.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0thuapxv.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3)))\
    \ ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp14qdiajl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp14qdiajl.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp14qdiajl.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    i = 1\n    while i ** 3 < a:\n        i += 1\n    return i\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i * i * i <= a:\n        if i * i * i == a:\n   \
    \         return True\n        i += 1\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and a**(1/3) % 1 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjlu4xz7s.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpjlu4xz7s.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjlu4xz7s.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and a**(1/3) == int(a**(1/3)))\
    \ or (a < 0 and a**(1/3) == int(a**(1/3)))\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr6p_insk.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpr6p_insk.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpr6p_insk.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpr6p_insk.py\", line\
    \ 20, in iscube\n    return a == 0 or a == 1 or (a > 0 and a**(1/3) == int(a**(1/3)))\
    \ or (a < 0 and a**(1/3) == int(a**(1/3)))\nTypeError: int() argument must be\
    \ a string, a bytes-like object or a real number, not 'complex'\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i * i * i <= a:\n        if i * i * i == a:\n   \
    \         return True\n        i += 1\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or abs(a) == abs(a) ** (1. / 3)\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgpntjsh4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgpntjsh4.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpgpntjsh4.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a+1):\n        if i**3 == a:\n          \
    \  return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i * i * i <= a:\n        if i * i * i == a:\n   \
    \         return True\n        i += 1\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a):\n        if i * i * i == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0nlk_jw8.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp0nlk_jw8.py\", line 40,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0nlk_jw8.py\", line 30, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 ==\
    \ a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjp9py6k3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpjp9py6k3.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjp9py6k3.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    if a == 2:\n        return False\n\
    \    if a == 3:\n        return False\n    if a == 4:\n        return True\n \
    \   if a == 5:\n        return False\n    if a == 6:\n        return False\n \
    \   if a == 7:\n        return False\n    if a == 8:\n        return True\n  \
    \  if a == 9:\n        return True\n    if a == 10:\n        return False\n  \
    \  if a == 11:\n        return False\n    if a == 12:\n        return False\n\
    \    if a == 13:\n        return False\n    if a == 14:\n        return False\n\
    \    if a == 15:\n        return False\n    if a == 16:\n        return True\n\
    \    if a == 17:\n        return False\n    if a == 18:\n        return False\n\
    \    if a == 19:\n        return False\n    if a == 20:\n        return False\n\
    \    if a == 21:\n        return False\n    if a == 22:\n        return False\n\
    \    if a == 23:\n        return False\n    if a == 24:\n        return False\n\
    \    if a == 25:\n        return True\n    if a == 26:\n        return False\n\
    \    if a == 27:\n        return True\n    if a == 28:\n        return False\n\
    \    if a == 29:\n        return False\n    if a == 30:\n        return False\n\
    \    if a == 31:\n        return False\n    if a == 32:\n        return True\n\
    \    if a == 33:\n        return False\n    if a == 34:\n        return False\n\
    \    if a == 35:\n        return False\n    if a == 36:\n        return False\n\
    \    if a == 37:\n        return False\n    if a == 38:\n        return False\n\
    \    if a == 39:\n        return False\n    if a == 40:\n        return False\n\
    \    if a == 41:\n        return False\n    if a == 42:\n        return False\n\
    \    if a == 43:\n        return False\n    if a == 44:\n        return False\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5vep5m4f.py\", line 112\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    return a == 0 or int(a\
    \ ** (1/3)) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph10upt2_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmph10upt2_.py\", line 36,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmph10upt2_.py\", line 29, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    return a == 0 or int(a\
    \ ** (1.0 / 3.0)) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsblbweco.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpsblbweco.py\", line 35,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpsblbweco.py\", line 28, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    # YOUR CODE HERE\n    if a == 0:\n        return True\n\
    \    elif a < 0:\n        return iscube(-a)\n    else:\n        return iscube_helper(a,\
    \ 1)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1oz8ewoi.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1oz8ewoi.py\", line 39,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1oz8ewoi.py\", line 29, in\
    \ check\n    assert candidate(1) == True\n  File \"/tmp/tmp1oz8ewoi.py\", line\
    \ 26, in iscube\n    return iscube_helper(a, 1)\nNameError: name 'iscube_helper'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1/3)) ** 3 == a)\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbuygm4s3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbuygm4s3.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbuygm4s3.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or abs(a) == round(abs(a) ** (1. / 3))\
    \ ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and a ** (1 / 3) % 1 == 0)\n\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpubm33csh.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpubm33csh.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpubm33csh.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    i = 1\n    while i**3 < a:\n        i += 1\n    if i**3 ==\
    \ a:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        return iscube(-a)\n    if a == 0:\n\
    \        return True\n    if a == 1:\n        return True\n    if a == 2:\n  \
    \      return False\n    if a == 3:\n        return True\n    if a == 4:\n   \
    \     return False\n    if a == 5:\n        return False\n    if a == 6:\n   \
    \     return False\n    if a == 7:\n        return False\n    if a == 8:\n   \
    \     return True\n    if a == 9:\n        return True\n    if a == 10:\n    \
    \    return False\n    if a == 11:\n        return False\n    if a == 12:\n  \
    \      return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return True\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n   \ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpatyjszyv.py\", line\
    \ 126, in <module>\n    test_check()\n  File \"/tmp/tmpatyjszyv.py\", line 124,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpatyjszyv.py\", line 117,\
    \ in check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3)))\
    \ ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp14qdiajl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp14qdiajl.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp14qdiajl.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or a == 8 or a ==\
    \ 27 or a == -8 or a == -27 or a == 64 or a == -64 or a == 125 or a == -125 or\
    \ a == 216 or a == -216 or a == 343 or a == -343 or a == 512 or a == -512 or a\
    \ == 729 or a == -729 or a == 1000 or a == -1000 or a == 1331 or a == -1331 or\
    \ a == 1728 or a == -1728 or a == 2197 or a == -2197 or a == 2744 or a == -2744\
    \ or a == 3375 or a == -3375 or a == 4096 or a == -4096 or a == 4913 or a == -4913\
    \ or a == 5832 or a == -5832 or a == 6859 or a == -6859 or a == 8000 or a == -8000\
    \ or a == 9261 or a == -9261 or a == 10648 or a == -10648 or a == 12167 or a ==\
    \ -12167 or a == 13824 or a == -13824 or a == 15625 or a == -15625 or a == 17576\
    \ or a == -17576 or a == 19683 or a == -19683 or a == 21952 or a == -21952 or\
    \ a == 24389 or a == -24389 or a == 27000 or a == -27000 or a == 29791 or a ==\
    \ -29791 or a == 32768 or a == -32768 or a == 35937 or a == -35937 or a == 39304\
    \ or a == -39304 or a == 42875 or a == -42875 or a == 46656 or a == -46656 or\
    \ a == 50653 or a == -50653 or a == 54872 or a == -54872 or a == 59319 or a ==\
    \ -59319 or a == 64000 or a == -64000 or a == 68921 or a == -68921 or a == 74088\
    \ or a == -74088 or a == 79507 or a == -79507 or a == 85184 or a == -85184 or\
    \ a == 91125 or a == -91125 or a == 97336 or a == -97336 or a == 103823 or a ==\
    \ -103823 or a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi51al9lx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpi51al9lx.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpi51al9lx.py\", line 23, in\
    \ check\n    assert candidate(2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i**3 < a:\n        i += 1\n    return i**3 == a\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a+1):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    if a == 1:\n        return True\n    if a == 2:\n        return\
    \ False\n    if a == 3:\n        return True\n    if a == 4:\n        return False\n\
    \    if a == 5:\n        return False\n    if a == 6:\n        return False\n\
    \    if a == 7:\n        return False\n    if a == 8:\n        return True\n \
    \   if a == 9:\n        return True\n    if a == 10:\n        return False\n \
    \   if a == 11:\n        return False\n    if a == 12:\n        return False\n\
    \    if a == 13:\n        return False\n    if a == 14:\n        return False\n\
    \    if a == 15:\n        return False\n    if a == 16:\n        return True\n\
    \    if a == 17:\n        return False\n    if a == 18:\n        return False\n\
    \    if a == 19:\n        return False\n    if a == 20:\n        return False\n\
    \    if a == 21:\n        return False\n    if a == 22:\n        return False\n\
    \    if a == 23:\n        return False\n    if a == 24:\n        return False\n\
    \    if a == 25:\n        return True\n    if a == 26:\n        return False\n\
    \    if a == 27:\n        return True\n    if a == 28:\n        return False\n\
    \    if a == 29:\n        return False\n    if a == 30:\n        return False\n\
    \    if a == 31:\n        return False\n    if a == 32:\n        return False\n\
    \    if a == 33:\n        return False\n    if a == 34:\n        return False\n\
    \    if a == 35:\n        return False\n    if a == 36:\n        return False\n\
    \    if a == 37:\n        return False\n    if a == 38:\n        return False\n\
    \    if a == 39:\n        return False\n    if a == 40:\n        return False\n\
    \    if a == 41:\n        return False\n    if a == 42:\n        return False\n\
    \    if a == 43:\n        return False\n    if a == 44:\n        return False\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp73r4m5i5.py\", line 112\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a ==\
    \ int(a ** (1 / 3)) ** 3) or (a < 0 and a == -int(-a ** (1 / 3)) ** 3)\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6aqbbvl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpi6aqbbvl.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpi6aqbbvl.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and a == round(a ** (1. / 3)))\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0b5o2u72.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0b5o2u72.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0b5o2u72.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return (a == 0) or (a == 1) or (a == -1) or (a > 0 and\
    \ a == int(round(a ** (1. / 3)))) or (a < 0 and a == int(round(a ** (1. / 3))))\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkt9gfhbw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkt9gfhbw.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpkt9gfhbw.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(a):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcsu_3gy7.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpcsu_3gy7.py\", line 40,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcsu_3gy7.py\", line 30, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0680ed9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpf0680ed9.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpf0680ed9.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a+1):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3)))\
    \ ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp14qdiajl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp14qdiajl.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp14qdiajl.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or int(abs(a) ** (1. / 3)) ** 3 == abs(a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdz212dd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvdz212dd.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvdz212dd.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a in [x**3 for x in range(abs(a)+1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxrh_yjz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmprxrh_yjz.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmprxrh_yjz.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a >= 0 and a**(1/3) % 1 == 0\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpao1n2jz5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpao1n2jz5.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpao1n2jz5.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i ** 3 <= a:\n        if i ** 3 == a:\n         \
    \   return True\n        i += 1\n    return False\n\ndef check(candidate):\n \
    \   assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or a == 8 or a ==\
    \ 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729 or\
    \ a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375 or\
    \ a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261 or\
    \ a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a == 19683\
    \ or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768 or a ==\
    \ 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a == 54872\
    \ or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507 or a ==\
    \ 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a == 117649\
    \ or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a == 157464 or\
    \ a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379 or a\
    \ == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or a ==\
    \ 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a == 343000\
    \ or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a == 421875 or\
    \ a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000 or a\
    \ == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or a ==\
    \ 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a == 753571\
    \ or a == 778688 or a == 804357 or a == 830584 or a == 857\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a**(1/3)\
    \ == int(a**(1/3))) or (a < 0 and a**(1/3) == int(a**(1/3)))\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xj8azur.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9xj8azur.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9xj8azur.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i**3 < a:\n        i += 1\n    return i**3 == a\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a+1):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and a == int(a ** (1.0 / 3)))\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwguau0pq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpwguau0pq.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwguau0pq.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i * i * i == a:\n     \
    \       return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i * i * i == a:\n     \
    \       return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n      \
    \      return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    for i in range(1, a):\n     \
    \   if i ** 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 ==\
    \ a)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsxc8jnc8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpsxc8jnc8.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpsxc8jnc8.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a ==\
    \ int(a ** (1/3))) or (a < 0 and a == int(a ** (1/3)))\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm60dlfgj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpm60dlfgj.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpm60dlfgj.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    i = 1\n    while i**3 < a:\n        i += 1\n    return i**3 ==\
    \ a\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    if a == 1:\n        return True\n    if a == 2:\n        return\
    \ False\n    if a == 3:\n        return True\n    if a == 4:\n        return False\n\
    \    if a == 5:\n        return False\n    if a == 6:\n        return False\n\
    \    if a == 7:\n        return False\n    if a == 8:\n        return True\n \
    \   if a == 9:\n        return True\n    if a == 10:\n        return False\n \
    \   if a == 11:\n        return False\n    if a == 12:\n        return False\n\
    \    if a == 13:\n        return False\n    if a == 14:\n        return False\n\
    \    if a == 15:\n        return False\n    if a == 16:\n        return True\n\
    \    if a == 17:\n        return False\n    if a == 18:\n        return False\n\
    \    if a == 19:\n        return False\n    if a == 20:\n        return False\n\
    \    if a == 21:\n        return False\n    if a == 22:\n        return False\n\
    \    if a == 23:\n        return False\n    if a == 24:\n        return False\n\
    \    if a == 25:\n        return True\n    if a == 26:\n        return False\n\
    \    if a == 27:\n        return True\n    if a == 28:\n        return False\n\
    \    if a == 29:\n        return False\n    if a == 30:\n        return False\n\
    \    if a == 31:\n        return False\n    if a == 32:\n        return False\n\
    \    if a == 33:\n        return False\n    if a == 34:\n        return False\n\
    \    if a == 35:\n        return False\n    if a == 36:\n        return False\n\
    \    if a == 37:\n        return False\n    if a == 38:\n        return False\n\
    \    if a == 39:\n        return False\n    if a == 40:\n        return False\n\
    \    if a == 41:\n        return False\n    if a == 42:\n        return False\n\
    \    if a == 43:\n        return False\n    if a == 44:\n        return False\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp73r4m5i5.py\", line 112\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    i = 1\n    while i**3 < a:\n        i += 1\n    if i**3 ==\
    \ a:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i * i * i == a:\n     \
    \       return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a + 1):\n        if i * i * i == a:\n   \
    \         return True\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and round(a ** (1. / 3)) ** 3\
    \ == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpow_nc8ry.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpow_nc8ry.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpow_nc8ry.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    i = 1\n    while i**3 < a:\n        i += 1\n    if i**3 ==\
    \ a:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i ** 3 <= a:\n        if i ** 3 == a:\n         \
    \   return True\n        i += 1\n    return False\n\ndef check(candidate):\n \
    \   assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    if a == 1:\n        return True\n    for i in range(1, a):\n\
    \        if i * i * i == a:\n            return True\n    return False\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0680ed9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpf0680ed9.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpf0680ed9.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a+1):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    if a == 2:\n        return False\n\
    \    if a == 3:\n        return False\n    if a == 4:\n        return True\n \
    \   if a == 5:\n        return False\n    if a == 6:\n        return False\n \
    \   if a == 7:\n        return False\n    if a == 8:\n        return True\n  \
    \  if a == 9:\n        return True\n    if a == 10:\n        return False\n  \
    \  if a == 11:\n        return False\n    if a == 12:\n        return False\n\
    \    if a == 13:\n        return False\n    if a == 14:\n        return False\n\
    \    if a == 15:\n        return False\n    if a == 16:\n        return True\n\
    \    if a == 17:\n        return False\n    if a == 18:\n        return False\n\
    \    if a == 19:\n        return False\n    if a == 20:\n        return False\n\
    \    if a == 21:\n        return False\n    if a == 22:\n        return False\n\
    \    if a == 23:\n        return False\n    if a == 24:\n        return False\n\
    \    if a == 25:\n        return True\n    if a == 26:\n        return False\n\
    \    if a == 27:\n        return True\n    if a == 28:\n        return False\n\
    \    if a == 29:\n        return False\n    if a == 30:\n        return False\n\
    \    if a == 31:\n        return False\n    if a == 32:\n        return True\n\
    \    if a == 33:\n        return False\n    if a == 34:\n        return False\n\
    \    if a == 35:\n        return False\n    if a == 36:\n        return False\n\
    \    if a == 37:\n        return False\n    if a == 38:\n        return False\n\
    \    if a == 39:\n        return False\n    if a == 40:\n        return False\n\
    \    if a == 41:\n        return False\n    if a == 42:\n        return False\n\
    \    if a == 43:\n        return False\n    if a == 44:\n        return False\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5vep5m4f.py\", line 112\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    # YOUR CODE HERE\n    if a < 0:\n        a = -a\n   \
    \ for i in range(a+1):\n        if i**3 == a:\n            return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a+1):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 3 == 0)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdo2blcs.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxdo2blcs.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxdo2blcs.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and a ** (1.0 / 3) % 1 == 0)\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7rd1jpc6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7rd1jpc6.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7rd1jpc6.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i**3 < a:\n        i += 1\n    if i**3 == a:\n  \
    \      return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    return a == int(a ** (1/3)) ** 3\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4140vlpp.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4140vlpp.py\", line 37,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4140vlpp.py\", line 30, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return (a >= 0 and a == round(a ** (1. / 3))) or (a <\
    \ 0 and a == round(-a ** (1. / 3)))\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvaku9wkl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpvaku9wkl.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvaku9wkl.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpvaku9wkl.py\", line\
    \ 20, in iscube\n    return (a >= 0 and a == round(a ** (1. / 3))) or (a < 0 and\
    \ a == round(-a ** (1. / 3)))\nTypeError: type complex doesn't define __round__\
    \ method\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3)))\
    \ ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv6x_q9no.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv6x_q9no.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpv6x_q9no.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a == -1) or (a\
    \ > 0 and a == int(a ** (1 / 3)) ** 3)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_asafsm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd_asafsm.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpd_asafsm.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    for i in range(1, a):\n     \
    \   if i * i * i == a:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    for i in range(1, a):\n     \
    \   if i * i * i == a:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i * i * i == a:\n     \
    \       return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a+1):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    for i in range(2, a):\n     \
    \   if i ** 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n      \
    \      return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    if a == 2:\n        return False\n\
    \    if a == 3:\n        return False\n    if a == 4:\n        return True\n \
    \   if a == 5:\n        return False\n    if a == 6:\n        return False\n \
    \   if a == 7:\n        return False\n    if a == 8:\n        return True\n  \
    \  if a == 9:\n        return True\n    if a == 10:\n        return False\n  \
    \  if a == 11:\n        return False\n    if a == 12:\n        return False\n\
    \    if a == 13:\n        return False\n    if a == 14:\n        return False\n\
    \    if a == 15:\n        return False\n    if a == 16:\n        return True\n\
    \    if a == 17:\n        return False\n    if a == 18:\n        return False\n\
    \    if a == 19:\n        return False\n    if a == 20:\n        return False\n\
    \    if a == 21:\n        return False\n    if a == 22:\n        return False\n\
    \    if a == 23:\n        return False\n    if a == 24:\n        return False\n\
    \    if a == 25:\n        return True\n    if a == 26:\n        return False\n\
    \    if a == 27:\n        return True\n    if a == 28:\n        return False\n\
    \    if a == 29:\n        return False\n    if a == 30:\n        return False\n\
    \    if a == 31:\n        return False\n    if a == 32:\n        return True\n\
    \    if a == 33:\n        return False\n    if a == 34:\n        return False\n\
    \    if a == 35:\n        return False\n    if a == 36:\n        return False\n\
    \    if a == 37:\n        return False\n    if a == 38:\n        return False\n\
    \    if a == 39:\n        return False\n    if a == 40:\n        return False\n\
    \    if a == 41:\n        return False\n    if a == 42:\n        return False\n\
    \    if a == 43:\n        return False\n    if a == 44:\n        return False\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5vep5m4f.py\", line 112\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and a**(1/3) == int(a**(1/3)))\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp57u6tgk7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp57u6tgk7.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp57u6tgk7.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0680ed9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpf0680ed9.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpf0680ed9.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0680ed9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpf0680ed9.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpf0680ed9.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    # YOUR CODE HERE\n    if a == 0:\n        return True\n\
    \    elif a < 0:\n        a = -a\n    for i in range(1, a+1):\n        if i**3\
    \ == a:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    # YOUR CODE HERE\n    if a == 0:\n        return True\n\
    \    if a < 0:\n        a = -a\n    for i in range(1, a+1):\n        if i**3 ==\
    \ a:\n            return True\n    return False\n\n\ndef check(candidate):\n \
    \   assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3)))\
    \ ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv6x_q9no.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv6x_q9no.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpv6x_q9no.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or a == 8 or a ==\
    \ 27 or a == -8 or a == -27 or a == 64 or a == -64 or a == 125 or a == -125 or\
    \ a == 216 or a == -216 or a == 343 or a == -343 or a == 512 or a == -512 or a\
    \ == 729 or a == -729 or a == 1000 or a == -1000 or a == 1331 or a == -1331 or\
    \ a == 1728 or a == -1728 or a == 2197 or a == -2197 or a == 2744 or a == -2744\
    \ or a == 3375 or a == -3375 or a == 4096 or a == -4096 or a == 4913 or a == -4913\
    \ or a == 5832 or a == -5832 or a == 6859 or a == -6859 or a == 8000 or a == -8000\
    \ or a == 9261 or a == -9261 or a == 10648 or a == -10648 or a == 12167 or a ==\
    \ -12167 or a == 13824 or a == -13824 or a == 15625 or a == -15625 or a == 17576\
    \ or a == -17576 or a == 19683 or a == -19683 or a == 21952 or a == -21952 or\
    \ a == 24389 or a == -24389 or a == 27000 or a == -27000 or a == 29791 or a ==\
    \ -29791 or a == 32768 or a == -32768 or a == 35937 or a == -35937 or a == 39304\
    \ or a == -39304 or a == 42875 or a == -42875 or a == 46656 or a == -46656 or\
    \ a == 50653 or a == -50653 or a == 54872 or a == -54872 or a == 59319 or a ==\
    \ -59319 or a == 64000 or a == -64000 or a == 68921 or a == -68921 or a == 74088\
    \ or a == -74088 or a == 79507 or a == -79507 or a == 85184 or a == -85184 or\
    \ a == 91125 or a == -91125 or a == 97336 or a == -97336 or a == 103823 or a ==\
    \ -103823 or a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi51al9lx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpi51al9lx.py\", line 32,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpi51al9lx.py\", line 23, in\
    \ check\n    assert candidate(2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    # YOUR CODE HERE\n    if a == 0:\n        return True\n\
    \    elif a < 0:\n        a = -a\n    for i in range(1, a+1):\n        if i*i*i\
    \ == a:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a+1):\n        if i**3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a in [i**3 for i in range(abs(a)+1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0thuapxv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0thuapxv.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0thuapxv.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or\
    \ (a > 0 and a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lfkd88d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9lfkd88d.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9lfkd88d.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(a):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvaw94p5x.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpvaw94p5x.py\", line 40,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvaw94p5x.py\", line 30, in\
    \ check\n    assert candidate(1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    for i in range(1, a):\n     \
    \   if i ** 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or (a > 0 and a**(1/3) == int(a**(1/3)))\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp57u6tgk7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp57u6tgk7.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp57u6tgk7.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    i = 1\n    while i**3 < a:\n        i += 1\n    if i**3 ==\
    \ a:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and a == round(a **\
    \ (1.0 / 3)))\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxmh8_rbr.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxmh8_rbr.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxmh8_rbr.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    for i in range(2, a):\n     \
    \   if i * i * i == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a ==\
    \ int(round(a ** (1.0 / 3.0)))) or (a < 0 and a == int(round(a ** (1.0 / 3.0))))\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpywa4niae.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpywa4niae.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpywa4niae.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    i = 1\n    while i ** 3 <= a:\n        if i ** 3 == a:\n         \
    \   return True\n        i += 1\n    return False\n\ndef check(candidate):\n \
    \   assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n      \
    \      return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: -1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    return a >= 0 and a == round(a ** (1. / 3)) ** 3\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqje1o9ip.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqje1o9ip.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpqje1o9ip.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    if a == 1:\n        return True\n    for i in range(2, a):\n\
    \        if i ** 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 1
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return\
    \ True\n    if a == 1:\n        return True\n    if a == 2:\n        return False\n\
    \    if a == 3:\n        return False\n    if a == 4:\n        return True\n \
    \   if a == 5:\n        return False\n    if a == 6:\n        return False\n \
    \   if a == 7:\n        return False\n    if a == 8:\n        return True\n  \
    \  if a == 9:\n        return True\n    if a == 10:\n        return False\n  \
    \  if a == 11:\n        return False\n    if a == 12:\n        return False\n\
    \    if a == 13:\n        return False\n    if a == 14:\n        return False\n\
    \    if a == 15:\n        return False\n    if a == 16:\n        return True\n\
    \    if a == 17:\n        return False\n    if a == 18:\n        return False\n\
    \    if a == 19:\n        return False\n    if a == 20:\n        return False\n\
    \    if a == 21:\n        return False\n    if a == 22:\n        return False\n\
    \    if a == 23:\n        return False\n    if a == 24:\n        return False\n\
    \    if a == 25:\n        return True\n    if a == 26:\n        return False\n\
    \    if a == 27:\n        return True\n    if a == 28:\n        return False\n\
    \    if a == 29:\n        return False\n    if a == 30:\n        return False\n\
    \    if a == 31:\n        return False\n    if a == 32:\n        return True\n\
    \    if a == 33:\n        return False\n    if a == 34:\n        return False\n\
    \    if a == 35:\n        return False\n    if a == 36:\n        return False\n\
    \    if a == 37:\n        return False\n    if a == 38:\n        return False\n\
    \    if a == 39:\n        return False\n    if a == 40:\n        return False\n\
    \    if a == 41:\n        return False\n    if a == 42:\n        return False\n\
    \    if a == 43:\n        return False\n    if a == 44:\n        return False\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5vep5m4f.py\", line 112\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n  \
    \      a = -a\n    for i in range(1, a+1):\n        if i**3 == a:\n          \
    \  return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
- exit_code: 0
  program: "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a cube of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n\
    \    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>>\
    \ iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n   \
    \ False\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n    \
    \    a = -a\n    for i in range(1, a + 1):\n        if i ** 3 == a:\n        \
    \    return True\n    return False\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270945
