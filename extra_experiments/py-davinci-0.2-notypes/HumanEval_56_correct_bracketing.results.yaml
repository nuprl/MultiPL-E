language: notypes.py
name: HumanEval_56_correct_bracketing
results:
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    if len(brackets) == 0:\n        return True\n    elif\
    \ brackets[0] == '<':\n        return correct_bracketing(brackets[1:])\n    elif\
    \ brackets[0] == '>':\n        return False\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_fr759g2.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp_fr759g2.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_fr759g2.py\"\
    , line 24, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        else:\n            count -= 1\n      \
    \  if count < 0:\n            return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    return brackets.count('<') == brackets.count('>')\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzabwaoq7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzabwaoq7.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzabwaoq7.py\"\
    , line 22, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    if brackets == \"\":\n        return True\n    elif\
    \ brackets[0] == '<':\n        if brackets[-1] == '>':\n            return correct_bracketing(brackets[1:-1])\n\
    \        else:\n            return False\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb__w7qs7.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpb__w7qs7.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpb__w7qs7.py\"\
    , line 26, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    # Hint: use a stack\n    stack = Stack()\n    for\
    \ bracket in brackets:\n        if bracket == '<':\n            stack.push(bracket)\n\
    \        elif bracket == '>':\n            if stack.is_empty():\n            \
    \    return False\n            else:\n                stack.pop()\n    return\
    \ stack.is_empty()\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_l7aopgd.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_l7aopgd.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_l7aopgd.py\"\
    , line 27, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp_l7aopgd.py\"\
    , line 15, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined. Did you mean: 'stack'?\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '<':\n            count += 1\n        elif char == '>':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '<':\n            count += 1\n        else:\n            count -= 1\n   \
    \     if count < 0:\n            return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == '<':\n        return correct_bracketing(brackets[1:])\n    elif\
    \ brackets[0] == '>':\n        return correct_bracketing(brackets[1:])\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk85xjci6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpk85xjci6.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpk85xjci6.py\"\
    , line 28, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '<':\n            count += 1\n        elif char == '>':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for b in brackets:\n        if b ==\
    \ '<':\n            count += 1\n        elif b == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ bracket in brackets:\n        if bracket == '<':\n            count += 1\n \
    \       elif bracket == '>':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == '<':\n        return correct_bracketing(brackets[1:])\n    elif\
    \ brackets[0] == '>':\n        return False\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz4_qm9ni.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz4_qm9ni.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpz4_qm9ni.py\"\
    , line 24, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    if len(brackets) == 0:\n        return True\n    elif\
    \ brackets[0] == '<':\n        return correct_bracketing(brackets[1:])\n    elif\
    \ brackets[0] == '>':\n        return False\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_fr759g2.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp_fr759g2.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_fr759g2.py\"\
    , line 24, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '<':\n            count += 1\n        elif char == '>':\n            count\
    \ -= 1\n            if count < 0:\n                return False\n    return count\
    \ == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '<':\n            count += 1\n        elif char == '>':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for b in brackets:\n        if b ==\
    \ '<':\n            count += 1\n        elif b == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n            if count < 0:\n                return False\n\
    \    return count == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    # count = 0\n    # for bracket in brackets:\n    #\
    \     if bracket == '<':\n    #         count += 1\n    #     elif bracket ==\
    \ '>':\n    #         count -= 1\n    #     if count < 0:\n    #         return\
    \ False\n    # return count == 0\n    #\n    # count = 0\n    # for bracket in\
    \ brackets:\n    #     if bracket == '<':\n    #         count += 1\n    #   \
    \  elif bracket == '>':\n    #         count -= 1\n    #         if count < 0:\n\
    \    #             return False\n    # return count == 0\n    #\n    # count =\
    \ 0\n    # for bracket in brackets:\n    #     if bracket == '<':\n    #     \
    \    count += 1\n    #     elif bracket == '>':\n    #         count -= 1\n  \
    \  #         if count < 0:\n    #             return False\n    #     if count\
    \ == 0:\n    #         return False\n    # return True\n    #\n    # count = 0\n\
    \    # for bracket in brackets:\n    #     if bracket == '<':\n    #         count\
    \ += 1\n    #     elif bracket == '>':\n    #         count -= 1\n    #      \
    \   if count < 0:\n    #             return False\n    #     if count == 0:\n\
    \    #         return False\n    # return True\n    #\n    # count = 0\n    #\
    \ for bracket in brackets:\n    #     if bracket == '<':\n    #         count\
    \ += 1\n    #     elif bracket == '>':\n    #         count -= 1\n    #      \
    \   if count < 0:\n    #             return False\n    #     if count == 0:\n\
    \    #         return False\n    # return True\n    #\n    # count = 0\n    #\
    \ for bracket in brackets:\n    #     if bracket == '<':\n    #         count\
    \ += 1\n    #     elif bracket == '>':\n    #         count -= 1\n    #      \
    \   if count < 0:\n    #             return False\n    #     if count == 0:\n\
    \    #         return False\n    # return True\n    #\n    # count = 0\n    #\
    \ for bracket in brackets:\n   \ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpny9va32u.py\", line\
    \ 102, in <module>\n    test_check()\n  File \"/tmp/tmpny9va32u.py\", line 100,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpny9va32u.py\"\
    , line 86, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '<':\n            count += 1\n        elif char == '>':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for c in brackets:\n        if c ==\
    \ '<':\n            count += 1\n        elif c == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for b in brackets:\n        if b ==\
    \ '<':\n            count += 1\n        elif b == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n            if count < 0:\n                return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n            if count < 0:\n                return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == '<':\n        if brackets[-1] == '>':\n            return correct_bracketing(brackets[1:-1])\n\
    \        else:\n            return False\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpdbyz5c.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpzpdbyz5c.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzpdbyz5c.py\"\
    , line 26, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == '<':\n        return correct_bracketing(brackets[1:])\n    elif\
    \ brackets[0] == '>':\n        return correct_bracketing(brackets[1:])\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk85xjci6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpk85xjci6.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpk85xjci6.py\"\
    , line 28, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '<':\n            count += 1\n        elif char == '>':\n            count\
    \ -= 1\n            if count < 0:\n                return False\n    return count\
    \ == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '<':\n            count += 1\n        elif char == '>':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n            if count < 0:\n                return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for b in brackets:\n        if b ==\
    \ '<':\n            count += 1\n        elif b == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    # Hint: use a stack\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n\
    \        else:\n            if len(stack) == 0:\n                return False\n\
    \            else:\n                stack.pop()\n    return len(stack) == 0\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == '<':\n        return correct_bracketing(brackets[1:])\n    elif\
    \ brackets[0] == '>':\n        return False\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxmh2oech.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpxmh2oech.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxmh2oech.py\"\
    , line 22, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '<':\n            count += 1\n        elif char == '>':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '<':\n            count += 1\n        elif char == '>':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    # count = 0\n    # for bracket in brackets:\n    #\
    \     if bracket == '<':\n    #         count += 1\n    #     elif bracket ==\
    \ '>':\n    #         count -= 1\n    #     if count < 0:\n    #         return\
    \ False\n    # return count == 0\n    count = 0\n    for bracket in brackets:\n\
    \        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n\
    \            count -= 1\n            if count < 0:\n                return False\n\
    \    return count == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        else:\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '<':\n            count += 1\n        elif i\
    \ == '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
    \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '<':\n            count += 1\n        elif bracket == '>':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n  \
    \  assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
