language: notypes.py
name: HumanEval_130_tri
results:
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\n\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8y084uys.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp8y084uys.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp8y084uys.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        result = [1, 3,\
    \ 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n        \
    \        result.append(1 + i / 2)\n            else:\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        return result\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp80yqm3xp.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp80yqm3xp.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 31, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        result = [1, 3,\
    \ 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n        \
    \        result.append(1 + i / 2)\n            else:\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        return result\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp08s19qef.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp08s19qef.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp08s19qef.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp08s19qef.py\", line\
    \ 31, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n)] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1mp4tp9e.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp1mp4tp9e.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1mp4tp9e.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3,\
    \ 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n        \
    \        tri_list.append(1 + i / 2)\n            else:\n                tri_list.append(tri_list[i\
    \ - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1r00lj8q.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp1r00lj8q.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1r00lj8q.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp1r00lj8q.py\", line\
    \ 31, in tri\n    tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i\
    \ + 1])\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        t = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   t.append(1 + i / 2)\n            else:\n                t.append(t[i - 1]\
    \ + t[i - 2] + t[i + 1])\n        return t\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kxid6si.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp5kxid6si.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5kxid6si.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5kxid6si.py\", line\
    \ 31, in tri\n    t.append(t[i - 1] + t[i - 2] + t[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        t = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   t.append(1 + i / 2)\n            else:\n                t.append(t[i - 1]\
    \ + t[i - 2] + t[i + 1])\n        return t\n\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmryh3bxc.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpmryh3bxc.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpmryh3bxc.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpmryh3bxc.py\", line\
    \ 31, in tri\n    t.append(t[i - 1] + t[i - 2] + t[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtnxnqey.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbtnxnqey.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbtnxnqey.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ikok_zm.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5ikok_zm.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5ikok_zm.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgusld_8z.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpgusld_8z.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgusld_8z.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpgusld_8z.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n == 4:\n        return [1, 3, 2, 8, 5]\n    if n == 5:\n       \
    \ return [1, 3, 2, 8, 5, 13]\n    if n == 6:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21]\n    if n == 7:\n        return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n ==\
    \ 8:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n       \
    \ return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]\n    if n == 10:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n    if n == 11:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n    if n == 12:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 13:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n\
    \    if n == 15:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597]\n    if n == 16:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n    if n == 17:\n        return\
    \ [1,\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpb2vn1c3c.py\", line 54\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        result = [1, 3,\
    \ 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n        \
    \        result.append(1 + i / 2)\n            else:\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        return result\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp80yqm3xp.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp80yqm3xp.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 31, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        return [1, 3, 2]\
    \ + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmn1uzxm.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmppmn1uzxm.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmppmn1uzxm.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmppmn1uzxm.py\", line\
    \ 26, in tri\n    return [1, 3, 2] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n\
    \ + 1)[-1]]\n  File \"/tmp/tmppmn1uzxm.py\", line 26, in tri\n    return [1, 3,\
    \ 2] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\n  File \"/tmp/tmppmn1uzxm.py\"\
    , line 26, in tri\n    return [1, 3, 2] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n\
    \ + 1)[-1]]\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmppmn1uzxm.py\"\
    , line 19, in tri\n    if n == 0:\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n == 4:\n        return [1, 3, 2, 8, 5]\n    if n == 5:\n       \
    \ return [1, 3, 2, 8, 5, 13]\n    if n == 6:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21]\n    if n == 7:\n        return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n ==\
    \ 8:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n       \
    \ return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]\n    if n == 10:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n    if n == 11:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n    if n == 12:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 13:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n\
    \    if n == 15:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597]\n    if n == 16:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n    if n == 17:\n        return\
    \ [1,\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpb2vn1c3c.py\", line 54\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        result = [1, 3,\
    \ 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n        \
    \        result.append(1 + i / 2)\n            else:\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        return result\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp80yqm3xp.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp80yqm3xp.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 31, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        seq = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   seq.append(1 + i / 2)\n            else:\n                seq.append(seq[i\
    \ - 1] + seq[i - 2] + seq[i + 1])\n        return seq\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9tpk2ae.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpi9tpk2ae.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpi9tpk2ae.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpi9tpk2ae.py\", line\
    \ 31, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n)] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnq5l2g88.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpnq5l2g88.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpnq5l2g88.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   res.append(1 + i / 2)\n            else:\n                res.append(res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        return res\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp74okuy6q.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp74okuy6q.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp74okuy6q.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp74okuy6q.py\", line\
    \ 31, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtnxnqey.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbtnxnqey.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbtnxnqey.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpilo_mmj_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpilo_mmj_.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpilo_mmj_.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   res.append(1 + i / 2)\n            else:\n                res.append(res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        return res\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp74okuy6q.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp74okuy6q.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp74okuy6q.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp74okuy6q.py\", line\
    \ 31, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n == 4:\n        return [1, 3, 2, 8, 3]\n    if n == 5:\n       \
    \ return [1, 3, 2, 8, 3, 9]\n    if n == 6:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5]\n    if n == 7:\n        return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n\
    \        return [1, 3, 2, 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return\
    \ [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n    if n == 10:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34]\n    if n == 11:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55]\n    if n == 12:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5, 20, 13, 21, 34, 55, 89]\n    if n == 13:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144]\n    if n == 14:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n\
    \    if n == 17:\n        return [1, 3, 2, 8,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdz20wjac.py\", line 54\n    return [1, 3, 2, 8,\n    \
    \       ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgusld_8z.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpgusld_8z.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgusld_8z.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpgusld_8z.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\n\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8y084uys.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp8y084uys.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp8y084uys.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ikok_zm.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5ikok_zm.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5ikok_zm.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ikok_zm.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5ikok_zm.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5ikok_zm.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtnxnqey.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbtnxnqey.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbtnxnqey.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        result = [1, 3,\
    \ 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n        \
    \        result.append(1 + i / 2)\n            else:\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        return result\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp80yqm3xp.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp80yqm3xp.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 31, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        t = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   t.append(1 + i / 2)\n            else:\n                t.append(t[i - 1]\
    \ + t[i - 2] + t[i + 1])\n        return t\n\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmryh3bxc.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpmryh3bxc.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpmryh3bxc.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpmryh3bxc.py\", line\
    \ 31, in tri\n    t.append(t[i - 1] + t[i - 2] + t[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        seq = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   seq.append(1 + i / 2)\n            else:\n                seq.append(seq[i\
    \ - 1] + seq[i - 2] + seq[i + 1])\n        return seq\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9tpk2ae.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpi9tpk2ae.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpi9tpk2ae.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpi9tpk2ae.py\", line\
    \ 31, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n > 2:\n        return [1, 3, 2] +\
    \ [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n - 3)[-1]]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzdmzpbbe.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpzdmzpbbe.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzdmzpbbe.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i / 2) for i in range(4,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [1 + (i / 2) for i in range(4,\
    \ n)] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6klifk01.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp6klifk01.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp6klifk01.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    else:\n        return [1, 3, 2, 8] + [tri(n - 1)[-1] + tri(n - 2)[-1]\
    \ + tri(n - 3)[-1]]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpifrbp113.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpifrbp113.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpifrbp113.py\", line 32, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        t = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   t.append(1 + i / 2)\n            else:\n                t.append(t[i - 1]\
    \ + t[i - 2] + t[i + 1])\n        return t\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kxid6si.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp5kxid6si.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5kxid6si.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5kxid6si.py\", line\
    \ 31, in tri\n    t.append(t[i - 1] + t[i - 2] + t[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        a = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   a.append(1 + i / 2)\n            else:\n                a.append(a[i - 1]\
    \ + a[i - 2] + a[i + 1])\n        return a\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9jjhbfou.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9jjhbfou.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9jjhbfou.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9jjhbfou.py\", line\
    \ 31, in tri\n    a.append(a[i - 1] + a[i - 2] + a[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ikok_zm.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5ikok_zm.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5ikok_zm.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgusld_8z.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpgusld_8z.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgusld_8z.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpgusld_8z.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n == 4:\n        return [1, 3, 2, 8, 3]\n    if n == 5:\n       \
    \ return [1, 3, 2, 8, 3, 9]\n    if n == 6:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5]\n    if n == 7:\n        return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n\
    \        return [1, 3, 2, 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return\
    \ [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n    if n == 10:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34]\n    if n == 11:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55]\n    if n == 12:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5, 20, 13, 21, 34, 55, 89]\n    if n == 13:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144]\n    if n == 14:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n\
    \    if n == 17:\n        return [1, 3, 2, 8,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdz20wjac.py\", line 54\n    return [1, 3, 2, 8,\n    \
    \       ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i / 2) for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcu4xaaj1.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpcu4xaaj1.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpcu4xaaj1.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3c9czsge.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp3c9czsge.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp3c9czsge.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n == 4:\n        return [1, 3, 2, 8, 3]\n    if n == 5:\n       \
    \ return [1, 3, 2, 8, 3, 9]\n    if n == 6:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5]\n    if n == 7:\n        return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n\
    \        return [1, 3, 2, 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return\
    \ [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n    if n == 10:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34]\n    if n == 11:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55]\n    if n == 12:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5, 20, 13, 21, 34, 55, 89]\n    if n == 13:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144]\n    if n == 14:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n\
    \    if n == 17:\n        return [1, 3, 2, 8,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdz20wjac.py\", line 54\n    return [1, 3, 2, 8,\n    \
    \       ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [1 + (i / 2) for i in range(3, n)] + [tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)]\n\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n  \
    \  assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2,\
    \ 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkwk1rd5f.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpkwk1rd5f.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkwk1rd5f.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(4,\
    \ n + 2)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(4, n + 2)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps142gxr7.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmps142gxr7.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmps142gxr7.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtnxnqey.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbtnxnqey.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbtnxnqey.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ikok_zm.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5ikok_zm.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5ikok_zm.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwq_4q1n0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpwq_4q1n0.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwq_4q1n0.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        result = [1, 3,\
    \ 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n        \
    \        result.append(1 + i / 2)\n            else:\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        return result\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp80yqm3xp.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp80yqm3xp.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 31, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n)] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1mp4tp9e.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp1mp4tp9e.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1mp4tp9e.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(4,\
    \ n + 2)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(4, n + 2)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps142gxr7.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmps142gxr7.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmps142gxr7.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ikok_zm.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5ikok_zm.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5ikok_zm.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        seq = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   seq.append(1 + i / 2)\n            else:\n                seq.append(seq[i\
    \ - 1] + seq[i - 2] + seq[i + 1])\n        return seq\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9tpk2ae.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpi9tpk2ae.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpi9tpk2ae.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpi9tpk2ae.py\", line\
    \ 31, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtnxnqey.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbtnxnqey.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbtnxnqey.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    if n % 2 == 1:\n        return [1, 3, 2] + [1 + i / 2 for i in\
    \ range(3, n)] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmeueglm.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpvmeueglm.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpvmeueglm.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3c9czsge.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp3c9czsge.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp3c9czsge.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        result = [1, 3,\
    \ 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n        \
    \        result.append(1 + i / 2)\n            else:\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        return result\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp80yqm3xp.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp80yqm3xp.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 31, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3c9czsge.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp3c9czsge.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp3c9czsge.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtnxnqey.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbtnxnqey.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbtnxnqey.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n == 4:\n        return [1, 3, 2, 8, 3]\n    if n == 5:\n       \
    \ return [1, 3, 2, 8, 3, 9]\n    if n == 6:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5]\n    if n == 7:\n        return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n\
    \        return [1, 3, 2, 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return\
    \ [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n    if n == 10:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34]\n    if n == 11:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55]\n    if n == 12:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5, 20, 13, 21, 34, 55, 89]\n    if n == 13:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144]\n    if n == 14:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n\
    \    if n == 17:\n        return [1, 3, 2, 8,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdz20wjac.py\", line 54\n    return [1, 3, 2, 8,\n    \
    \       ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n    \
    \    for i in range(3, n + 1):\n            if i % 2 == 0:\n                lst.append(1\
    \ + i / 2)\n            else:\n                lst.append(lst[i - 1] + lst[i -\
    \ 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi0_ifvx_.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpi0_ifvx_.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpi0_ifvx_.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpi0_ifvx_.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + (i + 1) / 2 for i in range(3, n + 1)]\n    else:\n        return [1,\
    \ 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12qmueqp.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp12qmueqp.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp12qmueqp.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ # your code here\n    pass\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4z1fsdmu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4z1fsdmu.py\", line 35,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp4z1fsdmu.py\", line 23, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ a, b, c = 1, 3, 2\n    if n == 0:\n        return [1]\n    elif n == 1:\n  \
    \      return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n\
    \        result = [1, 3, 2]\n        for i in range(3, n + 1):\n            if\
    \ i % 2 == 0:\n                result.append(1 + i / 2)\n            else:\n \
    \               result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \        return result\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeh2lowgk.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpeh2lowgk.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpeh2lowgk.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpeh2lowgk.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        result = [1, 3,\
    \ 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n        \
    \        result.append(1 + i / 2)\n            else:\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        return result\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp80yqm3xp.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp80yqm3xp.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 31, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwq_4q1n0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpwq_4q1n0.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwq_4q1n0.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9dav1zl0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9dav1zl0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp9dav1zl0.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtnxnqey.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbtnxnqey.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbtnxnqey.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtnxnqey.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbtnxnqey.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbtnxnqey.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   l.append(1 + i / 2)\n            else:\n                l.append(l[i - 1]\
    \ + l[i - 2] + l[i + 1])\n        return l\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzz3wjk_r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzz3wjk_r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzz3wjk_r.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        result = [1, 3,\
    \ 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n        \
    \        result.append(1 + i / 2)\n            else:\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        return result\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp80yqm3xp.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp80yqm3xp.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp80yqm3xp.py\", line\
    \ 31, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtnxnqey.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbtnxnqey.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbtnxnqey.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        ans = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   ans.append(1 + i / 2)\n            else:\n                ans.append(ans[i\
    \ - 1] + ans[i - 2] + ans[i + 1])\n        return ans\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn15bhv07.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpn15bhv07.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpn15bhv07.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpn15bhv07.py\", line\
    \ 31, in tri\n    ans.append(ans[i - 1] + ans[i - 2] + ans[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if\
    \ n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3,\
    \ 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return [1, 3,\
    \ 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtnxnqey.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbtnxnqey.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbtnxnqey.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n   \
    \ if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n  \
    \  elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n        return lst\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkfynevom.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfynevom.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfynevom.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1660271067
