language: notypes.py
name: HumanEval_91_is_bored
results:
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        words = sentence.split()\n        if words[0] == 'I':\n            boredoms\
    \ += 1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6r6qk_23.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6r6qk_23.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6r6qk_23.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5itkm3p.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe5itkm3p.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpe5itkm3p.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4eiiopsu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4eiiopsu.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4eiiopsu.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxop23qv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphxop23qv.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphxop23qv.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    count = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0vubd25h.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0vubd25h.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0vubd25h.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    count = 0\n    for i in S.split('.'):\n        if i.startswith('I'):\n  \
    \          count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfuxe41o.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplfuxe41o.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmplfuxe41o.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bn5x0j6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4bn5x0j6.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4bn5x0j6.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n\
    \        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5sj4po11.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5sj4po11.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5sj4po11.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # YOUR CODE HERE\n    boredoms = 0\n    for sentence in S.split('.'):\n \
    \       if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvzpcg_pz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpvzpcg_pz.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvzpcg_pz.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # YOUR CODE HERE\n    count = 0\n    for i in S.split('.'):\n        if i.split()[0]\
    \ == 'I':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4eiiopsu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4eiiopsu.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4eiiopsu.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # your code here\n    return S.count('I')\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzntwn1ha.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzntwn1ha.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzntwn1ha.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        sentence = sentence.strip()\n\
    \        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi0epw0x3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpi0epw0x3.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpi0epw0x3.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.split()[0]\
    \ == 'I':\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return len([x for x in S.split('.') if x.strip().startswith('I')])\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph23_gx2g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmph23_gx2g.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmph23_gx2g.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    count = 0\n    for i in S.split('.'):\n        if i.startswith('I'):\n  \
    \          count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfuxe41o.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplfuxe41o.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmplfuxe41o.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return len([s for s in S.split('.') if s.startswith('I')])\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kps9w6k.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5kps9w6k.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5kps9w6k.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6r6qk_23.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6r6qk_23.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6r6qk_23.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n\
    \        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5sj4po11.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5sj4po11.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5sj4po11.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n\
    \        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5sj4po11.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5sj4po11.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5sj4po11.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4fuqgjx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_4fuqgjx.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_4fuqgjx.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.split()[0]\
    \ == 'I':\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4eiiopsu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4eiiopsu.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4eiiopsu.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bn5x0j6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4bn5x0j6.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4bn5x0j6.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bn5x0j6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4bn5x0j6.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4bn5x0j6.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for word in S.split():\n        if word == 'I':\n     \
    \       boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxayv7ww.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpyxayv7ww.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyxayv7ww.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    count = 0\n    for i in S.split('.'):\n        if i.startswith('I'):\n  \
    \          count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfuxe41o.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplfuxe41o.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmplfuxe41o.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxop23qv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphxop23qv.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphxop23qv.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # YOUR CODE HERE\n    count = 0\n    for i in S.split('.'):\n        if i.strip().startswith('I'):\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3jc5ol_b.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3jc5ol_b.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3jc5ol_b.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa2wisqyq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpa2wisqyq.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa2wisqyq.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4fuqgjx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_4fuqgjx.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_4fuqgjx.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bn5x0j6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4bn5x0j6.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4bn5x0j6.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # Your code goes here\n    return S.count('I')\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6d607vm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpk6d607vm.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpk6d607vm.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bn5x0j6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4bn5x0j6.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4bn5x0j6.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bn5x0j6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4bn5x0j6.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4bn5x0j6.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx988xn_1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpx988xn_1.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx988xn_1.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bn5x0j6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4bn5x0j6.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4bn5x0j6.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # your code here\n    return S.count('I')\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzntwn1ha.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzntwn1ha.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzntwn1ha.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bn5x0j6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4bn5x0j6.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4bn5x0j6.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4eiiopsu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4eiiopsu.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4eiiopsu.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # Your code here\n    return S.count('I')\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppfhdwhrv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppfhdwhrv.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppfhdwhrv.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4fuqgjx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_4fuqgjx.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_4fuqgjx.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    count = 0\n    for i in S.split('.'):\n        if i.split()[0] == 'I':\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    count = 0\n    for i in S.split('.'):\n        if i.strip().startswith('I'):\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpak2fo61r.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpak2fo61r.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpak2fo61r.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.split()[0]\
    \ == 'I':\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # YOUR CODE HERE\n    #raise NotImplementedError()\n    count = 0\n    for\
    \ i in S.split('.'):\n        if i.split()[0] == 'I':\n            count += 1\n\
    \    return count\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bn5x0j6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4bn5x0j6.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4bn5x0j6.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # Split the string into sentences\n    sentences = re.split(r'[.?!]', S)\n\
    \    # Count the number of sentences that start with \"I\"\n    return len([s\
    \ for s in sentences if s.strip().startswith('I')])\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpweep4zd8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpweep4zd8.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpweep4zd8.py\", line 19,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpweep4zd8.py\"\
    , line 14, in is_bored\n    sentences = re.split(r'[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # YOUR CODE HERE\n    # raise NotImplementedError()\n    count = 0\n    for\
    \ i in S.split('.'):\n        if i.split()[0] == 'I':\n            count += 1\n\
    \    return count\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # YOUR CODE HERE\n    count = 0\n    for i in S.split('.'):\n        if i.split()[0]\
    \ == 'I':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # YOUR CODE HERE\n    boredoms = 0\n    for sentence in S.split('.'):\n \
    \       if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsztp5_s7.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpsztp5_s7.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsztp5_s7.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp869ynr41.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp869ynr41.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp869ynr41.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bn5x0j6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4bn5x0j6.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4bn5x0j6.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    return S.count('I')\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjf6u4e0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjf6u4e0.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjf6u4e0.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n\
    \        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5sj4po11.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5sj4po11.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5sj4po11.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    # YOUR CODE HERE\n    #raise NotImplementedError()\n    return S.count('I')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmatr31rm.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpmatr31rm.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmatr31rm.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    count = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpat4fq2p3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpat4fq2p3.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpat4fq2p3.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tavkrwi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0tavkrwi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0tavkrwi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n\
    \    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n\
    \        if sentence.strip().startswith('I'):\n            boredoms += 1\n   \
    \ return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn19t613e.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpn19t613e.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpn19t613e.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
