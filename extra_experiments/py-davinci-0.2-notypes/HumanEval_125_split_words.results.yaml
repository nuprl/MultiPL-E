language: notypes.py
name: HumanEval_125_split_words
results:
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n      \
    \      if ord(i) % 2 == 1:\n                count += 1\n        return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu5nd2z98.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 33, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if \" \" in txt:\n    \
    \    return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\"\
    ,\")\n    else:\n        count = 0\n        for i in txt:\n            if ord(i)\
    \ % 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnybhw1ym.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnybhw1ym.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpnybhw1ym.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n      \
    \      if ord(i) % 2 == 1:\n                count += 1\n        return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu5nd2z98.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 33, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        return sum(1 for i in txt if ord(i) % 2 ==\
    \ 1)\n\n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n   \
    \ assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world\
    \ !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n   \
    \ assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert\
    \ candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpagx_lg_h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpagx_lg_h.py\", line 34,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpagx_lg_h.py\", line\
    \ 29, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        odd_count = 0\n        for char in txt:\n            if ord(char)\
    \ % 2 == 1:\n                odd_count += 1\n        return odd_count\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7vyekijw.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp7vyekijw.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp7vyekijw.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n      \
    \      if ord(i) % 2 == 1:\n                count += 1\n        return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu5nd2z98.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 33, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for c in txt if ord(c) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpj2zrd7gt.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4h__p05w.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp4h__p05w.py\", line 36,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp4h__p05w.py\", line\
    \ 31, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for c in txt if ord(c) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpj2zrd7gt.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if \" \" in txt:\n    \
    \    return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\"\
    ,\")\n    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtkf7gys.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbtkf7gys.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpbtkf7gys.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n      \
    \      if ord(i) % 2 == 1:\n                count += 1\n        return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu5nd2z98.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 33, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for c in txt if ord(c) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpj2zrd7gt.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n      \
    \      if ord(i) % 2 == 1:\n                count += 1\n        return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu5nd2z98.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 33, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfn_0d0_p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfn_0d0_p.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpfn_0d0_p.py\", line\
    \ 19, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpfn_0d0_p.py\", line 15, in split_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n      \
    \      if ord(i) % 2 == 1:\n                count += 1\n        return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu5nd2z98.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 33, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello',\
    \ 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n \
    \   assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n  \
    \  assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfn_0d0_p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfn_0d0_p.py\", line 29,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpfn_0d0_p.py\", line\
    \ 19, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \  File \"/tmp/tmpfn_0d0_p.py\", line 15, in split_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n      \
    \      if ord(i) % 2 == 1:\n                count += 1\n        return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu5nd2z98.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 33, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(x) % 2 for x in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5tpqml5m.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5tpqml5m.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp5tpqml5m.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9sivu4j.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpa9sivu4j.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpa9sivu4j.py\", line\
    \ 27, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9sivu4j.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpa9sivu4j.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpa9sivu4j.py\", line\
    \ 27, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(x) % 2 for x in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5tpqml5m.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5tpqml5m.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp5tpqml5m.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n      \
    \      if ord(i) % 2 == 1:\n                count += 1\n        return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu5nd2z98.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 33, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2j8bk6g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph2j8bk6g.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmph2j8bk6g.py\", line\
    \ 18, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for c in txt if ord(c) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpj2zrd7gt.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(letter) % 2 for letter in txt.lower())\n\n\n\
    def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoy5aj2k_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpoy5aj2k_.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpoy5aj2k_.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for c in txt if ord(c) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpj2zrd7gt.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if \" \" in txt:\n    \
    \    return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\"\
    ,\")\n    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqyl_s8d3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqyl_s8d3.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpqyl_s8d3.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n      \
    \      if ord(i) % 2 == 1:\n                count += 1\n        return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu5nd2z98.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 33, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(x) % 2 for x in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5tpqml5m.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5tpqml5m.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp5tpqml5m.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n      \
    \      if ord(i) % 2 == 1:\n                count += 1\n        return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu5nd2z98.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 33, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n      \
    \      if ord(i) % 2 == 1:\n                count += 1\n        return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu5nd2z98.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 33, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2j8bk6g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph2j8bk6g.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmph2j8bk6g.py\", line\
    \ 18, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(x) % 2 for x in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5tpqml5m.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5tpqml5m.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp5tpqml5m.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if \" \" in txt:\n    \
    \    return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\"\
    ,\")\n    else:\n        count = 0\n        for i in txt:\n            if ord(i)\
    \ % 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnybhw1ym.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnybhw1ym.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpnybhw1ym.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4h__p05w.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp4h__p05w.py\", line 36,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp4h__p05w.py\", line\
    \ 31, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for c in txt if ord(c) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpj2zrd7gt.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv8sr46uu.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpv8sr46uu.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for c in txt if ord(c) % 2 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpj2zrd7gt.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpj2zrd7gt.py\", line\
    \ 29, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(1 for i in txt if ord(i) % 2 == 0)\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz3k893t.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwz3k893t.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpwz3k893t.py\", line\
    \ 28, in check\n    assert candidate('aaaBb') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        count = 0\n        for i in txt:\n            if ord(i) %\
    \ 2 == 1:\n                count += 1\n        return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwe7rsdk.py\", line 37,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpgwe7rsdk.py\", line\
    \ 32, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2j8bk6g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph2j8bk6g.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmph2j8bk6g.py\", line\
    \ 18, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2j8bk6g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph2j8bk6g.py\", line 28,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmph2j8bk6g.py\", line\
    \ 18, in check\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    if\
    \ ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return\
    \ txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n      \
    \      if ord(i) % 2 == 1:\n                count += 1\n        return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n\
    \    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello\
    \ world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !')\
    \ == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert\
    \ candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('')\
    \ == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu5nd2z98.py\", line 38,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpu5nd2z98.py\", line\
    \ 33, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2i0s8sea.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmp2i0s8sea.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(ch) % 2 for ch in txt.lower())\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqcrn7rqe.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqcrn7rqe.py\", line 32,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpqcrn7rqe.py\", line\
    \ 27, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(x) % 2 for x in txt)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps7l2op4o.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmps7l2op4o.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmps7l2op4o.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def split_words(txt):\n    \"\"\"\n    Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    \    should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n\
    \    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n\
    \    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if ' ' in txt:\n      \
    \  return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n\
    \    else:\n        return sum(ord(c) % 2 for c in txt.lower())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!')\
    \ == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n\
    \    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n \
    \   assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert\
    \ candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n\
    \    check(split_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuafaf6t7.py\", line 33,\
    \ in test_check\n    check(split_words)\n  File \"/tmp/tmpuafaf6t7.py\", line\
    \ 28, in check\n    assert candidate('aaabb') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
