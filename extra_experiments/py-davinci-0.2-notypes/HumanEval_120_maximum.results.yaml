language: notypes.py
name: HumanEval_120_maximum
results:
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [heapq.heappop(heap)[1] for _ in range(k)]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqsdx5gkw.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpqsdx5gkw.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqsdx5gkw.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqsdx5gkw.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgdvwi37.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpqgdvwi37.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqgdvwi37.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqgdvwi37.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgdvwi37.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpqgdvwi37.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqgdvwi37.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqgdvwi37.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n\
    \    if k == 1:\n        return [max(arr)]\n    if k == len(arr):\n        return\
    \ sorted(arr)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in descending\
    \ order\n    arr.sort(reverse=True)\n    # Return the first k elements\n    return\
    \ arr[:k]\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4eharvxq.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp4eharvxq.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4eharvxq.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [num for _, num in heap]\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp2oacewd.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpp2oacewd.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpp2oacewd.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpp2oacewd.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [num for _, num in heap]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kqkb_9o.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp1kqkb_9o.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1kqkb_9o.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp1kqkb_9o.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for i in range(len(arr)):\n\
    \        if len(heap) < k:\n            heapq.heappush(heap, arr[i])\n       \
    \ else:\n            heapq.heappushpop(heap, arr[i])\n    return sorted(heap,\
    \ reverse=True)\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptygk8_80.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmptygk8_80.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptygk8_80.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmptygk8_80.py\"\
    , line 31, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx24j01wt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpx24j01wt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx24j01wt.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzscypmml.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzscypmml.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzscypmml.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgdvwi37.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpqgdvwi37.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqgdvwi37.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqgdvwi37.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Solution 1:\n    # Time: O(nlogk)\n\
    \    # Space: O(k)\n    # heap = []\n    # for num in arr:\n    #     heapq.heappush(heap,\
    \ num)\n    #     if len(heap) > k:\n    #         heapq.heappop(heap)\n    #\
    \ return sorted(heap, reverse=True)\n\n    # Solution 2:\n    # Time: O(nlogk)\n\
    \    # Space: O(k)\n    # return sorted(arr, reverse=True)[:k]\n\n    # Solution\
    \ 3:\n    # Time: O(nlogk)\n    # Space: O(k)\n    # return heapq.nlargest(k,\
    \ arr)\n\n    # Solution 4:\n    # Time: O(n)\n    # Space: O(k)\n    # return\
    \ sorted(arr)[-k:]\n\n    # Solution 5:\n    # Time: O(n)\n    # Space: O(k)\n\
    \    # return sorted(arr, reverse=True)[:k]\n\n    # Solution 6:\n    # Time:\
    \ O(n)\n    # Space: O(k)\n    # return sorted(arr, reverse=True)[-k:]\n\n   \
    \ # Solution 7:\n    # Time: O(n)\n    # Space: O(k)\n    # return sorted(arr,\
    \ key=lambda x: -x)[:k]\n\n    # Solution 8:\n    # Time: O(n)\n    # Space: O(k)\n\
    \    # return sorted(arr, key=lambda x: -x)[-k:]\n\n    # Solution 9:\n    # Time:\
    \ O(n)\n    # Space: O(k)\n    # return sorted(arr, key=lambda x: -x)[:k]\n\n\
    \    # Solution 10:\n    # Time: O(n)\n    # Space: O(k)\n    # return sorted(arr,\
    \ key=lambda x: -x)[-k:]\n\n    # Solution 11:\n    # Time: O(n)\n    # Space:\
    \ O(k)\n    # return sorted(arr, key=lambda x: -x)[:k]\n\n    # Solution 12:\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn0b5dpjk.py\", line\
    \ 104, in <module>\n    test_check()\n  File \"/tmp/tmpn0b5dpjk.py\", line 102,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpn0b5dpjk.py\", line 89,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [num for _, num in heap]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kqkb_9o.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp1kqkb_9o.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1kqkb_9o.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp1kqkb_9o.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [num for _, num in heap]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kqkb_9o.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp1kqkb_9o.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1kqkb_9o.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp1kqkb_9o.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7n0s9yif.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp7n0s9yif.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7n0s9yif.py\", line 40,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbxlc12x.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpqbxlc12x.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqbxlc12x.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) <= k:\n        return\
    \ sorted(arr)\n    else:\n        return sorted(arr)[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz1qi50gs.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpz1qi50gs.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpz1qi50gs.py\", line 43,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbxlc12x.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpqbxlc12x.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqbxlc12x.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [num for _, num in heap]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kqkb_9o.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp1kqkb_9o.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1kqkb_9o.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp1kqkb_9o.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    heap = []\n    for num in arr:\n\
    \        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n\
    \    return sorted(heap, reverse=True)\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2dp3xp_.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmph2dp3xp_.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmph2dp3xp_.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmph2dp3xp_.py\"\
    , line 28, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpy100ps.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwpy100ps.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpy100ps.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwpy100ps.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx24j01wt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpx24j01wt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx24j01wt.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx24j01wt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpx24j01wt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx24j01wt.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for i in range(len(arr)):\n\
    \        if len(heap) < k:\n            heapq.heappush(heap, arr[i])\n       \
    \ else:\n            heapq.heappushpop(heap, arr[i])\n    return sorted(heap,\
    \ reverse=True)\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptygk8_80.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmptygk8_80.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptygk8_80.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmptygk8_80.py\"\
    , line 31, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n\
    \    if k == 1:\n        return [max(arr)]\n    if k == len(arr):\n        return\
    \ sorted(arr)\n    if k > len(arr):\n        return None\n\n    max_arr = []\n\
    \    for i in range(k):\n        max_arr.append(max(arr))\n        arr.remove(max(arr))\n\
    \    return sorted(max_arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpy100ps.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwpy100ps.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpy100ps.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwpy100ps.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgdvwi37.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpqgdvwi37.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqgdvwi37.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqgdvwi37.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [num for _, num in heap]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kqkb_9o.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp1kqkb_9o.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1kqkb_9o.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp1kqkb_9o.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpy100ps.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwpy100ps.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpy100ps.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwpy100ps.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    arr.sort()\n    return arr[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2klyk11.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpb2klyk11.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpb2klyk11.py\", line 43,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbd06izx0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpbd06izx0.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbd06izx0.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzscypmml.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzscypmml.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzscypmml.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgdvwi37.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpqgdvwi37.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqgdvwi37.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqgdvwi37.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [heapq.heappop(heap)[1] for _ in range(k)]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqsdx5gkw.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpqsdx5gkw.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqsdx5gkw.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqsdx5gkw.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzscypmml.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzscypmml.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzscypmml.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Solution 1:\n    # Time: O(n\
    \ log k)\n    # Space: O(k)\n    # heap = []\n    # for num in arr:\n    #   \
    \  heapq.heappush(heap, num)\n    #     if len(heap) > k:\n    #         heapq.heappop(heap)\n\
    \    # return sorted(heap, reverse=True)\n\n    # Solution 2:\n    # Time: O(n)\n\
    \    # Space: O(k)\n    # return sorted(arr, reverse=True)[:k]\n\n    # Solution\
    \ 3:\n    # Time: O(n)\n    # Space: O(k)\n    return sorted(arr)[-k:]\n\n\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzb1ihl8e.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpzb1ihl8e.py\", line 61,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzb1ihl8e.py\", line 58,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n * log(k))\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [num for _, num in heap]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp85pzurv3.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp85pzurv3.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp85pzurv3.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp85pzurv3.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbd06izx0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpbd06izx0.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbd06izx0.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in descending\
    \ order\n    arr.sort(reverse=True)\n    # Return the first k elements\n    return\
    \ arr[:k]\n\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnu8r8vwc.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpnu8r8vwc.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpnu8r8vwc.py\", line 33,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx24j01wt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpx24j01wt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx24j01wt.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [num for _, num in heap]\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp2oacewd.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpp2oacewd.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpp2oacewd.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpp2oacewd.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx24j01wt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpx24j01wt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx24j01wt.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx24j01wt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpx24j01wt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx24j01wt.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbd06izx0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpbd06izx0.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbd06izx0.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgdvwi37.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpqgdvwi37.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqgdvwi37.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqgdvwi37.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n\
    \    if k == 1:\n        return [max(arr)]\n    if k == len(arr):\n        return\
    \ sorted(arr)\n    if k > len(arr):\n        return arr\n    arr = sorted(arr)\n\
    \    return arr[-k:]\n\n\ndef check(candidate):\n    assert candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpy100ps.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwpy100ps.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpy100ps.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwpy100ps.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzscypmml.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzscypmml.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzscypmml.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpy100ps.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwpy100ps.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpy100ps.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwpy100ps.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Solution 1\n    # arr.sort()\n\
    \    # return arr[-k:]\n\n    # Solution 2\n    # heapq.heapify(arr)\n    # return\
    \ heapq.nlargest(k, arr)\n\n    # Solution 3\n    return sorted(arr)[-k:]\n\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0743q8o8.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp0743q8o8.py\", line 52,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0743q8o8.py\", line 49,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    arr.sort()\n    return arr[len(arr) - k:]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzscypmml.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzscypmml.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzscypmml.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx24j01wt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpx24j01wt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx24j01wt.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Solution 1\n    # return sorted(arr,\
    \ reverse=True)[:k]\n\n    # Solution 2\n    # return sorted(arr, key=lambda x:\
    \ -x)[:k]\n\n    # Solution 3\n    # return heapq.nlargest(k, arr)\n\n    # Solution\
    \ 4\n    return sorted(arr)[-k:]\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8um8l_eo.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp8um8l_eo.py\", line 53,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8um8l_eo.py\", line 50,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: 1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not arr:\n        return []\n\
    \    if len(arr) == 1:\n        return arr\n    if k == 0:\n        return []\n\
    \    if k == len(arr):\n        return sorted(arr)\n    if k > len(arr):\n   \
    \     return sorted(arr)\n    if k == 1:\n        return [max(arr)]\n    if k\
    \ == 2:\n        return sorted(arr)[-2:]\n    if k == 3:\n        return sorted(arr)[-3:]\n\
    \    if k == 4:\n        return sorted(arr)[-4:]\n    if k == 5:\n        return\
    \ sorted(arr)[-5:]\n    if k == 6:\n        return sorted(arr)[-6:]\n    if k\
    \ == 7:\n        return sorted(arr)[-7:]\n    if k == 8:\n        return sorted(arr)[-8:]\n\
    \    if k == 9:\n        return sorted(arr)[-9:]\n    if k == 10:\n        return\
    \ sorted(arr)[-10:]\n    if k == 11:\n        return sorted(arr)[-11:]\n    if\
    \ k == 12:\n        return sorted(arr)[-12:]\n    if k == 13:\n        return\
    \ sorted(arr)[-13:]\n    if k == 14:\n        return sorted(arr)[-14:]\n    if\
    \ k == 15:\n        return sorted(arr)[-15:]\n    if k == 16:\n        return\
    \ sorted(arr)[-16:]\n    if k == 17:\n        return sorted(arr)[-17:]\n    if\
    \ k == 18:\n        return sorted(arr)[-18:]\n    if k == 19:\n        return\
    \ sorted(arr)[-19:]\n    if k == 20:\n        return sorted(arr)[-20:]\n    if\
    \ k == 21:\n        return sorted(arr)[-21:]\n    if k == 22:\n        return\
    \ sorted(arr)[-22:]\n    if k == 23:\n        return sorted(arr)[-23:]\n    if\
    \ k == 24:\n        return sorted(arr)[-24:]\n    if k == 25:\n        return\
    \ sorted(arr)[-25:]\n    if k == 26:\n        return sorted(arr)[-26:]\n    if\
    \ k ==\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmj1daclo.py\", line 88\n    if k ==\n           ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzscypmml.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzscypmml.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzscypmml.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpy100ps.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwpy100ps.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpy100ps.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwpy100ps.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for i in range(len(arr)):\n\
    \        if len(heap) < k:\n            heapq.heappush(heap, arr[i])\n       \
    \ else:\n            heapq.heappushpop(heap, arr[i])\n    return sorted(heap,\
    \ reverse=True)\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptygk8_80.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmptygk8_80.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptygk8_80.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmptygk8_80.py\"\
    , line 31, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgdvwi37.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpqgdvwi37.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqgdvwi37.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqgdvwi37.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzscypmml.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzscypmml.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzscypmml.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx24j01wt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpx24j01wt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx24j01wt.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbd06izx0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpbd06izx0.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbd06izx0.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == k:\n        return\
    \ sorted(arr)\n    else:\n        return sorted(arr)[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps2mjtav7.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmps2mjtav7.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmps2mjtav7.py\", line 43,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbd06izx0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpbd06izx0.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbd06izx0.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbd06izx0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpbd06izx0.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbd06izx0.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n\
    \    if k == 1:\n        return [max(arr)]\n    if k == len(arr):\n        return\
    \ sorted(arr)\n    return sorted(arr)[-k:]\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzscypmml.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzscypmml.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzscypmml.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzscypmml.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzscypmml.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzscypmml.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbd06izx0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpbd06izx0.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbd06izx0.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n)\n    #\
    \ Space complexity: O(n)\n    if not arr:\n        return []\n    if len(arr)\
    \ == 1:\n        return arr\n    if k == 1:\n        return [max(arr)]\n    if\
    \ k == len(arr):\n        return sorted(arr)\n    if k > len(arr):\n        return\
    \ None\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n\
    \    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return sorted(heap)\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfopebbut.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpfopebbut.py\", line 61,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpfopebbut.py\", line 49,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\n  File \"/tmp/tmpfopebbut.py\"\
    , line 40, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx24j01wt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpx24j01wt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx24j01wt.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpy100ps.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwpy100ps.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpy100ps.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwpy100ps.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    heap = []\n    for num in arr:\n\
    \        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n\
    \    return sorted(heap, reverse=True)\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2dp3xp_.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmph2dp3xp_.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmph2dp3xp_.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmph2dp3xp_.py\"\
    , line 28, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzscypmml.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzscypmml.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzscypmml.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    heap = []\n    for num in arr:\n\
    \        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n\
    \    return sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe31chbzf.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpe31chbzf.py\", line 47,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe31chbzf.py\", line 34,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpe31chbzf.py\"\
    , line 28, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    heap = []\n    for num in arr:\n\
    \        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n\
    \    return sorted(heap, reverse=True)\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2dp3xp_.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmph2dp3xp_.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmph2dp3xp_.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmph2dp3xp_.py\"\
    , line 28, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpy100ps.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwpy100ps.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpy100ps.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwpy100ps.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpy100ps.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwpy100ps.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpy100ps.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwpy100ps.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgdvwi37.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpqgdvwi37.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqgdvwi37.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqgdvwi37.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nny6dqo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5nny6dqo.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5nny6dqo.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == k:\n        return\
    \ sorted(arr)\n    else:\n        return sorted(arr)[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps2mjtav7.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmps2mjtav7.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmps2mjtav7.py\", line 43,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpy100ps.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwpy100ps.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpy100ps.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwpy100ps.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    if len(arr) == k:\n        return\
    \ sorted(arr)\n    else:\n        return sorted(arr)[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps2mjtav7.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmps2mjtav7.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmps2mjtav7.py\", line 43,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [num for _, num in heap]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kqkb_9o.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp1kqkb_9o.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1kqkb_9o.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp1kqkb_9o.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx24j01wt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpx24j01wt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx24j01wt.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Solution 1\n    # arr.sort()\n\
    \    # return arr[-k:]\n\n    # Solution 2\n    return sorted(arr)[-k:]\n\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7v6esfr.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpu7v6esfr.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpu7v6esfr.py\", line 45,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for i in range(len(arr)):\n\
    \        if len(heap) < k:\n            heapq.heappush(heap, arr[i])\n       \
    \ else:\n            heapq.heappushpop(heap, arr[i])\n    return sorted(heap,\
    \ reverse=True)\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptygk8_80.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmptygk8_80.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptygk8_80.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmptygk8_80.py\"\
    , line 31, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbd06izx0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpbd06izx0.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbd06izx0.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpy100ps.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwpy100ps.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpy100ps.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwpy100ps.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    # return heapq.nlargest(k, arr)\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpom1lv9qg.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpom1lv9qg.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpom1lv9qg.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n\
    \    if k == 1:\n        return [max(arr)]\n    return sorted(arr)[-k:]\n\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzscypmml.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzscypmml.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzscypmml.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpute1x3ng.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpute1x3ng.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpute1x3ng.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpute1x3ng.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n \
    \   return [heapq.heappop(heap)[1] for _ in range(k)]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqsdx5gkw.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpqsdx5gkw.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqsdx5gkw.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqsdx5gkw.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, (-num, num))\nNameError: name\
    \ 'heapq' is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(n log k)\n\
    \    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpy100ps.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpwpy100ps.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpy100ps.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwpy100ps.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n\
    \    if k == 1:\n        return [max(arr)]\n    if k == len(arr):\n        return\
    \ sorted(arr)\n    if k > len(arr):\n        return sorted(arr)\n\n    # create\
    \ a heap\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap,\
    \ arr[i])\n\n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n\
    \            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n\n\
    \    return sorted(heap)\n\ndef check(candidate):\n    assert candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg99p9qvi.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpg99p9qvi.py\", line 61,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpg99p9qvi.py\", line 49,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\n  File \"/tmp/tmpg99p9qvi.py\"\
    , line 38, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx24j01wt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpx24j01wt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx24j01wt.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fly_nl6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8fly_nl6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fly_nl6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8fly_nl6.py\"\
    , line 27, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n   \
    \ [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\
    \n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n\
    \    Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe53e2cwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe53e2cwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe53e2cwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
