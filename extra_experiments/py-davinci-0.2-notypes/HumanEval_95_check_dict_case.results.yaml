language: notypes.py
name: HumanEval_95_check_dict_case
results:
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if key.islower():\n            for key\
    \ in dict:\n                if key.isupper():\n                    return False\n\
    \        elif key.isupper():\n            for key in dict:\n                if\
    \ key.islower():\n                    return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8a0xlrno.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8a0xlrno.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8a0xlrno.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # Your code here\n    if len(dict)\
    \ == 0:\n        return False\n    if dict.keys()[0].isupper():\n        for key\
    \ in dict.keys():\n            if not key.isupper():\n                return False\n\
    \        return True\n    else:\n        for key in dict.keys():\n           \
    \ if not key.islower():\n                return False\n        return True\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqxzxsan.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmprqxzxsan.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmprqxzxsan.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmprqxzxsan.py\", line 21, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n    if dict.keys()[0].isupper():\n        for key in dict:\n\
    \            if not key.isupper():\n                return False\n    else:\n\
    \        for key in dict:\n            if not key.islower():\n               \
    \ return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp36gzcrpa.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp36gzcrpa.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp36gzcrpa.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp36gzcrpa.py\", line 23, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n        if all(key.islower() for key in\
    \ dict):\n            return True\n        elif all(key.isupper() for key in dict):\n\
    \            return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           for key in dict:\n                    if key.islower() == False:\n\
    \                        return False\n            elif key.isupper() == True:\n\
    \                for key in dict:\n                    if key.isupper() == False:\n\
    \                        return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy66d76v7.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpy66d76v7.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpy66d76v7.py\", line\
    \ 38, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxdw_pwxf.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n        if dict.keys()[0].isupper():\n\
    \            for key in dict:\n                if not key.isupper():\n       \
    \             return False\n        else:\n            for key in dict:\n    \
    \            if not key.islower():\n                    return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7sgwcvnz.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp7sgwcvnz.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp7sgwcvnz.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp7sgwcvnz.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.isupper() or key.islower():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwznv1rqb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwznv1rqb.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwznv1rqb.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() and key.isupper():\n\
    \                return False\n            else:\n                return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa7fmuabc.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpa7fmuabc.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpa7fmuabc.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           return True\n            elif key.isupper() == True:\n           \
    \     return True\n            else:\n                return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqgysnjv.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpnqgysnjv.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnqgysnjv.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           return True\n            elif key.isupper() == True:\n           \
    \     return True\n            else:\n                return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqgysnjv.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpnqgysnjv.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnqgysnjv.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # check if the dictionary is empty\n\
    \    if len(dict) == 0:\n        return False\n    # check if all keys are strings\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n    # check if all keys are in lower case\n    if all(key.islower() for\
    \ key in dict):\n        return True\n    # check if all keys are in upper case\n\
    \    elif all(key.isupper() for key in dict):\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            if key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfnuhmmcg.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpfnuhmmcg.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpfnuhmmcg.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    lower = True\n    upper = True\n    for key in dict:\n        if\
    \ not isinstance(key, str):\n            return False\n        if key.islower():\n\
    \            upper = False\n        elif key.isupper():\n            lower = False\n\
    \        else:\n            return False\n    return lower or upper\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           return True\n            elif key.isupper() == True:\n           \
    \     return True\n            else:\n                return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqgysnjv.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpnqgysnjv.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnqgysnjv.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # check if the dictionary is empty\n\
    \    if len(dict) == 0:\n        return False\n    # check if all keys are strings\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n    # check if all keys are in lower case\n    for key in dict:\n   \
    \     if key.islower():\n            return True\n    # check if all keys are\
    \ in upper case\n    for key in dict:\n        if key.isupper():\n           \
    \ return True\n    # if none of the above conditions are met, return False\n \
    \   return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46r_q_42.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp46r_q_42.py\", line 46,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp46r_q_42.py\", line\
    \ 38, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if dict.keys()[0].islower():\n        \
    \    for key in dict:\n                if key.isupper():\n                   \
    \ return False\n        elif dict.keys()[0].isupper():\n            for key in\
    \ dict:\n                if key.islower():\n                    return False\n\
    \        else:\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_mgzzku.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpk_mgzzku.py\", line 46,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk_mgzzku.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpk_mgzzku.py\", line 24, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           return True\n            elif key.isupper() == True:\n           \
    \     return True\n            else:\n                return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqgysnjv.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpnqgysnjv.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnqgysnjv.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    return True\n                elif key.isupper()\
    \ == True:\n                    return True\n                else:\n         \
    \           return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5b178d9t.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n        if all(key.islower() for key in\
    \ dict):\n            return True\n        elif all(key.isupper() for key in dict):\n\
    \            return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if dict.keys()[0].isupper():\n        \
    \    for key in dict:\n                if key.islower():\n                   \
    \ return False\n        else:\n            for key in dict:\n                if\
    \ key.isupper():\n                    return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zwpu0tg.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5zwpu0tg.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5zwpu0tg.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp5zwpu0tg.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxdw_pwxf.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        else:\n                    return False\n            else:\n        \
    \        return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpco7pkxoq.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpco7pkxoq.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpco7pkxoq.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n        if dict.keys()[0].isupper():\n\
    \            for key in dict:\n                if not key.isupper():\n       \
    \             return False\n        else:\n            for key in dict:\n    \
    \            if not key.islower():\n                    return False\n       \
    \ return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzu5y8hx5.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzu5y8hx5.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpzu5y8hx5.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpzu5y8hx5.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            if key.islower() == True:\n       \
    \         for key in dict:\n                    if key.islower() == False:\n \
    \                       return False\n            elif key.isupper() == True:\n\
    \                for key in dict:\n                    if key.isupper() == False:\n\
    \                        return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp50box71h.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp50box71h.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp50box71h.py\", line\
    \ 38, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            else:\n                if key.islower()\
    \ == False and key.isupper() == False:\n                    return False\n   \
    \             else:\n                    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_i386iqb.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp_i386iqb.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp_i386iqb.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    if dict.keys()[0].isupper():\n        for key in dict.keys():\n \
    \           if not key.isupper():\n                return False\n        return\
    \ True\n    else:\n        for key in dict.keys():\n            if not key.islower():\n\
    \                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuylwb96e.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpuylwb96e.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuylwb96e.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpuylwb96e.py\", line 20, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if dict.keys()[0].islower():\n        \
    \    for key in dict:\n                if key.isupper():\n                   \
    \ return False\n        else:\n            for key in dict:\n                if\
    \ key.islower():\n                    return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp520sto56.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp520sto56.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp520sto56.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp520sto56.py\", line 24, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxm0z6inu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxm0z6inu.py\", line 30,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxm0z6inu.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n    if dict.keys()[0].islower():\n        for key in dict:\n\
    \            if not key.islower():\n                return False\n    elif dict.keys()[0].isupper():\n\
    \        for key in dict:\n            if not key.isupper():\n               \
    \ return False\n    else:\n        return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph4qptpy_.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmph4qptpy_.py\", line 45,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmph4qptpy_.py\", line\
    \ 36, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmph4qptpy_.py\", line 23, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # Your code goes here\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if type(key) == str:\n                if key.islower():\n                \
    \    return True\n                elif key.isupper():\n                    return\
    \ True\n                else:\n                    return False\n            else:\n\
    \                return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3broxe8w.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp3broxe8w.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp3broxe8w.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxm0z6inu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxm0z6inu.py\", line 30,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxm0z6inu.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.isupper():\n                    return True\n        \
    \        elif key.islower():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxmu1utp2.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpxmu1utp2.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxmu1utp2.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\nprint(check_dict_case({ 'a': 'apple', 'b': 'banana' }))\nprint(check_dict_case({\
    \ 'a': 'apple', 'A': 'banana', 'B': 'banana' }))\nprint(check_dict_case({ 'a':\
    \ 'apple', 8: 'banana', 'a': 'apple' }))\nprint(check_dict_case({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }))\nprint(check_dict_case({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }))\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplrvs59g9.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmplrvs59g9.py\", line 48,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmplrvs59g9.py\", line\
    \ 40, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    True

    '
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n        if dict.keys()[0].isupper():\n\
    \            for key in dict:\n                if not key.isupper():\n       \
    \             return False\n        elif dict.keys()[0].islower():\n         \
    \   for key in dict:\n                if not key.islower():\n                \
    \    return False\n        else:\n            return False\n    return True\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2vbjm9p.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpq2vbjm9p.py\", line 46,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpq2vbjm9p.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpq2vbjm9p.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            else:\n                if key.islower()\
    \ or key.isupper():\n                    return True\n                else:\n\
    \                    return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfr8cxtdt.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpfr8cxtdt.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpfr8cxtdt.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if dict.keys()[0].isupper():\n        \
    \    for key in dict:\n                if key.islower():\n                   \
    \ return False\n        else:\n            for key in dict:\n                if\
    \ key.isupper():\n                    return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zwpu0tg.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5zwpu0tg.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5zwpu0tg.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp5zwpu0tg.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # TODO: Write code here\n    if\
    \ len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n\
    \            if not isinstance(key, str):\n                return False\n    \
    \        if key.islower() or key.isupper():\n                return True\n   \
    \         else:\n                return False\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzi623362.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpzi623362.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpzi623362.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if key.islower():\n            for key\
    \ in dict:\n                if key.isupper():\n                    return False\n\
    \        elif key.isupper():\n            for key in dict:\n                if\
    \ key.islower():\n                    return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8a0xlrno.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8a0xlrno.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8a0xlrno.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    else:\n        for key in dict:\n            if not isinstance(key, str):\n\
    \                return False\n            elif key.islower() and key.isupper():\n\
    \                return False\n            else:\n                return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqpzxag43.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpqpzxag43.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpqpzxag43.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           return True\n            elif key.isupper() == True:\n           \
    \     return True\n            else:\n                return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqgysnjv.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpnqgysnjv.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnqgysnjv.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n        if dict.keys()[0].islower():\n\
    \            for key in dict:\n                if not key.islower():\n       \
    \             return False\n        elif dict.keys()[0].isupper():\n         \
    \   for key in dict:\n                if not key.isupper():\n                \
    \    return False\n        else:\n            return False\n    return True\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbb8vdy3.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpzbb8vdy3.py\", line 46,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpzbb8vdy3.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpzbb8vdy3.py\", line 24, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n        if dict.keys()[0].isupper():\n\
    \            for key in dict:\n                if not key.isupper():\n       \
    \             return False\n        else:\n            for key in dict:\n    \
    \            if not key.islower():\n                    return False\n       \
    \ return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzu5y8hx5.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzu5y8hx5.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpzu5y8hx5.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpzu5y8hx5.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n        if dict.keys()[0].isupper():\n\
    \            for key in dict:\n                if not key.isupper():\n       \
    \             return False\n        else:\n            for key in dict:\n    \
    \            if not key.islower():\n                    return False\n       \
    \ return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzu5y8hx5.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzu5y8hx5.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpzu5y8hx5.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpzu5y8hx5.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n        if dict.keys()[0].islower():\n\
    \            for key in dict:\n                if not key.islower():\n       \
    \             return False\n        elif dict.keys()[0].isupper():\n         \
    \   for key in dict:\n                if not key.isupper():\n                \
    \    return False\n        else:\n            return False\n    return True\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbb8vdy3.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpzbb8vdy3.py\", line 46,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpzbb8vdy3.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpzbb8vdy3.py\", line 24, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # TODO: Write code here\n    if\
    \ len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n\
    \            if not isinstance(key, str):\n                return False\n    \
    \        elif key.islower() or key.isupper():\n                return True\n \
    \           else:\n                return False\n\ndef check(candidate):\n   \
    \ assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28538vh2.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp28538vh2.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp28538vh2.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # check if the dictionary is empty\n\
    \    if len(dict) == 0:\n        return False\n    # check if the dictionary has\
    \ all keys in lower case\n    elif all(key.islower() for key in dict):\n     \
    \   return True\n    # check if the dictionary has all keys in upper case\n  \
    \  elif all(key.isupper() for key in dict):\n        return True\n    # return\
    \ False if the dictionary has keys in mixed case\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        else:\n                    return False\n            else:\n        \
    \        return False\n\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4ygygho.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpg4ygygho.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpg4ygygho.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           for key in dict:\n                    if key.islower() == False:\n\
    \                        return False\n            elif key.isupper() == True:\n\
    \                for key in dict:\n                    if key.isupper() == False:\n\
    \                        return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxj1al7p.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpbxj1al7p.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbxj1al7p.py\", line\
    \ 38, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           for key in dict:\n                    if key.islower() == False:\n\
    \                        return False\n            elif key.isupper() == True:\n\
    \                for key in dict:\n                    if key.isupper() == False:\n\
    \                        return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy66d76v7.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpy66d76v7.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpy66d76v7.py\", line\
    \ 38, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if type(key) != str:\n            return\
    \ False\n    if dict.keys()[0].isupper():\n        for key in dict:\n        \
    \    if key.islower():\n                return False\n    else:\n        for key\
    \ in dict:\n            if key.isupper():\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp639w6z8n.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp639w6z8n.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp639w6z8n.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp639w6z8n.py\", line 23, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() or key.isupper():\n\
    \                continue\n            else:\n                return False\n \
    \       return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6zn94goc.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp6zn94goc.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6zn94goc.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n        if dict.keys()[0].isupper():\n\
    \            for key in dict:\n                if not key.isupper():\n       \
    \             return False\n        else:\n            for key in dict:\n    \
    \            if not key.islower():\n                    return False\n       \
    \ return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzu5y8hx5.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzu5y8hx5.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpzu5y8hx5.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpzu5y8hx5.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if key.islower():\n            for key\
    \ in dict:\n                if key.isupper():\n                    return False\n\
    \        elif key.isupper():\n            for key in dict:\n                if\
    \ key.islower():\n                    return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8a0xlrno.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8a0xlrno.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8a0xlrno.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if all(key.islower() for key in dict):\n\
    \            return True\n        elif all(key.isupper() for key in dict):\n \
    \           return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if isinstance(key, str):\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph9ci839_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmph9ci839_.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmph9ci839_.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if key.islower() or\
    \ key.isupper():\n                return True\n            else:\n           \
    \     return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9mngly4e.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9mngly4e.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9mngly4e.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n        return True\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5jlrv40k.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp5jlrv40k.py\", line 45,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5jlrv40k.py\", line\
    \ 39, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    return True\n                elif key.isupper()\
    \ == True:\n                    return True\n                else:\n         \
    \           return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5b178d9t.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           for key in dict:\n                    if key.islower() == False:\n\
    \                        return False\n            elif key.isupper() == True:\n\
    \                for key in dict:\n                    if key.isupper() == False:\n\
    \                        return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxj1al7p.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpbxj1al7p.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbxj1al7p.py\", line\
    \ 38, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if key.islower():\n            return True\n\
    \        elif key.isupper():\n            return True\n        else:\n       \
    \     return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprg9r53rs.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmprg9r53rs.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmprg9r53rs.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n        if dict.keys()[0].islower():\n\
    \            for key in dict:\n                if not key.islower():\n       \
    \             return False\n        else:\n            for key in dict:\n    \
    \            if not key.isupper():\n                    return False\n       \
    \ return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4305l0z.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpt4305l0z.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpt4305l0z.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpt4305l0z.py\", line 24, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           for key in dict:\n                    if key.islower() == False:\n\
    \                        return False\n            elif key.isupper() == True:\n\
    \                for key in dict:\n                    if key.isupper() == False:\n\
    \                        return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxj1al7p.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpbxj1al7p.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbxj1al7p.py\", line\
    \ 38, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxdw_pwxf.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if type(key) != str:\n            return\
    \ False\n    if dict.keys()[0].islower():\n        for key in dict:\n        \
    \    if not key.islower():\n                return False\n    else:\n        for\
    \ key in dict:\n            if not key.isupper():\n                return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsi7fz3hq.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpsi7fz3hq.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpsi7fz3hq.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpsi7fz3hq.py\", line 23, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    else:\n        for key in dict:\n            if not isinstance(key, str):\n\
    \                return False\n            else:\n                if key.islower():\n\
    \                    return True\n                elif key.isupper():\n      \
    \              return True\n                else:\n                    return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptyjv9kue.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmptyjv9kue.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmptyjv9kue.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxdw_pwxf.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if key.islower() ==\
    \ True:\n                return True\n            elif key.isupper() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmputcsk5tq.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmputcsk5tq.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmputcsk5tq.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    if len(dict) == 1:\n        return True\n    if len(dict) > 1:\n\
    \        if dict.keys()[0].islower():\n            for key in dict.keys():\n \
    \               if not key.islower():\n                    return False\n    \
    \        return True\n        elif dict.keys()[0].isupper():\n            for\
    \ key in dict.keys():\n                if not key.isupper():\n               \
    \     return False\n            return True\n        else:\n            return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb1ykeejo.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpb1ykeejo.py\", line 46,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpb1ykeejo.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpb1ykeejo.py\", line 23, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                elif key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # Your code goes here\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            elif key.isupper()\
    \ == True:\n                return True\n            else:\n                return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf82lxzc9.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpf82lxzc9.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpf82lxzc9.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # Your code here\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if not isinstance(key, str):\n                return False\n            if\
    \ key.isupper() and key.islower():\n                return False\n           \
    \ else:\n                return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp71apdeii.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp71apdeii.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp71apdeii.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if key.isupper() ==\
    \ True:\n                return True\n            else:\n                return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdlk3go68.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpdlk3go68.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpdlk3go68.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if key.islower():\n            return True\n\
    \        elif key.isupper():\n            return True\n        else:\n       \
    \     return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprg9r53rs.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmprg9r53rs.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmprg9r53rs.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n    if dict.keys()[0].islower():\n        for key in dict:\n\
    \            if not key.islower():\n                return False\n    elif dict.keys()[0].isupper():\n\
    \        for key in dict:\n            if not key.isupper():\n               \
    \ return False\n    else:\n        return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph4qptpy_.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmph4qptpy_.py\", line 45,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmph4qptpy_.py\", line\
    \ 36, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmph4qptpy_.py\", line 23, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if key.islower() or\
    \ key.isupper():\n                return True\n            else:\n           \
    \     return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9mngly4e.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9mngly4e.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9mngly4e.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            if key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfnuhmmcg.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpfnuhmmcg.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpfnuhmmcg.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    if len(dict) == 1:\n        return True\n    else:\n        keys = list(dict.keys())\n\
    \        if keys[0].islower():\n            for key in keys:\n               \
    \ if not key.islower():\n                    return False\n        elif keys[0].isupper():\n\
    \            for key in keys:\n                if not key.isupper():\n       \
    \             return False\n        else:\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    else:\n        for key in dict:\n            if not isinstance(key, str):\n\
    \                return False\n        if all(key.islower() for key in dict):\n\
    \            return True\n        elif all(key.isupper() for key in dict):\n \
    \           return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if dict.keys()[0].isupper():\n        \
    \    for key in dict:\n                if key.islower():\n                   \
    \ return False\n        elif dict.keys()[0].islower():\n            for key in\
    \ dict:\n                if key.isupper():\n                    return False\n\
    \        else:\n            return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfn_mcjm4.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpfn_mcjm4.py\", line 46,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpfn_mcjm4.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpfn_mcjm4.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    return True\n                elif key.isupper()\
    \ == True:\n                    return True\n                else:\n         \
    \           return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5b178d9t.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if key.isupper() ==\
    \ True:\n                return True\n            else:\n                return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdlk3go68.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpdlk3go68.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpdlk3go68.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() and key.isupper():\n\
    \                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpayqd1_7v.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpayqd1_7v.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpayqd1_7v.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    else:\n        keys = list(dict.keys())\n        if keys[0].islower():\n\
    \            for key in keys:\n                if not key.islower():\n       \
    \             return False\n            return True\n        elif keys[0].isupper():\n\
    \            for key in keys:\n                if not key.isupper():\n       \
    \             return False\n            return True\n        else:\n         \
    \   return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if isinstance(key, str):\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph9ci839_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmph9ci839_.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmph9ci839_.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            if key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfnuhmmcg.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpfnuhmmcg.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpfnuhmmcg.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    #check if the dictionary is empty\n\
    \    if not dict:\n        return False\n    #check if the keys are all strings\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n    #check if the keys are all upper case\n    if all(key.isupper() for\
    \ key in dict):\n        return True\n    #check if the keys are all lower case\n\
    \    elif all(key.islower() for key in dict):\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        if all(isinstance(key, str) for key in dict.keys()):\n\
    \            if all(key.islower() for key in dict.keys()):\n                return\
    \ True\n            elif all(key.isupper() for key in dict.keys()):\n        \
    \        return True\n            else:\n                return False\n      \
    \  else:\n            return False\n\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if key.islower():\n            for key\
    \ in dict:\n                if key.isupper():\n                    return False\n\
    \        elif key.isupper():\n            for key in dict:\n                if\
    \ key.islower():\n                    return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoobbvua3.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpoobbvua3.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpoobbvua3.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n    if dict.keys()[0].islower():\n        for key in dict:\n\
    \            if not key.islower():\n                return False\n    elif dict.keys()[0].isupper():\n\
    \        for key in dict:\n            if not key.isupper():\n               \
    \ return False\n    else:\n        return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph4qptpy_.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmph4qptpy_.py\", line 45,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmph4qptpy_.py\", line\
    \ 36, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmph4qptpy_.py\", line 23, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # your code here\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        upper = True\n        lower\
    \ = True\n        for key in dict:\n            if not isinstance(key, str):\n\
    \                return False\n            if key.islower():\n               \
    \ upper = False\n            if key.isupper():\n                lower = False\n\
    \        return upper or lower\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_6a7km8.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpc_6a7km8.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpc_6a7km8.py\", line\
    \ 36, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # your code here\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if type(key) == str:\n                if key.islower():\n                \
    \    return True\n                elif key.isupper():\n                    return\
    \ True\n                else:\n                    return False\n            else:\n\
    \                return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0cn39yn1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp0cn39yn1.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp0cn39yn1.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        else:\n                    return False\n            else:\n        \
    \        return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpco7pkxoq.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpco7pkxoq.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpco7pkxoq.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    return True\n                elif key.isupper()\
    \ == True:\n                    return True\n                else:\n         \
    \           return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5b178d9t.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    return True\n                elif key.isupper()\
    \ == True:\n                    return True\n                else:\n         \
    \           return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5b178d9t.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # check if the dictionary is empty\n\
    \    if not dict:\n        return False\n    # check if all keys are strings\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n    # check if all keys are in lower case\n    if all(key.islower() for\
    \ key in dict):\n        return True\n    # check if all keys are in upper case\n\
    \    elif all(key.isupper() for key in dict):\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            else:\n                if key.islower()\
    \ or key.isupper():\n                    return True\n                else:\n\
    \                    return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfr8cxtdt.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpfr8cxtdt.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpfr8cxtdt.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           for key in dict:\n                    if key.islower() == False:\n\
    \                        return False\n            elif key.isupper() == True:\n\
    \                for key in dict:\n                    if key.isupper() == False:\n\
    \                        return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxj1al7p.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpbxj1al7p.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbxj1al7p.py\", line\
    \ 38, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if dict.keys()[0].isupper():\n        \
    \    for key in dict:\n                if key.islower():\n                   \
    \ return False\n        elif dict.keys()[0].islower():\n            for key in\
    \ dict:\n                if key.isupper():\n                    return False\n\
    \        else:\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj0ir_1ui.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpj0ir_1ui.py\", line 46,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpj0ir_1ui.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpj0ir_1ui.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    return True\n                else:\n         \
    \           return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9cu5alr.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp_9cu5alr.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp_9cu5alr.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # Write your code here\n    if\
    \ len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n\
    \            if type(key) != str:\n                return False\n        if key.isupper():\n\
    \            for key in dict:\n                if key.islower():\n           \
    \         return False\n        elif key.islower():\n            for key in dict:\n\
    \                if key.isupper():\n                    return False\n       \
    \ else:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplx6cj5c8.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmplx6cj5c8.py\", line 48,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmplx6cj5c8.py\", line\
    \ 41, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    return True\n                else:\n         \
    \           return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9cu5alr.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp_9cu5alr.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp_9cu5alr.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() and key.isupper():\n\
    \                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpayqd1_7v.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpayqd1_7v.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpayqd1_7v.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           for key in dict:\n                    if key.islower() == False:\n\
    \                        return False\n            elif key.isupper() == True:\n\
    \                for key in dict:\n                    if key.isupper() == False:\n\
    \                        return False\n            else:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    if all(x.islower() for x in dict.keys()):\n        return True\n\
    \    if all(x.isupper() for x in dict.keys()):\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.isupper() == False and key.islower()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0znjgrf1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp0znjgrf1.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp0znjgrf1.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.isupper() == False and key.islower()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0znjgrf1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp0znjgrf1.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp0znjgrf1.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if key.islower():\n            for key\
    \ in dict:\n                if key.isupper():\n                    return False\n\
    \        elif key.isupper():\n            for key in dict:\n                if\
    \ key.islower():\n                    return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8a0xlrno.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8a0xlrno.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8a0xlrno.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ or key.isupper():\n                    return True\n                else:\n\
    \                    return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvemxmhqt.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpvemxmhqt.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpvemxmhqt.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n        if key.islower():\n           \
    \ return True\n        elif key.isupper():\n            return True\n        else:\n\
    \            return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1lacltr4.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp1lacltr4.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1lacltr4.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    else:\n        for key in dict:\n            if type(key) != str:\n     \
    \           return False\n        if all(key.islower() for key in dict):\n   \
    \         return True\n        elif all(key.isupper() for key in dict):\n    \
    \        return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n    if dict.keys()[0].isupper():\n        for key in dict:\n        \
    \    if not key.isupper():\n                return False\n    else:\n        for\
    \ key in dict:\n            if not key.islower():\n                return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7wsywzvv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp7wsywzvv.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp7wsywzvv.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp7wsywzvv.py\", line 23, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == False and key.isupper() == False:\n                    return False\n   \
    \     return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpimuw3f87.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpimuw3f87.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpimuw3f87.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           return True\n            elif key.isupper() == True:\n           \
    \     return True\n            else:\n                return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqgysnjv.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpnqgysnjv.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnqgysnjv.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n    if dict.keys()[0].isupper():\n        for key in dict:\n        \
    \    if not key.isupper():\n                return False\n    elif dict.keys()[0].islower():\n\
    \        for key in dict:\n            if not key.islower():\n               \
    \ return False\n    else:\n        return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7klrtocw.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp7klrtocw.py\", line 45,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp7klrtocw.py\", line\
    \ 36, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp7klrtocw.py\", line 23, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if key.islower():\n            for key\
    \ in dict:\n                if key.isupper():\n                    return False\n\
    \        elif key.isupper():\n            for key in dict:\n                if\
    \ key.islower():\n                    return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8a0xlrno.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8a0xlrno.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8a0xlrno.py\", line\
    \ 37, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxdw_pwxf.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxdw_pwxf.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           for key in dict:\n                    if key.islower() == False:\n\
    \                        return False\n                return True\n         \
    \   elif key.isupper() == True:\n                for key in dict:\n          \
    \          if key.isupper() == False:\n                        return False\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if dict.keys()[0].isupper():\n        \
    \    for key in dict:\n                if key.islower():\n                   \
    \ return False\n        else:\n            for key in dict:\n                if\
    \ key.isupper():\n                    return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zwpu0tg.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5zwpu0tg.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5zwpu0tg.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp5zwpu0tg.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        keys = dict.keys()\n        if isinstance(keys[0],\
    \ str):\n            if keys[0].islower():\n                for key in keys:\n\
    \                    if not key.islower():\n                        return False\n\
    \                return True\n            elif keys[0].isupper():\n          \
    \      for key in keys:\n                    if not key.isupper():\n         \
    \               return False\n                return True\n            else:\n\
    \                return False\n        else:\n            return False\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg8j9bsxl.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpg8j9bsxl.py\", line 48,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpg8j9bsxl.py\", line\
    \ 39, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpg8j9bsxl.py\", line 22, in check_dict_case\n    if isinstance(keys[0],\
    \ str):\nTypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           for key in dict:\n                    if key.islower() == False:\n\
    \                        return False\n            elif key.isupper() == True:\n\
    \                for key in dict:\n                    if key.isupper() == False:\n\
    \                        return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxj1al7p.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpbxj1al7p.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbxj1al7p.py\", line\
    \ 38, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == True:\n     \
    \           for key in dict:\n                    if key.islower() == False:\n\
    \                        return False\n            elif key.isupper() == True:\n\
    \                for key in dict:\n                    if key.isupper() == False:\n\
    \                        return False\n            else:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxdw_pwxf.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                else:\n\
    \                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n        return True\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # your code here\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if not isinstance(key, str):\n                return False\n            elif\
    \ key.islower() and key.isupper():\n                return False\n        return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpub5q04o6.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpub5q04o6.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpub5q04o6.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    return True\n                elif key.isupper()\
    \ == True:\n                    return True\n                else:\n         \
    \           return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5b178d9t.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    else:\n        keys = dict.keys()\n        if all(isinstance(key, str) for\
    \ key in keys):\n            if all(key.islower() for key in keys):\n        \
    \        return True\n            elif all(key.isupper() for key in keys):\n \
    \               return True\n            else:\n                return False\n\
    \        else:\n            return False\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    # Your code here\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if not isinstance(key, str):\n                return False\n        if all(key.islower()\
    \ for key in dict):\n            return True\n        elif all(key.isupper() for\
    \ key in dict):\n            return True\n        else:\n            return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    else:\n        for key in dict:\n            if not isinstance(key, str):\n\
    \                return False\n            elif key.islower() and not key.isupper():\n\
    \                return True\n            elif key.isupper() and not key.islower():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_c4udb0.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpu_c4udb0.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpu_c4udb0.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == False and key.isupper() == False:\n                    return False\n   \
    \     return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpimuw3f87.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpimuw3f87.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpimuw3f87.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() and key.isupper():\n\
    \                return False\n            else:\n                return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa7fmuabc.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpa7fmuabc.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpa7fmuabc.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if dict.keys()[0].isupper():\n        \
    \    for key in dict:\n                if key.islower():\n                   \
    \ return False\n        else:\n            for key in dict:\n                if\
    \ key.isupper():\n                    return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zwpu0tg.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5zwpu0tg.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5zwpu0tg.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp5zwpu0tg.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                elif key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxdw_pwxf.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxdw_pwxf.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    for key in dict:\n                        if key.islower()\
    \ == False:\n                            return False\n                elif key.isupper()\
    \ == True:\n                    for key in dict:\n                        if key.isupper()\
    \ == False:\n                            return False\n                else:\n\
    \                    return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ or key.isupper():\n                    return True\n                else:\n\
    \                    return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvemxmhqt.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpvemxmhqt.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpvemxmhqt.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() and key.isupper():\n\
    \                return False\n            else:\n                return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8vlslyvr.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8vlslyvr.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8vlslyvr.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    return True\n                elif key.isupper()\
    \ == True:\n                    return True\n                else:\n         \
    \           return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5b178d9t.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n    if dict.keys()[0].islower():\n        for key in dict:\n\
    \            if not key.islower():\n                return False\n    elif dict.keys()[0].isupper():\n\
    \        for key in dict:\n            if not key.isupper():\n               \
    \ return False\n    else:\n        return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph4qptpy_.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmph4qptpy_.py\", line 45,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmph4qptpy_.py\", line\
    \ 36, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmph4qptpy_.py\", line 23, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.islower():\n                    return True\n        \
    \        elif key.isupper():\n                    return True\n              \
    \  else:\n                    return False\n            else:\n              \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuqexyau5.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuqexyau5.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.isupper() or key.islower():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwznv1rqb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwznv1rqb.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwznv1rqb.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    if dict.keys()[0].islower():\n        for key in dict.keys():\n \
    \           if not key.islower():\n                return False\n    else:\n \
    \       for key in dict.keys():\n            if not key.isupper():\n         \
    \       return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfdz74wkn.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpfdz74wkn.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpfdz74wkn.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpfdz74wkn.py\", line 20, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n        if dict.keys()[0].isupper():\n        \
    \    for key in dict:\n                if key.islower():\n                   \
    \ return False\n        else:\n            for key in dict:\n                if\
    \ key.isupper():\n                    return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zwpu0tg.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5zwpu0tg.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5zwpu0tg.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp5zwpu0tg.py\", line 24, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            elif key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbtd_6350.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbtd_6350.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if not isinstance(key,\
    \ str):\n                return False\n            elif key.islower() and key.isupper():\n\
    \                return False\n            else:\n                return True\n\
    \n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vdvj4vy.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp4vdvj4vy.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4vdvj4vy.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        lower_case = True\n        upper_case = True\n   \
    \     for key in dict:\n            if not isinstance(key, str):\n           \
    \     return False\n            if key.islower():\n                upper_case\
    \ = False\n            if key.isupper():\n                lower_case = False\n\
    \        return lower_case or upper_case\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe8vwdkms.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpe8vwdkms.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpe8vwdkms.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271128
- exit_code: 0
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) == str:\n\
    \                if key.isupper():\n                    for key in dict:\n   \
    \                     if type(key) == str:\n                            if key.islower():\n\
    \                                return False\n                elif key.islower():\n\
    \                    for key in dict:\n                        if type(key) ==\
    \ str:\n                            if key.isupper():\n                      \
    \          return False\n                else:\n                    return False\n\
    \            else:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271128
- exit_code: -1
  program: "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return\
    \ True if all keys are strings in lower \n    case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age':\
    \ '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC',\
    \ 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    else:\n        for key in dict:\n            if type(key) != str:\n\
    \                return False\n            else:\n                if key.islower()\
    \ == True:\n                    return True\n                elif key.isupper()\
    \ == True:\n                    return True\n                else:\n         \
    \           return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5b178d9t.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5b178d9t.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
