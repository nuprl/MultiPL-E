language: notypes.py
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if\
    \ n % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if\
    \ n % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if\
    \ n % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if\
    \ n % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpav6y48zo.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpav6y48zo.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpav6y48zo.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if\
    \ n % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in\
    \ arr if num % 2 == 0]\n    if not even_nums:\n        return []\n    min_even\
    \ = min(even_nums)\n    return [min_even, arr.index(min_even)]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nodes = [node for node\
    \ in arr if node % 2 == 0]\n    if even_nodes:\n        min_even_node = min(even_nodes)\n\
    \        return [min_even_node, arr.index(min_even_node)]\n    return []\n\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    else:\n        return\
    \ [min(evens), arr.index(min(evens))]\n\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_values = [x for x in\
    \ arr if x % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even\
    \ = min(even_values)\n    smallest_even_index = arr.index(smallest_even)\n   \
    \ return [smallest_even, smallest_even_index]\n\n\ndef check(candidate):\n   \
    \ assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_values = [x for x in\
    \ arr if x % 2 == 0]\n    if even_values:\n        return [min(even_values), arr.index(min(even_values))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in\
    \ arr if num % 2 == 0]\n    if not even_nums:\n        return []\n    smallest_even\
    \ = min(even_nums)\n    return [smallest_even, arr.index(smallest_even)]\n\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    if len(arr)\
    \ == 0:\n        return []\n    even_nums = [num for num in arr if num % 2 ==\
    \ 0]\n    if len(even_nums) == 0:\n        return []\n    smallest_even = min(even_nums)\n\
    \    return [smallest_even, arr.index(smallest_even)]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if\
    \ n % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in\
    \ arr if num % 2 == 0]\n    if not even_nums:\n        return []\n    else:\n\
    \        smallest_even = min(even_nums)\n        return [smallest_even, arr.index(smallest_even)]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdgvw29m.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpxdgvw29m.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpxdgvw29m.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in\
    \ arr if num % 2 == 0]\n    if even_nums:\n        return [min(even_nums), arr.index(min(even_nums))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [x for x in arr\
    \ if x % 2 == 0]\n    if even_nums:\n        return [min(even_nums), arr.index(min(even_nums))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # YOUR CODE HERE\n    evens\
    \ = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    else:\n        return []\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # if there are no even values\
    \ or the given array is empty, return []\n    if not arr or not any(i % 2 == 0\
    \ for i in arr):\n        return []\n\n    # get the smallest even value\n   \
    \ smallest_even = min(i for i in arr if i % 2 == 0)\n\n    # get the index of\
    \ the smallest even value\n    smallest_even_index = arr.index(smallest_even)\n\
    \n    # return the smallest even value and its index\n    return [smallest_even,\
    \ smallest_even_index]\n\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = []\n    for i,\
    \ num in enumerate(arr):\n        if num % 2 == 0:\n            even_nums.append([num,\
    \ i])\n    if not even_nums:\n        return []\n    return min(even_nums)\n\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    else:\n        return\
    \ [min(evens), arr.index(min(evens))]\n\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if\
    \ n % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # YOUR CODE HERE\n    if len(arr)\
    \ == 0:\n        return []\n    evens = []\n    for i in range(len(arr)):\n  \
    \      if arr[i] % 2 == 0:\n            evens.append([arr[i], i])\n    if len(evens)\
    \ == 0:\n        return []\n    evens.sort()\n    return evens[0]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n  \
    \  return [min_even, min_even_index]\n\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in\
    \ arr if num % 2 == 0]\n    if even_nums:\n        return [min(even_nums), arr.index(min(even_nums))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if\
    \ n % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in\
    \ arr if num % 2 == 0]\n    if even_nums:\n        smallest_even = min(even_nums)\n\
    \        return [smallest_even, arr.index(smallest_even)]\n    return []\n\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in\
    \ arr if num % 2 == 0]\n    if not even_nums:\n        return []\n    min_even\
    \ = min(even_nums)\n    return [min_even, arr.index(min_even)]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_values = [x for x in\
    \ arr if x % 2 == 0]\n    if even_values:\n        return [min(even_values), arr.index(min(even_values))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    if not\
    \ arr:\n        return []\n    even_nums = [i for i in arr if i % 2 == 0]\n  \
    \  if not even_nums:\n        return []\n    min_even = min(even_nums)\n    return\
    \ [min_even, arr.index(min_even)]\n\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    evens\
    \ = [i for i in arr if i % 2 == 0]\n    if len(evens) == 0:\n        return []\n\
    \    else:\n        return [min(evens), arr.index(min(evens))]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # If the array is empty, return\
    \ an empty list\n    if len(arr) == 0:\n        return []\n    # If the array\
    \ is not empty, find the smallest even value\n    else:\n        # Create a list\
    \ of even values\n        evens = []\n        for i in arr:\n            if i\
    \ % 2 == 0:\n                evens.append(i)\n        # If the list of even values\
    \ is empty, return an empty list\n        if len(evens) == 0:\n            return\
    \ []\n        # If the list of even values is not empty, find the smallest even\
    \ value\n        else:\n            # Find the smallest even value\n         \
    \   smallest_even = min(evens)\n            # Find the index of the smallest even\
    \ value\n            smallest_even_index = arr.index(smallest_even)\n        \
    \    # Return the smallest even value and its index\n            return [smallest_even,\
    \ smallest_even_index]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    else:\n        smallest\
    \ = min(evens)\n        return [smallest, arr.index(smallest)]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsmyxi8t_.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpsmyxi8t_.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpsmyxi8t_.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in\
    \ arr if num % 2 == 0]\n    if even_nums:\n        return [min(even_nums), arr.index(min(even_nums))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    even_nums = [i for i in arr if i % 2 == 0]\n    if not even_nums:\n\
    \        return []\n    even_nums.sort()\n    return [even_nums[0], arr.index(even_nums[0])]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    evens.sort()\n    return\
    \ [evens[0], arr.index(evens[0])]\n\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in\
    \ arr if num % 2 == 0]\n    if not even_nums:\n        return []\n    min_even\
    \ = min(even_nums)\n    return [min_even, arr.index(min_even)]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nodes = [node for node\
    \ in arr if node % 2 == 0]\n    if even_nodes:\n        min_even_node = min(even_nodes)\n\
    \        return [min_even_node, arr.index(min_even_node)]\n    return []\n\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpav6y48zo.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpav6y48zo.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpav6y48zo.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [num for num in arr\
    \ if num % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\n\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nodes = [node for node\
    \ in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even\
    \ = min(even_nodes)\n    smallest_even_index = arr.index(smallest_even)\n    return\
    \ [smallest_even, smallest_even_index]\n\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if\
    \ n % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if\
    \ n % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    even_nums = [i for i in arr if i % 2 == 0]\n    if not even_nums:\n\
    \        return []\n    return [min(even_nums), arr.index(min(even_nums))]\n\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [x for x in arr\
    \ if x % 2 == 0]\n    if even_nums:\n        even_nums.sort()\n        return\
    \ [even_nums[0], arr.index(even_nums[0])]\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [x for x in arr\
    \ if x % 2 == 0]\n    if not even_nums:\n        return []\n    smallest_even\
    \ = min(even_nums)\n    return [smallest_even, arr.index(smallest_even)]\n\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    if not\
    \ arr:\n        return []\n    even_nums = [num for num in arr if num % 2 == 0]\n\
    \    if not even_nums:\n        return []\n    min_even = min(even_nums)\n   \
    \ min_even_index = arr.index(min_even)\n    return [min_even, min_even_index]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # Solution 1\n    # evens\
    \ = [i for i in arr if i % 2 == 0]\n    # if evens:\n    #     return [min(evens),\
    \ arr.index(min(evens))]\n    # return []\n\n    # Solution 2\n    evens = [i\
    \ for i in arr if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = []\n    for i, v in\
    \ enumerate(arr):\n        if v % 2 == 0:\n            evens.append([v, i])\n\
    \    if evens:\n        evens.sort()\n        return evens[0]\n    return []\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi98q9h3t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpi98q9h3t.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi98q9h3t.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: 0
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270946
- exit_code: -1
  program: "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch\
    \ of a tree that has non-negative integer nodes\n    your task is to pluck one\
    \ of the nodes and return it.\n    The plucked node should be the node with the\
    \ smallest even value.\n    If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n\n    The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
    \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4,\
    \ 2, 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\n    # your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7c60c6hr.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp7c60c6hr.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp7c60c6hr.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1660270946
