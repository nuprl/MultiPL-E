language: notypes.py
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring\
    \ in s, strings))\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda x: substring\
    \ in x, strings))\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def filter_by_substring(strings, substring):\n    \"\"\" Filter an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
