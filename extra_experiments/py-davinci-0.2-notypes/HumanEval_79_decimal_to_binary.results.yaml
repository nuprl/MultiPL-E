language: notypes.py
name: HumanEval_79_decimal_to_binary
results:
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n   \
    \     binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n   \
    \ return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd9k8ojp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphd9k8ojp.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphd9k8ojp.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return 'db'\
    \ + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n   \
    \     binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n   \
    \ return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd9k8ojp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphd9k8ojp.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphd9k8ojp.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # Your code here\n    # Hint: use the built-in\
    \ function bin()\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal != 0:\n    \
    \    binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpif98xafq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpif98xafq.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpif98xafq.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_50axfz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg_50axfz.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpg_50axfz.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # Your code here\n    return 'db' + bin(decimal)[2:]\
    \ + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_50axfz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg_50axfz.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpg_50axfz.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n   \
    \     binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n   \
    \ return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd9k8ojp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphd9k8ojp.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphd9k8ojp.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return 'db'\
    \ + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return 'db'\
    \ + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_50axfz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg_50axfz.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpg_50axfz.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n   \
    \     binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n   \
    \ return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd9k8ojp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphd9k8ojp.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphd9k8ojp.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal != 0:\n    \
    \    binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpif98xafq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpif98xafq.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpif98xafq.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = 'db'\n    while decimal > 0:\n   \
    \     binary += str(decimal % 2)\n        decimal = decimal // 2\n    return binary[::-1]\
    \ + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2vgkag6n.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2vgkag6n.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp2vgkag6n.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n   \
    \     binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n   \
    \ return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd9k8ojp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphd9k8ojp.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphd9k8ojp.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return 'db'\
    \ + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyzvj35px.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyzvj35px.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpyzvj35px.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: write your code here\n    return 'db'\
    \ + bin(decimal)[2:] + 'db'\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal //= 2\n    return 'db'\
    \ + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcm6nzapw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcm6nzapw.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpcm6nzapw.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Complete the function\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0jcn5320.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0jcn5320.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp0jcn5320.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n   \
    \     binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n   \
    \ return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd9k8ojp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphd9k8ojp.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphd9k8ojp.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Implement this function.\n    # Hint:\
    \ You can use the bin() function.\n    # Hint: You can use the str() function.\n\
    \    # Hint: You can use the len() function.\n    # Hint: You can use the slice\
    \ operator.\n    # Hint: You can use the 'db' string.\n    # Hint: You can use\
    \ the '0' string.\n    # Hint: You can use the '1' string.\n    # Hint: You can\
    \ use the '+' operator.\n    # Hint: You can use the '*' operator.\n    # Hint:\
    \ You can use the ':' operator.\n    # Hint: You can use the 'in' operator.\n\
    \    # Hint: You can use the 'if' statement.\n    # Hint: You can use the 'else'\
    \ statement.\n    # Hint: You can use the 'return' statement.\n    # Hint: You\
    \ can use the 'while' statement.\n    # Hint: You can use the 'for' statement.\n\
    \    # Hint: You can use the 'range' function.\n    # Hint: You can use the 'len'\
    \ function.\n    # Hint: You can use the 'int' function.\n    # Hint: You can\
    \ use the 'str' function.\n    # Hint: You can use the 'bin' function.\n    #\
    \ Hint: You can use the 'replace' function.\n    # Hint: You can use the 'endswith'\
    \ function.\n    # Hint: You can use the 'startswith' function.\n    # Hint: You\
    \ can use the 'isdigit' function.\n    # Hint: You can use the 'isalpha' function.\n\
    \    # Hint: You can use the 'isupper' function.\n    # Hint: You can use the\
    \ 'islower' function.\n    # Hint: You can use the 'isnumeric' function.\n   \
    \ # Hint: You can use the 'isalpha' function.\n    # Hint: You can use the 'isidentifier'\
    \ function.\n    # Hint: You can use the 'isprintable' function.\n    # Hint:\
    \ You can use the 'iss\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmxdyk4e.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmppmxdyk4e.py\", line 56,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmppmxdyk4e.py\"\
    , line 50, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyzvj35px.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyzvj35px.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpyzvj35px.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplz_mxn69.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplz_mxn69.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmplz_mxn69.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return 'db'\
    \ + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_50axfz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg_50axfz.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpg_50axfz.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyzvj35px.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyzvj35px.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpyzvj35px.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: implement this function\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxe4jbkze.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxe4jbkze.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpxe4jbkze.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return 'db'\
    \ + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = bin(decimal)\n    return 'db' + binary[2:]\
    \ + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n   \
    \     binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n   \
    \ return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd9k8ojp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphd9k8ojp.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphd9k8ojp.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return 'db'\
    \ + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n\
    \    assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyzvj35px.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyzvj35px.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpyzvj35px.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: implement this function\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxe4jbkze.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxe4jbkze.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpxe4jbkze.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: implement this function\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxe4jbkze.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxe4jbkze.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpxe4jbkze.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = bin(decimal)\n    return 'db' + binary[2:]\
    \ + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert\
    \ candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # Your code here\n    binary = ''\n    while\
    \ decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal =\
    \ decimal // 2\n    return 'db' + binary + 'db'\n\n\ndef check(candidate):\n \
    \   assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprrqrv4fh.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprrqrv4fh.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmprrqrv4fh.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyzvj35px.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyzvj35px.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpyzvj35px.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # YOUR CODE HERE\n    binary = ''\n    while\
    \ decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal =\
    \ decimal // 2\n    return 'db' + binary + 'db'\n\n\ndef check(candidate):\n \
    \   assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmx2eyvx1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmx2eyvx1.py\", line 30,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpmx2eyvx1.py\"\
    , line 24, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: write your code here\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5wq4ecs4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5wq4ecs4.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp5wq4ecs4.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyzvj35px.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyzvj35px.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpyzvj35px.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: write your code here\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5wq4ecs4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5wq4ecs4.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp5wq4ecs4.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyzvj35px.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyzvj35px.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpyzvj35px.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(0) == 'db0db'\n    assert candidate(32) == 'db100000db'\n\
    \    assert candidate(103) == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\
    \ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplz_mxn69.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplz_mxn69.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmplz_mxn69.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_50axfz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg_50axfz.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpg_50axfz.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_50axfz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg_50axfz.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpg_50axfz.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n   \
    \     binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n   \
    \ return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd9k8ojp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphd9k8ojp.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphd9k8ojp.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: implement this function\n    return\
    \ 'db' + bin(decimal)[2:] + 'db'\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_50axfz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg_50axfz.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpg_50axfz.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # your code here\n    return \"db\" + bin(decimal)[2:]\
    \ + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n  \
    \  assert candidate(32) == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n\
    \    assert candidate(15) == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: write your code here\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5wq4ecs4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5wq4ecs4.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmp5wq4ecs4.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    # TODO: implement this function\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxe4jbkze.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxe4jbkze.py\", line 26,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpxe4jbkze.py\"\
    , line 20, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n   \
    \     binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n   \
    \ return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd9k8ojp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphd9k8ojp.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphd9k8ojp.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\
    \n\ndef check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\n\
    def check(candidate):\n    assert candidate(0) == 'db0db'\n    assert candidate(32)\
    \ == 'db100000db'\n    assert candidate(103) == 'db1100111db'\n    assert candidate(15)\
    \ == 'db1111db'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n   \
    \     binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n   \
    \ return \"db\" + binary + \"db\"\n\n\ndef check(candidate):\n    assert candidate(0)\
    \ == 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd9k8ojp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphd9k8ojp.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmphd9k8ojp.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n\
    \    'db100000db'\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n     \
    \   binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return\
    \ 'db' + binary + 'db'\n\n\ndef check(candidate):\n    assert candidate(0) ==\
    \ 'db0db'\n    assert candidate(32) == 'db100000db'\n    assert candidate(103)\
    \ == 'db1100111db'\n    assert candidate(15) == 'db1111db'\n\ndef test_check():\n\
    \    check(decimal_to_binary)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaczr8yb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbaczr8yb.py\", line 29,\
    \ in test_check\n    check(decimal_to_binary)\n  File \"/tmp/tmpbaczr8yb.py\"\
    , line 23, in check\n    assert candidate(0) == 'db0db'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
