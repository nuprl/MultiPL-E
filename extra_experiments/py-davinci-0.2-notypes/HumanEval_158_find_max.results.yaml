language: notypes.py
name: HumanEval_158_find_max
results:
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_5q0fq8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpw_5q0fq8.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpw_5q0fq8.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_unique:\n            max_unique = len(set(word))\n            max_word\
    \ = word\n    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvv11k7ng.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvv11k7ng.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvv11k7ng.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_unique:\n            max_unique = len(set(word))\n            max_word\
    \ = word\n    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvv11k7ng.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvv11k7ng.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvv11k7ng.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_count =\
    \ 0\n    for word in words:\n        if len(set(word)) > max_count:\n        \
    \    max_count = len(set(word))\n            max_word = word\n    return max_word\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv6cw8wn.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplv6cw8wn.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplv6cw8wn.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_count =\
    \ 0\n    for word in words:\n        if len(set(word)) > max_count:\n        \
    \    max_count = len(set(word))\n            max_word = word\n    return max_word\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv6cw8wn.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplv6cw8wn.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplv6cw8wn.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzoy9kh4d.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzoy9kh4d.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzoy9kh4d.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = \"\"\n    max_count\
    \ = 0\n    for word in words:\n        if len(set(word)) > max_count:\n      \
    \      max_count = len(set(word))\n            max_word = word\n    return max_word\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppd7bvl6e.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppd7bvl6e.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmppd7bvl6e.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5lfxzxd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpg5lfxzxd.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpg5lfxzxd.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(max_word))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_unique:\n            max_word = word\n            max_unique = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgubihyx7.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgubihyx7.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpgubihyx7.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    max_word = ''\n\
    \    for word in words:\n        if len(set(word)) > max_len:\n            max_len\
    \ = len(set(word))\n            max_word = word\n    return max_word\n\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_518k1q.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps_518k1q.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmps_518k1q.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzoy9kh4d.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzoy9kh4d.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzoy9kh4d.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_unique =\
    \ 0\n    for word in words:\n        unique = len(set(word))\n        if unique\
    \ > max_unique:\n            max_unique = unique\n            max_word = word\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnbbhwcd.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmppnbbhwcd.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmppnbbhwcd.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_unique = 0\n    max_word =\
    \ ''\n    for word in words:\n        unique = len(set(word))\n        if unique\
    \ > max_unique:\n            max_unique = unique\n            max_word = word\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdggpiwc4.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpdggpiwc4.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpdggpiwc4.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_count =\
    \ 0\n    for word in words:\n        count = len(set(word))\n        if count\
    \ > max_count:\n            max_count = count\n            max_word = word\n \
    \   return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp61nx8549.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp61nx8549.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp61nx8549.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_unique = 0\n    max_word =\
    \ ''\n    for word in words:\n        unique = len(set(word))\n        if unique\
    \ > max_unique:\n            max_unique = unique\n            max_word = word\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdggpiwc4.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpdggpiwc4.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpdggpiwc4.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(max_word))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_5q0fq8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpw_5q0fq8.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpw_5q0fq8.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_num\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_num:\n            max_word = word\n            max_num = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpidb45e9p.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpidb45e9p.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpidb45e9p.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_5q0fq8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpw_5q0fq8.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpw_5q0fq8.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_count =\
    \ 0\n    for word in words:\n        if len(set(word)) > max_count:\n        \
    \    max_count = len(set(word))\n            max_word = word\n    return max_word\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv6cw8wn.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplv6cw8wn.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplv6cw8wn.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_count =\
    \ 0\n    for word in words:\n        if len(set(word)) > max_count:\n        \
    \    max_count = len(set(word))\n            max_word = word\n    return max_word\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv6cw8wn.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplv6cw8wn.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplv6cw8wn.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_num\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_num:\n            max_word = word\n            max_num = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpidb45e9p.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpidb45e9p.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpidb45e9p.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_unique =\
    \ 0\n    for word in words:\n        unique = len(set(word))\n        if unique\
    \ > max_unique:\n            max_unique = unique\n            max_word = word\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnbbhwcd.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmppnbbhwcd.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmppnbbhwcd.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(max_word))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_num = 0\n\
    \    for word in words:\n        if len(set(word)) > max_num:\n            max_num\
    \ = len(set(word))\n            max_word = word\n    return max_word\n\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1xi3gue.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpk1xi3gue.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk1xi3gue.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzoy9kh4d.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzoy9kh4d.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzoy9kh4d.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_count =\
    \ 0\n    for word in words:\n        if len(set(word)) > max_count:\n        \
    \    max_count = len(set(word))\n            max_word = word\n    return max_word\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv6cw8wn.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplv6cw8wn.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplv6cw8wn.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    max_word = ''\n\
    \    for word in words:\n        if len(set(word)) > max_len:\n            max_len\
    \ = len(set(word))\n            max_word = word\n    return max_word\n\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_518k1q.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps_518k1q.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmps_518k1q.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_unique:\n            max_unique = len(set(word))\n            max_word\
    \ = word\n    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvv11k7ng.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvv11k7ng.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvv11k7ng.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_unique:\n            max_unique = len(set(word))\n            max_word\
    \ = word\n    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvv11k7ng.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvv11k7ng.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvv11k7ng.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(max_word))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_unique:\n            max_unique = len(set(word))\n            max_word\
    \ = word\n    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvv11k7ng.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvv11k7ng.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvv11k7ng.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzoy9kh4d.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzoy9kh4d.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzoy9kh4d.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(max_word))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_unique:\n            max_unique = len(set(word))\n            max_word\
    \ = word\n    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvv11k7ng.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvv11k7ng.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvv11k7ng.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = \"\"\n    max_len =\
    \ 0\n    for word in words:\n        if len(set(word)) > max_len:\n          \
    \  max_len = len(set(word))\n            max_word = word\n    return max_word\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqwumq71h.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqwumq71h.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpqwumq71h.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_count =\
    \ 0\n    for word in words:\n        if len(set(word)) > max_count:\n        \
    \    max_count = len(set(word))\n            max_word = word\n    return max_word\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv6cw8wn.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplv6cw8wn.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplv6cw8wn.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzoy9kh4d.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzoy9kh4d.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzoy9kh4d.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_unique:\n            max_unique = len(set(word))\n            max_word\
    \ = word\n    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvv11k7ng.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvv11k7ng.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvv11k7ng.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = \"\"\n    max_unique\
    \ = 0\n    for word in words:\n        unique = len(set(word))\n        if unique\
    \ > max_unique:\n            max_unique = unique\n            max_word = word\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvwjzshds.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpvwjzshds.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvwjzshds.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    max_word = ''\n\
    \    for word in words:\n        if len(set(word)) > max_len:\n            max_len\
    \ = len(set(word))\n            max_word = word\n    return max_word\n\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_518k1q.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps_518k1q.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmps_518k1q.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(max_word))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    max_word = ''\n\
    \    for word in words:\n        if len(set(word)) > max_len:\n            max_len\
    \ = len(set(word))\n            max_word = word\n    return max_word\n\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_518k1q.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps_518k1q.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmps_518k1q.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_len = 0\n\
    \    for word in words:\n        if len(set(word)) > max_len:\n            max_len\
    \ = len(set(word))\n            max_word = word\n    return max_word\n\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb_txnbpi.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpb_txnbpi.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpb_txnbpi.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = \"\"\n    max_unique\
    \ = 0\n    for word in words:\n        unique = len(set(word))\n        if unique\
    \ > max_unique:\n            max_unique = unique\n            max_word = word\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvwjzshds.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpvwjzshds.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvwjzshds.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(max_word))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    max_word = ''\n\
    \    for word in words:\n        if len(set(word)) > max_len:\n            max_len\
    \ = len(set(word))\n            max_word = word\n    return max_word\n\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_518k1q.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps_518k1q.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmps_518k1q.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_unique =\
    \ 0\n    for word in words:\n        unique = len(set(word))\n        if unique\
    \ > max_unique:\n            max_unique = unique\n            max_word = word\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnbbhwcd.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmppnbbhwcd.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmppnbbhwcd.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprr610nr5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprr610nr5.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmprr610nr5.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_count =\
    \ 0\n    for word in words:\n        if len(set(word)) > max_count:\n        \
    \    max_count = len(set(word))\n            max_word = word\n    return max_word\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv6cw8wn.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplv6cw8wn.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplv6cw8wn.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_count =\
    \ 0\n    for word in words:\n        if len(set(word)) > max_count:\n        \
    \    max_count = len(set(word))\n            max_word = word\n    return max_word\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv6cw8wn.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplv6cw8wn.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplv6cw8wn.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzoy9kh4d.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzoy9kh4d.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzoy9kh4d.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_5q0fq8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpw_5q0fq8.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpw_5q0fq8.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(max_word))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_5q0fq8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpw_5q0fq8.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpw_5q0fq8.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    max_word = ''\n\
    \    for word in words:\n        if len(set(word)) > max_len:\n            max_len\
    \ = len(set(word))\n            max_word = word\n    return max_word\n\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_518k1q.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps_518k1q.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmps_518k1q.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=lambda word:\
    \ len(set(word)))\n\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpahy7qoz8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpahy7qoz8.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpahy7qoz8.py\", line 19,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_unique:\n            max_unique = len(set(word))\n            max_word\
    \ = word\n    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvv11k7ng.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvv11k7ng.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvv11k7ng.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkjowvui.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzkjowvui.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzkjowvui.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_unique\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique = len(set(word))\n\
    \        if unique > max_unique:\n            max_unique = unique\n          \
    \  max_word = word\n        elif unique == max_unique:\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_count\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        count = len(set(word))\n\
    \        if count > max_count:\n            max_count = count\n            max_word\
    \ = word\n        elif count == max_count:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = ''\n    max_unique =\
    \ 0\n    for word in words:\n        unique = len(set(word))\n        if unique\
    \ > max_unique:\n            max_unique = unique\n            max_word = word\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnbbhwcd.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmppnbbhwcd.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmppnbbhwcd.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def find_max(words):\n    \"\"\"Write a function that accepts a list of\
    \ strings.\n    The list contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>>\
    \ find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa',\
    \ 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_word = words[0]\n    max_len\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa3cbjh_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpaa3cbjh_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaa3cbjh_.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
