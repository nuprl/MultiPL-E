language: notypes.py
name: HumanEval_112_reverse_delete
results:
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    s = ''.join(i for i in s if i not in c)\n    return s,\
    \ s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, '')\n   \
    \ return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    s = list(s)\n    for i in s:\n        if i in c:\n  \
    \          s.remove(i)\n    s = ''.join(s)\n    return s, s == s[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('abcde', 'ae') == ('bcd', False)\n \
    \   assert candidate('abcdef', 'b') == ('acdef', False)\n    assert candidate('abcdedcba',\
    \ 'ab') == ('cdedc', True)\n    assert candidate('dwik', 'w') == ('dik', False)\n\
    \    assert candidate('a', 'a') == ('', True)\n    assert candidate('abcdedcba',\
    \ '') == ('abcdedcba', True)\n    assert candidate('abcdedcba', 'v') == ('abcdedcba',\
    \ True)\n    assert candidate('vabba', 'v') == ('abba', True)\n    assert candidate('mamma',\
    \ 'mia') == ('', True)\n\ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwprqrqvk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwprqrqvk.py\", line 35,\
    \ in test_check\n    check(reverse_delete)\n  File \"/tmp/tmpwprqrqvk.py\", line\
    \ 26, in check\n    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    result = []\n    for i in s:\n        if i not in c:\n\
    \            result.append(i)\n    result = ''.join(result)\n    return result,\
    \ result == result[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, '')\n   \
    \ return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    # your code here\n    return '', False\n\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgv2p_mi8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpgv2p_mi8.py\", line 31,\
    \ in test_check\n    check(reverse_delete)\n  File \"/tmp/tmpgv2p_mi8.py\", line\
    \ 20, in check\n    assert candidate('abcde', 'ae') == ('bcd', False)\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    return ''.join(filter(lambda x: x not in c, s)), ''.join(filter(lambda\
    \ x: x not in c, s)) == ''.join(filter(lambda x: x not in c, s))[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('abcde', 'ae') == ('bcd', False)\n \
    \   assert candidate('abcdef', 'b') == ('acdef', False)\n    assert candidate('abcdedcba',\
    \ 'ab') == ('cdedc', True)\n    assert candidate('dwik', 'w') == ('dik', False)\n\
    \    assert candidate('a', 'a') == ('', True)\n    assert candidate('abcdedcba',\
    \ '') == ('abcdedcba', True)\n    assert candidate('abcdedcba', 'v') == ('abcdedcba',\
    \ True)\n    assert candidate('vabba', 'v') == ('abba', True)\n    assert candidate('mamma',\
    \ 'mia') == ('', True)\n\ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: -1
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    # your code here\n    return '', False\n\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgv2p_mi8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpgv2p_mi8.py\", line 31,\
    \ in test_check\n    check(reverse_delete)\n  File \"/tmp/tmpgv2p_mi8.py\", line\
    \ 20, in check\n    assert candidate('abcde', 'ae') == ('bcd', False)\nAssertionError\n"
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in s:\n        if i in c:\n            s = s.replace(i,\
    \ '')\n    return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, '')\n   \
    \ return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    s = list(s)\n    for i in c:\n        while i in s:\n\
    \            s.remove(i)\n    s = ''.join(s)\n    return s, s == s[::-1]\n\n\n\
    def check(candidate):\n    assert candidate('abcde', 'ae') == ('bcd', False)\n\
    \    assert candidate('abcdef', 'b') == ('acdef', False)\n    assert candidate('abcdedcba',\
    \ 'ab') == ('cdedc', True)\n    assert candidate('dwik', 'w') == ('dik', False)\n\
    \    assert candidate('a', 'a') == ('', True)\n    assert candidate('abcdedcba',\
    \ '') == ('abcdedcba', True)\n    assert candidate('abcdedcba', 'v') == ('abcdedcba',\
    \ True)\n    assert candidate('vabba', 'v') == ('abba', True)\n    assert candidate('mamma',\
    \ 'mia') == ('', True)\n\ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    s = ''.join(x for x in s if x not in c)\n    return s,\
    \ s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in s:\n        if i in c:\n            s = s.replace(i,\
    \ '')\n    return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in s:\n        if i in c:\n            s = s.replace(i,\
    \ '')\n    return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, '')\n   \
    \ return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, '')\n   \
    \ return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, '')\n   \
    \ return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, '')\n   \
    \ return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, '')\n   \
    \ return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, '')\n   \
    \ return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, '')\n   \
    \ return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in s:\n        if i in c:\n            s = s.replace(i,\
    \ '')\n    return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    s = ''.join(x for x in s if x not in c)\n    return s,\
    \ s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    s = list(s)\n    for i in c:\n        s = [j for j in\
    \ s if j != i]\n    s = ''.join(s)\n    return s, s == s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    s = ''.join(i for i in s if i not in c)\n    return s,\
    \ s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    s = ''.join(i for i in s if i not in c)\n    return s,\
    \ s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return\
    \ s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    s = ''.join(x for x in s if x not in c)\n    return s,\
    \ s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde', 'ae')\
    \ == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
- exit_code: 0
  program: "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings\
    \ s and c, you have to deleted all the characters in s that are equal to any character\
    \ in c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and True/False for the check.\n    Example\n\
    \    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef',\
    \ 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc',\
    \ True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, '')\n   \
    \ return s, s == s[::-1]\n\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271005
