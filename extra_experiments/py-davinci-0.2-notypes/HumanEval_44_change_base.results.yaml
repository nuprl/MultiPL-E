language: notypes.py
name: HumanEval_44_change_base
results:
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) ==\
    \ '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x != 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr8sno9qv.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # TODO:\
    \ implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9cw4y_y.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpe9cw4y_y.py\", line 31,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpe9cw4y_y.py\", line\
    \ 17, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # TODO:\
    \ implement this function\n    if x < base:\n        return str(x)\n    else:\n\
    \        return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x == 1:\n        return '1'\n    else:\n  \
    \      return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7qe46fe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpk7qe46fe.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpk7qe46fe.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return \"0\"\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb0zu3hnv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb0zu3hnv.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpb0zu3hnv.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr8sno9qv.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9oak80lb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9oak80lb.py\", line 34,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp9oak80lb.py\", line\
    \ 20, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x == 1:\n        return '1'\n    else:\n  \
    \      return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7qe46fe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpk7qe46fe.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpk7qe46fe.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x //= base\n    return ''.join(reversed(digits))\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        digits = []\n        while x > 0:\n\
    \            digits.append(str(x % base))\n            x = x // base\n       \
    \ return ''.join(reversed(digits))\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) ==\
    \ '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x\
    \ % base) + res\n        x = x // base\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) ==\
    \ '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9oak80lb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9oak80lb.py\", line 34,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp9oak80lb.py\", line\
    \ 20, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x\
    \ % base) + res\n        x = x // base\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr8sno9qv.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9oak80lb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9oak80lb.py\", line 34,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp9oak80lb.py\", line\
    \ 20, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x = x // base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n\
    \        x = x // base\n    return result\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert\
    \ x >= 0\n    assert base >= 2\n    assert base <= 10\n    if x == 0:\n      \
    \  return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base)\
    \ + result\n        x = x // base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9oak80lb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9oak80lb.py\", line 34,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp9oak80lb.py\", line\
    \ 20, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) ==\
    \ '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x\
    \ % base) + res\n        x //= base\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n\
    \        x = x // base\n    return result\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr8sno9qv.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x == 1:\n        return '1'\n    else:\n  \
    \      return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7qe46fe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpk7qe46fe.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpk7qe46fe.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x = x // base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x\
    \ % base) + res\n        x = x // base\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x = x // base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr8sno9qv.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert\
    \ base < 10\n    if x == 0:\n        return '0'\n    result = ''\n    while x\
    \ > 0:\n        result = str(x % base) + result\n        x //= base\n    return\
    \ result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return \"0\"\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb0zu3hnv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb0zu3hnv.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpb0zu3hnv.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    def change_base_rec(x,\
    \ base):\n        if x == 0:\n            return ''\n        else:\n         \
    \   return change_base_rec(x // base, base) + str(x % base)\n    return change_base_rec(x,\
    \ base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x //= base\n    return ''.join(reversed(digits))\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr8sno9qv.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr8sno9qv.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x == 1:\n        return '1'\n    else:\n  \
    \      return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7qe46fe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpk7qe46fe.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpk7qe46fe.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x != 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x = x // base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x = x // base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) ==\
    \ '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return \"0\"\n    elif x < 0:\n        return \"-\" + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxxnv0u2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkxxnv0u2.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkxxnv0u2.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x\
    \ % base) + res\n        x //= base\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) ==\
    \ '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x\
    \ % base) + res\n        x //= base\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # TODO:\
    \ implement this function\n    pass\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptw14irf_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptw14irf_.py\", line 30,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmptw14irf_.py\", line\
    \ 16, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert\
    \ base < 10\n    if x == 0:\n        return '0'\n    result = ''\n    while x\
    \ > 0:\n        result = str(x % base) + result\n        x //= base\n    return\
    \ result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdg0lief.py\", line 32,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkdg0lief.py\", line\
    \ 18, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x\
    \ % base) + res\n        x //= base\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x == 1:\n        return '1'\n    else:\n  \
    \      return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7qe46fe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpk7qe46fe.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpk7qe46fe.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    elif x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr8sno9qv.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpr8sno9qv.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x\
    \ % base) + res\n        x //= base\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: -1
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppvpdhyzy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppvpdhyzy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3)\
    \ == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) ==\
    \ '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
- exit_code: 0
  program: "def change_base(x, base):\n    \"\"\"Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x ==\
    \ 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result =\
    \ str(x % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660270947
