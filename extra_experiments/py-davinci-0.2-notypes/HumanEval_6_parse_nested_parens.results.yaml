language: notypes.py
name: HumanEval_6_parse_nested_parens
results:
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(parse_parens(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjxeriha.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpkjxeriha.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkjxeriha.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpkjxeriha.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(parse_parens(paren_group))\nNameError: name 'parse_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp941mlmv2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp941mlmv2.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp941mlmv2.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(max_nesting_level(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd38hcm2f.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpd38hcm2f.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpd38hcm2f.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpd38hcm2f.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_level(group))\nNameError: name 'max_nesting_level'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [parse_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl6qs8zmd.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpl6qs8zmd.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpl6qs8zmd.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpl6qs8zmd.py\", line 9, in parse_nested_parens\n \
    \   return [parse_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmpl6qs8zmd.py\", line 9, in <listcomp>\n    return [parse_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'parse_parens' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [parse_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl6qs8zmd.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpl6qs8zmd.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpl6qs8zmd.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpl6qs8zmd.py\", line 9, in parse_nested_parens\n \
    \   return [parse_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmpl6qs8zmd.py\", line 9, in <listcomp>\n    return [parse_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'parse_parens' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nesting_parens(paren_string) for paren_string in\
    \ paren_string.split()]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdovsb20a.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpdovsb20a.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdovsb20a.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpdovsb20a.py\", line 9, in parse_nested_parens\n \
    \   return [max_nesting_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmpdovsb20a.py\", line 9, in <listcomp>\n    return [max_nesting_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bdubqu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv4bdubqu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv4bdubqu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nesting_level(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphw2qt58e.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmphw2qt58e.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphw2qt58e.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmphw2qt58e.py\", line 10, in parse_nested_parens\n\
    \    return [max_nesting_level(group) for group in paren_groups]\n  File \"/tmp/tmphw2qt58e.py\"\
    , line 10, in <listcomp>\n    return [max_nesting_level(group) for group in paren_groups]\n\
    NameError: name 'max_nesting_level' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for group in paren_groups:\n        max_nesting.append(max_nesting_parens(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6q7wtqg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpm6q7wtqg.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpm6q7wtqg.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpm6q7wtqg.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp941mlmv2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp941mlmv2.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp941mlmv2.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(max_nesting_parens(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdeyjinu8.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdeyjinu8.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdeyjinu8.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpdeyjinu8.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyb2om0e4.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpyb2om0e4.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyb2om0e4.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpyb2om0e4.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2x5mkca.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_2x5mkca.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_2x5mkca.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_2x5mkca.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    paren_depth = []\n   \
    \ for paren in paren_list:\n        paren_depth.append(paren_depth_helper(paren))\n\
    \    return paren_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3gtwla0q.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp3gtwla0q.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp3gtwla0q.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp3gtwla0q.py\", line 12, in parse_nested_parens\n\
    \    paren_depth.append(paren_depth_helper(paren))\nNameError: name 'paren_depth_helper'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    return [max_nesting_parens(paren)\
    \ for paren in paren_list]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpni9nhu_0.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpni9nhu_0.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpni9nhu_0.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpni9nhu_0.py\", line 10, in parse_nested_parens\n\
    \    return [max_nesting_parens(paren) for paren in paren_list]\n  File \"/tmp/tmpni9nhu_0.py\"\
    , line 10, in <listcomp>\n    return [max_nesting_parens(paren) for paren in paren_list]\n\
    NameError: name 'max_nesting_parens' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for group in paren_groups:\n        max_nesting.append(max_nesting_parens(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6q7wtqg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpm6q7wtqg.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpm6q7wtqg.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpm6q7wtqg.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_string = paren_string.strip()\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(parse_parens(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbd33vy4n.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpbd33vy4n.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbd33vy4n.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpbd33vy4n.py\", line 13, in parse_nested_parens\n\
    \    max_nesting.append(parse_parens(paren_group))\nNameError: name 'parse_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(max_nesting_parens(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdeyjinu8.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdeyjinu8.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdeyjinu8.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpdeyjinu8.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvgjzq3vp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpvgjzq3vp.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpvgjzq3vp.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpvgjzq3vp.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [paren_string.count('(') - paren_string.count(')')]\n\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7y_sfdh.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpw7y_sfdh.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw7y_sfdh.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp941mlmv2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp941mlmv2.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp941mlmv2.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh_jm3bc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpuh_jm3bc.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpuh_jm3bc.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    return [max_nested_parens(paren)\
    \ for paren in paren_list]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjes3m9ee.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpjes3m9ee.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpjes3m9ee.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpjes3m9ee.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(paren) for paren in paren_list]\n  File \"/tmp/tmpjes3m9ee.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(paren) for paren in paren_list]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_depth = []\n    for\
    \ paren in paren_list:\n        depth = 0\n        max_depth_so_far = 0\n    \
    \    for char in paren:\n            if char == '(':\n                depth +=\
    \ 1\n                max_depth_so_far = max(max_depth_so_far, depth)\n       \
    \     elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_so_far)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeoatbh95.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpeoatbh95.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpeoatbh95.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppse0_khp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppse0_khp.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppse0_khp.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppse0_khp.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmppse0_khp.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9ussevl.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpi9ussevl.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpi9ussevl.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpi9ussevl.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wlqt2hu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp1wlqt2hu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1wlqt2hu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp1wlqt2hu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmp1wlqt2hu.py\", line 10, in <listcomp>\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nested_parens' is not\
    \ defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(max_nesting_level(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59bx6_b5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp59bx6_b5.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp59bx6_b5.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp59bx6_b5.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_level(paren_group))\nNameError: name 'max_nesting_level'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh_jm3bc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpuh_jm3bc.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpuh_jm3bc.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    result = []\n    for paren_group in paren_string.split():\n \
    \       result.append(parse_parens(paren_group))\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplj5y3jdb.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmplj5y3jdb.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmplj5y3jdb.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmplj5y3jdb.py\", line 11, in parse_nested_parens\n\
    \    result.append(parse_parens(paren_group))\nNameError: name 'parse_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvgjzq3vp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpvgjzq3vp.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpvgjzq3vp.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpvgjzq3vp.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppse0_khp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppse0_khp.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppse0_khp.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppse0_khp.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmppse0_khp.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2x5mkca.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_2x5mkca.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_2x5mkca.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_2x5mkca.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp941mlmv2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp941mlmv2.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp941mlmv2.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(get_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohoss_dm.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpohoss_dm.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpohoss_dm.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpohoss_dm.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_group) for paren_group in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnlzjwpka.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpnlzjwpka.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpnlzjwpka.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpnlzjwpka.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_group) for paren_group in paren_string.split()]\n\
    \  File \"/tmp/tmpnlzjwpka.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bdubqu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv4bdubqu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv4bdubqu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2x5mkca.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_2x5mkca.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_2x5mkca.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_2x5mkca.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppse0_khp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppse0_khp.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppse0_khp.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppse0_khp.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmppse0_khp.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1n3rhj33.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1n3rhj33.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1n3rhj33.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp1n3rhj33.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    result = []\n    for char in paren_string:\n\
    \        if char == '(':\n            current_nesting += 1\n            max_nesting\
    \ = max(max_nesting, current_nesting)\n        elif char == ')':\n           \
    \ current_nesting -= 1\n        else:\n            result.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n    result.append(max_nesting)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5kal3g8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu5kal3g8.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu5kal3g8.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppse0_khp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppse0_khp.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppse0_khp.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppse0_khp.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmppse0_khp.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren in paren_list:\n        max_nesting.append(get_max_nesting(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstzvsqm2.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpstzvsqm2.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpstzvsqm2.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpstzvsqm2.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(max_nesting_parens(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdeyjinu8.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdeyjinu8.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdeyjinu8.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpdeyjinu8.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh_jm3bc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpuh_jm3bc.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpuh_jm3bc.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppse0_khp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppse0_khp.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppse0_khp.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppse0_khp.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmppse0_khp.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    return [max_nested_parens(paren)\
    \ for paren in paren_list]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjes3m9ee.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpjes3m9ee.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpjes3m9ee.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpjes3m9ee.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(paren) for paren in paren_list]\n  File \"/tmp/tmpjes3m9ee.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(paren) for paren in paren_list]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bdubqu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv4bdubqu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv4bdubqu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyb2om0e4.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpyb2om0e4.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyb2om0e4.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpyb2om0e4.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_list]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpitcgu540.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpitcgu540.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpitcgu540.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpitcgu540.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_list]\n \
    \ File \"/tmp/tmpitcgu540.py\", line 10, in <listcomp>\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_list]\nNameError: name 'max_nested_parens' is not defined.\
    \ Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqm24r3jc.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqm24r3jc.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqm24r3jc.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpqm24r3jc.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8r3sqxi3.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp8r3sqxi3.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp8r3sqxi3.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    return [max_nested_parens(paren)\
    \ for paren in paren_list]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptonv69nm.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmptonv69nm.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmptonv69nm.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmptonv69nm.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(paren) for paren in paren_list]\n  File \"/tmp/tmptonv69nm.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(paren) for paren in paren_list]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(parse_parens(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjxeriha.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpkjxeriha.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkjxeriha.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpkjxeriha.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(parse_parens(paren_group))\nNameError: name 'parse_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyb2om0e4.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpyb2om0e4.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyb2om0e4.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpyb2om0e4.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh_jm3bc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpuh_jm3bc.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpuh_jm3bc.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp941mlmv2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp941mlmv2.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp941mlmv2.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_depth = []\n    for\
    \ paren in paren_list:\n        depth = 0\n        max_depth_so_far = 0\n    \
    \    for c in paren:\n            if c == '(':\n                depth += 1\n \
    \               max_depth_so_far = max(max_depth_so_far, depth)\n            elif\
    \ c == ')':\n                depth -= 1\n        max_depth.append(max_depth_so_far)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_depth = []\n    for\
    \ paren in paren_list:\n        depth = 0\n        max_depth_so_far = 0\n    \
    \    for char in paren:\n            if char == '(':\n                depth +=\
    \ 1\n                max_depth_so_far = max(max_depth_so_far, depth)\n       \
    \     elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_so_far)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh_jm3bc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpuh_jm3bc.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpuh_jm3bc.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1n3rhj33.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1n3rhj33.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1n3rhj33.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp1n3rhj33.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdps8h79m.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpdps8h79m.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdps8h79m.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: complete this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzge6m6ko.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpzge6m6ko.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpzge6m6ko.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_depth = []\n   \
    \ for group in paren_groups:\n        depth = 0\n        max_depth_group = 0\n\
    \        for char in group:\n            if char == '(':\n                depth\
    \ += 1\n                max_depth_group = max(max_depth_group, depth)\n      \
    \      elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_group)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren in paren_list:\n        max_nesting.append(get_max_nesting(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstzvsqm2.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpstzvsqm2.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpstzvsqm2.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpstzvsqm2.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bdubqu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv4bdubqu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv4bdubqu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    output = []\n    for\
    \ paren in paren_list:\n        output.append(max_nested_parens(paren))\n    return\
    \ output\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphtaqc9km.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmphtaqc9km.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphtaqc9km.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmphtaqc9km.py\", line 12, in parse_nested_parens\n\
    \    output.append(max_nested_parens(paren))\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for group in paren_groups:\n        max_nesting.append(max_nesting_parens(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6q7wtqg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpm6q7wtqg.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpm6q7wtqg.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpm6q7wtqg.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(parse_parens(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tnryiy5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp0tnryiy5.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp0tnryiy5.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp0tnryiy5.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(parse_parens(paren_group))\nNameError: name 'parse_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_depth = []\n    for\
    \ paren in paren_list:\n        depth = 0\n        max_depth_so_far = 0\n    \
    \    for char in paren:\n            if char == '(':\n                depth +=\
    \ 1\n                max_depth_so_far = max(max_depth_so_far, depth)\n       \
    \     elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_so_far)\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzb416s5s.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpzb416s5s.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpzb416s5s.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_string = paren_string.strip()\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_tevb0a.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpq_tevb0a.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpq_tevb0a.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpq_tevb0a.py\", line 13, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(get_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohoss_dm.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpohoss_dm.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpohoss_dm.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpohoss_dm.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_levels = []\n    for\
    \ paren in paren_list:\n        level = 0\n        max_level = 0\n        for\
    \ char in paren:\n            if char == '(':\n                level += 1\n  \
    \              if level > max_level:\n                    max_level = level\n\
    \            elif char == ')':\n                level -= 1\n        max_levels.append(max_level)\n\
    \    return max_levels\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppse0_khp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppse0_khp.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppse0_khp.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppse0_khp.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmppse0_khp.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2x5mkca.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_2x5mkca.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_2x5mkca.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_2x5mkca.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bdubqu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv4bdubqu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv4bdubqu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    return [max_nested_parens(paren)\
    \ for paren in paren_list]\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpniilqazq.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpniilqazq.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpniilqazq.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpniilqazq.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(paren) for paren in paren_list]\n  File \"/tmp/tmpniilqazq.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(paren) for paren in paren_list]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren in paren_list:\n        max_nesting.append(get_max_nesting(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstzvsqm2.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpstzvsqm2.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpstzvsqm2.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpstzvsqm2.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    output = []\n    for paren_group in paren_string.split():\n \
    \       max_nesting = 0\n        current_nesting = 0\n        for paren in paren_group:\n\
    \            if paren == '(':\n                current_nesting += 1\n        \
    \        max_nesting = max(max_nesting, current_nesting)\n            elif paren\
    \ == ')':\n                current_nesting -= 1\n        output.append(max_nesting)\n\
    \    return output\n\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppse0_khp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppse0_khp.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppse0_khp.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppse0_khp.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmppse0_khp.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    max_depth = 0\n    current_depth = 0\n    result = []\n    for\
    \ char in paren_string:\n        if char == '(':\n            current_depth +=\
    \ 1\n            max_depth = max(max_depth, current_depth)\n        elif char\
    \ == ')':\n            current_depth -= 1\n        elif char == ' ':\n       \
    \     result.append(max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n    result.append(max_depth)\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_depth = []\n   \
    \ for paren_group in paren_groups:\n        depth = 0\n        max_depth_so_far\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           depth += 1\n                max_depth_so_far = max(max_depth_so_far,\
    \ depth)\n            elif paren == ')':\n                depth -= 1\n       \
    \ max_depth.append(max_depth_so_far)\n    return max_depth\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(get_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohoss_dm.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpohoss_dm.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpohoss_dm.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpohoss_dm.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bdubqu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv4bdubqu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv4bdubqu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nesting_level(paren_group)\
    \ for paren_group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2ftn93n.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv2ftn93n.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv2ftn93n.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv2ftn93n.py\", line 10, in parse_nested_parens\n\
    \    return [max_nesting_level(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmpv2ftn93n.py\", line 10, in <listcomp>\n    return [max_nesting_level(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nesting_level' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(max_nesting_parens(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdeyjinu8.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdeyjinu8.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdeyjinu8.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpdeyjinu8.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppse0_khp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppse0_khp.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppse0_khp.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppse0_khp.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmppse0_khp.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzb416s5s.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpzb416s5s.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpzb416s5s.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    return [paren_depth(paren)\
    \ for paren in paren_list]\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjo1acf4u.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpjo1acf4u.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpjo1acf4u.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpjo1acf4u.py\", line 10, in parse_nested_parens\n\
    \    return [paren_depth(paren) for paren in paren_list]\n  File \"/tmp/tmpjo1acf4u.py\"\
    , line 10, in <listcomp>\n    return [paren_depth(paren) for paren in paren_list]\n\
    NameError: name 'paren_depth' is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppse0_khp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppse0_khp.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppse0_khp.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppse0_khp.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmppse0_khp.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(max_nesting_level(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59bx6_b5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp59bx6_b5.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp59bx6_b5.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp59bx6_b5.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_level(paren_group))\nNameError: name 'max_nesting_level'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren in paren_list:\n        max_nesting.append(max_nesting_parens(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65wiazsa.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp65wiazsa.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp65wiazsa.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp65wiazsa.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp941mlmv2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp941mlmv2.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp941mlmv2.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    return [max_nested_parens(paren)\
    \ for paren in paren_list]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptonv69nm.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmptonv69nm.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmptonv69nm.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmptonv69nm.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(paren) for paren in paren_list]\n  File \"/tmp/tmptonv69nm.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(paren) for paren in paren_list]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(parse_nested_parens_helper(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb5655xyv.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpb5655xyv.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpb5655xyv.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpb5655xyv.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(parse_nested_parens_helper(paren_group))\nNameError: name\
    \ 'parse_nested_parens_helper' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2x5mkca.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_2x5mkca.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_2x5mkca.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_2x5mkca.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_depth = []\n   \
    \ for group in paren_groups:\n        depth = 0\n        max_depth_in_group =\
    \ 0\n        for char in group:\n            if char == '(':\n               \
    \ depth += 1\n                max_depth_in_group = max(max_depth_in_group, depth)\n\
    \            elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_in_group)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(get_max_nesting(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmw4b1sfq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmw4b1sfq.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmw4b1sfq.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmw4b1sfq.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max_nesting_level(paren_group)\
    \ for paren_group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2ztk41u.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpu2ztk41u.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu2ztk41u.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpu2ztk41u.py\", line 10, in parse_nested_parens\n\
    \    return [max_nesting_level(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmpu2ztk41u.py\", line 10, in <listcomp>\n    return [max_nesting_level(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nesting_level' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for group in paren_groups:\n        max_nesting.append(max_nesting_parens(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6q7wtqg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpm6q7wtqg.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpm6q7wtqg.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpm6q7wtqg.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    deepest_levels =\
    \ []\n    for group in paren_groups:\n        deepest_levels.append(find_deepest_level(group))\n\
    \    return deepest_levels\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf34ghzsq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpf34ghzsq.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpf34ghzsq.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpf34ghzsq.py\", line 12, in parse_nested_parens\n\
    \    deepest_levels.append(find_deepest_level(group))\nNameError: name 'find_deepest_level'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeoatbh95.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpeoatbh95.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpeoatbh95.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for group in paren_groups:\n        max_nesting.append(max_nesting_parens(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6q7wtqg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpm6q7wtqg.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpm6q7wtqg.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpm6q7wtqg.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    return [max_level_of_nesting(paren)\
    \ for paren in paren_list]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsye6kzxr.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpsye6kzxr.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsye6kzxr.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpsye6kzxr.py\", line 10, in parse_nested_parens\n\
    \    return [max_level_of_nesting(paren) for paren in paren_list]\n  File \"/tmp/tmpsye6kzxr.py\"\
    , line 10, in <listcomp>\n    return [max_level_of_nesting(paren) for paren in\
    \ paren_list]\nNameError: name 'max_level_of_nesting' is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(get_max_nesting(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmw4b1sfq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmw4b1sfq.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmw4b1sfq.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmw4b1sfq.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bdubqu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv4bdubqu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv4bdubqu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqm24r3jc.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqm24r3jc.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqm24r3jc.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpqm24r3jc.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_depth = []\n    for\
    \ paren in paren_list:\n        depth = 0\n        max_depth_so_far = 0\n    \
    \    for char in paren:\n            if char == '(':\n                depth +=\
    \ 1\n                max_depth_so_far = max(max_depth_so_far, depth)\n       \
    \     elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_so_far)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(parse_parens(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjxeriha.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpkjxeriha.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkjxeriha.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpkjxeriha.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(parse_parens(paren_group))\nNameError: name 'parse_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_depth = []\n   \
    \ for paren_group in paren_groups:\n        depth = 0\n        max_depth_in_group\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           depth += 1\n                max_depth_in_group = max(max_depth_in_group,\
    \ depth)\n            elif paren == ')':\n                depth -= 1\n       \
    \ max_depth.append(max_depth_in_group)\n    return max_depth\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wlqt2hu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp1wlqt2hu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1wlqt2hu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp1wlqt2hu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmp1wlqt2hu.py\", line 10, in <listcomp>\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nested_parens' is not\
    \ defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(find_max_nesting(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqrnnn4r3.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqrnnn4r3.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqrnnn4r3.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpqrnnn4r3.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh_jm3bc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpuh_jm3bc.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpuh_jm3bc.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    groups = paren_string.split()\n    return [max_nesting(group)\
    \ for group in groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_3igus62.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp_3igus62.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_3igus62.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_3igus62.py\", line 10, in parse_nested_parens\n\
    \    return [max_nesting(group) for group in groups]\n  File \"/tmp/tmp_3igus62.py\"\
    , line 10, in <listcomp>\n    return [max_nesting(group) for group in groups]\n\
    NameError: name 'max_nesting' is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    max_depth = []\n  \
    \  for paren in paren_list:\n        max_depth.append(find_max_depth(paren))\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbey526g.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmptbey526g.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmptbey526g.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmptbey526g.py\", line 12, in parse_nested_parens\n\
    \    max_depth.append(find_max_depth(paren))\nNameError: name 'find_max_depth'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh_jm3bc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpuh_jm3bc.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpuh_jm3bc.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_depth = []\n    for\
    \ paren in paren_list:\n        max_depth.append(max_nested_parens(paren))\n \
    \   return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwb68u_nx.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpwb68u_nx.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpwb68u_nx.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpwb68u_nx.py\", line 12, in parse_nested_parens\n\
    \    max_depth.append(max_nested_parens(paren))\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for group in paren_groups:\n        max_nesting.append(parse_nested_parens_helper(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mgy2f81.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_mgy2f81.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_mgy2f81.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_mgy2f81.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(parse_nested_parens_helper(group))\nNameError: name 'parse_nested_parens_helper'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(max_nesting_parens(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9rkapytp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp9rkapytp.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9rkapytp.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9rkapytp.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren_group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nesting_level(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphw2qt58e.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmphw2qt58e.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphw2qt58e.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmphw2qt58e.py\", line 10, in parse_nested_parens\n\
    \    return [max_nesting_level(group) for group in paren_groups]\n  File \"/tmp/tmphw2qt58e.py\"\
    , line 10, in <listcomp>\n    return [max_nesting_level(group) for group in paren_groups]\n\
    NameError: name 'max_nesting_level' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_depth = []\n\
    \    for group in paren_groups:\n        depth = 0\n        max_depth_so_far =\
    \ 0\n        for paren in group:\n            if paren == '(':\n             \
    \   depth += 1\n                max_depth_so_far = max(max_depth_so_far, depth)\n\
    \            elif paren == ')':\n                depth -= 1\n        max_depth.append(max_depth_so_far)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bdubqu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv4bdubqu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv4bdubqu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_depth = []\n    for\
    \ paren in paren_list:\n        depth = 0\n        max_depth_so_far = 0\n    \
    \    for char in paren:\n            if char == '(':\n                depth +=\
    \ 1\n                max_depth_so_far = max(max_depth_so_far, depth)\n       \
    \     elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_so_far)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    return [max_nesting_parens(paren)\
    \ for paren in paren_list]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpni9nhu_0.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpni9nhu_0.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpni9nhu_0.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpni9nhu_0.py\", line 10, in parse_nested_parens\n\
    \    return [max_nesting_parens(paren) for paren in paren_list]\n  File \"/tmp/tmpni9nhu_0.py\"\
    , line 10, in <listcomp>\n    return [max_nesting_parens(paren) for paren in paren_list]\n\
    NameError: name 'max_nesting_parens' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    result = []\n    for paren_group in paren_string.split():\n \
    \       max_level = 0\n        current_level = 0\n        for paren in paren_group:\n\
    \            if paren == '(':\n                current_level += 1\n          \
    \      max_level = max(max_level, current_level)\n            elif paren == ')':\n\
    \                current_level -= 1\n        result.append(max_level)\n    return\
    \ result\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_depth = []\n   \
    \ for group in paren_groups:\n        depth = 0\n        max_depth_in_group =\
    \ 0\n        for char in group:\n            if char == '(':\n               \
    \ depth += 1\n                max_depth_in_group = max(max_depth_in_group, depth)\n\
    \            elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_in_group)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [parse_nested_parens_helper(paren_group)\
    \ for paren_group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphl6r9q_k.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmphl6r9q_k.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphl6r9q_k.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmphl6r9q_k.py\", line 10, in parse_nested_parens\n\
    \    return [parse_nested_parens_helper(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmphl6r9q_k.py\", line 10, in <listcomp>\n    return [parse_nested_parens_helper(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'parse_nested_parens_helper'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp941mlmv2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp941mlmv2.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp941mlmv2.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bdubqu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv4bdubqu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv4bdubqu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_levels = []\n\
    \    for paren_group in paren_groups:\n        max_level = 0\n        level =\
    \ 0\n        for char in paren_group:\n            if char == '(':\n         \
    \       level += 1\n                max_level = max(max_level, level)\n      \
    \      elif char == ')':\n                level -= 1\n        max_levels.append(max_level)\n\
    \    return max_levels\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2x5mkca.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_2x5mkca.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_2x5mkca.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_2x5mkca.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nesting_level(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphw2qt58e.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmphw2qt58e.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphw2qt58e.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmphw2qt58e.py\", line 10, in parse_nested_parens\n\
    \    return [max_nesting_level(group) for group in paren_groups]\n  File \"/tmp/tmphw2qt58e.py\"\
    , line 10, in <listcomp>\n    return [max_nesting_level(group) for group in paren_groups]\n\
    NameError: name 'max_nesting_level' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvgjzq3vp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpvgjzq3vp.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpvgjzq3vp.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpvgjzq3vp.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max_nesting_level(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg1oqo_dp.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpg1oqo_dp.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpg1oqo_dp.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpg1oqo_dp.py\", line 10, in parse_nested_parens\n\
    \    return [max_nesting_level(group) for group in paren_groups]\n  File \"/tmp/tmpg1oqo_dp.py\"\
    , line 10, in <listcomp>\n    return [max_nesting_level(group) for group in paren_groups]\n\
    NameError: name 'max_nesting_level' is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    groups = paren_string.split(' ')\n    max_depth = []\n    for\
    \ group in groups:\n        depth = 0\n        max_depth_in_group = 0\n      \
    \  for char in group:\n            if char == '(':\n                depth += 1\n\
    \                max_depth_in_group = max(max_depth_in_group, depth)\n       \
    \     elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_in_group)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Complete this function\n    return [0]\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp22o3xo5f.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp22o3xo5f.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp22o3xo5f.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(find_max_nesting(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqrnnn4r3.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqrnnn4r3.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqrnnn4r3.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpqrnnn4r3.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(get_max_nesting(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmw4b1sfq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmw4b1sfq.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmw4b1sfq.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmw4b1sfq.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(get_max_nesting(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmw4b1sfq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmw4b1sfq.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmw4b1sfq.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmw4b1sfq.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqm24r3jc.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqm24r3jc.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqm24r3jc.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpqm24r3jc.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh_jm3bc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpuh_jm3bc.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpuh_jm3bc.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [parse_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2504up6.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpx2504up6.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpx2504up6.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpx2504up6.py\", line 10, in parse_nested_parens\n\
    \    return [parse_parens(group) for group in paren_groups]\n  File \"/tmp/tmpx2504up6.py\"\
    , line 10, in <listcomp>\n    return [parse_parens(group) for group in paren_groups]\n\
    NameError: name 'parse_parens' is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9ussevl.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpi9ussevl.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpi9ussevl.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpi9ussevl.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bdubqu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv4bdubqu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv4bdubqu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_depth = []\n   \
    \ for group in paren_groups:\n        depth = 0\n        max_depth_group = 0\n\
    \        for char in group:\n            if char == '(':\n                depth\
    \ += 1\n                max_depth_group = max(max_depth_group, depth)\n      \
    \      elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_group)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_list\
    \ = []\n    paren_count = 0\n    for paren in paren_string:\n        if paren\
    \ == '(':\n            paren_count += 1\n        elif paren == ')':\n        \
    \    paren_list.append(paren_count)\n            paren_count -= 1\n    return\
    \ paren_list\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwfwbnd83.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwfwbnd83.py\", line 27,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpwfwbnd83.py\"\
    , line 22, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(get_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohoss_dm.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpohoss_dm.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpohoss_dm.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpohoss_dm.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for group in paren_groups:\n        max_nesting.append(max_nesting_parens(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6q7wtqg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpm6q7wtqg.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpm6q7wtqg.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpm6q7wtqg.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2x5mkca.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_2x5mkca.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_2x5mkca.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_2x5mkca.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(max_nesting_parens(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9rkapytp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp9rkapytp.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9rkapytp.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9rkapytp.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren_group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoji5sima.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpoji5sima.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpoji5sima.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nesting_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprci99qzv.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmprci99qzv.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmprci99qzv.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmprci99qzv.py\", line 10, in parse_nested_parens\n\
    \    return [max_nesting_parens(group) for group in paren_groups]\n  File \"/tmp/tmprci99qzv.py\"\
    , line 10, in <listcomp>\n    return [max_nesting_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nesting_parens' is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(max_nesting_parens(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuru06dqg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpuru06dqg.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuru06dqg.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpuru06dqg.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren_group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    result = []\n    for paren_group in paren_string.split(' '):\n\
    \        result.append(paren_group.count('(') - paren_group.count(')'))\n    return\
    \ result\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx1u3f91q.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpx1u3f91q.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpx1u3f91q.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for group in paren_groups:\n        max_nesting.append(max_nesting_parens(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6q7wtqg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpm6q7wtqg.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpm6q7wtqg.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpm6q7wtqg.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyb2om0e4.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpyb2om0e4.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyb2om0e4.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpyb2om0e4.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren in paren_list:\n        max_nesting.append(parse_parens(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgq6w807z.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpgq6w807z.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpgq6w807z.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpgq6w807z.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(parse_parens(paren))\nNameError: name 'parse_parens' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqm24r3jc.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqm24r3jc.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqm24r3jc.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpqm24r3jc.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(max_nesting_level(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd38hcm2f.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpd38hcm2f.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpd38hcm2f.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpd38hcm2f.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_level(group))\nNameError: name 'max_nesting_level'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppse0_khp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppse0_khp.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppse0_khp.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppse0_khp.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmppse0_khp.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren in paren_list:\n        max_nesting.append(parse_parens(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgq6w807z.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpgq6w807z.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpgq6w807z.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpgq6w807z.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(parse_parens(paren))\nNameError: name 'parse_parens' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    return [max_nested_parens(paren)\
    \ for paren in paren_list]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptonv69nm.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmptonv69nm.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmptonv69nm.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmptonv69nm.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(paren) for paren in paren_list]\n  File \"/tmp/tmptonv69nm.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(paren) for paren in paren_list]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(parse_parens(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjxeriha.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpkjxeriha.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkjxeriha.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpkjxeriha.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(parse_parens(paren_group))\nNameError: name 'parse_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9ussevl.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpi9ussevl.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpi9ussevl.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpi9ussevl.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_depth = []\n    for\
    \ paren in paren_list:\n        depth = 0\n        max_depth_so_far = 0\n    \
    \    for char in paren:\n            if char == '(':\n                depth +=\
    \ 1\n                max_depth_so_far = max(max_depth_so_far, depth)\n       \
    \     elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_so_far)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppse0_khp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppse0_khp.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppse0_khp.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppse0_khp.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmppse0_khp.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    max_depth = []\n  \
    \  for paren in paren_list:\n        depth = 0\n        max_depth_so_far = 0\n\
    \        for char in paren:\n            if char == '(':\n                depth\
    \ += 1\n                max_depth_so_far = max(max_depth_so_far, depth)\n    \
    \        elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_so_far)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren in paren_list:\n        max_nesting.append(max_nesting_parens(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65wiazsa.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp65wiazsa.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp65wiazsa.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp65wiazsa.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(parse_nested_parens_helper(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaehq1ppp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpaehq1ppp.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpaehq1ppp.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpaehq1ppp.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(parse_nested_parens_helper(paren_group))\nNameError: name\
    \ 'parse_nested_parens_helper' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bdubqu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv4bdubqu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv4bdubqu.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpv4bdubqu.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    return [nested_parens(paren)\
    \ for paren in paren_list]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp01zv9cem.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp01zv9cem.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp01zv9cem.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp01zv9cem.py\", line 10, in parse_nested_parens\n\
    \    return [nested_parens(paren) for paren in paren_list]\n  File \"/tmp/tmp01zv9cem.py\"\
    , line 10, in <listcomp>\n    return [nested_parens(paren) for paren in paren_list]\n\
    NameError: name 'nested_parens' is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2x5mkca.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_2x5mkca.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_2x5mkca.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_2x5mkca.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    return [max_nested_parens(paren)\
    \ for paren in paren_list]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjes3m9ee.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpjes3m9ee.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpjes3m9ee.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpjes3m9ee.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(paren) for paren in paren_list]\n  File \"/tmp/tmpjes3m9ee.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(paren) for paren in paren_list]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_depth = []\n    for\
    \ paren in paren_list:\n        max_depth.append(max_depth_parens(paren))\n  \
    \  return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1d56npij.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1d56npij.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1d56npij.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp1d56npij.py\", line 12, in parse_nested_parens\n\
    \    max_depth.append(max_depth_parens(paren))\nNameError: name 'max_depth_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_depth = []\n   \
    \ for group in paren_groups:\n        depth = 0\n        max_depth_so_far = 0\n\
    \        for c in group:\n            if c == '(':\n                depth += 1\n\
    \                max_depth_so_far = max(max_depth_so_far, depth)\n           \
    \ elif c == ')':\n                depth -= 1\n        max_depth.append(max_depth_so_far)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    max_nesting = []\n    for group in paren_string.split():\n  \
    \      max_nesting.append(max_nesting_parens(group))\n    return max_nesting\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8uufyi5n.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp8uufyi5n.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp8uufyi5n.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp8uufyi5n.py\", line 11, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split(' ')\n    max_depth = []\n  \
    \  for paren in paren_list:\n        depth = 0\n        max_depth_so_far = 0\n\
    \        for char in paren:\n            if char == '(':\n                depth\
    \ += 1\n                max_depth_so_far = max(max_depth_so_far, depth)\n    \
    \        elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_so_far)\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max_nesting_level(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg1oqo_dp.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpg1oqo_dp.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpg1oqo_dp.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpg1oqo_dp.py\", line 10, in parse_nested_parens\n\
    \    return [max_nesting_level(group) for group in paren_groups]\n  File \"/tmp/tmpg1oqo_dp.py\"\
    , line 10, in <listcomp>\n    return [max_nesting_level(group) for group in paren_groups]\n\
    NameError: name 'max_nesting_level' is not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1n3rhj33.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1n3rhj33.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1n3rhj33.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp1n3rhj33.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(parse_parens(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjxeriha.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpkjxeriha.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkjxeriha.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpkjxeriha.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(parse_parens(paren_group))\nNameError: name 'parse_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for group in paren_groups:\n        max_nesting.append(get_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1y2oyqoy.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1y2oyqoy.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1y2oyqoy.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp1y2oyqoy.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    return [max_nesting_level(paren_group)\
    \ for paren_group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2ftn93n.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpv2ftn93n.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv2ftn93n.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpv2ftn93n.py\", line 10, in parse_nested_parens\n\
    \    return [max_nesting_level(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmpv2ftn93n.py\", line 10, in <listcomp>\n    return [max_nesting_level(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nesting_level' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp941mlmv2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp941mlmv2.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp941mlmv2.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [paren_string.count('(') - paren_string.count(')') for\
    \ paren_string in paren_string.split()]\n\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqzprc6lq.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpqzprc6lq.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqzprc6lq.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp941mlmv2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp941mlmv2.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp941mlmv2.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(find_max_nesting(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqrnnn4r3.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqrnnn4r3.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqrnnn4r3.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpqrnnn4r3.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(parse_parens(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwsws4m5d.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpwsws4m5d.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpwsws4m5d.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpwsws4m5d.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(parse_parens(paren))\nNameError: name 'parse_parens' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppse0_khp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppse0_khp.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppse0_khp.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppse0_khp.py\", line 9, in parse_nested_parens\n \
    \   return [max_nested_parens(paren_string) for paren_string in paren_string.split()]\n\
    \  File \"/tmp/tmppse0_khp.py\", line 9, in <listcomp>\n    return [max_nested_parens(paren_string)\
    \ for paren_string in paren_string.split()]\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyb2om0e4.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpyb2om0e4.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyb2om0e4.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpyb2om0e4.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqm24r3jc.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqm24r3jc.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqm24r3jc.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpqm24r3jc.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Complete this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7g4uiif3.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp7g4uiif3.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp7g4uiif3.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(get_max_nesting(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmw4b1sfq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmw4b1sfq.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmw4b1sfq.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmw4b1sfq.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting = []\n \
    \   for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2x5mkca.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_2x5mkca.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_2x5mkca.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_2x5mkca.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_list = paren_string.split()\n    max_nesting = []\n   \
    \ for paren in paren_list:\n        max_nesting.append(max_nesting_parens(paren))\n\
    \    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdeyjinu8.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdeyjinu8.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdeyjinu8.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpdeyjinu8.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    paren_groups = paren_string.split(' ')\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh_jm3bc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpuh_jm3bc.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpuh_jm3bc.py\", line 10, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpuh_jm3bc.py\"\
    , line 10, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    if paren_string is None:\n        return None\n\n    paren_string\
    \ = paren_string.strip()\n    if len(paren_string) == 0:\n        return []\n\n\
    \    paren_groups = paren_string.split(' ')\n    max_nesting_levels = []\n   \
    \ for paren_group in paren_groups:\n        max_nesting_levels.append(get_max_nesting_level(paren_group))\n\
    \n    return max_nesting_levels\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppub2th6x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppub2th6x.py\", line 30,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppub2th6x.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppub2th6x.py\", line 19, in parse_nested_parens\n\
    \    max_nesting_levels.append(get_max_nesting_level(paren_group))\nNameError:\
    \ name 'get_max_nesting_level' is not defined. Did you mean: 'max_nesting_levels'?\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    max_depth = 0\n    current_depth = 0\n    depths = []\n    for\
    \ char in paren_string:\n        if char == '(':\n            current_depth +=\
    \ 1\n            max_depth = max(max_depth, current_depth)\n        elif char\
    \ == ')':\n            current_depth -= 1\n        elif char == ' ':\n       \
    \     depths.append(max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n    depths.append(max_depth)\n    return depths\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def parse_nested_parens(paren_string):\n    \"\"\" Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n\
    \    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdps8h79m.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpdps8h79m.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdps8h79m.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
