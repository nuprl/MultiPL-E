language: notypes.py
name: HumanEval_72_will_it_fly
results:
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if len(q) ==\
    \ 1:\n        return True\n    if sum(q) <= w and q == q[::-1]:\n        return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate([3,\
    \ 2, 3], 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhl8zbz3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzhl8zbz3.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpzhl8zbz3.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1]\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_balanced(q)\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8_895p03.py\", line 38,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 30, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmp8_895p03.py\"\
    , line 23, in will_it_fly\n    if is_balanced(q) and sum(q) <= w:\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\ndef check(candidate):\n    assert candidate([3, 2, 3], 9)\
    \ == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphbisuzxd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphbisuzxd.py\", line 34,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmphbisuzxd.py\", line\
    \ 26, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmphbisuzxd.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if len(q) ==\
    \ 1:\n        return True\n    if sum(q) <= w and q == q[::-1]:\n        return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate([3,\
    \ 2, 3], 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return q ==\
    \ q[::-1] and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3,\
    \ 2, 3], 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhl8zbz3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzhl8zbz3.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpzhl8zbz3.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_balanced(q)\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8_895p03.py\", line 38,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 30, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmp8_895p03.py\"\
    , line 23, in will_it_fly\n    if is_balanced(q) and sum(q) <= w:\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhl8zbz3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzhl8zbz3.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpzhl8zbz3.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_balanced(q)\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8_895p03.py\", line 38,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 30, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmp8_895p03.py\"\
    , line 23, in will_it_fly\n    if is_balanced(q) and sum(q) <= w:\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_balanced(q)\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8_895p03.py\", line 38,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 30, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmp8_895p03.py\"\
    , line 23, in will_it_fly\n    if is_balanced(q) and sum(q) <= w:\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhl8zbz3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzhl8zbz3.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpzhl8zbz3.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\ndef check(candidate):\n    assert candidate([3, 2, 3], 9)\
    \ == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb8uie50r.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpb8uie50r.py\", line 34,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpb8uie50r.py\", line\
    \ 26, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpb8uie50r.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if len(q) ==\
    \ 1:\n        return True\n    if len(q) % 2 == 0:\n        return False\n   \
    \ if sum(q) > w:\n        return False\n    if q == q[::-1]:\n        return True\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1]\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return sum(q)\
    \ <= w and q == q[::-1]\n\n\ndef check(candidate):\n    assert candidate([3, 2,\
    \ 3], 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) >\
    \ w:\n        return False\n    if q == q[::-1]:\n        return True\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n\
    \    assert candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n\
    \    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3],\
    \ 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n   \
    \ check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\ndef check(candidate):\n    assert candidate([3, 2, 3], 9)\
    \ == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphbisuzxd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphbisuzxd.py\", line 34,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmphbisuzxd.py\", line\
    \ 26, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmphbisuzxd.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if len(q) ==\
    \ 1:\n        return True\n    if sum(q) > w:\n        return False\n    if q\
    \ == q[::-1]:\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([3, 2, 3], 9) == True\n    assert candidate([1, 2], 5) ==\
    \ False\n    assert candidate([3], 5) == True\n    assert candidate([3, 2, 3],\
    \ 1) == False\n    assert candidate([1, 2, 3], 6) == False\n    assert candidate([5],\
    \ 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if len(q) ==\
    \ 1:\n        return True\n    elif len(q) == 2:\n        return False\n    else:\n\
    \        if q[0] + q[-1] <= w and q[0] == q[-1]:\n            return will_it_fly(q[1:-1],\
    \ w)\n        else:\n            return False\n\n\ndef check(candidate):\n   \
    \ assert candidate([3, 2, 3], 9) == True\n    assert candidate([1, 2], 5) == False\n\
    \    assert candidate([3], 5) == True\n    assert candidate([3, 2, 3], 1) == False\n\
    \    assert candidate([1, 2, 3], 6) == False\n    assert candidate([5], 5) ==\
    \ True\n\ndef test_check():\n    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1]\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) >\
    \ w:\n        return False\n    else:\n        if q == q[::-1]:\n            return\
    \ True\n        else:\n            return False\n\n\ndef check(candidate):\n \
    \   assert candidate([3, 2, 3], 9) == True\n    assert candidate([1, 2], 5) ==\
    \ False\n    assert candidate([3], 5) == True\n    assert candidate([3, 2, 3],\
    \ 1) == False\n    assert candidate([1, 2, 3], 6) == False\n    assert candidate([5],\
    \ 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    # TODO: write\
    \ your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([3,\
    \ 2, 3], 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxt57fpdm.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpxt57fpdm.py\", line 36,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpxt57fpdm.py\", line\
    \ 28, in check\n    assert candidate([3, 2, 3], 9) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1]\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_balanced(q)\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8_895p03.py\", line 38,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 30, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmp8_895p03.py\"\
    , line 23, in will_it_fly\n    if is_balanced(q) and sum(q) <= w:\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) >\
    \ w:\n        return False\n    elif q == q[::-1]:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate([3, 2,\
    \ 3], 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_balanced(q)\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8_895p03.py\", line 38,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 30, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmp8_895p03.py\"\
    , line 23, in will_it_fly\n    if is_balanced(q) and sum(q) <= w:\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1]\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_balanced(q)\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8_895p03.py\", line 38,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 30, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmp8_895p03.py\"\
    , line 23, in will_it_fly\n    if is_balanced(q) and sum(q) <= w:\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if len(q) ==\
    \ 1:\n        return True\n    if sum(q) <= w and q == q[::-1]:\n        return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate([3,\
    \ 2, 3], 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_balanced(q)\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8_895p03.py\", line 38,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 30, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmp8_895p03.py\"\
    , line 23, in will_it_fly\n    if is_balanced(q) and sum(q) <= w:\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1]\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert candidate([1,\
    \ 2], 5) == False\n    assert candidate([3], 5) == True\n    assert candidate([3,\
    \ 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n    assert\
    \ candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1]\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert candidate([1,\
    \ 2], 5) == False\n    assert candidate([3], 5) == True\n    assert candidate([3,\
    \ 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n    assert\
    \ candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_balanced(q)\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8_895p03.py\", line 38,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 30, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmp8_895p03.py\"\
    , line 23, in will_it_fly\n    if is_balanced(q) and sum(q) <= w:\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1]\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if len(q) ==\
    \ 1:\n        return True\n    if len(q) == 2:\n        return False\n    if sum(q)\
    \ <= w:\n        if q == q[::-1]:\n            return True\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) >\
    \ w:\n        return False\n    if q == q[::-1]:\n        return True\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n\
    \    assert candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n\
    \    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3],\
    \ 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n   \
    \ check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1]\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1]\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    # Your code\
    \ here\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate([3, 2,\
    \ 3], 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    # Your code\
    \ here\n    return False\n\n\ndef check(candidate):\n    assert candidate([3,\
    \ 2, 3], 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm2yi04_z.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpm2yi04_z.py\", line 36,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpm2yi04_z.py\", line\
    \ 28, in check\n    assert candidate([3, 2, 3], 9) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if len(q) ==\
    \ 1:\n        return True\n    elif sum(q) <= w and q == q[::-1]:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate([3, 2, 3], 9) == True\n    assert candidate([1, 2], 5) == False\n\
    \    assert candidate([3], 5) == True\n    assert candidate([3, 2, 3], 1) == False\n\
    \    assert candidate([1, 2, 3], 6) == False\n    assert candidate([5], 5) ==\
    \ True\n\ndef test_check():\n    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1]\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    # TODO: write\
    \ your code here\n    return None\n\n\ndef check(candidate):\n    assert candidate([3,\
    \ 2, 3], 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgot5r6u9.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgot5r6u9.py\", line 36,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpgot5r6u9.py\", line\
    \ 28, in check\n    assert candidate([3, 2, 3], 9) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_balanced(q)\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8_895p03.py\", line 38,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 30, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmp8_895p03.py\"\
    , line 23, in will_it_fly\n    if is_balanced(q) and sum(q) <= w:\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_balanced(q)\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8_895p03.py\", line 38,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 30, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmp8_895p03.py\"\
    , line 23, in will_it_fly\n    if is_balanced(q) and sum(q) <= w:\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_balanced(q)\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8_895p03.py\", line 38,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmp8_895p03.py\", line\
    \ 30, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmp8_895p03.py\"\
    , line 23, in will_it_fly\n    if is_balanced(q) and sum(q) <= w:\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1]\
    \ and sum(q) <= w:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\ndef check(candidate):\n    assert candidate([3, 2, 3], 9)\
    \ == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphbisuzxd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphbisuzxd.py\", line 34,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmphbisuzxd.py\", line\
    \ 26, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmphbisuzxd.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_palindrome(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkkwtip21.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpkkwtip21.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmpkkwtip21.py\"\
    , line 23, in will_it_fly\n    return is_palindrome(q) and sum(q) <= w\nNameError:\
    \ name 'is_palindrome' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    return is_balanced(q)\
    \ and sum(q) <= w\n\n\ndef check(candidate):\n    assert candidate([3, 2, 3],\
    \ 9) == True\n    assert candidate([1, 2], 5) == False\n    assert candidate([3],\
    \ 5) == True\n    assert candidate([3, 2, 3], 1) == False\n    assert candidate([1,\
    \ 2, 3], 6) == False\n    assert candidate([5], 5) == True\n\ndef test_check():\n\
    \    check(will_it_fly)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmph0bo5wo5.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmph0bo5wo5.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\n  File \"/tmp/tmph0bo5wo5.py\"\
    , line 23, in will_it_fly\n    return is_balanced(q) and sum(q) <= w\nNameError:\
    \ name 'is_balanced' is not defined\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) <=\
    \ w and q == q[::-1]:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
- exit_code: -1
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
    \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
    \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
    \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhl8zbz3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzhl8zbz3.py\", line 35,\
    \ in test_check\n    check(will_it_fly)\n  File \"/tmp/tmpzhl8zbz3.py\", line\
    \ 27, in check\n    assert candidate([3, 2, 3], 9) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271127
- exit_code: 0
  program: "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns\
    \ True if the object q will fly, and False otherwise.\n    The object q will fly\
    \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n\n    Example:\n    >>> will_it_fly([1,\
    \ 2], 5)\n    False\n    # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    >>> will_it_fly([3,\
    \ 2, 3], 9)\n    True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    >>> will_it_fly([3], 5)\n    True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) >\
    \ w:\n        return False\n    else:\n        return q == q[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate([3, 2, 3], 9) == True\n    assert candidate([1, 2], 5) ==\
    \ False\n    assert candidate([3], 5) == True\n    assert candidate([3, 2, 3],\
    \ 1) == False\n    assert candidate([1, 2, 3], 6) == False\n    assert candidate([5],\
    \ 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271127
