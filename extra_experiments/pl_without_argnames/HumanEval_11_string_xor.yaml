name: HumanEval_11_string_xor
language: pl
prompt: "# Input are two strings a and b consisting only of 1s and 0s.\n# Perform\
  \ binary XOR on these inputs and return result also as a string.\n# >>> string_xor(\"\
  010\", \"110\")\n# \"100\"\nsub string_xor {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_xor;\n\
  \        if(eq_deeply($candidate->(\"111000\", \"101010\"),\"010010\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1\", \"1\"),\"0\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"0101\", \"0000\"),\"0101\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i <\
    \ length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n\
    \    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $r = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $r;\n}", "my ($a, $b) = @_;\n    my $result = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) =\
    \ @_;\n    my $result = '';\n    for (my $i = 0; $i < length($a); $i++) {\n  \
    \      $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "my ($a, $b) = @_;\n    my $l = length($a);\n    my $r = \"\";\n    for (my\
    \ $i = 0; $i < $l; $i++) {\n        my $c = substr($a, $i, 1) ^ substr($b, $i,\
    \ 1);\n        $r .= $c;\n    }\n    return $r;\n}", "my ($a, $b) = @_;\n    my\
    \ $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $c = '';\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n\
    }", "my ($a, $b) = @_;\n    my $r = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $r;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i\
    \ < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i,\
    \ 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $len = length($a);\n\
    \    my $result = \"\";\n    for (my $i = 0; $i < $len; $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= (substr($a, $i, 1) ^ substr($b, $i, 1));\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $xor = $a ^ $b;\n    return\
    \ unpack(\"B*\", $xor);\n}", "my ($a, $b) = @_;\n    my $c = \"\";\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $c;\n}", "my ($a, $b) = @_;\n    my $result = '';\n\
    \    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n\
    \    my $result = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= (substr($a, $i, 1) ^ substr($b, $i, 1)) ? \"1\"\
    \ : \"0\";\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $result\
    \ = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) =\
    \ @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n\
    \        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $result\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) =\
    \ @_;\n    my $result = '';\n    for (my $i = 0; $i < length($a); $i++) {\n  \
    \      $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "my ($a, $b) = @_;\n    my $result = \"\";\n    my $i;\n    for ($i = 0; $i\
    \ < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i,\
    \ 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\
    \";\n    for (my $i = 0; $i < length($a); $i++) {\n        my $x = substr($a,\
    \ $i, 1);\n        my $y = substr($b, $i, 1);\n        $result .= ($x ^ $y);\n\
    \    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $result = '';\n  \
    \  my $len = length($a);\n    for (my $i = 0; $i < $len; $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n\
    }", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^\
    \ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n   \
    \ my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= (substr($a, $i, 1) ^ substr($b, $i, 1));\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $res = \"\";\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $res .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $res;\n}", "my ($a, $b) = @_;\n    my $result = '';\n\
    \    my $len = length($a);\n    for (my $i = 0; $i < $len; $i++) {\n        my\
    \ $a_bit = substr($a, $i, 1);\n        my $b_bit = substr($b, $i, 1);\n      \
    \  $result .= ($a_bit == $b_bit) ? '0' : '1';\n    }\n    return $result;\n}",
  "my ($a, $b) = @_;\n    my $xor = $a ^ $b;\n    return unpack(\"B*\", $xor);\n}",
  "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^\
    \ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n   \
    \ my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^\
    \ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n   \
    \ my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $xor = $a ^ $b;\n    return unpack(\"B*\", $xor);\n}",
  "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = '';\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $r = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "my ($a, $b) = @_;\n   \
    \ my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = '';\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $result\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) =\
    \ @_;\n    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n     \
    \   $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "my\
    \ ($a, $b) = @_;\n    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n\
    }", "my ($a, $b) = @_;\n    my $c = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $c;\n}", "my ($a, $b) = @_;\n    my $x = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $x .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $x;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i\
    \ < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i,\
    \ 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\
    \";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) =\
    \ @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n\
    \        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $result;\n}", "my ($a, $b) = @_;\n    my $result = '';\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $result\
    \ = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= (substr($a,\
    \ $i, 1) ^ substr($b, $i, 1)) ? '1' : '0';\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = '';\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        my $bit_a = substr($a, $i, 1);\n        my $bit_b = substr($b, $i,\
    \ 1);\n        $result .= $bit_a ^ $bit_b;\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = '';\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $len = length($a);\n\
    \    my $result = \"\";\n    for (my $i = 0; $i < $len; $i++) {\n        my $a_bit\
    \ = substr($a, $i, 1);\n        my $b_bit = substr($b, $i, 1);\n        $result\
    \ .= $a_bit ^ $b_bit;\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n  \
    \  my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n\
    }", "my $a = shift;\n    my $b = shift;\n    my $result = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $len = length($a);\n\
    \    my $result = \"\";\n    for (my $i = 0; $i < $len; $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= (substr($a, $i, 1)\
    \ ^ substr($b, $i, 1));\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n\
    \    my $xor = $a ^ $b;\n    return sprintf(\"%b\", $xor);\n}", "my ($a, $b) =\
    \ @_;\n    my $result = '';\n    for (my $i = 0; $i < length($a); $i++) {\n  \
    \      $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $c = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $c;\n}", "my ($a, $b) = @_;\n    my $len = length($a);\n\
    \    my $result = \"\";\n    for (my $i = 0; $i < $len; $i++) {\n        my $a_bit\
    \ = substr($a, $i, 1);\n        my $b_bit = substr($b, $i, 1);\n        if ($a_bit\
    \ eq $b_bit) {\n            $result .= \"0\";\n        } else {\n            $result\
    \ .= \"1\";\n        }\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n \
    \   my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "my ($a,\
    \ $b) = @_;\n    my $result = '';\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $result;\n}", "my ($a, $b) = @_;\n    my $r = \"\";\n    my $i = 0;\n    while\
    \ ($i < length($a) && $i < length($b)) {\n        $r .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n        $i++;\n    }\n    return $r;\n}", "my ($a, $b) = @_;\n    my\
    \ $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n\
    }", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $len = length($a);\n    my\
    \ $res = '';\n    for (my $i = 0; $i < $len; $i++) {\n        $res .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $res;\n}", "my ($a, $b) = @_;\n\
    \    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "my ($a,\
    \ $b) = @_;\n    my $c = \"\";\n    my $i;\n    for ($i = 0; $i < length($a);\
    \ $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $c;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i\
    \ < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i,\
    \ 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\
    \";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) =\
    \ @_;\n    my $result = '';\n    for (my $i = 0; $i < length($a); $i++) {\n  \
    \      $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "my ($a, $b) = @_;\n    my $c = '';\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $c;\n}", "my ($a, $b) = @_;\n    my $c = '';\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $c;\n}", "my ($a, $b) = @_;\n    my $result = '';\n    my $len = length($a);\n\
    \    for (my $i = 0; $i < $len; $i++) {\n        $result .= substr($a, $i, 1)\
    \ ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n \
    \   my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "my ($a, $b) = @_;\n    my $r = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $r;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i\
    \ < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i,\
    \ 1);\n    }\n    return $result;\n}", "my $a = shift;\n    my $b = shift;\n \
    \   my $len = length($a);\n    my $result = '';\n    for (my $i = 0; $i < $len;\
    \ $i++) {\n        my $x = substr($a, $i, 1);\n        my $y = substr($b, $i,\
    \ 1);\n        if ($x eq $y) {\n            $result .= '0';\n        } else {\n\
    \            $result .= '1';\n        }\n    }\n    return $result;\n}", "my ($a,\
    \ $b) = @_;\n    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n\
    \        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n\
    }", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = '';\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        my $a_bit = substr($a, $i, 1);\n \
    \       my $b_bit = substr($b, $i, 1);\n        if ($a_bit eq $b_bit) {\n    \
    \        $result .= '0';\n        } else {\n            $result .= '1';\n    \
    \    }\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\
    \";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) =\
    \ @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n\
    \        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $result;\n}", "my $a = shift;\n    my $b = shift;\n    my $result = \"\";\n\
    \    my $i;\n    for ($i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) =\
    \ @_;\n    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n     \
    \   $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "my\
    \ ($a, $b) = @_;\n    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n\
    }", "my ($a, $b) = @_;\n    my $len = length($a);\n    my $result = \"\";\n  \
    \  for (my $i = 0; $i < $len; $i++) {\n        $result .= (substr($a, $i, 1) ^\
    \ substr($b, $i, 1));\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n  \
    \  my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "my ($a,\
    \ $b) = @_;\n    my $result = '';\n    my $len = length($a);\n    for (my $i =\
    \ 0; $i < $len; $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i,\
    \ 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\
    \";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) =\
    \ @_;\n    my $r = '';\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^\
    \ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n   \
    \ my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = '';\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $xor = $a\
    \ ^ $b;\n    return unpack(\"B*\", $xor);\n}", "my ($a, $b) = @_;\n    my $result\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) =\
    \ @_;\n    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n     \
    \   $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $r = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $r;\n}", "my ($a, $b) = @_;\n    my $len = length($a);\n\
    \    my $c = \"\";\n    for (my $i = 0; $i < $len; $i++) {\n        my $x = substr($a,\
    \ $i, 1);\n        my $y = substr($b, $i, 1);\n        if ($x eq $y) {\n     \
    \       $c .= \"0\";\n        } else {\n            $c .= \"1\";\n        }\n\
    \    }\n    return $c;\n}", "my ($a, $b) = @_;\n    my $result = '';\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^\
    \ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n   \
    \ my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "my ($a, $b) = @_;\n\
    \    my $result = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^\
    \ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n   \
    \ my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= (substr($a, $i, 1) ^ substr($b, $i, 1));\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = '';\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $result .= (substr($a, $i, 1) ^ substr($b,\
    \ $i, 1)) ? '1' : '0';\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n \
    \   my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "my ($a, $b) = @_;\n    my $xor = $a ^ $b;\n    return unpack(\"B*\", $xor);\n\
    }", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $len = length($a);\n    my\
    \ $result = \"\";\n    for (my $i = 0; $i < $len; $i++) {\n        my $a_bit =\
    \ substr($a, $i, 1);\n        my $b_bit = substr($b, $i, 1);\n        $result\
    \ .= ($a_bit ^ $b_bit);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n\
    \    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n      \
    \  $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= (substr($a, $i, 1)\
    \ ^ substr($b, $i, 1));\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n\
    \    my $r = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        $r .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "my ($a,\
    \ $b) = @_;\n    my $xor = $a ^ $b;\n    return sprintf(\"%b\", $xor);\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $xor = $a ^ $b;\n    return\
    \ sprintf(\"%b\", $xor);\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n   \
    \ for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n\
    \    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n      \
    \  $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        my $a_bit = substr($a, $i, 1);\n        my $b_bit = substr($b,\
    \ $i, 1);\n        $result .= ($a_bit xor $b_bit);\n    }\n    return $result;\n\
    }", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = '';\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $r = '';\n\
    \    for (my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a, $i, 1)\
    \ ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "my ($a, $b) = @_;\n    my\
    \ $xor = $a ^ $b;\n    return unpack(\"B*\", $xor);\n}", "my ($a, $b) = @_;\n\
    \    my $len = length($a);\n    my $result = '';\n    for (my $i = 0; $i < $len;\
    \ $i++) {\n        my $x = substr($a, $i, 1);\n        my $y = substr($b, $i,\
    \ 1);\n        $result .= ($x ^ $y);\n    }\n    return $result;\n}", "my ($a,\
    \ $b) = @_;\n    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n\
    \        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n\
    }", "my ($a, $b) = @_;\n    my $result = '';\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $xor = $a ^ $b;\n    return\
    \ sprintf(\"%b\", $xor);\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n   \
    \ for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n\
    \    my $result = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $xor = $a ^ $b;\n    return unpack(\"B*\", $xor);\n}",
  "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $c = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $c;\n}", "my ($a, $b) = @_;\n    my $result = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) =\
    \ @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n\
    \        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $result;\n}", "my ($a, $b) = @_;\n    my $r = \"\";\n    for (my $i = 0; $i\
    \ < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n\
    \    }\n    return $r;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^\
    \ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n   \
    \ my $result = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $r = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n\
    }", "my ($a, $b) = @_;\n    my $r = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $r;\n}", "my ($a, $b) = @_;\n    my $c = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $c;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i\
    \ < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i,\
    \ 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $c = \"\";\n\
    \    for (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i, 1)\
    \ ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "my ($a, $b) = @_;\n    my\
    \ $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    return join '', map { $_ ? '1' : '0' } map { $a->[$_] xor\
    \ $b->[$_] } 0 .. $#$a;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    my\
    \ $len = length($a);\n    for (my $i = 0; $i < $len; $i++) {\n        my $a_bit\
    \ = substr($a, $i, 1);\n        my $b_bit = substr($b, $i, 1);\n        if ($a_bit\
    \ eq $b_bit) {\n            $result .= \"0\";\n        } else {\n            $result\
    \ .= \"1\";\n        }\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n \
    \   my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "my ($a, $b) = @_;\n    my $r = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return\
    \ $r;\n}", "my ($a, $b) = @_;\n    my $xor = $a ^ $b;\n    return unpack(\"B*\"\
    , $xor);\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    return join('',\
    \ map { $_[0] ^ $_[1] } split(//, $a), split(//, $b));\n}", "my ($a, $b) = @_;\n\
    \    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n      \
    \  $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = '';\n    my $len\
    \ = length($a);\n    for (my $i = 0; $i < $len; $i++) {\n        my $a_bit = substr($a,\
    \ $i, 1);\n        my $b_bit = substr($b, $i, 1);\n        $result .= ($a_bit\
    \ ^ $b_bit);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $result\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) =\
    \ @_;\n    my $xor = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n   \
    \     $xor .= (substr($a, $i, 1) ^ substr($b, $i, 1));\n    }\n    return $xor;\n\
    }", "my ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $c = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $c;\n}", "my ($a, $b) = @_;\n    my $result = '';\n\
    \    for (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n\
    \    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n      \
    \  $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n\
    }", "my ($a, $b) = @_;\n    my $result = \"\";\n    my $i = 0;\n    while ($i\
    \ < length($a)) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n\
    \        $i++;\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $r\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $r .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", "my ($a, $b) = @_;\n\
    \    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "my ($a,\
    \ $b) = @_;\n    my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n\
    \        $c .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n\
    }", "my ($a, $b) = @_;\n    my $xor = $a ^ $b;\n    return sprintf(\"%b\", $xor);\n\
    }", "my ($a, $b) = @_;\n    my $res = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $res .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n   \
    \ return $res;\n}", "my ($a, $b) = @_;\n    my $r = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n\
    \    }\n    return $r;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= substr($a, $i, 1) ^\
    \ substr($b, $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n   \
    \ my $l = length($a);\n    my $r = '';\n    for (my $i = 0; $i < $l; $i++) {\n\
    \        $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n\
    }", "my ($a, $b) = @_;\n    my $result = '';\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= (substr($a, $i, 1)\
    \ ^ substr($b, $i, 1));\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n\
    \    my $len = length($a);\n    my $result = '';\n    for (my $i = 0; $i < $len;\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $c = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $c;\n}", "my ($a, $b) = @_;\n    my $c = \"\";\n\
    \    for (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i, 1)\
    \ ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "my ($a, $b) = @_;\n    my\
    \ $result = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $len = length($a);\n    my $result = \"\";\n    for (my\
    \ $i = 0; $i < $len; $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $c = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i,\
    \ 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "my ($a, $b) = @_;\n   \
    \ my $c = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $c .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $c;\n}", "my ($a, $b) = @_;\n\
    \    my $len = length($a);\n    my $result = \"\";\n    for (my $i = 0; $i < $len;\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    return undef unless defined\
    \ $a && defined $b;\n    return undef unless $a =~ /^[01]+$/ && $b =~ /^[01]+$/;\n\
    \    my $len = length($a) > length($b) ? length($a) : length($b);\n    my $result\
    \ = '';\n    for (my $i = 0; $i < $len; $i++) {\n        my $a_bit = substr($a,\
    \ $i, 1);\n        my $b_bit = substr($b, $i, 1);\n        $result .= ($a_bit\
    \ ^ $b_bit);\n    }\n    return $result;\n}", "my ($a, $b) = @_;\n    my $res\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $res .= substr($a,\
    \ $i, 1) ^ substr($b, $i, 1);\n    }\n    return $res;\n}", "my ($a, $b) = @_;\n\
    \    my $result = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $result;\n}", "my\
    \ ($a, $b) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= (substr($a, $i, 1) ^ substr($b, $i, 1));\n    }\n\
    \    return $result;\n}", "my ($a, $b) = @_;\n    my $c = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $c .= substr($a, $i, 1) ^ substr($b,\
    \ $i, 1);\n    }\n    return $c;\n}", "my ($a, $b) = @_;\n    my @a = split //,\
    \ $a;\n    my @b = split //, $b;\n    my $c = \"\";\n    for (my $i = 0; $i <\
    \ @a; $i++) {\n        $c .= $a[$i] ^ $b[$i];\n    }\n    return $c;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
