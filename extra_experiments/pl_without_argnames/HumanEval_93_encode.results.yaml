language: pl
name: HumanEval_93_encode
results:
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $char;\n    my $vowels\
    \ = \"aeiou\";\n    my $vowel_index;\n    my $vowel_index_plus_two;\n    my $vowel_index_plus_two_char;\n\
    \    my $vowel_index_plus_two_char_code;\n    my $vowel_index_plus_two_char_code_plus_two;\n\
    \    my $vowel_index_plus_two_char_code_plus_two_char;\n    my $vowel_index_plus_two_char_code_plus_two_char_code;\n\
    \    my $vowel_index_plus_two_char_code_plus_two_char_code_plus_two;\n    my $vowel_index_plus_two_char_code_plus_two_char_code_plus_two_char;\n\
    \    my $vowel_index_plus_two_char_code_plus_two_char_code_plus_two_char_code;\n\
    \    my $vowel_index_plus_two_char_code_plus_two_char_code_plus_two_char_code_plus_two;\n\
    \    my $vowel_index_plus_two_char_code_plus_two_char_code_plus_two_char_code_plus_two_char;\n\
    \    my $vowel_index_plus_two_char_code_plus_two_char_code_plus_two_char_code_plus_two_char_code;\n\
    \    my $vowel_index_plus_two_char_code_plus_two_char_code_plus_two_char_code_plus_two_char_code_plus_two;\n\
    \    my $vowel_index_plus_two_char_code_plus_two_char_code_plus_two_char_code_plus_two_char_code_plus_two_char;\n\
    \    my $vowel_index_plus_two_char_code_plus_two_char_code_plus_two_char_code_plus_two\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpk_sfzvq4.pl line 32, at end
    of line

    syntax error at /tmp/tmpk_sfzvq4.pl line 32, near "$vowel_index_plus_two_char_code_plus_two_char_code_plus_two_char_code_plus_two

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpk_sfzvq4.pl line 59, at end of
    line

    syntax error at /tmp/tmpk_sfzvq4.pl line 59, at EOF

    Execution of /tmp/tmpk_sfzvq4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660227792
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_upper\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $alphabet_lower = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $vowels_upper = \"AEIOU\";\n    my $vowels_lower = \"aeiou\";\n    my\
    \ $vowels_index = 0;\n    my $alphabet_index = 0;\n    my $vowels_index_upper\
    \ = 0;\n    my $alphabet_index_upper = 0;\n    my $vowels_index_lower = 0;\n \
    \   my $alphabet_index_lower = 0;\n    my $vowels_index_upper_2 = 0;\n    my $alphabet_index_upper_2\
    \ = 0;\n    my $vowels_index_lower_2 = 0;\n    my $alphabet_index_lower_2 = 0;\n\
    \    my $vowels_index_upper_3 = 0;\n    my $alphabet_index_upper_3 = 0;\n    my\
    \ $vowels_index_lower_3 = 0;\n    my $alphabet_index_lower_3 = 0;\n    my $vowels_index_upper_4\
    \ = 0;\n    my $alphabet_index_upper_4 = 0;\n    my $vowels_index_lower_4 = 0;\n\
    \    my $alphabet_index_lower_4 = 0;\n    my $vowels_index_upper_5 = 0;\n    my\
    \ $alphabet_index_upper_5 = 0;\n    my $vowels_index_lower_5 = 0;\n    my $alphabet_index_lower_5\
    \ = 0;\n    my $vowels_index_upper_6 = 0;\n    my $alphabet_index_upper_6 = 0;\n\
    \    my $vowels_index_lower_6 = 0;\n    my $alphabet_\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp8ragmwah.pl line 46, at end
    of line

    syntax error at /tmp/tmp8ragmwah.pl line 46, near "$alphabet_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp8ragmwah.pl line 73, at end of
    line

    syntax error at /tmp/tmp8ragmwah.pl line 73, at EOF

    Execution of /tmp/tmp8ragmwah.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660227792
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_found = 0;\n\
    \    my $vowel_position = 0;\n    my $vowel_position_2 = 0;\n    my $vowel_position_3\
    \ = 0;\n    my $vowel_position_4 = 0;\n    my $vowel_position_5 = 0;\n    my $vowel_position_6\
    \ = 0;\n    my $vowel_position_7 = 0;\n    my $vowel_position_8 = 0;\n    my $vowel_position_9\
    \ = 0;\n    my $vowel_position_10 = 0;\n    my $vowel_position_11 = 0;\n    my\
    \ $vowel_position_12 = 0;\n    my $vowel_position_13 = 0;\n    my $vowel_position_14\
    \ = 0;\n    my $vowel_position_15 = 0;\n    my $vowel_position_16 = 0;\n    my\
    \ $vowel_position_17 = 0;\n    my $vowel_position_18 = 0;\n    my $vowel_position_19\
    \ = 0;\n    my $vowel_position_20 = 0;\n    my $vowel_position_21 = 0;\n    my\
    \ $vowel_position_22 = 0;\n    my $vowel_position_23 = 0;\n    my $vowel_position_24\
    \ = 0;\n    my $vowel_position_25 = 0;\n    my $vowel_position_26 = 0;\n    my\
    \ $vowel_position_27 = 0;\n    my $vowel_position_28 = 0;\n    my $vowel_position_29\
    \ = 0;\n    my $vowel_position_30 = 0;\n    my $vowel_position_31 = 0;\n    my\
    \ $vowel_position\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp2m_9rycv.pl line 50, at end
    of line

    syntax error at /tmp/tmp2m_9rycv.pl line 50, near "$vowel_position

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp2m_9rycv.pl line 77, at end of
    line

    syntax error at /tmp/tmp2m_9rycv.pl line 77, at EOF

    Execution of /tmp/tmp2m_9rycv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @letters = split //, $message;\n    my @encoded_letters;\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/) {\n    \
    \        my $encoded_letter = chr(ord($letter) + 2);\n            if ($encoded_letter\
    \ =~ /[aeiou]/) {\n                $encoded_letter = chr(ord($encoded_letter)\
    \ + 2);\n            }\n            push @encoded_letters, $encoded_letter;\n\
    \        } elsif ($letter =~ /[A-Z]/) {\n            my $encoded_letter = chr(ord($letter)\
    \ + 2);\n            if ($encoded_letter =~ /[AEIOU]/) {\n                $encoded_letter\
    \ = chr(ord($encoded_letter) + 2);\n            }\n            push @encoded_letters,\
    \ $encoded_letter;\n        } else {\n            push @encoded_letters, $letter;\n\
    \        }\n    }\n    return join '', @encoded_letters;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_hash = {\n        \"a\" => \"c\",\n        \"e\" => \"\
    g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\"\
    ,\n    };\n    for my $char (split //, $message) {\n        if ($vowels =~ /$char/)\
    \ {\n            $encoded_message .= $vowels_hash->{$char};\n        } else {\n\
    \            $encoded_message .= $char;\n        }\n    }\n    return uc $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my $encoded_message\
    \ = '';\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n      \
    \  'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $letter\
    \ (@message) {\n        if (exists $vowels{lc $letter}) {\n            $encoded_message\
    \ .= $vowels{lc $letter};\n        } elsif ($letter =~ /[a-z]/) {\n          \
    \  $encoded_message .= uc $letter;\n        } else {\n            $encoded_message\
    \ .= $letter;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = '';\n    my @vowels = ('a'..'z');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_map = (\n        'a'\
    \ => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n   \
    \     'u' => 'y',\n    );\n    for my $char (split //, $message) {\n        if\
    \ ($vowels{$char}) {\n            $encoded .= $vowels_map{$char};\n        } else\
    \ {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_upper\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $alphabet_lower = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $vowels_upper = \"AEIOU\";\n    my $vowels_lower = \"aeiou\";\n    for\
    \ (my $i = 0; $i < length($message); $i++) {\n        if (index($alphabet_upper,\
    \ substr($message, $i, 1)) != -1) {\n            $encoded .= substr($alphabet_lower,\
    \ index($alphabet_upper, substr($message, $i, 1)), 1);\n        } elsif (index($alphabet_lower,\
    \ substr($message, $i, 1)) != -1) {\n            $encoded .= substr($alphabet_upper,\
    \ index($alphabet_lower, substr($message, $i, 1)), 1);\n        } else {\n   \
    \         $encoded .= substr($message, $i, 1);\n        }\n    }\n    for (my\
    \ $i = 0; $i < length($encoded); $i++) {\n        if (index($vowels_upper, substr($encoded,\
    \ $i, 1)) != -1) {\n            $encoded = substr($encoded, 0, $i) . substr($vowels_lower,\
    \ index($vowels_upper, substr($encoded, $i, 1)) + 2, 1) . substr($encoded, $i\
    \ + 1);\n        } elsif (index($vowels_lower, substr($encoded, $i, 1)) != -1)\
    \ {\n            $encoded = substr($encoded, 0, $i) . substr($vowels_upper, index($vowels_lower,\
    \ substr($encoded, $i, 1)) + 2, 1) . substr($encoded, $i + 1);\n        }\n  \
    \  }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227792
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $vowel_index\
    \ = 0;\n    my $alphabet_index = 0;\n    my $vowel_position = 0;\n    my $alphabet_position\
    \ = 0;\n    my $vowel_letter = \"\";\n    my $alphabet_letter = \"\";\n    my\
    \ $vowel_letter_position = 0;\n    my $alphabet_letter_position = 0;\n    my $vowel_letter_index\
    \ = 0;\n    my $alphabet_letter_index = 0;\n    my $vowel_letter_position_index\
    \ = 0;\n    my $alphabet_letter_position_index = 0;\n    my $vowel_letter_position_index_2\
    \ = 0;\n    my $alphabet_letter_position_index_2 = 0;\n    my $vowel_letter_position_index_3\
    \ = 0;\n    my $alphabet_letter_position_index_3 = 0;\n    my $vowel_letter_position_index_4\
    \ = 0;\n    my $alphabet_letter_position_index_4 = 0;\n    my $vowel_letter_position_index_5\
    \ = 0;\n    my $alphabet_letter_position_index_5 = 0;\n    my $vowel_letter_position_index_6\
    \ = 0;\n    my $alphabet_letter_position_index_6 = 0;\n    my $vowel_letter_position_index_7\
    \ = 0;\n    my $alphabet_letter_position_index_7 = 0;\n    my $vowel_letter_position_index_8\
    \ = 0;\n    my $alphabet_letter_position_index_8 = 0;\n    my $vowel_letter_position_index_9\
    \ = 0;\n    my $alphabet_letter_position_index_9 = 0;\n    my $vowel_letter_position_index_10\
    \ = 0;\n    my $alphabet\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpkc01wnop.pl line 46, at end
    of line

    syntax error at /tmp/tmpkc01wnop.pl line 46, near "$alphabet

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpkc01wnop.pl line 73, at end of
    line

    syntax error at /tmp/tmpkc01wnop.pl line 73, at EOF

    Execution of /tmp/tmpkc01wnop.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660227792
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_encoded = \"cgjln\";\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp44_mjzc4.pl line 101,
    at end of line

    syntax error at /tmp/tmp44_mjzc4.pl line 101, at EOF

    Execution of /tmp/tmp44_mjzc4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = (\n        'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n       \
    \ 'd' => 'f',\n        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n\
    \        'h' => 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' =>\
    \ 'm',\n        'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n      \
    \  'o' => 'q',\n        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n\
    \        's' => 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' =>\
    \ 'x',\n        'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n      \
    \  'z' => 'b',\n    );\n    for my $char (split //, $message) {\n        if ($vowels{lc\
    \ $char}) {\n            $encoded .= $alphabet{lc $char};\n        } else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my $encoded\
    \ = '';\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n      \
    \  'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $letter\
    \ (@message) {\n        if (exists $vowels{lc $letter}) {\n            $encoded\
    \ .= $vowels{lc $letter};\n        } elsif ($letter =~ /[a-z]/) {\n          \
    \  $encoded .= uc $letter;\n        } else {\n            $encoded .= $letter;\n\
    \        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227792
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    foreach my $char (split //, $message) {\n\
    \        if (is_vowel($char)) {\n            my $index = index_of($char, @vowels);\n\
    \            $encoded_message .= $vowels[($index + 2) % 5];\n        } else {\n\
    \            $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_vowel called at /tmp/tmpcoilmaip.pl line
    16.

    '
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $str = shift;\n    my $encoded_str = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_hash = {\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n\
    \        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n \
    \   };\n    for (my $i = 0; $i < length($str); $i++) {\n        my $char = substr($str,\
    \ $i, 1);\n        if (index($vowels, $char) != -1) {\n            $encoded_str\
    \ .= $vowels_hash->{$char};\n        } else {\n            $encoded_str .= $char;\n\
    \        }\n    }\n    return uc($encoded_str);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    for my $char\
    \ (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n            }\n      \
    \      else {\n                $char =~ tr/A-Z/a-z/;\n            }\n        \
    \    if (exists $vowels{lc($char)}) {\n                my $index = 0;\n      \
    \          for (my $i = 0; $i < @vowels; $i++) {\n                    if ($vowels[$i]\
    \ eq lc($char)) {\n                        $index = $i;\n                    \
    \    last;\n                    }\n                }\n                $index +=\
    \ 2;\n                $index = $index % @vowels;\n                $char = $vowels[$index];\n\
    \            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $str = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my $i\
    \ = 0;\n    while ($i < length($str)) {\n        my $char = substr($str, $i, 1);\n\
    \        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n     \
    \           $char = uc($char);\n            } else {\n                $char =\
    \ lc($char);\n            }\n            if (exists $vowels{$char}) {\n      \
    \          $char = chr(ord($char) + 2);\n            }\n        }\n        $encoded\
    \ .= $char;\n        $i++;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\",\"\
    e\",\"i\",\"o\",\"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    foreach\
    \ my $letter (split(//,$message)) {\n        if ($letter =~ /[a-zA-Z]/) {\n  \
    \          if ($letter =~ /[a-z]/) {\n                $letter =~ tr/a-z/A-Z/;\n\
    \            } else {\n                $letter =~ tr/A-Z/a-z/;\n            }\n\
    \            if ($vowels{$letter}) {\n                $letter =~ tr/aeiou/eioua/;\n\
    \            }\n        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_map = (\n   \
    \     'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n\
    \        'u' => 's',\n    );\n    for my $char (split //, $message) {\n      \
    \  if ($vowels{lc $char}) {\n            $encoded .= $vowels_map{lc $char};\n\
    \        }\n        elsif ($char =~ /[a-z]/) {\n            $encoded .= uc $char;\n\
    \        }\n        elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc $char;\n\
    \        }\n        else {\n            $encoded .= $char;\n        }\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split(//, $message);\n    my @encoded_message;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter\
    \ (@message) {\n        if ($letter =~ /[A-Z]/) {\n            $letter = lc($letter);\n\
    \        } elsif ($letter =~ /[a-z]/) {\n            $letter = uc($letter);\n\
    \        }\n        if (exists $vowels{$letter}) {\n            $letter = $vowels{$letter};\n\
    \        }\n        push @encoded_message, $letter;\n    }\n    return join('',\
    \ @encoded_message);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227792
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_length = scalar @vowels;\n    my $vowel_found = 0;\n    my $char\
    \ = \"\";\n    my $char_ascii = 0;\n    my $char_ascii_new = 0;\n    my $char_new\
    \ = \"\";\n    my $message_length = length $message;\n    my $i = 0;\n    for\
    \ ($i = 0; $i < $message_length; $i++) {\n        $char = substr $message, $i,\
    \ 1;\n        $char_ascii = ord $char;\n        $char_ascii_new = $char_ascii;\n\
    \        $vowel_found = 0;\n        for ($vowel_index = 0; $vowel_index < $vowel_length;\
    \ $vowel_index++) {\n            if ($char eq $vowels[$vowel_index]) {\n     \
    \           $vowel_found = 1;\n                $vowel_count = $vowel_index + 2;\n\
    \                if ($vowel_count >= $vowel_length) {\n                    $vowel_count\
    \ = $vowel_count - $vowel_length;\n                }\n                $char_ascii_new\
    \ = ord $vowels[$vowel_count];\n                last;\n            }\n       \
    \ }\n        if ($vowel_found == 0) {\n            if ($char_ascii >= 65 && $char_ascii\
    \ <= 90) {\n                $char_ascii_new = $char_ascii + 32;\n            }\
    \ elsif ($char_ascii >= 97 && $char_ascii <= 122) {\n                $char_ascii_new\
    \ = $char_ascii - 32;\n            }\n        }\n        $char_new = chr $char_asci\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp4ododcj4.pl line 49, at end
    of line

    syntax error at /tmp/tmp4ododcj4.pl line 49, near "$char_asci

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp4ododcj4.pl line 76, at end of
    line

    syntax error at /tmp/tmp4ododcj4.pl line 76, at EOF

    Execution of /tmp/tmp4ododcj4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @encoded_message;\n    for my $letter (@message) {\n\
    \        if (grep {$_ eq lc $letter} @vowels) {\n            my $index = (index(lc\
    \ $letter, @vowels) + 2) % 5;\n            push @encoded_message, uc $vowels[$index];\n\
    \        } else {\n            push @encoded_message, uc $letter;\n        }\n\
    \    }\n    return join '', @encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    for (my $i = 0; $i < $message_length; $i++) {\n   \
    \     my $char = substr($message, $i, 1);\n        my $char_index = index($alphabet,\
    \ $char);\n        if ($char_index != -1) {\n            my $char_is_upper = $char\
    \ eq uc($char);\n            my $char_is_vowel = index($vowels, lc($char)) !=\
    \ -1;\n            my $new_char_index = ($char_index + 2) % $alphabet_length;\n\
    \            my $new_char = substr($alphabet, $new_char_index, 1);\n         \
    \   if ($char_is_vowel) {\n                $new_char = uc($new_char);\n      \
    \      }\n            if ($char_is_upper) {\n                $new_char = uc($new_char);\n\
    \            }\n            $encoded_message .= $new_char;\n        } else {\n\
    \            $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowels_hash = (\n        'a' => 'c',\n       \
    \ 'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n\
    \    );\n    my @message_array = split(//, $message);\n    foreach my $letter\
    \ (@message_array) {\n        if (grep {$_ eq $letter} @vowels) {\n          \
    \  $encoded_message .= $vowels_hash{$letter};\n        } else {\n            $encoded_message\
    \ .= $letter;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my @encoded;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter\
    \ (@message) {\n        if ($letter =~ /[a-z]/) {\n            if ($letter =~\
    \ /[aeiou]/) {\n                push @encoded, $vowels{$letter};\n           \
    \ } else {\n                push @encoded, $letter;\n            }\n        }\
    \ else {\n            push @encoded, $letter;\n        }\n    }\n    return uc(join\
    \ '', @encoded);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $letter;\n    my $vowel;\n    my $vowel_index;\n    my $vowel_index_plus_two;\n\
    \    my $vowel_plus_two;\n    my $vowel_index_plus_two_mod_vowels_length;\n  \
    \  my $vowel_index_plus_two_mod_alphabet_length;\n    my $letter_index;\n    my\
    \ $letter_index_plus_two;\n    my $letter_plus_two;\n    my $letter_index_plus_two_mod_alphabet_length;\n\
    \    my $letter_index_plus_two_mod_vowels_length;\n    for ($i = 0; $i < $message_length;\
    \ $i++) {\n        $letter = substr($message, $i, 1);\n        $letter_index =\
    \ index($alphabet, $letter);\n        $letter_index_plus_two = $letter_index +\
    \ 2;\n        $letter_index_plus_two_mod_alphabet_length = $letter_index_plus_two\
    \ % $alphabet_length;\n        $letter_plus_two = substr($alphabet, $letter_index_plus_two_mod_alphabet_length,\
    \ 1);\n        $letter_index_plus_two_mod_v\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpqjpcrfep.pl line 56, at end
    of line

    syntax error at /tmp/tmpqjpcrfep.pl line 56, near "$letter_index_plus_two_mod_v

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpqjpcrfep.pl line 83, at end of
    line

    syntax error at /tmp/tmpqjpcrfep.pl line 83, at EOF

    Execution of /tmp/tmpqjpcrfep.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{lc($char)}) {\n\
    \            $encoded .= $alphabet{lc($char)};\n        } else {\n           \
    \ $encoded .= $char;\n        }\n    }\n    return uc($encoded);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my\
    \ %vowels_map = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"\
    i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n    );\n    for\
    \ my $char (split //, $message) {\n        if ($vowels{lc $char}) {\n        \
    \    $encoded .= uc $vowels_map{lc $char};\n        } elsif ($char =~ /[a-z]/)\
    \ {\n            $encoded .= uc $char;\n        } elsif ($char =~ /[A-Z]/) {\n\
    \            $encoded .= lc $char;\n        } else {\n            $encoded .=\
    \ $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_len =\
    \ length($alphabet);\n    my $vowels_len = length($vowels);\n    my $vowel_index\
    \ = 0;\n    my $alphabet_index = 0;\n    my $vowel_found = 0;\n    my $char =\
    \ \"\";\n    my $i = 0;\n    for ($i = 0; $i < length($message); $i++) {\n   \
    \     $char = substr($message, $i, 1);\n        $vowel_found = 0;\n        for\
    \ ($vowel_index = 0; $vowel_index < $vowels_len; $vowel_index++) {\n         \
    \   if ($char eq substr($vowels, $vowel_index, 1)) {\n                $vowel_found\
    \ = 1;\n                last;\n            }\n        }\n        if ($vowel_found)\
    \ {\n            $alphabet_index = index($alphabet, $char);\n            $alphabet_index\
    \ += 2;\n            if ($alphabet_index >= $alphabet_len) {\n               \
    \ $alphabet_index -= $alphabet_len;\n            }\n            $char = substr($alphabet,\
    \ $alphabet_index, 1);\n        }\n        if ($char eq uc($char)) {\n       \
    \     $char = lc($char);\n        } else {\n            $char = uc($char);\n \
    \       }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my @encoded;\n\
    \    foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/) {\n    \
    \        $letter =~ tr/a-z/b-za/;\n            push @encoded, $letter;\n     \
    \   } elsif ($letter =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/B-ZA/;\n   \
    \         push @encoded, $letter;\n        } else {\n            push @encoded,\
    \ $letter;\n        }\n    }\n    return join '', @encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my @encoded_message;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            if ($letter =~ /[aeiou]/)\
    \ {\n                push @encoded_message, $vowels{$letter};\n            }\n\
    \            else {\n                push @encoded_message, $letter;\n       \
    \     }\n        }\n        else {\n            push @encoded_message, uc $letter;\n\
    \        }\n    }\n    return join '', @encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @message = split(//,\
    \ $message);\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    foreach my $letter (@message) {\n        if\
    \ ($vowels{lc($letter)}) {\n            $encoded .= next_vowel($letter);\n   \
    \     } else {\n            $encoded .= swap_case($letter);\n        }\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::swap_case called at /tmp/tmpn1zcecks.pl line
    21.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = '';\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_pos\
    \ = 0;\n    my $vowel_found = 0;\n    my $vowel_replace = '';\n    my $vowel_replace_index\
    \ = 0;\n    my $vowel_replace_pos = 0;\n    my $vowel_replace_found = 0;\n   \
    \ my $vowel_replace_count = 0;\n    my $vowel_replace_next = '';\n    my $vowel_replace_next_index\
    \ = 0;\n    my $vowel_replace_next_pos = 0;\n    my $vowel_replace_next_found\
    \ = 0;\n    my $vowel_replace_next_count = 0;\n    my $vowel_replace_next_next\
    \ = '';\n    my $vowel_replace_next_next_index = 0;\n    my $vowel_replace_next_next_pos\
    \ = 0;\n    my $vowel_replace_next_next_found = 0;\n    my $vowel_replace_next_next_count\
    \ = 0;\n    my $vowel_replace_next_next_next = '';\n    my $vowel_replace_next_next_next_index\
    \ = 0;\n    my $vowel_replace_next_next_next_pos = 0;\n    my $vowel_replace_next_next_next_found\
    \ = 0;\n    my $vowel_replace_next_next_next_count = 0;\n    my $vowel_replace_next_next_next_next\
    \ = '';\n    my $vowel_replace_next_next_next_next_index = 0;\n    my $vowel_replace_next_next_next_next_pos\
    \ = 0;\n    my $vowel_replace_next_next_next_next_found = 0;\n    my $vowel\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpqyycgg1k.pl line 44, at end
    of line

    syntax error at /tmp/tmpqyycgg1k.pl line 44, near "$vowel

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpqyycgg1k.pl line 71, at end of
    line

    syntax error at /tmp/tmpqyycgg1k.pl line 71, at EOF

    Execution of /tmp/tmpqyycgg1k.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    for (my $i = 0; $i < $message_length; $i++) {\n   \
    \     my $char = substr($message, $i, 1);\n        my $char_index = index($alphabet,\
    \ $char);\n        if ($char_index != -1) {\n            my $char_is_vowel = index($vowels,\
    \ $char) != -1;\n            my $new_char_index = ($char_index + 2) % $alphabet_length;\n\
    \            my $new_char = substr($alphabet, $new_char_index, 1);\n         \
    \   if ($char_is_vowel) {\n                $new_char = uc($new_char);\n      \
    \      } else {\n                $new_char = lc($new_char);\n            }\n \
    \           $encoded_message .= $new_char;\n        } else {\n            $encoded_message\
    \ .= $char;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $encoded_alphabet\
    \ = \"cdefghijklmnopqrstuvwxyzab\";\n    my $message_length = length($message);\n\
    \    for (my $i = 0; $i < $message_length; $i++) {\n        my $letter = substr($message,\
    \ $i, 1);\n        my $position = index($alphabet, $letter);\n        if ($position\
    \ == -1) {\n            $encoded_message .= $letter;\n        } else {\n     \
    \       my $encoded_letter = substr($encoded_alphabet, $position, 1);\n      \
    \      if (index($vowels, $letter) != -1) {\n                $encoded_letter =\
    \ uc($encoded_letter);\n            }\n            $encoded_message .= $encoded_letter;\n\
    \        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $vowel_index\
    \ = 0;\n    my $char_index = 0;\n    my $char = \"\";\n    my $vowel = \"\";\n\
    \    my $encoded_char = \"\";\n    my $char_is_vowel = 0;\n    my $char_is_upper\
    \ = 0;\n    my $char_is_lower = 0;\n    my $char_is_alpha = 0;\n    my $char_is_digit\
    \ = 0;\n    my $char_is_space = 0;\n    my $char_is_punct = 0;\n    my $char_is_other\
    \ = 0;\n    my $char_is_whitespace = 0;\n    my $char_is_print = 0;\n    my $char_is_cntrl\
    \ = 0;\n    my $char_is_graph = 0;\n    my $char_is_alnum = 0;\n    my $char_is_xdigit\
    \ = 0;\n    my $char_is_ascii = 0;\n    my $char_is_utf8 = 0;\n    my $char_is_utf8_cntrl\
    \ = 0;\n    my $char_is_utf8_mark = 0;\n    my $char_is_utf8_space = 0;\n    my\
    \ $char_is_utf8_xdigit = 0;\n    my $char_is_utf8_alnum = 0;\n    my $char_is_utf8_graph\
    \ = 0;\n    my $char_is_utf8_print = 0;\n    my $char_is_utf8_punct = 0;\n   \
    \ my $char_is_utf8_digit = 0;\n    my $char_is_utf8_upper = 0;\n    my $char_is_utf8_lower\
    \ = 0;\n    my $char_is_utf8_title = 0;\n    my $char_is_utf8_alpha = 0;\n\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpgkp93uv0.pl line 78, at
    end of line

    syntax error at /tmp/tmpgkp93uv0.pl line 78, at EOF

    Execution of /tmp/tmpgkp93uv0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded_msg = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_hash = {\n        'a' => 'c',\n        'e' => 'g',\n       \
    \ 'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    };\n    for my $char\
    \ (split //, $msg) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $char = lc($char);\n            } else {\n  \
    \              $char = uc($char);\n            }\n        }\n        if ($char\
    \ =~ /[aeiou]/i) {\n            $char = $vowels_hash->{lc($char)};\n        }\n\
    \        $encoded_msg .= $char;\n    }\n    return $encoded_msg;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $found = 0;\n    my $vowel_index = 0;\n    my $letter = \"\";\n    my $letter_index\
    \ = 0;\n    my $encoded_letter = \"\";\n    my $encoded_letter_index = 0;\n  \
    \  for ($i = 0; $i < $message_length; $i++) {\n        $letter = substr($message,\
    \ $i, 1);\n        $letter_index = index($alphabet, $letter);\n        if ($letter_index\
    \ >= 0) {\n            $encoded_letter_index = $letter_index + 2;\n          \
    \  if ($encoded_letter_index >= $alphabet_length) {\n                $encoded_letter_index\
    \ -= $alphabet_length;\n            }\n            $encoded_letter = substr($alphabet,\
    \ $encoded_letter_index, 1);\n            $found = 0;\n            for ($j = 0;\
    \ $j < $vowels_length; $j++) {\n                $vowel_index = index($vowels,\
    \ substr($vowels, $j, 1));\n                if ($vowel_index == $letter_index)\
    \ {\n                    $found = 1;\n                    last;\n            \
    \    }\n            }\n            if ($found) {\n                $encoded_message\
    \ .= $encoded_letter;\n            } else {\n                $encoded_message\
    \ .= $letter;\n            }\n        } else {\n            $encoded_message .=\
    \ $letter;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n \
    \   my $vowels_encoded = \"cgjkr\";\n    for (my $i = 0; $i < length($msg); $i++)\
    \ {\n        my $char = substr($msg, $i, 1);\n        if ($char =~ /[a-z]/i) {\n\
    \            if ($char =~ /[A-Z]/) {\n                $char = lc($char);\n   \
    \         } else {\n                $char = uc($char);\n            }\n      \
    \  }\n        if ($char =~ /[aeiou]/i) {\n            my $pos = index($vowels,\
    \ $char);\n            $char = substr($vowels_encoded, $pos, 1);\n        }\n\
    \        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my\
    \ %alphabet = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"\
    c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\"\
    \ => \"h\",\n        \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" =>\
    \ \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"\
    n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\"\
    ,\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n\
    \        \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n \
    \       \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n  \
    \      \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for my $letter (split\
    \ //, $message) {\n        if ($vowels{lc($letter)}) {\n            $encoded .=\
    \ $alphabet{lc($letter)};\n        } else {\n            $encoded .= $letter;\n\
    \        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my @message = split //, $message;\n    my @encoded;\n\
    \    for my $char (@message) {\n        if ($char =~ /[a-z]/) {\n            $char\
    \ =~ tr/a-z/b-za/;\n        } elsif ($char =~ /[A-Z]/) {\n            $char =~\
    \ tr/A-Z/B-ZA/;\n        }\n        if ($char =~ /[aeiou]/) {\n            $char\
    \ =~ tr/aeiou/cejqu/;\n        } elsif ($char =~ /[AEIOU]/) {\n            $char\
    \ =~ tr/AEIOU/CEJQU/;\n        }\n        push @encoded, $char;\n    }\n    return\
    \ join '', @encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $str = shift;\n    my @str = split //, $str;\n    my $encoded = \"\";\n\
    \    foreach my $char (@str) {\n        if ($char =~ /[a-z]/) {\n            $char\
    \ =~ tr/a-z/A-Z/;\n            $char =~ tr/A-Z/N-ZA-M/;\n            $encoded\
    \ .= $char;\n        } elsif ($char =~ /[A-Z]/) {\n            $char =~ tr/A-Z/a-z/;\n\
    \            $char =~ tr/a-z/n-za-m/;\n            $encoded .= $char;\n      \
    \  } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n  \
    \  my $vowels_hash = {};\n    my $i = 0;\n    foreach my $vowel (split //, $vowels)\
    \ {\n        $vowels_hash->{$vowel} = 1;\n        $vowels_encoded_hash->{$vowel}\
    \ = substr($vowels_encoded, $i, 1);\n        $i++;\n    }\n    foreach my $char\
    \ (split //, $message) {\n        if (exists $vowels_hash->{lc($char)}) {\n  \
    \          $encoded .= $vowels_encoded_hash->{lc($char)};\n        } else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = scalar @vowels;\n    my $vowel_to_replace = \"\";\n    my $vowel_replacement\
    \ = \"\";\n    my $char_to_replace = \"\";\n    my $char_replacement = \"\";\n\
    \    my $char_index = 0;\n    my $char_count = 0;\n    my $char_ascii = 0;\n \
    \   my $char_ascii_replacement = 0;\n    my $char_ascii_upper = 0;\n    my $char_ascii_lower\
    \ = 0;\n    my $char_ascii_upper_replacement = 0;\n    my $char_ascii_lower_replacement\
    \ = 0;\n    my $char_upper = \"\";\n    my $char_lower = \"\";\n    my $char_upper_replacement\
    \ = \"\";\n    my $char_lower_replacement = \"\";\n    my $char_case = \"\";\n\
    \    my $char_case_replacement = \"\";\n    my $char_length = 0;\n    my $char_length_replacement\
    \ = 0;\n    my $char_length_diff = 0;\n    my $char_length_diff_replacement =\
    \ 0;\n    my $char_length_diff_replacement_abs = 0;\n    my $char_length_diff_replacement_abs_2\
    \ = 0;\n    my $char_length_diff_replacement_abs_2_ascii = 0;\n    my $char_length_diff_replacement_abs_2_ascii_replacement\
    \ = 0;\n    my $char_length_diff_replacement_abs_2_ascii_replacement_char = \"\
    \";\n    my $char_length_diff_replacement_abs_2_ascii_replacement_char_case =\
    \ \"\";\n    my $char_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp_i7mz850.pl line 47, at end
    of line

    syntax error at /tmp/tmp_i7mz850.pl line 47, near "$char_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp_i7mz850.pl line 74, at end of
    line

    syntax error at /tmp/tmp_i7mz850.pl line 74, at EOF

    Execution of /tmp/tmp_i7mz850.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ =>\
    \ 1 } ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my\
    \ %letters_lower = map { $_ => 1 } ('a'..'z');\n    my %letters_lower_upper =\
    \ map { $_ => 1 } ('a'..'z', 'A'..'Z');\n    my %letters_lower_upper_numbers =\
    \ map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9');\n    my %letters_lower_upper_numbers_special\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', '!', '@', '#', '$', '%', '^',\
    \ '&', '*', '(', ')', '-', '_', '=', '+', '[', '{', ']', '}', '\\\\', '|', ';',\
    \ ':', '\\'', '\"', ',', '<', '.', '>', '/', '?');\n    my %letters_lower_upper_numbers_special_space\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', '!', '@', '#', '$', '%', '^',\
    \ '&', '*', '(', ')', '-', '_', '=', '+', '[', '{', ']', '}', '\\\\', '|', ';',\
    \ ':', '\\'', '\"', ',', '<', '.', '>', '/', '?', ' ');\n    my %letters_lower_upper_numbers_special_space_newline\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', '!', '@', '#', '$', '%', '^',\
    \ '&',\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpqn1z9acu.pl line 24, at end
    of line

    syntax error at /tmp/tmpqn1z9acu.pl line 24, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpqn1z9acu.pl line 51, at end of
    line

    syntax error at /tmp/tmpqn1z9acu.pl line 51, at EOF

    Execution of /tmp/tmpqn1z9acu.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @letters = split(//, $message);\n    my $encoded_message\
    \ = '';\n    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            $encoded_message .= chr(ord($letter) - 32);\n        } elsif\
    \ ($letter =~ /[A-Z]/) {\n            $encoded_message .= chr(ord($letter) + 32);\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    $encoded_message =~ s/[aeiou]/chr(ord($&) + 2)/eg;\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my\
    \ %alphabet = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"\
    c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\"\
    \ => \"h\",\n        \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" =>\
    \ \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"\
    n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\"\
    ,\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n\
    \        \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n \
    \       \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n  \
    \      \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for my $char (split\
    \ //, $message) {\n        if ($vowels{lc($char)}) {\n            $encoded .=\
    \ $alphabet{lc($char)};\n        } else {\n            $encoded .= $char;\n  \
    \      }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n     \
    \   a => 'c',\n        b => 'd',\n        c => 'e',\n        d => 'f',\n     \
    \   e => 'g',\n        f => 'h',\n        g => 'i',\n        h => 'j',\n     \
    \   i => 'k',\n        j => 'l',\n        k => 'm',\n        l => 'n',\n     \
    \   m => 'o',\n        n => 'p',\n        o => 'q',\n        p => 'r',\n     \
    \   q => 's',\n        r => 't',\n        s => 'u',\n        t => 'v',\n     \
    \   u => 'w',\n        v => 'x',\n        w => 'y',\n        x => 'z',\n     \
    \   y => 'a',\n        z => 'b',\n    );\n    for my $letter (split //, $message)\
    \ {\n        if (exists $vowels{lc $letter}) {\n            $encoded .= $alphabet{lc\
    \ $letter};\n        } else {\n            $encoded .= uc $letter;\n        }\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my @encoded;\n\
    \    for my $letter (@message) {\n        if ($letter =~ /[a-z]/) {\n        \
    \    push @encoded, chr(ord($letter) - 32);\n        } elsif ($letter =~ /[A-Z]/)\
    \ {\n            push @encoded, chr(ord($letter) + 32);\n        } else {\n  \
    \          push @encoded, $letter;\n        }\n    }\n    my $encoded = join '',\
    \ @encoded;\n    $encoded =~ s/[aeiou]/chr(ord($&) + 2)/eg;\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n \
    \   my $vowels_encoded = \"cgjkr\";\n    for my $c (split //, $msg) {\n      \
    \  my $index = index($vowels, $c);\n        if ($index > -1) {\n            $encoded\
    \ .= substr($vowels_encoded, $index, 1);\n        } else {\n            $encoded\
    \ .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_length = scalar @vowels;\n    my $vowel_found = 0;\n    my $char_ascii;\n\
    \    my $char_ascii_swap;\n    my $char_swap;\n    my $char;\n    my $message_length\
    \ = length $message;\n    my $i = 0;\n    for ($i = 0; $i < $message_length; $i++)\
    \ {\n        $char = substr($message, $i, 1);\n        $char_ascii = ord($char);\n\
    \        $char_ascii_swap = $char_ascii;\n        $vowel_found = 0;\n        for\
    \ ($vowel_index = 0; $vowel_index < $vowel_length; $vowel_index++) {\n       \
    \     if ($char eq $vowels[$vowel_index]) {\n                $vowel_found = 1;\n\
    \                $vowel_count = $vowel_index + 2;\n                if ($vowel_count\
    \ >= $vowel_length) {\n                    $vowel_count = $vowel_count - $vowel_length;\n\
    \                }\n                $char_ascii_swap = ord($vowels[$vowel_count]);\n\
    \            }\n        }\n        if ($char_ascii >= 65 && $char_ascii <= 90)\
    \ {\n            $char_ascii_swap = $char_ascii_swap + 32;\n        }\n      \
    \  if ($char_ascii >= 97 && $char_ascii <= 122) {\n            $char_ascii_swap\
    \ = $char_ascii_swap - 32;\n        }\n        $char_swap = chr($char_ascii_swap);\n\
    \        $encoded = $encoded .\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpniv1qboe.pl line 48, at end
    of line

    syntax error at /tmp/tmpniv1qboe.pl line 48, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpniv1qboe.pl line 75, at end of
    line

    syntax error at /tmp/tmpniv1qboe.pl line 75, at EOF

    Execution of /tmp/tmpniv1qboe.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = (\n        'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n       \
    \ 'd' => 'f',\n        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n\
    \        'h' => 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' =>\
    \ 'm',\n        'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n      \
    \  'o' => 'q',\n        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n\
    \        's' => 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' =>\
    \ 'x',\n        'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n      \
    \  'z' => 'b',\n    );\n    for my $char (split //, $message) {\n        if ($vowels{lc($char)})\
    \ {\n            $encoded_message .= $alphabet{lc($char)};\n        } elsif ($char\
    \ =~ /[A-Z]/) {\n            $encoded_message .= lc($char);\n        } elsif ($char\
    \ =~ /[a-z]/) {\n            $encoded_message .= uc($char);\n        } else {\n\
    \            $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n \
    \   my $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    my $alphabet_length = length($alphabet);\n\
    \    my $vowels_length = length($vowels);\n    my $vowel_index = 0;\n    my $alphabet_index\
    \ = 0;\n    my $vowel_found = 0;\n    my $letter = '';\n    my $vowel = '';\n\
    \    my $vowel_position = 0;\n    my $alphabet_position = 0;\n    my $encoded_letter\
    \ = '';\n    for (my $i = 0; $i < length($message); $i++) {\n        $letter =\
    \ substr($message, $i, 1);\n        $vowel_found = 0;\n        for ($vowel_index\
    \ = 0; $vowel_index < $vowels_length; $vowel_index++) {\n            $vowel =\
    \ substr($vowels, $vowel_index, 1);\n            if ($letter eq $vowel) {\n  \
    \              $vowel_found = 1;\n                $vowel_position = $vowel_index;\n\
    \                last;\n            }\n        }\n        if ($vowel_found) {\n\
    \            $alphabet_position = $vowel_position + 2;\n            if ($alphabet_position\
    \ >= $vowels_length) {\n                $alphabet_position = $alphabet_position\
    \ - $vowels_length;\n            }\n            $encoded_letter = substr($vowels,\
    \ $alphabet_position, 1);\n        } else {\n            $encoded_letter = $letter;\n\
    \        }\n        if ($encoded_letter eq uc($encoded_letter)) {\n          \
    \  $encoded_letter = lc($encoded_letter);\n        } else {\n            $encoded_letter\
    \ = uc($encoded_letter);\n        }\n        $encoded = $encoded . $encoded_letter;\n\
    \    }\n    return $enc\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpjjr_y6id.pl line 54, at end
    of line

    syntax error at /tmp/tmpjjr_y6id.pl line 54, near "$enc

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpjjr_y6id.pl line 81, at end of
    line

    syntax error at /tmp/tmpjjr_y6id.pl line 81, at EOF

    Execution of /tmp/tmpjjr_y6id.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n  \
    \  my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpvqiesls7.pl line 74,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpvqiesls7.pl line 74, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpvqiesls7.pl line 101, at end of line\nsyntax\
    \ error at /tmp/tmpvqiesls7.pl line 101, at EOF\nExecution of /tmp/tmpvqiesls7.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $letter = substr($message, $i, 1);\n        if ($letter\
    \ =~ /[a-z]/i) {\n            if ($letter =~ /[A-Z]/) {\n                $letter\
    \ = lc($letter);\n            } else {\n                $letter = uc($letter);\n\
    \            }\n        }\n        if ($letter =~ /[aeiou]/i) {\n            my\
    \ $index = index($vowels, $letter);\n            $letter = substr($vowels_encoded,\
    \ $index, 1);\n        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %encoding = (\n\
    \        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 's',\n        'u' => 'y',\n    );\n    for my $char (split //, $msg) {\n   \
    \     if ($vowels{lc $char}) {\n            $encoded .= $encoding{lc $char};\n\
    \        } elsif ($char =~ /[a-z]/) {\n            $encoded .= uc $char;\n   \
    \     } elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc $char;\n      \
    \  } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = '';\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowels_hash = map { $_ => 1 } @vowels;\n    my\
    \ %alphabet_hash = map { $_ => 1 } ('a'..'z');\n    my %alphabet_hash_upper =\
    \ map { $_ => 1 } ('A'..'Z');\n    my $alphabet_string = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    my $alphabet_string_upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    my $alphabet_string_length\
    \ = length($alphabet_string);\n    my $alphabet_string_length_upper = length($alphabet_string_upper);\n\
    \    my $message_length = length($message);\n    my $message_index = 0;\n    my\
    \ $message_char = '';\n    my $message_char_index = 0;\n    my $message_char_index_upper\
    \ = 0;\n    my $message_char_index_upper_plus_two = 0;\n    my $message_char_index_plus_two\
    \ = 0;\n    my $message_char_index_plus_two_upper = 0;\n    my $message_char_index_plus_two_upper_plus_two\
    \ = 0;\n    my $message_char_index_plus_two_upper_plus_two_plus_two = 0;\n   \
    \ my $message_char_index_plus_two_upper_plus_two_plus_two_plus_two = 0;\n    my\
    \ $message_char_index_plus_two_upper_plus_two_plus_two_plus_two_plus_two = 0;\n\
    \    my $message_char_index_plus_two_upper_plus_two_plus_two_plus_two_plus_two_plus_two\
    \ = 0;\n    my $message_char_index_plus_two_upper_plus_two_plus_two_plus_two_plus_two_plus_two_plus_two\
    \ = 0;\n    my $message_char_index\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmph4vnm4oj.pl line 37, at end
    of line

    syntax error at /tmp/tmph4vnm4oj.pl line 37, near "$message_char_index

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmph4vnm4oj.pl line 64, at end of
    line

    syntax error at /tmp/tmph4vnm4oj.pl line 64, at EOF

    Execution of /tmp/tmph4vnm4oj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[A-Z]/) {\n                $char = lc($char);\n\
    \            } else {\n                $char = uc($char);\n            }\n   \
    \     }\n        if ($char =~ /[aeiou]/i) {\n            my $index = index($vowels,\
    \ $char);\n            $char = substr($vowels_encoded, $index, 1);\n        }\n\
    \        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n \
    \   my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $vowel_index = 0;\n\
    \    my $alphabet_index = 0;\n    my $vowel_count = 0;\n    my $alphabet_count\
    \ = 0;\n    my $vowel_found = 0;\n    my $alphabet_found = 0;\n    my $vowel_next\
    \ = 0;\n    my $alphabet_next = 0;\n    my $vowel_next_next = 0;\n    my $alphabet_next_next\
    \ = 0;\n    my $vowel_next_next_next = 0;\n    my $alphabet_next_next_next = 0;\n\
    \    my $vowel_next_next_next_next = 0;\n    my $alphabet_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next = 0;\n    my $alphabet_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next = 0;\n    my $alphabet_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next = 0;\n    my $alphabet_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next = 0;\n    my $alphabet_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next = 0;\n    my\
    \ $alphabet_next_next_next_next_next_next_next_next_next = 0;\n    my $vowel_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    my $alphabet_next_next\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7evd631w.pl line 42, at end
    of line

    syntax error at /tmp/tmp7evd631w.pl line 42, near "$alphabet_next_next

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7evd631w.pl line 69, at end of
    line

    syntax error at /tmp/tmp7evd631w.pl line 69, at EOF

    Execution of /tmp/tmp7evd631w.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n  \
    \  my $vowels_hash = {};\n    my @vowels_encoded_array = split(\"\", $vowels_encoded);\n\
    \    my @vowels_array = split(\"\", $vowels);\n    for (my $i = 0; $i < scalar(@vowels_array);\
    \ $i++) {\n        $vowels_hash->{$vowels_array[$i]} = $vowels_encoded_array[$i];\n\
    \        $vowels_encoded_hash->{$vowels_encoded_array[$i]} = $vowels_array[$i];\n\
    \    }\n    my @message_array = split(\"\", $message);\n    for (my $i = 0; $i\
    \ < scalar(@message_array); $i++) {\n        if ($vowels_hash->{lc($message_array[$i])})\
    \ {\n            $encoded .= $vowels_hash->{lc($message_array[$i])};\n       \
    \ } elsif ($vowels_encoded_hash->{lc($message_array[$i])}) {\n            $encoded\
    \ .= $vowels_encoded_hash->{lc($message_array[$i])};\n        } else {\n     \
    \       $encoded .= $message_array[$i];\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $vowel_index\
    \ = 0;\n    my $alphabet_index = 0;\n    my $vowel_found = 0;\n    my $char =\
    \ \"\";\n    my $char_index = 0;\n    my $char_length = length($message);\n  \
    \  my $char_lower = \"\";\n    my $char_upper = \"\";\n    my $char_upper_index\
    \ = 0;\n    my $char_lower_index = 0;\n    my $char_upper_found = 0;\n    my $char_lower_found\
    \ = 0;\n    my $vowel_upper_index = 0;\n    my $vowel_lower_index = 0;\n    my\
    \ $vowel_upper_found = 0;\n    my $vowel_lower_found = 0;\n    my $vowel_upper\
    \ = \"\";\n    my $vowel_lower = \"\";\n    my $vowel_upper_next = \"\";\n   \
    \ my $vowel_lower_next = \"\";\n    my $vowel_upper_next_index = 0;\n    my $vowel_lower_next_index\
    \ = 0;\n    my $vowel_upper_next_found = 0;\n    my $vowel_lower_next_found =\
    \ 0;\n    my $vowel_upper_next_next = \"\";\n    my $vowel_lower_next_next = \"\
    \";\n    my $vowel_upper_next_next_index = 0;\n    my $vowel_lower_next_next_index\
    \ = 0;\n    my $vowel_upper_next_next_found = 0;\n    my $vowel_lower_next_next_found\
    \ = 0;\n    my $vowel_upper_next_next_next = \"\";\n    my\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'No such class use at /tmp/tmponzxp0b5.pl line 50, near "my

    use"

    syntax error at /tmp/tmponzxp0b5.pl line 50, near "my

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmponzxp0b5.pl line 77, at end of
    line

    syntax error at /tmp/tmponzxp0b5.pl line 77, at EOF

    Execution of /tmp/tmponzxp0b5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $str = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    for my\
    \ $c (split //, $str) {\n        if ($c =~ /[a-z]/i) {\n            if ($c =~\
    \ /[a-z]/) {\n                $c =~ tr/a-z/A-Z/;\n            } else {\n     \
    \           $c =~ tr/A-Z/a-z/;\n            }\n            if (exists $vowels{lc($c)})\
    \ {\n                $c =~ tr/aeiou/eioua/;\n            }\n        }\n      \
    \  $encoded .= $c;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n \
    \   my $vowels_encoded = 'cgjln';\n    for my $letter (split //, $message) {\n\
    \        if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[A-Z]/) {\n \
    \               $letter = lc $letter;\n            } else {\n                $letter\
    \ = uc $letter;\n            }\n        }\n        if ($letter =~ /[$vowels]/i)\
    \ {\n            my $index = index($vowels, $letter);\n            $letter = substr($vowels_encoded,\
    \ $index, 1);\n        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_\
    \ => 1 } ('a'..'z');\n    my %encoded_alphabet = map { $_ => 1 } ('c'..'z', 'a'..'b');\n\
    \    my %encoded_vowels = map { $_ => 1 } ('c'..'z', 'a'..'b');\n    my %encoded_vowels_map\
    \ = (\n        'a' => 'c',\n        'e' => 'i',\n        'i' => 'm',\n       \
    \ 'o' => 's',\n        'u' => 'y',\n    );\n    my %encoded_alphabet_map = (\n\
    \        'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' =>\
    \ 'f',\n        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n      \
    \  'h' => 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n\
    \        'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' =>\
    \ 'q',\n        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n      \
    \  's' => 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n\
    \        'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' =>\
    \ 'b',\n    );\n    for my $char (split //, $message) {\n        if ($alphabet{$char})\
    \ {\n            $encoded .= $encoded_alphabet_map{$char};\n        } else {\n\
    \            $encoded .= $char;\n        }\n    }\n   \nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2ec46af_.pl line 89, at
    end of line

    syntax error at /tmp/tmp2ec46af_.pl line 89, at EOF

    Execution of /tmp/tmp2ec46af_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n\
    \    my %letters_lower = map { $_ => 1 } ('a'..'z');\n    my $i = 0;\n    while\
    \ ($i < length($message)) {\n        my $char = substr($message, $i, 1);\n   \
    \     if (exists $letters_upper{$char}) {\n            $char = lc($char);\n  \
    \      }\n        if (exists $vowels{$char}) {\n            my $next_vowel = $char;\n\
    \            while (!exists $vowels{$next_vowel}) {\n                $next_vowel\
    \ = next_letter($next_vowel);\n            }\n            $next_vowel = next_letter($next_vowel);\n\
    \            $next_vowel = next_letter($next_vowel);\n            $char = $next_vowel;\n\
    \        }\n        $encoded .= $char;\n        $i++;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::next_letter called at /tmp/tmphzhshmwi.pl line
    30.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index\
    \ = 0;\n    my $vowel_count = scalar @vowels;\n    my $vowel_index_increment =\
    \ 2;\n    my $vowel_index_max = $vowel_count - 1;\n    my $vowel_index_max_plus_one\
    \ = $vowel_index_max + 1;\n    my $vowel_index_max_plus_two = $vowel_index_max\
    \ + 2;\n    my $vowel_index_max_plus_two_mod = $vowel_index_max_plus_two % $vowel_count;\n\
    \    my $vowel_index_max_plus_two_mod_plus_one = $vowel_index_max_plus_two_mod\
    \ + 1;\n    my $vowel_index_max_plus_two_mod_plus_one_mod = $vowel_index_max_plus_two_mod_plus_one\
    \ % $vowel_count;\n    my $vowel_index_max_plus_two_mod_plus_one_mod_plus_one\
    \ = $vowel_index_max_plus_two_mod_plus_one_mod + 1;\n    my $vowel_index_max_plus_two_mod_plus_one_mod_plus_one_mod\
    \ = $vowel_index_max_plus_two_mod_plus_one_mod_plus_one % $vowel_count;\n    my\
    \ $vowel_index_max_plus_two_mod_plus_one_mod_plus_one_mod_plus_one = $vowel_index_max_plus_two_mod_plus_one_mod_plus_one_mod\
    \ + 1;\n    my $vowel_index_max_plus_two_mod_plus_one_mod_plus_one_mod_plus_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpc4rfxfcf.pl line 29, at end
    of line

    syntax error at /tmp/tmpc4rfxfcf.pl line 29, near "$vowel_index_max_plus_two_mod_plus_one_mod_plus_one_mod_plus_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpc4rfxfcf.pl line 56, at end of
    line

    syntax error at /tmp/tmpc4rfxfcf.pl line 56, at EOF

    Execution of /tmp/tmpc4rfxfcf.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ =>\
    \ 1 } ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n    my\
    \ %letters_lower = map { $_ => 1 } ('a'..'z');\n    my %letters_upper_lower =\
    \ map { $_ => 1 } ('A'..'Z');\n    my %letters_lower_upper = map { $_ => 1 } ('a'..'z');\n\
    \    my %letters_upper_lower = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower_upper\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_upper_lower = map { $_ => 1 }\
    \ ('A'..'Z');\n    my %letters_lower_upper = map { $_ => 1 } ('a'..'z');\n   \
    \ my %letters_upper_lower = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower_upper\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_upper_lower = map { $_ => 1 }\
    \ ('A'..'Z');\n    my %letters_lower_upper = map { $_ => 1 } ('a'..'z');\n   \
    \ my %letters_upper_lower = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower_upper\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_upper_lower = map { $_ => 1 }\
    \ ('A'..'Z');\n    my %letters_lower_upper = map { $_ => 1 } ('a'..'z');\n   \
    \ my %letters_upper_lower = map { $_ => 1 } ('A'..'Z');\n    my %letters_lower_upper\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_upper_lower = map { $_ => 1 }\
    \ ('A'..'Z');\n    my %letters_lower_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp1cm15s41.pl line 37, at end
    of line

    syntax error at /tmp/tmp1cm15s41.pl line 37, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp1cm15s41.pl line 64, at end of
    line

    syntax error at /tmp/tmp1cm15s41.pl line 64, at EOF

    Execution of /tmp/tmp1cm15s41.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_length = @vowels;\n\
    \    my $vowel_found = 0;\n    my $char = \"\";\n    my $char_ascii = 0;\n   \
    \ my $char_ascii_lower = 0;\n    my $char_ascii_upper = 0;\n    my $char_ascii_lower_new\
    \ = 0;\n    my $char_ascii_upper_new = 0;\n    my $char_new = \"\";\n    my $message_length\
    \ = length($message);\n    for (my $i = 0; $i < $message_length; $i++) {\n   \
    \     $char = substr($message, $i, 1);\n        $char_ascii = ord($char);\n  \
    \      $char_ascii_lower = $char_ascii | 32;\n        $char_ascii_upper = $char_ascii\
    \ & 223;\n        $vowel_found = 0;\n        for ($vowel_index = 0; $vowel_index\
    \ < $vowel_length; $vowel_index++) {\n            if ($char_ascii_lower == ord($vowels[$vowel_index]))\
    \ {\n                $vowel_found = 1;\n                last;\n            }\n\
    \        }\n        if ($vowel_found) {\n            $char_ascii_lower_new = $char_ascii_lower\
    \ + 2;\n            if ($char_ascii_lower_new > ord(\"u\")) {\n              \
    \  $char_ascii_lower_new = ord(\"a\") + ($char_ascii_lower_new - ord(\"u\") -\
    \ 1);\n            }\n            $char_ascii_upper_new = $char_ascii_upper +\
    \ 2;\n            if ($char_ascii_upper_new > ord(\"U\")) {\n                $char_ascii_upper_new\
    \ = ord\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpynmkvtw_.pl line 46, at end
    of line

    syntax error at /tmp/tmpynmkvtw_.pl line 46, near "ord

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpynmkvtw_.pl line 73, at end of
    line

    syntax error at /tmp/tmpynmkvtw_.pl line 73, at EOF

    Execution of /tmp/tmpynmkvtw_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $vowel_index\
    \ = 0;\n    my $char_index = 0;\n    my $char = \"\";\n    my $vowel = \"\";\n\
    \    my $vowel_position = 0;\n    my $char_position = 0;\n    my $encoded_char\
    \ = \"\";\n    my $encoded_vowel = \"\";\n    my $i = 0;\n    my $j = 0;\n   \
    \ my $message_length = length($message);\n    for ($i = 0; $i < $message_length;\
    \ $i++) {\n        $char = substr($message, $i, 1);\n        $char_index = index($alphabet,\
    \ $char);\n        if ($char_index != -1) {\n            $char_position = $char_index\
    \ + 1;\n            if ($char_position % 2 == 0) {\n                $encoded_char\
    \ = uc($char);\n            } else {\n                $encoded_char = lc($char);\n\
    \            }\n            $encoded .= $encoded_char;\n        } else {\n   \
    \         $vowel_index = index($vowels, $char);\n            if ($vowel_index\
    \ != -1) {\n                $vowel_position = $vowel_index + 1;\n            \
    \    $vowel_position += 2;\n                if ($vowel_position > $vowels_length)\
    \ {\n                    $vowel_position -= $vowels_length;\n                }\n\
    \                $encoded_vowel = substr($vowels, $vowel_position - 1, 1);\n \
    \               $encoded .= $encoded_vowel;\n            } else {\n          \
    \      $encoded .= $char;\n            }\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my\
    \ %alphabet = map { $_ => 1 } (\"a\"..\"z\");\n    my %alphabet_index = map {\
    \ $alphabet[$_] => $_ } (0..$#alphabet);\n    my $alphabet_length = scalar(keys\
    \ %alphabet);\n    my $vowel_length = scalar(keys %vowels);\n    my $vowel_index\
    \ = 0;\n    my $vowel_index_offset = 2;\n    my $vowel_index_offset_length = $vowel_index\
    \ + $vowel_index_offset;\n    my $vowel_index_offset_length_mod = $vowel_index_offset_length\
    \ % $vowel_length;\n    my $vowel_index_offset_length_mod_index = $vowel_index_offset_length_mod\
    \ % $vowel_length;\n    my $vowel_index_offset_length_mod_index_value = $vowels[$vowel_index_offset_length_mod_index];\n\
    \    my $vowel_index_offset_length_mod_index_value_index = $alphabet_index{$vowel_index_offset_length_mod_index_value};\n\
    \    my $vowel_index_offset_length_mod_index_value_index_offset = $vowel_index_offset_length_mod_index_value_index\
    \ + $vowel_index_offset;\n    my $vowel_index_offset_length_mod_index_value_index_offset_mod\
    \ = $vowel_index_offset_length_mod_index_value_index_offset % $alphabet_length;\n\
    \    my $vowel_index_offset_length_mod_index_value_index_offset_mod_value = $alphabet[$vowel_index_offset_length_mod_index_value_index_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpl0tg_u0f.pl line 30, at end
    of line

    syntax error at /tmp/tmpl0tg_u0f.pl line 30, near "$vowel_index_offset_length_mod_index_value_index_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpl0tg_u0f.pl line 57, at end of
    line

    syntax error at /tmp/tmpl0tg_u0f.pl line 57, at EOF

    Execution of /tmp/tmpl0tg_u0f.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_flag = 0;\n    my $vowel_found = 0;\n    my $vowel_found_index\
    \ = 0;\n    my $vowel_found_count = 0;\n    my $vowel_found_flag = 0;\n    my\
    \ $vowel_found_flag_2 = 0;\n    my $vowel_found_flag_3 = 0;\n    my $vowel_found_flag_4\
    \ = 0;\n    my $vowel_found_flag_5 = 0;\n    my $vowel_found_flag_6 = 0;\n   \
    \ my $vowel_found_flag_7 = 0;\n    my $vowel_found_flag_8 = 0;\n    my $vowel_found_flag_9\
    \ = 0;\n    my $vowel_found_flag_10 = 0;\n    my $vowel_found_flag_11 = 0;\n \
    \   my $vowel_found_flag_12 = 0;\n    my $vowel_found_flag_13 = 0;\n    my $vowel_found_flag_14\
    \ = 0;\n    my $vowel_found_flag_15 = 0;\n    my $vowel_found_flag_16 = 0;\n \
    \   my $vowel_found_flag_17 = 0;\n    my $vowel_found_flag_18 = 0;\n    my $vowel_found_flag_19\
    \ = 0;\n    my $vowel_found_flag_20 = 0;\n    my $vowel_found_flag_21 = 0;\n \
    \   my $vowel_found_flag_22 = 0;\n    my $vowel_found_flag_23 = 0;\n    my $vowel_found_flag_24\
    \ = 0;\n    my $vowel_found_flag_25 = 0\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp6o25y3xe.pl line 46, at end
    of line

    syntax error at /tmp/tmp6o25y3xe.pl line 46, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp6o25y3xe.pl line 73, at end of
    line

    syntax error at /tmp/tmp6o25y3xe.pl line 73, at EOF

    Execution of /tmp/tmp6o25y3xe.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    for (my $i = 0; $i < $message_length; $i++) {\n   \
    \     my $char = substr($message, $i, 1);\n        my $char_index = index($alphabet,\
    \ $char);\n        if ($char_index == -1) {\n            $encoded .= $char;\n\
    \        } else {\n            my $vowel_index = index($vowels, $char);\n    \
    \        if ($vowel_index == -1) {\n                $encoded .= substr($alphabet,\
    \ ($char_index + 2) % $alphabet_length, 1);\n            } else {\n          \
    \      $encoded .= substr($vowels, ($vowel_index + 2) % $vowels_length, 1);\n\
    \            }\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @letters = split(//, $message);\n    my @encoded;\n\
    \    my $vowels = 'aeiou';\n    foreach my $letter (@letters) {\n        if ($letter\
    \ =~ /[a-z]/) {\n            if ($letter =~ /[A-Z]/) {\n                push @encoded,\
    \ lc($letter);\n            } else {\n                push @encoded, uc($letter);\n\
    \            }\n        } elsif ($letter =~ /[$vowels]/) {\n            my $pos\
    \ = index($vowels, $letter);\n            $pos = ($pos + 2) % 5;\n           \
    \ push @encoded, substr($vowels, $pos, 1);\n        } else {\n            push\
    \ @encoded, $letter;\n        }\n    }\n    return join('', @encoded);\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded_msg = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_2 = \"cdfghjklmnpqrstvwxyz\";\n    my @vowels_2 = split(//,\
    \ $vowels_2);\n    my @msg = split(//, $msg);\n    for my $char (@msg) {\n   \
    \     if ($vowels =~ /$char/i) {\n            my $index = index($vowels, $char);\n\
    \            $encoded_msg .= $vowels_2[$index];\n        } else {\n          \
    \  $encoded_msg .= $char;\n        }\n    }\n    return $encoded_msg;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_found = 0;\n    my $vowel_location = 0;\n    my $vowel_location_plus_two\
    \ = 0;\n    my $vowel_location_plus_two_char = \"\";\n    my $char = \"\";\n \
    \   my $char_ascii = 0;\n    my $char_ascii_plus_two = 0;\n    my $char_ascii_plus_two_char\
    \ = \"\";\n    my $char_ascii_plus_two_char_ascii = 0;\n    my $char_ascii_plus_two_char_ascii_plus_two\
    \ = 0;\n    my $char_ascii_plus_two_char_ascii_plus_two_char = \"\";\n    my $char_ascii_plus_two_char_ascii_plus_two_char_ascii\
    \ = 0;\n    my $char_ascii_plus_two_char_ascii_plus_two_char_ascii_plus_two =\
    \ 0;\n    my $char_ascii_plus_two_char_ascii_plus_two_char_ascii_plus_two_char\
    \ = \"\";\n    my $char_ascii_plus_two_char_ascii_plus_two_char_ascii_plus_two_char_ascii\
    \ = 0;\n    my $char_ascii_plus_two_char_ascii_plus_two_char_ascii_plus_two_char_ascii_plus_two\
    \ = 0;\n    my $char_ascii_plus_two_char_ascii_plus_two_char_ascii_plus_two_char_ascii_plus_two_char\
    \ = \"\";\n    my $char_ascii_plus_two_char_ascii\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp1_ue555t.pl line 35, at end
    of line

    syntax error at /tmp/tmp1_ue555t.pl line 35, near "$char_ascii_plus_two_char_ascii

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp1_ue555t.pl line 62, at end of
    line

    syntax error at /tmp/tmp1_ue555t.pl line 62, at EOF

    Execution of /tmp/tmp1_ue555t.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @letters = split //,\
    \ $message;\n    my @vowels = qw(a e i o u);\n    my %vowels = map { $_ => 1 }\
    \ @vowels;\n    for my $letter (@letters) {\n        if ($vowels{lc $letter})\
    \ {\n            $encoded .= next_vowel($letter);\n        } else {\n        \
    \    $encoded .= $letter;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::next_vowel called at /tmp/tmp_kz8edr8.pl line
    19.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my @msg = split(//, $msg);\n    my @encoded;\n    my\
    \ %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $letter (@msg) {\n\
    \        if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/) {\n \
    \               $letter = uc($letter);\n            } else {\n               \
    \ $letter = lc($letter);\n            }\n        }\n        if ($letter =~ /[aeiou]/i)\
    \ {\n            $letter = $vowels{lc($letter)};\n        }\n        push(@encoded,\
    \ $letter);\n    }\n    return join('', @encoded);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach\
    \ my $char (split(//, $message)) {\n        if (grep {$_ eq $char} @vowels) {\n\
    \            $encoded .= $vowels{$char};\n        } elsif ($char =~ /[A-Z]/) {\n\
    \            $encoded .= lc($char);\n        } elsif ($char =~ /[a-z]/) {\n  \
    \          $encoded .= uc($char);\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my $i = 0;\n    while ($i < length($msg)) {\n   \
    \     my $char = substr($msg, $i, 1);\n        if ($char =~ /[a-z]/i) {\n    \
    \        if ($char =~ /[a-z]/) {\n                $char = uc($char);\n       \
    \     } else {\n                $char = lc($char);\n            }\n          \
    \  if (grep(/^$char$/, @vowels)) {\n                my $index = 0;\n         \
    \       while ($index < @vowels) {\n                    if ($vowels[$index] eq\
    \ $char) {\n                        if ($index == 4) {\n                     \
    \       $char = $vowels[0];\n                        } else {\n              \
    \              $char = $vowels[$index + 1];\n                        }\n     \
    \                   last;\n                    }\n                    $index++;\n\
    \                }\n            }\n        }\n        $encoded .= $char;\n   \
    \     $i++;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_2_ahead = \"cgkmoqsuwy\";\n    my $vowels_hash = {};\n\
    \    my @vowels_2_ahead = split(//, $vowels_2_ahead);\n    my @vowels = split(//,\
    \ $vowels);\n    for (my $i = 0; $i < @vowels; $i++) {\n        $vowels_hash->{$vowels[$i]}\
    \ = $vowels_2_ahead[$i];\n    }\n    my @message = split(//, $message);\n    for\
    \ (my $i = 0; $i < @message; $i++) {\n        if ($vowels =~ /$message[$i]/i)\
    \ {\n            $encoded_message .= $vowels_hash->{lc($message[$i])};\n     \
    \   } else {\n            $encoded_message .= $message[$i] =~ /[A-Z]/ ? lc($message[$i])\
    \ : uc($message[$i]);\n        }\n    }\n    return $encoded_message;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    for (my $i = 0; $i < length($message); $i++) {\n\
    \        my $char = substr($message, $i, 1);\n        if ($char eq uc($char))\
    \ {\n            $char = lc($char);\n        } else {\n            $char = uc($char);\n\
    \        }\n        if (grep {$_ eq $char} @vowels) {\n            $char = shift(@vowels);\n\
    \            push(@vowels, $char);\n        }\n        $encoded .= $char;\n  \
    \  }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = (\n        'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n       \
    \ 'd' => 'f',\n        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n\
    \        'h' => 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' =>\
    \ 'm',\n        'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n      \
    \  'o' => 'q',\n        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n\
    \        's' => 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' =>\
    \ 'x',\n        'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n      \
    \  'z' => 'b',\n    );\n    for my $letter (split //, $message) {\n        if\
    \ ($vowels{$letter}) {\n            $encoded .= $alphabet{$letter};\n        }\
    \ else {\n            $encoded .= $letter;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my\
    \ %letters = map { $_ => 1 } (\"a\"..\"z\");\n    my %letters_upper = map { $_\
    \ => 1 } (\"A\"..\"Z\");\n    my %letters_lower = map { $_ => 1 } (\"a\"..\"z\"\
    );\n    my %letters_lower_to_upper = map { $_ => uc($_) } (\"a\"..\"z\");\n  \
    \  my %letters_upper_to_lower = map { $_ => lc($_) } (\"A\"..\"Z\");\n    my %letters_lower_to_next\
    \ = map { $_ => chr(ord($_) + 1) } (\"a\"..\"y\");\n    my %letters_lower_to_next_next\
    \ = map { $_ => chr(ord($_) + 2) } (\"a\"..\"x\");\n    my %letters_upper_to_next\
    \ = map { $_ => chr(ord($_) + 1) } (\"A\"..\"Y\");\n    my %letters_upper_to_next_next\
    \ = map { $_ => chr(ord($_) + 2) } (\"A\"..\"X\");\n    my @message_array = split(\"\
    \", $message);\n    foreach my $letter (@message_array) {\n        if (exists($letters_lower{$letter}))\
    \ {\n            $encoded .= $letters_lower_to_upper{$letter};\n        } elsif\
    \ (exists($letters_upper{$letter})) {\n            $encoded .= $letters_upper_to_lower{$letter};\n\
    \        } elsif (exists($vowels{$letter})) {\n            $encoded .= $letters_lower_to_next_next{$letter};\n\
    \        } else {\n            $encoded .= $letter;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @letters = split(//,\
    \ $message);\n    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            $letter =~ tr/a-z/b-za/;\n        } elsif ($letter =~ /[A-Z]/)\
    \ {\n            $letter =~ tr/A-Z/B-ZA/;\n        }\n        if ($letter =~ /[aeiou]/)\
    \ {\n            $letter =~ tr/aeiou/cekqu/;\n        } elsif ($letter =~ /[AEIOU]/)\
    \ {\n            $letter =~ tr/AEIOU/CEKQU/;\n        }\n        $encoded .= $letter;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = '';\n    my @vowels = qw(a e i o u);\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ 'a'..'z';\n    my @alphabet = sort keys %alphabet;\n    my $alphabet_size =\
    \ scalar @alphabet;\n    my $vowel_size = scalar @vowels;\n    for my $letter\
    \ (split //, $message) {\n        my $index = 0;\n        my $encoded_letter =\
    \ '';\n        if ($vowels{lc $letter}) {\n            $index = first_index {\
    \ $_ eq lc $letter } @vowels;\n            $index = ($index + 2) % $vowel_size;\n\
    \            $encoded_letter = $vowels[$index];\n        } else {\n          \
    \  $index = first_index { $_ eq lc $letter } @alphabet;\n            $index =\
    \ ($index + 2) % $alphabet_size;\n            $encoded_letter = $alphabet[$index];\n\
    \        }\n        $encoded_letter = uc $encoded_letter if uc $letter eq $letter;\n\
    \        $encoded .= $encoded_letter;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "first_index" without a package or object reference
    at /tmp/tmpdwglxg8_.pl line 28.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 0
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    for my $char\
    \ (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[a-z]/) {\n                $char = uc $char;\n            } else {\n   \
    \             $char = lc $char;\n            }\n            if (exists $vowels{lc\
    \ $char}) {\n                $char = chr(ord($char) + 2);\n            }\n   \
    \     }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {\n    \
    \    \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"j\",\n     \
    \   \"o\" => \"k\",\n        \"u\" => \"r\",\n    };\n    for (my $i = 0; $i <\
    \ length($message); $i++) {\n        my $char = substr($message, $i, 1);\n   \
    \     if (index($vowels, $char) != -1) {\n            $encoded .= $vowels_encoded_hash->{$char};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my %alphabet = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n    \
    \    \"c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n     \
    \   \"f\" => \"h\",\n        \"g\" => \"i\",\n        \"h\" => \"j\",\n      \
    \  \"i\" => \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"m\",\n       \
    \ \"l\" => \"n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"\
    o\" => \"q\",\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\"\
    \ => \"t\",\n        \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" =>\
    \ \"w\",\n        \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"\
    z\",\n        \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for my $letter\
    \ (split //, $message) {\n        if ($vowels{lc($letter)}) {\n            $encoded_message\
    \ .= $alphabet{lc($letter)};\n        } else {\n            $encoded_message .=\
    \ $letter;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded_msg = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowel_map = (\n        'a' => 'c',\n        'e' =>\
    \ 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n\
    \    for my $char (split //, $msg) {\n        if (grep {$_ eq $char} @vowels)\
    \ {\n            $encoded_msg .= $vowel_map{$char};\n        } else {\n      \
    \      $encoded_msg .= $char;\n        }\n    }\n    return uc $encoded_msg;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_length\
    \ = scalar @vowels;\n    my $vowel_found = 0;\n    my $vowel_char = \"\";\n  \
    \  my $vowel_char_index = 0;\n    my $vowel_char_count = 0;\n    my $vowel_char_length\
    \ = 0;\n    my $vowel_char_found = 0;\n    my $vowel_char_next = \"\";\n    my\
    \ $vowel_char_next_index = 0;\n    my $vowel_char_next_count = 0;\n    my $vowel_char_next_length\
    \ = 0;\n    my $vowel_char_next_found = 0;\n    my $vowel_char_next_next = \"\"\
    ;\n    my $vowel_char_next_next_index = 0;\n    my $vowel_char_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_length = 0;\n    my $vowel_char_next_next_found\
    \ = 0;\n    my $vowel_char_next_next_next = \"\";\n    my $vowel_char_next_next_next_index\
    \ = 0;\n    my $vowel_char_next_next_next_count = 0;\n    my $vowel_char_next_next_next_length\
    \ = 0;\n    my $vowel_char_next_next_next_found = 0;\n    my $vowel_char_next_next_next_next\
    \ = \"\";\n    my $vowel_char_next_next_next_next_index = 0;\n    my $vowel_char_next_next_next_next_count\
    \ = 0;\n    my $vowel_char_next_next_next_next_length = 0;\n    my $vowel_\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpgrituebx.pl line 44, at end
    of line

    syntax error at /tmp/tmpgrituebx.pl line 44, near "$vowel_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpgrituebx.pl line 71, at end of
    line

    syntax error at /tmp/tmpgrituebx.pl line 71, at EOF

    Execution of /tmp/tmpgrituebx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_found = 0;\n    my $vowel_found_index = 0;\n    my $vowel_found_count\
    \ = 0;\n    my $vowel_found_index_2 = 0;\n    my $vowel_found_count_2 = 0;\n \
    \   my $vowel_found_index_3 = 0;\n    my $vowel_found_count_3 = 0;\n    my $vowel_found_index_4\
    \ = 0;\n    my $vowel_found_count_4 = 0;\n    my $vowel_found_index_5 = 0;\n \
    \   my $vowel_found_count_5 = 0;\n    my $vowel_found_index_6 = 0;\n    my $vowel_found_count_6\
    \ = 0;\n    my $vowel_found_index_7 = 0;\n    my $vowel_found_count_7 = 0;\n \
    \   my $vowel_found_index_8 = 0;\n    my $vowel_found_count_8 = 0;\n    my $vowel_found_index_9\
    \ = 0;\n    my $vowel_found_count_9 = 0;\n    my $vowel_found_index_10 = 0;\n\
    \    my $vowel_found_count_10 = 0;\n    my $vowel_found_index_11 = 0;\n    my\
    \ $vowel_found_count_11 = 0;\n    my $vowel_found_index_12 = 0;\n    my $vowel_found_count_12\
    \ = 0;\n    my $vowel_found_index_13 = 0;\n    my $vowel_found_count_13 = 0;\n\
    \    my $vowel_found_index_14 = 0;\n    my $vowel_found\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpy6x_rzo_.pl line 46, at end
    of line

    syntax error at /tmp/tmpy6x_rzo_.pl line 46, near "$vowel_found

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpy6x_rzo_.pl line 73, at end of
    line

    syntax error at /tmp/tmpy6x_rzo_.pl line 73, at EOF

    Execution of /tmp/tmpy6x_rzo_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    foreach my $char (split(//, $message)) {\n        if (lc($char)\
    \ ~~ @vowels) {\n            my $index = index(lc($char), @vowels);\n        \
    \    $encoded .= @vowels[($index + 2) % 5];\n        } elsif ($char =~ /[A-Z]/)\
    \ {\n            $encoded .= lc($char);\n        } elsif ($char =~ /[a-z]/) {\n\
    \            $encoded .= uc($char);\n        } else {\n            $encoded .=\
    \ $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmpn91ndqjv.pl line 16.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split(//, $message);\n    my $encoded\
    \ = '';\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n      \
    \  'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach\
    \ my $letter (@message) {\n        if ($letter =~ /[a-z]/i) {\n            if\
    \ ($letter =~ /[a-z]/) {\n                $letter = uc($letter);\n           \
    \ } else {\n                $letter = lc($letter);\n            }\n        }\n\
    \        if ($letter =~ /[aeiou]/i) {\n            $letter = $vowels{lc($letter)};\n\
    \        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @letters = split //, $message;\n    my @encoded;\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[aeiou]/i) {\n \
    \           my $index = index($vowels, lc($letter));\n            $index = ($index\
    \ + 2) % 5;\n            $letter = substr($vowels, $index, 1);\n        }\n  \
    \      $letter =~ tr/[a-z]/[A-Z]/ if $letter =~ /[a-z]/;\n        $letter =~ tr/[A-Z]/[a-z]/\
    \ if $letter =~ /[A-Z]/;\n        push @encoded, $letter;\n    }\n    return join\
    \ '', @encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    for (my $i = 0; $i < $message_length; $i++) {\n   \
    \     my $char = substr($message, $i, 1);\n        my $char_index = index($alphabet,\
    \ $char);\n        if ($char_index != -1) {\n            my $char_is_vowel = index($vowels,\
    \ $char);\n            if ($char_is_vowel != -1) {\n                $char_index\
    \ = ($char_index + 2) % $alphabet_length;\n                $char = substr($alphabet,\
    \ $char_index, 1);\n            }\n            $char = uc($char) if ($char eq\
    \ lc($char));\n            $char = lc($char) if ($char eq uc($char));\n      \
    \  }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my\
    \ $vowel_length = scalar @vowels;\n    my $char = \"\";\n    my $char_index =\
    \ 0;\n    my $char_length = 0;\n    my $char_code = 0;\n    my $char_code_offset\
    \ = 0;\n    my $char_code_offset_mod = 0;\n    my $char_code_offset_mod_offset\
    \ = 0;\n    my $char_code_offset_mod_offset_mod = 0;\n    my $char_code_offset_mod_offset_mod_offset\
    \ = 0;\n    my $char_code_offset_mod_offset_mod_offset_mod = 0;\n    my $char_code_offset_mod_offset_mod_offset_mod_offset\
    \ = 0;\n    my $char_code_offset_mod_offset_mod_offset_mod_offset_mod = 0;\n \
    \   my $char_code_offset_mod_offset_mod_offset_mod_offset_mod_offset = 0;\n  \
    \  my $char_code_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod = 0;\n\
    \    my $char_code_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset\
    \ = 0;\n    my $char_code_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod\
    \ = 0;\n    my $char_code_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset\
    \ = 0;\n    my $char_code_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod\
    \ = 0;\n    my $char_code_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset_mod_offset\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp3kue4om0.pl line 38,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp3kue4om0.pl line 38, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp3kue4om0.pl line 65, at end of line\nsyntax\
    \ error at /tmp/tmp3kue4om0.pl line 65, at EOF\nExecution of /tmp/tmp3kue4om0.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n    my\
    \ $vowels_ahead = 'cgkmps';\n    for my $char (split //, $msg) {\n        if ($char\
    \ =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char =\
    \ uc $char;\n            } else {\n                $char = lc $char;\n       \
    \     }\n            if ($vowels =~ /$char/i) {\n                my $index = index($vowels,\
    \ lc $char);\n                $char = substr($vowels_ahead, $index, 1);\n    \
    \        }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n \
    \   my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_len = length($alphabet);\n\
    \    my $vowels_len = length($vowels);\n    my $vowel_index = 0;\n    my $alphabet_index\
    \ = 0;\n    my $vowel_found = 0;\n    my $vowel_offset = 0;\n    my $char = \"\
    \";\n    my $char_index = 0;\n    my $char_offset = 0;\n    my $char_found = 0;\n\
    \    my $char_upper = 0;\n    my $char_lower = 0;\n    my $char_upper_index =\
    \ 0;\n    my $char_lower_index = 0;\n    my $char_upper_offset = 0;\n    my $char_lower_offset\
    \ = 0;\n    my $char_upper_found = 0;\n    my $char_lower_found = 0;\n    my $char_upper_encoded\
    \ = \"\";\n    my $char_lower_encoded = \"\";\n    my $char_encoded = \"\";\n\
    \    my $msg_len = length($msg);\n    for (my $i = 0; $i < $msg_len; $i++) {\n\
    \        $char = substr($msg, $i, 1);\n        $char_upper = uc($char);\n    \
    \    $char_lower = lc($char);\n        $char_upper_found = 0;\n        $char_lower_found\
    \ = 0;\n        $char_upper_index = index($alphabet, $char_upper);\n        $char_lower_index\
    \ = index($alphabet, $char_lower);\n        if ($char_upper_index >= 0) {\n  \
    \          $char_upper_found = 1;\n            $char_upper_offset = $char_upper_index\
    \ + 2;\n            if ($char_upper_offset >= $alphabet_len) {\n             \
    \   $char_upper_offset = $char_upper_offset - $alphabet_len;\n            }\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpn7c1tep5.pl line 79, at
    end of line

    syntax error at /tmp/tmpn7c1tep5.pl line 79, at EOF

    Execution of /tmp/tmpn7c1tep5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_index = 0;\n  \
    \  my $vowels_index = 0;\n    my $vowel_found = 0;\n    my $char;\n    my $char_index;\n\
    \    my $char_encoded;\n    my $char_encoded_index;\n    my $char_encoded_index_mod;\n\
    \    my $char_encoded_index_mod_index;\n    my $char_encoded_index_mod_index_encoded;\n\
    \    my $char_encoded_index_mod_index_encoded_index;\n    my $char_encoded_index_mod_index_encoded_index_mod;\n\
    \    my $char_encoded_index_mod_index_encoded_index_mod_index;\n    my $char_encoded_index_mod_index_encoded_index_mod_index_encoded;\n\
    \    my $char_encoded_index_mod_index_encoded_index_mod_index_encoded_index;\n\
    \    my $char_encoded_index_mod_index_encoded_index_mod_index_encoded_index_mod;\n\
    \    my $char_encoded_index_mod_index_encoded_index_mod_index_encoded_index_mod_index;\n\
    \    my $char_encoded_index_mod_index_encoded_index_mod_index_encoded_index_mod_index_encoded;\n\
    \    my $char_encoded_index_mod_index_encoded_index_mod_index_encoded_index_mod_index_encoded_index;\n\
    \    my $char_encoded_index_mod_index_encoded_index_mod_index_encoded_index_mod_index_encoded_index_mod;\n\
    \    my $char_encoded_index_mod_index_encoded_index_mod_index_encoded_index_mod_index_encoded_index_mod_index;\n\
    \    my $char\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmptcb_wtj8.pl line 38, at end
    of line

    syntax error at /tmp/tmptcb_wtj8.pl line 38, near "$char

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmptcb_wtj8.pl line 65, at end of
    line

    syntax error at /tmp/tmptcb_wtj8.pl line 65, at EOF

    Execution of /tmp/tmptcb_wtj8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    for (my $i = 0; $i < length($message); $i++) {\n      \
    \  my $char = substr($message, $i, 1);\n        if (is_vowel($char)) {\n     \
    \       $char = next_vowel($char);\n        }\n        $encoded .= swap_case($char);\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_vowel called at /tmp/tmpdr0t2ehz.pl line
    17.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_index = 0;\n  \
    \  for (my $i = 0; $i < length($message); $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        if ($char =~ /[a-z]/i) {\n            $char =~ tr/A-Za-z/N-ZA-Mn-za-m/;\n\
    \            if ($char =~ /[$vowels]/i) {\n                $char = substr($vowels_encoded,\
    \ $vowels_encoded_index, 1);\n                $vowels_encoded_index++;\n     \
    \           $vowels_encoded_index = 0 if ($vowels_encoded_index == length($vowels_encoded));\n\
    \            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters = map { $_ =>\
    \ 1 } qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my %letters_upper\
    \ = map { $_ => 1 } qw(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z);\n\
    \    my %letters_lower = map { $_ => 1 } qw(a b c d e f g h i j k l m n o p q\
    \ r s t u v w x y z);\n    my %letters_lower_vowels = map { $_ => 1 } qw(a c e\
    \ g i k m o q s u w y);\n    my %letters_upper_vowels = map { $_ => 1 } qw(A C\
    \ E G I K M O Q S U W Y);\n    my %letters_lower_consonants = map { $_ => 1 }\
    \ qw(b d f h j l n p r t v x z);\n    my %letters_upper_consonants = map { $_\
    \ => 1 } qw(B D F H J L N P R T V X Z);\n    my %letters_lower_vowels_2 = map\
    \ { $_ => 1 } qw(c e g i k m o q s u w y);\n    my %letters_upper_vowels_2 = map\
    \ { $_ => 1 } qw(C E G I K M O Q S U W Y);\n    my %letters_lower_consonants_2\
    \ = map { $_ => 1 } qw(d f h j l n p r t v x z);\n    my %letters_upper_consonants_2\
    \ = map { $_ => 1 } qw(D F H J L N P R T V X Z);\n    my %letters_lower_vowels_3\
    \ = map { $_ => 1 } qw(d f h j l n p r t v x z);\n    my %letters_upper_vow\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp0qbvigyh.pl line 29, at end
    of line

    syntax error at /tmp/tmp0qbvigyh.pl line 29, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp0qbvigyh.pl line 56, at end of
    line

    syntax error at /tmp/tmp0qbvigyh.pl line 56, at EOF

    Execution of /tmp/tmp0qbvigyh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @alphabet =\
    \ ('a'..'z');\n    my %vowels = (\n        'a' => 1,\n        'e' => 1,\n    \
    \    'i' => 1,\n        'o' => 1,\n        'u' => 1,\n    );\n    my %vowel_map\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (split //, $message)\
    \ {\n        if ($vowels{lc $char}) {\n            $encoded_message .= $vowel_map{lc\
    \ $char};\n        } elsif ($char =~ /[a-z]/) {\n            my $index = first_index\
    \ { $_ eq lc $char } @alphabet;\n            $encoded_message .= uc $alphabet[$index\
    \ + 2];\n        } else {\n            $encoded_message .= $char;\n        }\n\
    \    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_\
    \ => 1 } (a..z);\n    my %encoded_vowels = map { $_ => 1 } (c..z, a..b);\n   \
    \ my @encoded_vowels = keys %encoded_vowels;\n    my $i = 0;\n    for my $char\
    \ (split //, $message) {\n        if ($alphabet{lc $char}) {\n            if ($vowels{lc\
    \ $char}) {\n                $encoded .= $encoded_vowels[$i];\n              \
    \  $i++;\n                $i = 0 if $i > $#encoded_vowels;\n            } else\
    \ {\n                $encoded .= uc $char;\n            }\n        } else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my @encoded;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            if ($letter =~ /[aeiou]/)\
    \ {\n                push @encoded, $vowels{$letter};\n            } else {\n\
    \                push @encoded, $letter;\n            }\n        } else {\n  \
    \          push @encoded, $letter;\n        }\n    }\n    return join '', @encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkq\";\n    my $vowels_encoded_hash = {};\n  \
    \  my $i = 0;\n    foreach my $vowel (split //, $vowels) {\n        $vowels_encoded_hash->{$vowel}\
    \ = substr($vowels_encoded, $i, 1);\n        $i++;\n    }\n    foreach my $char\
    \ (split //, $message) {\n        if ($char =~ /[A-Z]/) {\n            $encoded\
    \ .= lc($char);\n        } elsif ($char =~ /[a-z]/) {\n            $encoded .=\
    \ uc($char);\n        } else {\n            $encoded .= $char;\n        }\n  \
    \  }\n    foreach my $vowel (split //, $vowels) {\n        $encoded =~ s/$vowel/$vowels_encoded_hash->{$vowel}/g;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_\
    \ => 1 } (a..z);\n    my @alphabet = sort keys %alphabet;\n    my $alphabet_size\
    \ = scalar @alphabet;\n    my $vowel_size = scalar @vowels;\n    my $vowel_index\
    \ = 0;\n    my $vowel_offset = 2;\n    my $vowel_offset_index = 0;\n    my $vowel_offset_index_max\
    \ = $vowel_size - 1;\n    my $vowel_offset_index_min = 0;\n    my $vowel_offset_index_next\
    \ = 0;\n    my $vowel_offset_index_prev = 0;\n    my $vowel_offset_index_next_next\
    \ = 0;\n    my $vowel_offset_index_prev_prev = 0;\n    my $vowel_offset_index_next_next_next\
    \ = 0;\n    my $vowel_offset_index_prev_prev_prev = 0;\n    my $vowel_offset_index_next_next_next_next\
    \ = 0;\n    my $vowel_offset_index_prev_prev_prev_prev = 0;\n    my $vowel_offset_index_next_next_next_next_next\
    \ = 0;\n    my $vowel_offset_index_prev_prev_prev_prev_prev = 0;\n    my $vowel_offset_index_next_next_next_next_next_next\
    \ = 0;\n    my $vowel_offset_index_prev_prev_prev_prev_prev_prev = 0;\n    my\
    \ $vowel_offset_index_next_next_next_next_next_next_next = 0;\n    my $vowel_offset_index_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $vowel_offset_index_\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp6aw4j4sw.pl line 40, at end
    of line

    syntax error at /tmp/tmp6aw4j4sw.pl line 40, near "$vowel_offset_index_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp6aw4j4sw.pl line 67, at end of
    line

    syntax error at /tmp/tmp6aw4j4sw.pl line 67, at EOF

    Execution of /tmp/tmp6aw4j4sw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $string = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n\
    \    my %letters_lower = map { $_ => 1 } ('a'..'z');\n    my %letters_lower_upper\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z');\n    my %letters_lower_upper_numbers\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9');\n    my %letters_lower_upper_numbers_symbols\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', '!', '@', '#', '$', '%', '^',\
    \ '&', '*', '(', ')', '-', '_', '=', '+', '{', '}', '[', ']', '|', '\\\\', ':',\
    \ ';', '\"', '\\'', '<', '>', ',', '.', '?', '/', '`', '~');\n    my %letters_lower_upper_numbers_symbols_space\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..'9', '!', '@', '#', '$', '%', '^',\
    \ '&', '*', '(', ')', '-', '_', '=', '+', '{', '}', '[', ']', '|', '\\\\', ':',\
    \ ';', '\"', '\\'', '<', '>', ',', '.', '?', '/', '`', '~', ' ');\n    my %letters_lower_upper_numbers_symbols_space_newline\
    \ = map { $_ => 1 } ('a'..'z', 'A'..'Z', '0'..\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp1z4k73ya.pl line 24, at end
    of line

    syntax error at /tmp/tmp1z4k73ya.pl line 24, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp1z4k73ya.pl line 51, at end of
    line

    syntax error at /tmp/tmp1z4k73ya.pl line 51, at EOF

    Execution of /tmp/tmp1z4k73ya.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @letters = split(//, $message);\n    my @encoded;\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/) {\n    \
    \        push @encoded, chr(ord($letter) - 32);\n        } elsif ($letter =~ /[A-Z]/)\
    \ {\n            push @encoded, chr(ord($letter) + 32);\n        } else {\n  \
    \          push @encoded, $letter;\n        }\n    }\n    my $encoded_message\
    \ = join(\"\", @encoded);\n    $encoded_message =~ s/[aeiou]/chr(ord($&) + 2)/eg;\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @letters = split(//, $message);\n    my @encoded;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $letter (@letters)\
    \ {\n        if (exists $vowels{$letter}) {\n            push @encoded, $vowels{$letter};\n\
    \        } elsif ($letter =~ /[A-Z]/) {\n            push @encoded, lc($letter);\n\
    \        } elsif ($letter =~ /[a-z]/) {\n            push @encoded, uc($letter);\n\
    \        } else {\n            push @encoded, $letter;\n        }\n    }\n   \
    \ return join('', @encoded);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } ('a'..'z');\n    my %alphabet_upper = map { $_ => 1 } ('A'..'Z');\n\
    \    my $vowel_index = 0;\n    my $vowel_index_upper = 0;\n    my $vowel_index_lower\
    \ = 0;\n    my $vowel_index_upper_lower = 0;\n    my $vowel_index_lower_upper\
    \ = 0;\n    my $vowel_index_upper_upper = 0;\n    my $vowel_index_lower_lower\
    \ = 0;\n    my $vowel_index_upper_lower_lower = 0;\n    my $vowel_index_lower_upper_upper\
    \ = 0;\n    my $vowel_index_upper_upper_upper = 0;\n    my $vowel_index_lower_lower_lower\
    \ = 0;\n    my $vowel_index_upper_lower_lower_lower = 0;\n    my $vowel_index_lower_upper_upper_upper\
    \ = 0;\n    my $vowel_index_upper_upper_upper_upper = 0;\n    my $vowel_index_lower_lower_lower_lower\
    \ = 0;\n    my $vowel_index_upper_lower_lower_lower_lower = 0;\n    my $vowel_index_lower_upper_upper_upper_upper\
    \ = 0;\n    my $vowel_index_upper_upper_upper_upper_upper = 0;\n    my $vowel_index_lower_lower_lower_lower_lower\
    \ = 0;\n    my $vowel_index_upper_lower_lower_lower_lower_lower = 0;\n    my $vowel_index_lower_upper_upper_upper_upper_upper\
    \ = 0;\n    my $vowel_index_upper_upper_upper_upper_upper_\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp8engrnbb.pl line 40, at end
    of line

    syntax error at /tmp/tmp8engrnbb.pl line 40, near "$vowel_index_upper_upper_upper_upper_upper_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp8engrnbb.pl line 67, at end of
    line

    syntax error at /tmp/tmp8engrnbb.pl line 67, at EOF

    Execution of /tmp/tmp8engrnbb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my @encoded;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $char\
    \ (@message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/)\
    \ {\n                $char = uc $char;\n            } else {\n               \
    \ $char = lc $char;\n            }\n        }\n        if ($char =~ /[aeiou]/i)\
    \ {\n            $char = $vowels{lc $char};\n        }\n        push @encoded,\
    \ $char;\n    }\n    return join '', @encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @letters = split //, $message;\n    my @encoded;\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[aeiou]/i) {\n \
    \           my $index = index($vowels, lc($letter));\n            my $new_index\
    \ = ($index + 2) % 5;\n            $letter = substr($vowels, $new_index, 1);\n\
    \        }\n        if ($letter =~ /[a-z]/) {\n            $letter = uc($letter);\n\
    \        } else {\n            $letter = lc($letter);\n        }\n        push\
    \ @encoded, $letter;\n    }\n    return join '', @encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $vowel_index\
    \ = 0;\n    my $alphabet_index = 0;\n    my $vowel_found = 0;\n    my $alphabet_found\
    \ = 0;\n    my $vowel_position = 0;\n    my $alphabet_position = 0;\n    my $vowel_position_2\
    \ = 0;\n    my $alphabet_position_2 = 0;\n    my $vowel_position_3 = 0;\n    my\
    \ $alphabet_position_3 = 0;\n    my $vowel_position_4 = 0;\n    my $alphabet_position_4\
    \ = 0;\n    my $vowel_position_5 = 0;\n    my $alphabet_position_5 = 0;\n    my\
    \ $vowel_position_6 = 0;\n    my $alphabet_position_6 = 0;\n    my $vowel_position_7\
    \ = 0;\n    my $alphabet_position_7 = 0;\n    my $vowel_position_8 = 0;\n    my\
    \ $alphabet_position_8 = 0;\n    my $vowel_position_9 = 0;\n    my $alphabet_position_9\
    \ = 0;\n    my $vowel_position_10 = 0;\n    my $alphabet_position_10 = 0;\n  \
    \  my $vowel_position_11 = 0;\n    my $alphabet_position_11 = 0;\n    my $vowel_position_12\
    \ = 0;\n    my $alphabet_position_12 = 0;\n    my $vowel_position_13 = 0;\n  \
    \  my $alphabet_position_13 = 0;\n    my $vowel_position_14 = 0;\n    my $alphabet_position_14\
    \ = 0;\n    my $vowel_position_\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpqvgryddm.pl line 51, at end
    of line

    syntax error at /tmp/tmpqvgryddm.pl line 51, near "$vowel_position_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpqvgryddm.pl line 78, at end of
    line

    syntax error at /tmp/tmpqvgryddm.pl line 78, at EOF

    Execution of /tmp/tmpqvgryddm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = qw(a\
    \ e i o u);\n    my %vowel_map = (\n        a => \"c\",\n        e => \"g\",\n\
    \        i => \"k\",\n        o => \"s\",\n        u => \"y\",\n    );\n    for\
    \ my $char (split //, $message) {\n        if (grep {$_ eq $char} @vowels) {\n\
    \            $encoded_message .= $vowel_map{$char};\n        } else {\n      \
    \      $encoded_message .= uc $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    foreach my $char (split //, $message) {\n        if ($char\
    \ =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char =\
    \ uc($char);\n            } else {\n                $char = lc($char);\n     \
    \       }\n            if (grep {$_ eq lc($char)} @vowels) {\n               \
    \ my $index = 0;\n                foreach my $vowel (@vowels) {\n            \
    \        if ($vowel eq lc($char)) {\n                        last;\n         \
    \           }\n                    $index++;\n                }\n            \
    \    $index = ($index + 2) % 5;\n                $char = $vowels[$index];\n  \
    \          }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowel_hash = map { $_ => 1 } @vowels;\n    my\
    \ %alphabet_hash = map { $_ => 1 } ('a'..'z');\n    my $alphabet_size = scalar\
    \ keys %alphabet_hash;\n    my $vowel_size = scalar keys %vowel_hash;\n    my\
    \ $vowel_index = 0;\n    my $alphabet_index = 0;\n    my $vowel_index_2 = 0;\n\
    \    my $alphabet_index_2 = 0;\n    my $vowel_index_3 = 0;\n    my $alphabet_index_3\
    \ = 0;\n    my $vowel_index_4 = 0;\n    my $alphabet_index_4 = 0;\n    my $vowel_index_5\
    \ = 0;\n    my $alphabet_index_5 = 0;\n    my $vowel_index_6 = 0;\n    my $alphabet_index_6\
    \ = 0;\n    my $vowel_index_7 = 0;\n    my $alphabet_index_7 = 0;\n    my $vowel_index_8\
    \ = 0;\n    my $alphabet_index_8 = 0;\n    my $vowel_index_9 = 0;\n    my $alphabet_index_9\
    \ = 0;\n    my $vowel_index_10 = 0;\n    my $alphabet_index_10 = 0;\n    my $vowel_index_11\
    \ = 0;\n    my $alphabet_index_11 = 0;\n    my $vowel_index_12 = 0;\n    my $alphabet_index_12\
    \ = 0;\n    my $vowel_index_13 = 0;\n    my $alphabet_index_13 = 0;\n    my $vowel_index_14\
    \ = 0;\n    my $alphabet_index_14 = 0;\n    my $vowel_index_15 = 0;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp9ah716st.pl line 75, at
    end of line

    syntax error at /tmp/tmp9ah716st.pl line 75, at EOF

    Execution of /tmp/tmp9ah716st.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my @encoded;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            if ($letter =~ /[aeiou]/)\
    \ {\n                push @encoded, $vowels{$letter};\n            } else {\n\
    \                push @encoded, $letter;\n            }\n        } else {\n  \
    \          push @encoded, $letter;\n        }\n    }\n    return join '', @encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @alphabet =\
    \ ('a'..'z');\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for\
    \ my $char (split //, $message) {\n        if (exists $vowels{$char}) {\n    \
    \        $encoded_message .= $vowels{$char};\n        } elsif (exists $vowels{lc\
    \ $char}) {\n            $encoded_message .= uc $vowels{lc $char};\n        }\
    \ elsif ($char =~ /[a-z]/) {\n            my $index = first_index { $_ eq lc $char\
    \ } @alphabet;\n            $encoded_message .= $alphabet[$index + 2];\n     \
    \   } elsif ($char =~ /[A-Z]/) {\n            my $index = first_index { $_ eq\
    \ lc $char } @alphabet;\n            $encoded_message .= uc $alphabet[$index +\
    \ 2];\n        } else {\n            $encoded_message .= $char;\n        }\n \
    \   }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "first_index" without a package or object reference
    at /tmp/tmpfkt2_5k4.pl line 31.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_index = 0;\n  \
    \  my $vowels_index = 0;\n    my $vowel_found = 0;\n    my $vowel_encoded_found\
    \ = 0;\n    for (my $i = 0; $i < length($message); $i++) {\n        my $char =\
    \ substr($message, $i, 1);\n        for ($vowels_index = 0; $vowels_index < length($vowels);\
    \ $vowels_index++) {\n            if ($char eq substr($vowels, $vowels_index,\
    \ 1)) {\n                $vowel_found = 1;\n                last;\n          \
    \  }\n        }\n        if ($vowel_found) {\n            $vowels_encoded_index\
    \ = $vowels_index + 2;\n            if ($vowels_encoded_index >= length($vowels_encoded))\
    \ {\n                $vowels_encoded_index = $vowels_encoded_index - length($vowels_encoded);\n\
    \            }\n            $encoded = $encoded . substr($vowels_encoded, $vowels_encoded_index,\
    \ 1);\n            $vowel_found = 0;\n        } else {\n            if ($char\
    \ eq uc($char)) {\n                $encoded = $encoded . lc($char);\n        \
    \    } else {\n                $encoded = $encoded . uc($char);\n            }\n\
    \        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a','e','i','o','u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = (\n        'a'\
    \ => 'c',\n        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n   \
    \     'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n\
    \        'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' =>\
    \ 'n',\n        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n      \
    \  'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n\
    \        't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' =>\
    \ 'y',\n        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n\
    \    for my $char (split(//, $message)) {\n        if ($vowels{lc($char)}) {\n\
    \            $encoded .= $alphabet{lc($char)};\n        } else {\n           \
    \ $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowels_hash = (\n        'a' => 'c',\n       \
    \ 'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n\
    \    );\n    for my $char (split //, $message) {\n        if ($char =~ /[A-Z]/)\
    \ {\n            $encoded_message .= lc($char);\n        } elsif ($char =~ /[a-z]/)\
    \ {\n            $encoded_message .= uc($char);\n        } else {\n          \
    \  $encoded_message .= $char;\n        }\n    }\n    for my $vowel (@vowels) {\n\
    \        $encoded_message =~ s/$vowel/$vowels_hash{$vowel}/g;\n    }\n    return\
    \ $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my $i = 0;\n\
    \    while ($i < length($message)) {\n        my $char = substr($message, $i,\
    \ 1);\n        if ($vowels{$char}) {\n            $encoded .= $vowels[($vowels{$char}\
    \ + 2) % 5];\n        } else {\n            $encoded .= $char;\n        }\n  \
    \      $i++;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_length = @vowels;\n\
    \    my $vowel_found = 0;\n    my $char = \"\";\n    my $char_ascii = 0;\n   \
    \ my $char_ascii_lower = 0;\n    my $char_ascii_upper = 0;\n    my $char_ascii_lower_new\
    \ = 0;\n    my $char_ascii_upper_new = 0;\n    my $char_ascii_new = 0;\n    my\
    \ $char_new = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $message_length =\
    \ length($message);\n    for ($i = 0; $i < $message_length; $i++) {\n        $char\
    \ = substr($message, $i, 1);\n        $char_ascii = ord($char);\n        $char_ascii_lower\
    \ = $char_ascii | 32;\n        $char_ascii_upper = $char_ascii & 223;\n      \
    \  $vowel_found = 0;\n        for ($j = 0; $j < $vowel_length; $j++) {\n     \
    \       if ($char_ascii_lower == ord($vowels[$j])) {\n                $vowel_found\
    \ = 1;\n                $vowel_index = $j;\n                last;\n          \
    \  }\n        }\n        if ($vowel_found) {\n            $vowel_index = ($vowel_index\
    \ + 2) % $vowel_length;\n            $char_ascii_new = ord($vowels[$vowel_index]);\n\
    \        } else {\n            $char_ascii_new = $char_ascii;\n        }\n   \
    \     $char_ascii_lower_new = $char_ascii_new | 32;\n        $char_ascii_upper_new\
    \ = $char\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpye4c1vqj.pl line 50, at end
    of line

    syntax error at /tmp/tmpye4c1vqj.pl line 50, near "$char

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpye4c1vqj.pl line 77, at end of
    line

    syntax error at /tmp/tmpye4c1vqj.pl line 77, at EOF

    Execution of /tmp/tmpye4c1vqj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    foreach my $char (split(//, $message)) {\n        if (is_upper($char))\
    \ {\n            $char = lc($char);\n        } else {\n            $char = uc($char);\n\
    \        }\n        if (is_vowel($char)) {\n            $char = next_vowel($char);\n\
    \        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_upper called at /tmp/tmp0lmcuq_a.pl line
    16.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_upper = map { $_ => 1 } ('A'..'Z');\n\
    \    my %letters_lower = map { $_ => 1 } ('a'..'z');\n    my %letters_lower_rev\
    \ = map { $_ => 1 } ('a'..'z');\n    my %letters_upper_rev = map { $_ => 1 } ('A'..'Z');\n\
    \    my %letters_rev = map { $_ => 1 } ('a'..'z');\n    my %letters_rev = map\
    \ { $_ => 1 } ('a'..'z');\n    my %letters_rev = map { $_ => 1 } ('a'..'z');\n\
    \    my %letters_rev = map { $_ => 1 } ('a'..'z');\n    my %letters_rev = map\
    \ { $_ => 1 } ('a'..'z');\n    my %letters_rev = map { $_ => 1 } ('a'..'z');\n\
    \    my %letters_rev = map { $_ => 1 } ('a'..'z');\n    my %letters_rev = map\
    \ { $_ => 1 } ('a'..'z');\n    my %letters_rev = map { $_ => 1 } ('a'..'z');\n\
    \    my %letters_rev = map { $_ => 1 } ('a'..'z');\n    my %letters_rev = map\
    \ { $_ => 1 } ('a'..'z');\n    my %letters_rev = map { $_ => 1 } ('a'..'z');\n\
    \    my %letters_rev = map { $_ => 1 } ('a'..'z');\n    my %letters_rev = map\
    \ { $_ => 1 } ('a'..'z');\n    my %letters_rev = map { $_ => 1 } ('a'..'z');\n\
    \    my %letters_rev = map { $_ => 1 } ('a'..'z');\n    my %letters_rev = map\
    \ { $_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpyec3s3ty.pl line 38, at end
    of line

    syntax error at /tmp/tmpyec3s3ty.pl line 38, near "$_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpyec3s3ty.pl line 65, at end of
    line

    syntax error at /tmp/tmpyec3s3ty.pl line 65, at EOF

    Execution of /tmp/tmpyec3s3ty.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @letters = split //,\
    \ $message;\n    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            $encoded .= chr(ord($letter) - 32);\n        } elsif ($letter\
    \ =~ /[A-Z]/) {\n            $encoded .= chr(ord($letter) + 32);\n        } else\
    \ {\n            $encoded .= $letter;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_shifted = \"cgkosw\";\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if (index($vowels,\
    \ $char) != -1) {\n            $encoded_message .= substr($vowels_shifted, index($vowels,\
    \ $char), 1);\n        } else {\n            $encoded_message .= $char;\n    \
    \    }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowel_map = (\n        'a' => 'c',\n        'e'\
    \ => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n   \
    \ );\n    my @message_chars = split(//, $message);\n    foreach my $char (@message_chars)\
    \ {\n        if (grep {$_ eq $char} @vowels) {\n            $encoded_message .=\
    \ $vowel_map{$char};\n        } else {\n            $encoded_message .= uc($char);\n\
    \        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    for my $letter (split //, $message) {\n      \
    \  if (is_upper($letter)) {\n            $letter = lc($letter);\n        } else\
    \ {\n            $letter = uc($letter);\n        }\n        if (is_vowel($letter))\
    \ {\n            my $index = index_of($letter, @vowels);\n            $letter\
    \ = $vowels[($index + 2) % 5];\n        }\n        $encoded .= $letter;\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_upper called at /tmp/tmp5hvmmyfs.pl line
    16.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %letters\
    \ = map { $_ => 1 } ('a'..'z');\n    for my $char (split //, $message) {\n   \
    \     if ($letters{$char}) {\n            if ($vowels{$char}) {\n            \
    \    my $index = ord($char) - ord('a');\n                $index = ($index + 2)\
    \ % 26;\n                $char = chr(ord('a') + $index);\n            }\n    \
    \        $char = uc($char) if ($char eq lc($char));\n        }\n        $encoded\
    \ .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @vowels = qw(a e i o u);\n    my %vowels = map\
    \ { $_ => 1 } @vowels;\n    my $encoded = \"\";\n    for my $letter (split //,\
    \ $message) {\n        if ($vowels{lc $letter}) {\n            my $index = ord($letter)\
    \ - ord('a');\n            $index = ($index + 2) % 5;\n            $letter = chr(ord('a')\
    \ + $index);\n        }\n        $encoded .= uc $letter;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @message_array\
    \ = split(\"\", $message);\n    foreach my $letter (@message_array) {\n      \
    \  if ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/A-Z/;\n          \
    \  $letter =~ tr/A-Z/N-ZA-M/;\n            $encoded_message .= $letter;\n    \
    \    } elsif ($letter =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/a-z/;\n   \
    \         $letter =~ tr/a-z/n-za-m/;\n            $encoded_message .= $letter;\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split(//, $message);\n    my @vowels\
    \ = qw(a e i o u);\n    my @encoded;\n    for my $letter (@message) {\n      \
    \  if (grep {$_ eq lc($letter)} @vowels) {\n            my $index = firstidx {$_\
    \ eq lc($letter)} @vowels;\n            my $new_index = ($index + 2) % 5;\n  \
    \          push @encoded, uc($vowels[$new_index]);\n        } else {\n       \
    \     push @encoded, uc($letter);\n        }\n    }\n    return join(\"\", @encoded);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "firstidx" without a package or object reference at
    /tmp/tmpym_pudop.pl line 18.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpqq5oh3tx.pl line 89,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpqq5oh3tx.pl line 89, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpqq5oh3tx.pl line 116, at end of line\nsyntax\
    \ error at /tmp/tmpqq5oh3tx.pl line 116, at EOF\nExecution of /tmp/tmpqq5oh3tx.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $str = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n \
    \   my $vowels_encoded = \"cgjkr\";\n    for (my $i = 0; $i < length($str); $i++)\
    \ {\n        my $c = substr($str, $i, 1);\n        my $idx = index($vowels, $c);\n\
    \        if ($idx >= 0) {\n            $c = substr($vowels_encoded, $idx, 1);\n\
    \        }\n        if ($c =~ /[a-z]/) {\n            $c =~ tr/a-z/A-Z/;\n   \
    \     } else {\n            $c =~ tr/A-Z/a-z/;\n        }\n        $encoded .=\
    \ $c;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my @msg = split(//, $msg);\n    my @encoded_msg;\n \
    \   foreach my $letter (@msg) {\n        if ($letter =~ /[a-z]/) {\n         \
    \   my $ord = ord($letter);\n            if ($ord > 109) {\n                $ord\
    \ -= 26;\n            }\n            $ord += 2;\n            push @encoded_msg,\
    \ chr($ord);\n        } elsif ($letter =~ /[A-Z]/) {\n            my $ord = ord($letter);\n\
    \            if ($ord > 77) {\n                $ord -= 26;\n            }\n  \
    \          $ord += 2;\n            push @encoded_msg, chr($ord);\n        } else\
    \ {\n            push @encoded_msg, $letter;\n        }\n    }\n    return join(\"\
    \", @encoded_msg);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %vowels_shift\
    \ = map { $_ => 1 } ('c', 'f', 'j', 'n', 'r');\n    my %vowels_shift_2 = map {\
    \ $_ => 1 } ('d', 'g', 'k', 'p', 's');\n    my %vowels_shift_3 = map { $_ => 1\
    \ } ('h', 'l', 'q', 't', 'v');\n    my %vowels_shift_4 = map { $_ => 1 } ('m',\
    \ 'w', 'x', 'y', 'z');\n    for my $c (split //, $msg) {\n        if ($c =~ /[a-z]/i)\
    \ {\n            if ($c =~ /[a-z]/) {\n                $c = uc($c);\n        \
    \    } else {\n                $c = lc($c);\n            }\n            if ($vowels{$c})\
    \ {\n                if ($vowels_shift{$c}) {\n                    $c = chr(ord($c)\
    \ + 1);\n                } elsif ($vowels_shift_2{$c}) {\n                   \
    \ $c = chr(ord($c) + 2);\n                } elsif ($vowels_shift_3{$c}) {\n  \
    \                  $c = chr(ord($c) + 3);\n                } elsif ($vowels_shift_4{$c})\
    \ {\n                    $c = chr(ord($c) + 4);\n                }\n         \
    \   }\n        }\n        $encoded .= $c;\n    }\n    return $encoded;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n     \
    \   if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"\
    mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
    ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index\
    \ = 0;\n    for my $char (split //, $message) {\n        if ($char =~ /[a-zA-Z]/)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc($char);\n\
    \            } else {\n                $char = lc($char);\n            }\n   \
    \         if ($vowels{lc($char)}) {\n                $char = $vowels[($vowel_index\
    \ + 2) % 5];\n                $vowel_index = ($vowel_index + 1) % 5;\n       \
    \     }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $str = shift;\n    my @str = split //, $str;\n    my @vowels = qw(a e i\
    \ o u);\n    my @vowels_encoded = qw(c g k o s);\n    my $i = 0;\n    foreach\
    \ my $c (@str) {\n        if (grep {$_ eq $c} @vowels) {\n            $str[$i]\
    \ = $vowels_encoded[$i];\n        }\n        $i++;\n    }\n    return join '',\
    \ @str;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = qw(a\
    \ e i o u);\n    my %vowel_map = (\n        a => \"c\",\n        e => \"g\",\n\
    \        i => \"k\",\n        o => \"s\",\n        u => \"y\",\n    );\n    for\
    \ my $letter (split //, $message) {\n        if ($letter =~ /[a-z]/i) {\n    \
    \        if ($letter =~ /[a-z]/) {\n                $letter = uc $letter;\n  \
    \          }\n            else {\n                $letter = lc $letter;\n    \
    \        }\n        }\n        if (grep {$_ eq lc $letter} @vowels) {\n      \
    \      $letter = $vowel_map{lc $letter};\n        }\n        $encoded_message\
    \ .= $letter;\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my\
    \ %alphabet = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n        \"\
    c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n        \"f\"\
    \ => \"h\",\n        \"g\" => \"i\",\n        \"h\" => \"j\",\n        \"i\" =>\
    \ \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"m\",\n        \"l\" => \"\
    n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"o\" => \"q\"\
    ,\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\" => \"t\",\n\
    \        \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" => \"w\",\n \
    \       \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"z\",\n  \
    \      \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for (my $i = 0; $i\
    \ < length($message); $i++) {\n        my $char = substr($message, $i, 1);\n \
    \       if ($vowels{$char}) {\n            $encoded .= $alphabet{$char};\n   \
    \     } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = '';\n    my $vowels = 'aeiou';\n \
    \   my $vowels_encoded = 'cgjkr';\n    my $vowels_encoded_hash = {};\n    my $i\
    \ = 0;\n    for my $vowel (split //, $vowels) {\n        $vowels_encoded_hash->{$vowel}\
    \ = substr($vowels_encoded, $i, 1);\n        $i++;\n    }\n    for my $char (split\
    \ //, $message) {\n        if ($char =~ /[A-Z]/) {\n            $encoded .= lc($char);\n\
    \        } elsif ($char =~ /[a-z]/) {\n            $encoded .= uc($char);\n  \
    \      } else {\n            $encoded .= $char;\n        }\n    }\n    for my\
    \ $char (split //, $encoded) {\n        if (exists $vowels_encoded_hash->{$char})\
    \ {\n            $encoded =~ s/$char/$vowels_encoded_hash->{$char}/;\n       \
    \ }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234188
- exit_code: 0
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiouAEIOU\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    my $alphabet_length = length($alphabet);\n    my $vowels_length = length($vowels);\n\
    \    my $message_length = length($message);\n    for (my $i = 0; $i < $message_length;\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        my $char_index\
    \ = index($alphabet, $char);\n        if ($char_index != -1) {\n            if\
    \ (index($vowels, $char) != -1) {\n                $char_index += 2;\n       \
    \         $char_index = $char_index % $alphabet_length;\n                $char\
    \ = substr($alphabet, $char_index, 1);\n            }\n            if ($char eq\
    \ uc($char)) {\n                $char = lc($char);\n            } else {\n   \
    \             $char = uc($char);\n            }\n        }\n        $encoded_message\
    \ .= $char;\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660234188
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n\
    \    my $vowel_length = scalar @vowels;\n    my $vowel_found = 0;\n    my $char\
    \ = \"\";\n    my $char_ascii = 0;\n    my $char_ascii_new = 0;\n    my $char_new\
    \ = \"\";\n    my $message_length = length $message;\n    my $i = 0;\n    for\
    \ ($i = 0; $i < $message_length; $i++) {\n        $char = substr $message, $i,\
    \ 1;\n        $char_ascii = ord $char;\n        $char_ascii_new = $char_ascii;\n\
    \        $vowel_found = 0;\n        for ($vowel_index = 0; $vowel_index < $vowel_length;\
    \ $vowel_index++) {\n            if ($char eq $vowels[$vowel_index]) {\n     \
    \           $vowel_found = 1;\n                $vowel_count = $vowel_index + 2;\n\
    \                if ($vowel_count >= $vowel_length) {\n                    $vowel_count\
    \ = $vowel_count - $vowel_length;\n                }\n                $char_ascii_new\
    \ = ord $vowels[$vowel_count];\n                last;\n            }\n       \
    \ }\n        if ($vowel_found == 0) {\n            if ($char_ascii >= 65 && $char_ascii\
    \ <= 90) {\n                $char_ascii_new = $char_ascii + 32;\n            }\
    \ elsif ($char_ascii >= 97 && $char_ascii <= 122) {\n                $char_ascii_new\
    \ = $char_ascii - 32;\n            }\n        }\n        $char_new = chr $char_asci\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp4ododcj4.pl line 49, at end
    of line

    syntax error at /tmp/tmp4ododcj4.pl line 49, near "$char_asci

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp4ododcj4.pl line 76, at end of
    line

    syntax error at /tmp/tmp4ododcj4.pl line 76, at EOF

    Execution of /tmp/tmp4ododcj4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660227792
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @chars = split(//,\
    \ $message);\n    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n\
    \            $encoded_message .= chr(ord($char) - 32);\n        } elsif ($char\
    \ =~ /[A-Z]/) {\n            $encoded_message .= chr(ord($char) + 32);\n     \
    \   } else {\n            $encoded_message .= $char;\n        }\n    }\n    $encoded_message\
    \ =~ s/[aeiou]/chr(ord($&) + 2)/eg;\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234188
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my\
    \ $vowel_length = scalar @vowels;\n    my $vowel_found = 0;\n    my $char = \"\
    \";\n    my $char_index = 0;\n    my $char_length = 0;\n    my $char_count = 0;\n\
    \    my $char_found = 0;\n    my $char_is_vowel = 0;\n    my $char_is_lower =\
    \ 0;\n    my $char_is_upper = 0;\n    my $char_is_letter = 0;\n    my $char_is_number\
    \ = 0;\n    my $char_is_special = 0;\n    my $char_is_whitespace = 0;\n    my\
    \ $char_is_newline = 0;\n    my $char_is_tab = 0;\n    my $char_is_return = 0;\n\
    \    my $char_is_backspace = 0;\n    my $char_is_formfeed = 0;\n    my $char_is_vertical_tab\
    \ = 0;\n    my $char_is_alarm = 0;\n    my $char_is_escape = 0;\n    my $char_is_delete\
    \ = 0;\n    my $char_is_printable = 0;\n    my $char_is_punctuation = 0;\n   \
    \ my $char_is_graphic = 0;\n    my $char_is_cntrl = 0;\n    my $char_is_ascii\
    \ = 0;\n    my $char_is_utf8 = 0;\n    my $char_is_utf16 = 0;\n    my $char_is_utf32\
    \ = 0;\n    my $char_is_utf8_c8 = 0;\n    my $char_is_utf8_c16 = 0;\n    my $char_is_utf8_c32\
    \ = 0;\n    my $char_is_utf8_c8_\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpq97wu4rs.pl line 52, at end
    of line

    syntax error at /tmp/tmpq97wu4rs.pl line 52, near "$char_is_utf8_c8_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpq97wu4rs.pl line 79, at end of
    line

    syntax error at /tmp/tmpq97wu4rs.pl line 79, at EOF

    Execution of /tmp/tmpq97wu4rs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234188
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $vowel_index\
    \ = 0;\n    my $alphabet_index = 0;\n    my $vowel_position = 0;\n    my $alphabet_position\
    \ = 0;\n    my $vowel_position_plus_two = 0;\n    my $alphabet_position_plus_two\
    \ = 0;\n    my $vowel_position_plus_two_mod = 0;\n    my $alphabet_position_plus_two_mod\
    \ = 0;\n    my $vowel_position_plus_two_mod_index = 0;\n    my $alphabet_position_plus_two_mod_index\
    \ = 0;\n    my $vowel_position_plus_two_mod_letter = \"\";\n    my $alphabet_position_plus_two_mod_letter\
    \ = \"\";\n    my $vowel_position_plus_two_mod_letter_upper = \"\";\n    my $alphabet_position_plus_two_mod_letter_upper\
    \ = \"\";\n    my $vowel_position_plus_two_mod_letter_lower = \"\";\n    my $alphabet_position_plus_two_mod_letter_lower\
    \ = \"\";\n    my $vowel_position_plus_two_mod_letter_upper_index = 0;\n    my\
    \ $alphabet_position_plus_two_mod_letter_upper_index = 0;\n    my $vowel_position_plus_two_mod_letter_lower_index\
    \ = 0;\n    my $alphabet_position_plus_two_mod_letter_lower_index = 0;\n    my\
    \ $vowel_position_plus_two_mod_letter_upper_index_plus_two = 0;\n    my $alphabet_position_plus_two_mod_letter_upper_index_plus_two\
    \ = 0;\n    my $v\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpx4j7pcum.pl line 41, at end
    of line

    syntax error at /tmp/tmpx4j7pcum.pl line 41, near "$v

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpx4j7pcum.pl line 68, at end of
    line

    syntax error at /tmp/tmpx4j7pcum.pl line 68, at EOF

    Execution of /tmp/tmpx4j7pcum.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234187
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @alphabet = qw(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z);\n    my %alphabet = map { $alphabet[$_] => $_ } 0..$#alphabet;\n\
    \    my %vowels = map { $vowels[$_] => $_ } 0..$#vowels;\n    my $encoded_message\
    \ = \"\";\n    for my $letter (@message) {\n        if (exists $vowels{$letter})\
    \ {\n            $encoded_message .= $vowels[($vowels{$letter} + 2) % 5];\n  \
    \      }\n        elsif (exists $alphabet{$letter}) {\n            $encoded_message\
    \ .= $alphabet[($alphabet{$letter} + 2) % 26];\n        }\n        else {\n  \
    \          $encoded_message .= $letter;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    foreach my $char (split //, $message) {\n    \
    \    if ($char =~ /[a-zA-Z]/) {\n            if ($char =~ /[a-z]/) {\n       \
    \         $char =~ tr/a-z/b-za/;\n            } else {\n                $char\
    \ =~ tr/A-Z/B-ZA/;\n            }\n            if (grep {$_ eq lc($char)} @vowels)\
    \ {\n                $char =~ tr/a-z/c-za-b/;\n            }\n        }\n    \
    \    $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my @alphabet\
    \ = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my %alphabet\
    \ = map { $alphabet[$_] => $_ } 0..$#alphabet;\n    my @encoded;\n    for my $letter\
    \ (@message) {\n        if (exists $vowels{$letter}) {\n            my $index\
    \ = $alphabet{$letter};\n            $index += 2;\n            $index -= 26 if\
    \ $index > 25;\n            push @encoded, $alphabet[$index];\n        }\n   \
    \     else {\n            push @encoded, $letter;\n        }\n    }\n    return\
    \ join '', @encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    for (my $i = 0; $i < $message_length; $i++) {\n   \
    \     my $char = substr($message, $i, 1);\n        my $char_index = index($alphabet,\
    \ $char);\n        if ($char_index != -1) {\n            if ($char_index < $alphabet_length\
    \ - 2) {\n                $char_index += 2;\n            } else {\n          \
    \      $char_index -= $alphabet_length - 2;\n            }\n            my $new_char\
    \ = substr($alphabet, $char_index, 1);\n            my $vowel_index = index($vowels,\
    \ $new_char);\n            if ($vowel_index != -1) {\n                if ($vowel_index\
    \ < $vowels_length - 2) {\n                    $vowel_index += 2;\n          \
    \      } else {\n                    $vowel_index -= $vowels_length - 2;\n   \
    \             }\n                $new_char = substr($vowels, $vowel_index, 1);\n\
    \            }\n            $encoded .= $new_char;\n        } else {\n       \
    \     $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjln\";\n    my $vowels_encoded_index = 0;\n  \
    \  for (my $i = 0; $i < length($message); $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        if (index($vowels, $char) >= 0) {\n            $encoded .=\
    \ substr($vowels_encoded, $vowels_encoded_index, 1);\n            $vowels_encoded_index++;\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\"\
    ,\n        \"u\" => \"y\",\n    );\n    foreach my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-zA-Z]/) {\n            if (grep { $_ eq lc($char)\
    \ } @vowels) {\n                $encoded_message .= $vowel_map{lc($char)};\n \
    \           } else {\n                $encoded_message .= uc($char);\n       \
    \     }\n        } else {\n            $encoded_message .= $char;\n        }\n\
    \    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $vowel_index\
    \ = 0;\n    my $letter_index = 0;\n    my $letter = \"\";\n    my $vowel = \"\"\
    ;\n    my $vowel_position = 0;\n    my $letter_position = 0;\n    my $encoded_letter\
    \ = \"\";\n    my $encoded_vowel = \"\";\n    my $message_length = length($message);\n\
    \    for (my $i = 0; $i < $message_length; $i++) {\n        $letter = substr($message,\
    \ $i, 1);\n        $letter_index = index($alphabet, $letter);\n        if ($letter_index\
    \ == -1) {\n            $encoded_message .= $letter;\n        }\n        else\
    \ {\n            $letter_position = $letter_index;\n            $encoded_letter\
    \ = substr($alphabet, $letter_position, 1);\n            $encoded_message .= $encoded_letter;\n\
    \        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = qw(a\
    \ e i o u);\n    my %vowel_map = (\n        a => 'c',\n        e => 'g',\n   \
    \     i => 'k',\n        o => 's',\n        u => 'y',\n    );\n    for my $char\
    \ (split //, $message) {\n        if (grep { $char eq $_ } @vowels) {\n      \
    \      $encoded_message .= $vowel_map{$char};\n        }\n        elsif ($char\
    \ =~ /[A-Z]/) {\n            $encoded_message .= lc $char;\n        }\n      \
    \  elsif ($char =~ /[a-z]/) {\n            $encoded_message .= uc $char;\n   \
    \     }\n        else {\n            $encoded_message .= $char;\n        }\n \
    \   }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my %vowels = map { $_ => 1 } @vowels;\n    for my $char (split //,\
    \ $message) {\n        if ($vowels{lc $char}) {\n            my $index = ord($char)\
    \ - ord('a');\n            $index = ($index + 2) % 26;\n            $char = chr(ord('a')\
    \ + $index);\n        }\n        $encoded .= uc $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    foreach my $char (split //, $message) {\n    \
    \    if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n         \
    \       $char =~ tr/a-z/A-Z/;\n            } else {\n                $char =~\
    \ tr/A-Z/a-z/;\n            }\n            if (grep {$_ eq lc($char)} @vowels)\
    \ {\n                my $index = 0;\n                foreach my $vowel (@vowels)\
    \ {\n                    if ($vowel eq lc($char)) {\n                        $index\
    \ = $index + 2;\n                        $index = $index % 5;\n              \
    \          $char = $vowels[$index];\n                        last;\n         \
    \           }\n                    $index++;\n                }\n            }\n\
    \        }\n        $encoded = $encoded . $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n \
    \   my $vowels_2 = \"cgjkqsxyz\";\n    my $vowels_3 = \"dhkmnr\";\n    my $vowels_4\
    \ = \"b\";\n    my $vowels_5 = \"f\";\n    my $vowels_6 = \"p\";\n    my $vowels_7\
    \ = \"v\";\n    my $vowels_8 = \"w\";\n    my $vowels_9 = \"z\";\n    my $vowels_10\
    \ = \"l\";\n    my $vowels_11 = \"m\";\n    my $vowels_12 = \"n\";\n    my $vowels_13\
    \ = \"r\";\n    my $vowels_14 = \"s\";\n    my $vowels_15 = \"t\";\n    my $vowels_16\
    \ = \"x\";\n    my $vowels_17 = \"y\";\n    my $vowels_18 = \"h\";\n    my $vowels_19\
    \ = \"j\";\n    my $vowels_20 = \"q\";\n    my $vowels_21 = \"k\";\n    my $vowels_22\
    \ = \"g\";\n    my $vowels_23 = \"d\";\n    my $vowels_24 = \"b\";\n    my $vowels_25\
    \ = \"f\";\n    my $vowels_26 = \"p\";\n    my $vowels_27 = \"v\";\n    my $vowels_28\
    \ = \"w\";\n    my $vowels_29 = \"z\";\n    my $vowels_30 = \"l\";\n    my $vowels_31\
    \ = \"m\";\n    my $vowels_32 = \"n\";\n    my $vowels_33 = \"r\";\n    my $vowels_34\
    \ = \"s\";\n    my $vowels_35 = \"t\";\n    my $vowels_36 = \"x\";\n    my $vowels_37\
    \ = \"y\";\n    my $vow\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp9tpv9t64.pl line 52, at end
    of line

    syntax error at /tmp/tmp9tpv9t64.pl line 52, near "$vow

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp9tpv9t64.pl line 79, at end of
    line

    syntax error at /tmp/tmp9tpv9t64.pl line 79, at EOF

    Execution of /tmp/tmp9tpv9t64.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n  \
    \  my $i = 0;\n    foreach my $vowel (split(//, $vowels)) {\n        $vowels_encoded_hash->{$vowel}\
    \ = substr($vowels_encoded, $i, 1);\n        $i++;\n    }\n    foreach my $char\
    \ (split(//, $message)) {\n        if ($char =~ /[a-zA-Z]/) {\n            if\
    \ ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n            } else\
    \ {\n                $char =~ tr/A-Z/a-z/;\n            }\n            if ($char\
    \ =~ /[aeiou]/) {\n                $char = $vowels_encoded_hash->{$char};\n  \
    \          }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = (\n        'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n       \
    \ 'd' => 'f',\n        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n\
    \        'h' => 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' =>\
    \ 'm',\n        'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n      \
    \  'o' => 'q',\n        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n\
    \        's' => 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' =>\
    \ 'x',\n        'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n      \
    \  'z' => 'b',\n    );\n    for my $char (split //, $message) {\n        if ($vowels{lc\
    \ $char}) {\n            $encoded .= $alphabet{lc $char};\n        } elsif ($char\
    \ =~ /[A-Z]/) {\n            $encoded .= lc $char;\n        } elsif ($char =~\
    \ /[a-z]/) {\n            $encoded .= uc $char;\n        } else {\n          \
    \  $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my @msg = split(//, $msg);\n    my @encoded;\n    foreach\
    \ my $char (@msg) {\n        if ($char =~ /[a-z]/) {\n            push(@encoded,\
    \ chr(ord($char) - 32));\n        } elsif ($char =~ /[A-Z]/) {\n            push(@encoded,\
    \ chr(ord($char) + 32));\n        } else {\n            push(@encoded, $char);\n\
    \        }\n    }\n    my $encoded = join('', @encoded);\n    $encoded =~ s/[aeiou]/chr(ord($&)\
    \ + 2)/eg;\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    foreach my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc($char);\n\
    \            } else {\n                $char = lc($char);\n            }\n   \
    \         if ($vowels =~ /$char/) {\n                $char =~ tr/aeiou/eioua/;\n\
    \            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n  \
    \  my $vowels_hash = {};\n    my $i = 0;\n    while ($i < length($vowels)) {\n\
    \        $vowels_hash->{substr($vowels, $i, 1)} = 1;\n        $vowels_encoded_hash->{substr($vowels_encoded,\
    \ $i, 1)} = 1;\n        $i++;\n    }\n    my $i = 0;\n    while ($i < length($message))\
    \ {\n        my $char = substr($message, $i, 1);\n        if (exists $vowels_hash->{$char})\
    \ {\n            $encoded .= substr($vowels_encoded, index($vowels, $char), 1);\n\
    \        } elsif (exists $vowels_encoded_hash->{$char}) {\n            $encoded\
    \ .= substr($vowels, index($vowels_encoded, $char), 1);\n        } else {\n  \
    \          $encoded .= $char;\n        }\n        $i++;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    for (my $i = 0; $i < length($message); $i++) {\n\
    \        my $char = substr($message, $i, 1);\n        if (is_vowel($char)) {\n\
    \            $char = get_next_vowel($char);\n        }\n        if (is_upper($char))\
    \ {\n            $char = lc($char);\n        } else {\n            $char = uc($char);\n\
    \        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_vowel called at /tmp/tmpq2af587b.pl line
    17.

    '
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    for my $char\
    \ (split //, $message) {\n        if ($vowels{lc $char}) {\n            $encoded\
    \ .= chr(ord($char) + 2);\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return uc $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my @encoded_message;\n\
    \    my $vowels = \"aeiou\";\n    my $vowels_2 = \"cgjkqsxyz\";\n    foreach my\
    \ $letter (@message) {\n        if ($letter =~ /[a-z]/) {\n            if ($letter\
    \ =~ /[$vowels]/) {\n                $letter =~ tr/aeiou/cgjkqsxyz/;\n       \
    \     }\n            $letter =~ tr/a-z/A-Z/;\n        }\n        push @encoded_message,\
    \ $letter;\n    }\n    return join \"\", @encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_hash = {\n        \"a\" => \"c\",\n        \"e\" => \"\
    g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\"\
    ,\n    };\n    for my $char (split //, $message) {\n        if ($vowels =~ /$char/)\
    \ {\n            $encoded_message .= $vowels_hash->{$char};\n        } elsif ($char\
    \ =~ /[A-Z]/) {\n            $encoded_message .= lc($char);\n        } elsif ($char\
    \ =~ /[a-z]/) {\n            $encoded_message .= uc($char);\n        } else {\n\
    \            $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n  \
    \  for (my $i = 0; $i < length($vowels); $i++) {\n        $vowels_encoded_hash->{substr($vowels,\
    \ $i, 1)} = substr($vowels_encoded, $i, 1);\n    }\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if (index($vowels,\
    \ $char) != -1) {\n            $encoded .= $vowels_encoded_hash->{$char};\n  \
    \      } elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc($char);\n    \
    \    } elsif ($char =~ /[a-z]/) {\n            $encoded .= uc($char);\n      \
    \  } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    $msg =~ tr/a-zA-Z/A-Za-z/;\n    $msg =~ tr/aeiou/cdfghj/;\n\
    \    return $msg;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } (\"a\"..\"z\");\n    my %encoded_alphabet = map { $_ => 1\
    \ } (\"c\"..\"z\", \"a\", \"b\");\n    for my $char (split //, $msg) {\n     \
    \   if ($alphabet{$char}) {\n            if ($vowels{$char}) {\n             \
    \   $encoded .= $encoded_alphabet{$char};\n            } else {\n            \
    \    $encoded .= uc $char;\n            }\n        } else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_hash = {};\n    my $vowels_encoded_hash\
    \ = {};\n    my $i = 0;\n    foreach my $vowel (split //, $vowels) {\n       \
    \ $vowels_hash->{$vowel} = $i;\n        $i++;\n    }\n    $i = 0;\n    foreach\
    \ my $vowel (split //, $vowels_encoded) {\n        $vowels_encoded_hash->{$vowel}\
    \ = $i;\n        $i++;\n    }\n    foreach my $char (split //, $message) {\n \
    \       if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n      \
    \          $char = uc($char);\n            }\n            else {\n           \
    \     $char = lc($char);\n            }\n            if ($char =~ /[aeiou]/i)\
    \ {\n                my $vowel_index = $vowels_hash->{lc($char)};\n          \
    \      $char = $vowels_encoded_hash->{$vowels_encoded[$vowel_index]};\n      \
    \      }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = 0;\n    my $vowel_length = @vowels;\n    my $vowel_found = 0;\n    my $letter\
    \ = \"\";\n    my $letter_index = 0;\n    my $letter_count = 0;\n    my $letter_length\
    \ = 0;\n    my $message_length = length($message);\n    my $message_index = 0;\n\
    \    my $message_count = 0;\n    my $message_char = \"\";\n    my $message_char_index\
    \ = 0;\n    my $message_char_count = 0;\n    my $message_char_length = 0;\n  \
    \  my $message_char_found = 0;\n    my $message_char_upper = \"\";\n    my $message_char_lower\
    \ = \"\";\n    my $message_char_upper_index = 0;\n    my $message_char_lower_index\
    \ = 0;\n    my $message_char_upper_count = 0;\n    my $message_char_lower_count\
    \ = 0;\n    my $message_char_upper_length = 0;\n    my $message_char_lower_length\
    \ = 0;\n    my $message_char_upper_found = 0;\n    my $message_char_lower_found\
    \ = 0;\n    my $message_char_upper_char = \"\";\n    my $message_char_lower_char\
    \ = \"\";\n    my $message_char_upper_char_index = 0;\n    my $message_char_lower_char_index\
    \ = 0;\n    my $message_char_upper_char_count = 0;\n    my $message_char_lower_char_count\
    \ = 0;\n    my $message_char_upper_char_length = 0;\n    my $message_char_lower_char_length\
    \ = 0;\n    my $message_char_upper_char_found = 0;\n    my $message_char_lower_char_found\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpfcvyo3ht.pl line 78, at
    end of line

    syntax error at /tmp/tmpfcvyo3ht.pl line 78, at EOF

    Execution of /tmp/tmpfcvyo3ht.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 }\
    \ ('a'..'z');\n    my %alphabet_upper = map { $_ => 1 } ('A'..'Z');\n    my %alphabet_lower\
    \ = map { $_ => 1 } ('a'..'z');\n    my $i = 0;\n    while ($i < length($msg))\
    \ {\n        my $c = substr($msg, $i, 1);\n        if ($alphabet_upper{$c}) {\n\
    \            $c = lc($c);\n            if ($vowels{$c}) {\n                $c\
    \ = chr(ord($c) + 2);\n                if (!$alphabet{$c}) {\n               \
    \     $c = chr(ord($c) - 26);\n                }\n            }\n            $c\
    \ = uc($c);\n        } elsif ($alphabet_lower{$c}) {\n            if ($vowels{$c})\
    \ {\n                $c = chr(ord($c) + 2);\n                if (!$alphabet{$c})\
    \ {\n                    $c = chr(ord($c) - 26);\n                }\n        \
    \    }\n        }\n        $encoded .= $c;\n        $i++;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my %alphabet = map { $_ => 1 } (\"a\"..\"z\");\n    my %alphabet_upper =\
    \ map { $_ => 1 } (\"A\"..\"Z\");\n    my %alphabet_lower = map { $_ => 1 } (\"\
    a\"..\"z\");\n    my %alphabet_lower_two = map { $_ => 1 } (\"c\"..\"z\");\n \
    \   my %alphabet_lower_two_first = map { $_ => 1 } (\"b\"..\"z\");\n    my %alphabet_lower_two_last\
    \ = map { $_ => 1 } (\"c\"..\"a\");\n    my %alphabet_upper_two = map { $_ =>\
    \ 1 } (\"C\"..\"Z\");\n    my %alphabet_upper_two_first = map { $_ => 1 } (\"\
    B\"..\"Z\");\n    my %alphabet_upper_two_last = map { $_ => 1 } (\"C\"..\"A\"\
    );\n    my @message_array = split(//, $message);\n    foreach my $letter (@message_array)\
    \ {\n        if (exists $alphabet{$letter}) {\n            if (exists $vowels{$letter})\
    \ {\n                if (exists $alphabet_lower_two{$letter}) {\n            \
    \        $encoded_message .= chr(ord($letter) + 2);\n                } elsif (exists\
    \ $alphabet_lower_two_first{$letter}) {\n                    $encoded_message\
    \ .= \"a\";\n                } elsif (exists $alphabet_lower_two_last{$letter})\
    \ {\n                    $encoded_message .= \"b\";\n                }\n     \
    \       } else {\n                $encoded_message .= uc($letter);\n         \
    \   }\n        } elsif (exists $alphabet_upper{$letter}) {\n            if (exists\
    \ $vowels{lc($letter)}) {\n                if (exists $alphabet_upper\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpr86r8qlr.pl line 42, at end
    of line

    exists argument is not a HASH or ARRAY element or a subroutine at /tmp/tmpr86r8qlr.pl
    line 42.

    '
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %map = (\n        a =>\
    \ 'c',\n        e => 'g',\n        i => 'k',\n        o => 's',\n        u =>\
    \ 'y',\n    );\n    for my $char (split //, $message) {\n        if ($vowels{lc\
    \ $char}) {\n            $encoded .= $map{lc $char};\n        } else {\n     \
    \       $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my @msg = split //, $msg;\n    my @encoded;\n    my\
    \ %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (@msg) {\n\
    \        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n     \
    \           $char = uc $char;\n            } else {\n                $char = lc\
    \ $char;\n            }\n        }\n        if ($char =~ /[aeiou]/i) {\n     \
    \       $char = $vowels{lc $char};\n        }\n        push @encoded, $char;\n\
    \    }\n    return join '', @encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234188
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_encoded = \"cgjkr\";\n    my $vowels_encoded_hash = {};\n\
    \    my $vowels_hash = {};\n    my $vowels_encoded_array = [];\n    my $vowels_array\
    \ = [];\n    my $vowels_encoded_index = 0;\n    my $vowels_index = 0;\n    my\
    \ $vowels_encoded_length = length($vowels_encoded);\n    my $vowels_length = length($vowels);\n\
    \    my $message_length = length($message);\n    my $message_index = 0;\n    my\
    \ $message_char = \"\";\n    my $message_char_lower = \"\";\n    my $message_char_upper\
    \ = \"\";\n    my $message_char_lower_index = 0;\n    my $message_char_upper_index\
    \ = 0;\n    my $message_char_lower_encoded_index = 0;\n    my $message_char_upper_encoded_index\
    \ = 0;\n    my $message_char_lower_encoded = \"\";\n    my $message_char_upper_encoded\
    \ = \"\";\n    my $message_char_lower_encoded_char = \"\";\n    my $message_char_upper_encoded_char\
    \ = \"\";\n    my $message_char_lower_encoded_char_index = 0;\n    my $message_char_upper_encoded_char_index\
    \ = 0;\n    my $message_char_lower_encoded_char_index_mod = 0;\n    my $message_char_upper_encoded_char_index_mod\
    \ = 0;\n    my $message_char_lower_encoded_char_index_mod_length = 0;\n    my\
    \ $message_char_upper_encoded_char_index_mod_length = 0;\n    my $message_char_lower_encoded_char_index_mod_length_half\
    \ = 0;\n    my $message_char_upper_encoded_char\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpnlpyoz9c.pl line 45, at end
    of line

    syntax error at /tmp/tmpnlpyoz9c.pl line 45, near "$message_char_upper_encoded_char

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpnlpyoz9c.pl line 72, at end of
    line

    syntax error at /tmp/tmpnlpyoz9c.pl line 72, at EOF

    Execution of /tmp/tmpnlpyoz9c.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n \
    \   my $vowels_encoded = \"cgjkr\";\n    for (my $i = 0; $i < length($msg); $i++)\
    \ {\n        my $char = substr($msg, $i, 1);\n        my $index = index($vowels,\
    \ $char);\n        if ($index >= 0) {\n            $char = substr($vowels_encoded,\
    \ $index, 1);\n        }\n        if ($char =~ /[a-z]/) {\n            $char =~\
    \ tr/a-z/A-Z/;\n        } else {\n            $char =~ tr/A-Z/a-z/;\n        }\n\
    \        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @letters = split //,\
    \ $message;\n    my %vowels = (\n        \"a\" => \"c\",\n        \"e\" => \"\
    g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\"\
    ,\n    );\n    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/i)\
    \ {\n            if ($letter =~ /[a-z]/) {\n                $letter = uc $letter;\n\
    \            }\n            else {\n                $letter = lc $letter;\n  \
    \          }\n        }\n        if ($letter =~ /[aeiou]/i) {\n            $letter\
    \ = $vowels{lc $letter};\n        }\n        $encoded .= $letter;\n    }\n   \
    \ return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %encode =\
    \ (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o'\
    \ => 'q',\n        'u' => 's',\n    );\n    for my $char (split(//, $message))\
    \ {\n        if ($vowels{lc($char)}) {\n            $encoded .= $encode{lc($char)};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ uc($encoded);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjln\";\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            my $index = index($vowels,\
    \ lc($char));\n            if ($index >= 0) {\n                $encoded .= substr($vowels_encoded,\
    \ $index, 1);\n            } else {\n                $encoded .= $char;\n    \
    \        }\n        } else {\n            $encoded .= $char;\n        }\n    }\n\
    \    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @alphabet =\
    \ ('a'..'z');\n    my %vowels = map {$_ => 1} ('a', 'e', 'i', 'o', 'u');\n   \
    \ my %vowel_map = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 's',\n    );\n    for my $char (split\
    \ //, $message) {\n        if (exists $vowels{$char}) {\n            $encoded_message\
    \ .= $vowel_map{$char};\n        } else {\n            $encoded_message .= $char;\n\
    \        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split(//, $message);\n    my @vowels\
    \ = qw/a e i o u/;\n    my @encoded;\n    foreach my $letter (@message) {\n  \
    \      if ($letter =~ /[a-z]/i) {\n            if ($letter =~ /[a-z]/) {\n   \
    \             $letter = uc($letter);\n            } else {\n                $letter\
    \ = lc($letter);\n            }\n            if (grep {$_ eq lc($letter)} @vowels)\
    \ {\n                my $index = 0;\n                foreach my $vowel (@vowels)\
    \ {\n                    if ($vowel eq lc($letter)) {\n                      \
    \  $index = $index + 2;\n                        if ($index > 4) {\n         \
    \                   $index = $index - 5;\n                        }\n        \
    \                $letter = $vowels[$index];\n                        last;\n \
    \                   }\n                    $index++;\n                }\n    \
    \        }\n        }\n        push(@encoded, $letter);\n    }\n    return join('',\
    \ @encoded);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my @msg = split //, $msg;\n    my $encoded = \"\";\n\
    \    my %vowels = (\n        a => \"c\",\n        e => \"g\",\n        i => \"\
    k\",\n        o => \"q\",\n        u => \"y\",\n    );\n    for my $char (@msg)\
    \ {\n        if (exists $vowels{lc $char}) {\n            $encoded .= $vowels{lc\
    \ $char};\n        } elsif ($char =~ /[a-z]/) {\n            $encoded .= uc $char;\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $encoded .= lc $char;\n   \
    \     } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $vowels_encoded = \"cgjln\";\n    my $vowels_encoded_hash = {};\n  \
    \  my $vowels_hash = {};\n    my $i = 0;\n    foreach my $vowel (split //, $vowels)\
    \ {\n        $vowels_hash->{$vowel} = 1;\n        $vowels_encoded_hash->{$vowel}\
    \ = substr($vowels_encoded, $i, 1);\n        $i++;\n    }\n    foreach my $char\
    \ (split //, $message) {\n        if ($vowels_hash->{lc($char)}) {\n         \
    \   $encoded .= $vowels_encoded_hash->{lc($char)};\n        } else {\n       \
    \     $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $i;\n    for ($i\
    \ = 0; $i < length($message); $i++) {\n        my $char = substr($message, $i,\
    \ 1);\n        if (index($vowels, $char) != -1) {\n            $char = substr($alphabet,\
    \ (index($alphabet, $char) + 2) % 26, 1);\n        }\n        $encoded .= $char;\n\
    \    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowels_hash = map { $_ => 1 } @vowels;\n    my\
    \ %letters_hash = map { $_ => 1 } ('a'..'z');\n    my %letters_hash_upper = map\
    \ { $_ => 1 } ('A'..'Z');\n    my %letters_hash_all = (%letters_hash, %letters_hash_upper);\n\
    \    my %letters_hash_all_lower = map { lc($_) => 1 } keys %letters_hash_all;\n\
    \    my %letters_hash_all_upper = map { uc($_) => 1 } keys %letters_hash_all;\n\
    \    my %letters_hash_all_lower_keys = map { $_ => 1 } keys %letters_hash_all_lower;\n\
    \    my %letters_hash_all_upper_keys = map { $_ => 1 } keys %letters_hash_all_upper;\n\
    \    my @letters_array = ('a'..'z');\n    my @letters_array_upper = ('A'..'Z');\n\
    \    my @letters_array_all = (@letters_array, @letters_array_upper);\n    my @letters_array_all_lower\
    \ = map { lc($_) } @letters_array_all;\n    my @letters_array_all_upper = map\
    \ { uc($_) } @letters_array_all;\n    my %letters_hash_all_lower_keys_array =\
    \ map { $_ => 1 } @letters_array_all_lower;\n    my %letters_hash_all_upper_keys_array\
    \ = map { $_ => 1 } @letters_array_all_upper;\n    my $letters_hash_all_lower_keys_array_size\
    \ = scalar @letters_array_all_lower;\n    my $letters_hash_all_upper_keys_array_size\
    \ = scalar @letters_array_all_upper;\n    my $message_length = length $message;\n\
    \    my $i = 0;\n    while ($i < $message_length) {\n        my $\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpedldyvc4.pl line 36,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpedldyvc4.pl line 36, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpedldyvc4.pl line 63, at end of line\nsyntax\
    \ error at /tmp/tmpedldyvc4.pl line 63, at EOF\nExecution of /tmp/tmpedldyvc4.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660234188
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = qw(a e i o\
    \ u);\n    my $vowel_count = 0;\n    my $vowel_index = 0;\n    my $vowel_length\
    \ = scalar @vowels;\n    my $vowel_letter = \"\";\n    my $vowel_letter_index\
    \ = 0;\n    my $vowel_letter_index_plus_two = 0;\n    my $vowel_letter_index_plus_two_mod_vowel_length\
    \ = 0;\n    my $vowel_letter_index_plus_two_mod_vowel_length_plus_vowel_count\
    \ = 0;\n    my $vowel_letter_index_plus_two_mod_vowel_length_plus_vowel_count_mod_vowel_length\
    \ = 0;\n    my $vowel_letter_index_plus_two_mod_vowel_length_plus_vowel_count_mod_vowel_length_plus_vowel_count\
    \ = 0;\n    my $vowel_letter_index_plus_two_mod_vowel_length_plus_vowel_count_mod_vowel_length_plus_vowel_count_mod_vowel_length\
    \ = 0;\n    my $vowel_letter_index_plus_two_mod_vowel_length_plus_vowel_count_mod_vowel_length_plus_vowel_count_mod_vowel_length_plus_vowel_count\
    \ = 0;\n    my $vowel_letter_index_plus_two_mod_vowel_length_plus_vowel_count_mod_vowel_length_plus_vowel_count_mod_vowel_length_plus_vowel_count_mod_vowel_length\
    \ = 0;\n    my $vowel_letter_index_plus_two_mod_vowel_length_plus_vowel_count_mod_vowel_length_plus_vow\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n   \
    \     if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpcllfkutn.pl line 29, at end
    of line

    syntax error at /tmp/tmpcllfkutn.pl line 29, near "$vowel_letter_index_plus_two_mod_vowel_length_plus_vowel_count_mod_vowel_length_plus_vow

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpcllfkutn.pl line 56, at end of
    line

    syntax error at /tmp/tmpcllfkutn.pl line 56, at EOF

    Execution of /tmp/tmpcllfkutn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @message = split //, $message;\n    my @encoded;\n\
    \    my %vowels = (\n        a => 'c',\n        e => 'g',\n        i => 'k',\n\
    \        o => 'q',\n        u => 'y',\n    );\n    foreach my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            if ($letter =~ /[aeiou]/)\
    \ {\n                push @encoded, $vowels{$letter};\n            }\n       \
    \     else {\n                push @encoded, uc $letter;\n            }\n    \
    \    }\n        else {\n            push @encoded, lc $letter;\n        }\n  \
    \  }\n    return join '', @encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"\
    ),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @letters = split //, $message;\n    my @encoded_letters;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter\
    \ (@letters) {\n        if (exists $vowels{$letter}) {\n            push @encoded_letters,\
    \ $vowels{$letter};\n        } elsif ($letter =~ /[a-z]/) {\n            push\
    \ @encoded_letters, chr(ord($letter) + 2);\n        } elsif ($letter =~ /[A-Z]/)\
    \ {\n            push @encoded_letters, chr(ord($letter) + 2 - 32);\n        }\
    \ else {\n            push @encoded_letters, $letter;\n        }\n    }\n    return\
    \ join '', @encoded_letters;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $str = shift;\n    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    for (my $i = 0; $i < length($str); $i++) {\n    \
    \    my $char = substr($str, $i, 1);\n        if ($char =~ /[A-Z]/) {\n      \
    \      $char = lc($char);\n        } elsif ($char =~ /[a-z]/) {\n            $char\
    \ = uc($char);\n        }\n        if (grep {$_ eq $char} @vowels) {\n       \
    \     my $index = 0;\n            for (my $j = 0; $j < @vowels; $j++) {\n    \
    \            if ($vowels[$j] eq $char) {\n                    $index = $j;\n \
    \                   last;\n                }\n            }\n            $index\
    \ += 2;\n            $index %= 5;\n            $char = $vowels[$index];\n    \
    \    }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my %alphabet = (\n        \"a\" => \"c\",\n        \"b\" => \"d\",\n    \
    \    \"c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\" => \"g\",\n     \
    \   \"f\" => \"h\",\n        \"g\" => \"i\",\n        \"h\" => \"j\",\n      \
    \  \"i\" => \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"m\",\n       \
    \ \"l\" => \"n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\",\n        \"\
    o\" => \"q\",\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n        \"r\"\
    \ => \"t\",\n        \"s\" => \"u\",\n        \"t\" => \"v\",\n        \"u\" =>\
    \ \"w\",\n        \"v\" => \"x\",\n        \"w\" => \"y\",\n        \"x\" => \"\
    z\",\n        \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n    for my $char\
    \ (split //, $message) {\n        if ($vowels{lc($char)}) {\n            $encoded_message\
    \ .= $alphabet{lc($char)};\n        } else {\n            $encoded_message .=\
    \ $char;\n        }\n    }\n    return $encoded_message;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my @vowels = ('a', 'e',\
    \ 'i', 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my\
    \ $vowel_length = scalar @vowels;\n    my $vowel_found = 0;\n    my $char = \"\
    \";\n    my $char_ascii = 0;\n    my $char_ascii_upper = 0;\n    my $char_ascii_lower\
    \ = 0;\n    my $char_ascii_upper_new = 0;\n    my $char_ascii_lower_new = 0;\n\
    \    my $char_ascii_new = 0;\n    my $char_new = \"\";\n    my $message_length\
    \ = length $message;\n    for (my $i = 0; $i < $message_length; $i++) {\n    \
    \    $char = substr $message, $i, 1;\n        $char_ascii = ord $char;\n     \
    \   $char_ascii_upper = $char_ascii & 0b11011111;\n        $char_ascii_lower =\
    \ $char_ascii | 0b00100000;\n        if ($char_ascii_upper == $char_ascii) {\n\
    \            $char_ascii_upper_new = $char_ascii_upper + 32;\n            $char_ascii_new\
    \ = $char_ascii_upper_new;\n        } elsif ($char_ascii_lower == $char_ascii)\
    \ {\n            $char_ascii_lower_new = $char_ascii_lower - 32;\n           \
    \ $char_ascii_new = $char_ascii_lower_new;\n        }\n        $char_new = chr\
    \ $char_ascii_new;\n        for ($vowel_index = 0; $vowel_index < $vowel_length;\
    \ $vowel_index++) {\n            if ($char_new eq $vowels[$vowel\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp4cpg7gpf.pl line 43, at end
    of line

    syntax error at /tmp/tmp4cpg7gpf.pl line 43, near "$vowel

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp4cpg7gpf.pl line 70, at end of
    line

    syntax error at /tmp/tmp4cpg7gpf.pl line 70, at EOF

    Execution of /tmp/tmp4cpg7gpf.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my @letters = split //, $message;\n    my @encoded;\n\
    \    foreach my $letter (@letters) {\n        if ($letter =~ /[aeiou]/i) {\n \
    \           my $index = index($alphabet, lc($letter));\n            my $new_letter\
    \ = substr($alphabet, $index + 2, 1);\n            push @encoded, uc($new_letter);\n\
    \        } else {\n            push @encoded, uc($letter);\n        }\n    }\n\
    \    return join '', @encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels_hash = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\"\
    ,\n        \"u\" => \"y\",\n    );\n    foreach my $char (split //, $message)\
    \ {\n        if (grep {$_ eq $char} @vowels) {\n            $encoded_message .=\
    \ $vowels_hash{$char};\n        } else {\n            $encoded_message .= $char;\n\
    \        }\n    }\n    return uc($encoded_message);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded = \"\";\n    my $vowels = \"aeiouAEIOU\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    for (my $i = 0; $i < length($message); $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        if (index($vowels, $char) != -1) {\n            my $index =\
    \ index($alphabet, $char);\n            $index += 2;\n            $char = substr($alphabet,\
    \ $index, 1);\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $msg = shift;\n    my @msg = split(//, $msg);\n    my @encoded;\n    foreach\
    \ my $char (@msg) {\n        if ($char =~ /[a-z]/) {\n            $char =~ tr/a-z/b-za/;\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $char =~ tr/A-Z/B-ZA/;\n  \
    \      }\n        if ($char =~ /[aeiou]/) {\n            $char =~ tr/aeiou/cegik/;\n\
    \        } elsif ($char =~ /[AEIOU]/) {\n            $char =~ tr/AEIOU/CEGIK/;\n\
    \        }\n        push(@encoded, $char);\n    }\n    return join(\"\", @encoded);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my ($message) = @_;\n    my $encoded_message = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n        \"a\" => \"\
    c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\"\
    ,\n        \"u\" => \"s\",\n    );\n    for my $char (split //, $message) {\n\
    \        if (grep {$_ eq $char} @vowels) {\n            $encoded_message .= $vowel_map{$char};\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return $encoded_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"\
    tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"\
    ),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 1
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_hash = {\n        \"a\" => \"c\",\n        \"e\" => \"\
    g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\"\
    ,\n    };\n    for my $char (split //, $message) {\n        if ($vowels =~ /$char/)\
    \ {\n            $encoded_message .= $vowels_hash->{$char};\n        } else {\n\
    \            $encoded_message .= uc $char;\n        }\n    }\n    return $encoded_message;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
    \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
    ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This\
    \ is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt\
    \ tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234188
- exit_code: 255
  program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n\
    # >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n \
    \   my $message = shift;\n    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my %vowel_hash\
    \ = ();\n    my %alphabet_hash = ();\n    my @vowels = split(//, $vowels);\n \
    \   my @alphabet = split(//, $alphabet);\n    my $i = 0;\n    my $j = 0;\n   \
    \ my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"\
    TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp5how_wg4.pl line 71, at end
    of line

    syntax error at /tmp/tmp5how_wg4.pl line 71, near "$h

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp5how_wg4.pl line 98, at end of
    line

    syntax error at /tmp/tmp5how_wg4.pl line 98, at EOF

    Execution of /tmp/tmp5how_wg4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660234188
