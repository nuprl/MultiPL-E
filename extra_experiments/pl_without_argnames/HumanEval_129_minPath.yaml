name: HumanEval_129_minPath
language: pl
prompt: "# Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n# each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have\
  \ to find the minimum path of length k in the grid. You can start\n# from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n# in other words,\
  \ you can go to cells which share an edge with you current\n# cell.\n# Please note\
  \ that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n\
  # You CANNOT go off the grid.\n# A path A (of length k) is considered less than\
  \ a path B (of length k) if\n# after making the ordered arrays of the values on\
  \ the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A\
  \ is lexicographically less\n# than lst_B, in other words, there exist an integer\
  \ index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j <\
  \ i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n\
  # Return an ordered array of the values on the cells that the minimum path go through.\n\
  # Examples:    \n# >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n\
  # >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\nsub minPath {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n\
  \        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5,\
  \ 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1])) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6,\
  \ 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6,\
  \ 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10,\
  \ 1, 10, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3,\
  \ 10, 11, 16]], 5),[1, 7, 1, 7, 1])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4],\
  \ [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12,\
  \ 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1,\
  \ 6, 1, 6, 1, 6, 1, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1,\
  \ 3, 1, 3, 1, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1,\
  \ 5, 1, 5, 1, 5, 1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1,\
  \ 2, 1, 2, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3,\
  \ 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar\
    \ @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n   \
    \ for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my\
    \ $path = [];\n            my $sum = 0;\n            my $visited = [];\n     \
    \       for my $x (0 .. $n - 1) {\n                for my $y (0 .. $m - 1) {\n\
    \                    $visited->[$x][$y] = 0;\n                }\n            }\n\
    \            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n            if ($sum\
    \ < $min_sum) {\n                $min_sum = $sum;\n                $min_path =\
    \ $path;\n            }\n        }\n    }\n    return $min_path;\n}", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my @path = ();\n    my $min_path = undef;\n    my $min_sum = undef;\n    my\
    \ $min_lst = undef;\n    my $min_path_lst = undef;\n    my $min_path_sum = undef;\n\
    \    my $min_path_lst = undef;\n    my $min_path_lst_sum = undef;\n    my $min_path_lst_lst\
    \ = undef;\n    my $min_path_lst_lst_sum = undef;\n    my $min_path_lst_lst_lst\
    \ = undef;\n    my $min_path_lst_lst_lst_sum = undef;\n    my $min_path_lst_lst_lst_lst\
    \ = undef;\n    my $min_path_lst_lst_lst_lst_sum = undef;\n    my $min_path_lst_lst_lst_lst_lst\
    \ = undef;\n    my $min_path_lst_lst_lst_lst_lst_sum = undef;\n    my $min_path_lst_lst_lst_lst_lst_lst\
    \ = undef;\n    my $min_path_lst_lst_lst_lst_lst_lst_sum = undef;\n    my $min_path_lst_lst_lst_lst_lst_lst_lst\
    \ = undef;\n    my $min_path_lst_lst_lst_lst_lst_lst_lst_sum = undef;\n    my\
    \ $min_path_lst_lst_lst_lst_lst_lst_lst_lst = undef;\n    my $min_path_lst_lst_lst_lst_lst_lst_lst_lst_",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my @path;\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_len = $n * $n +\
    \ 1;\n    my $min_path_lex = $n * $n + 1;\n    my $min_path_lex_sum = $n * $n\
    \ + 1;\n    my $min_path_lex_len = $n * $n + 1;\n    my $min_path_lex_sum_len\
    \ = $n * $n + 1;\n    my $min_path_lex_len_sum = $n * $n + 1;\n    my $min_path_lex_len_sum_len\
    \ = $n * $n + 1;\n    my $min_path_lex_sum_len_len = $n * $n + 1;\n    my $min_path_lex_sum_len_sum\
    \ = $n * $n + 1;\n    my $min_path_lex_len_sum_sum = $n * $n + 1;\n    my $min_path_lex_sum_len_sum_len\
    \ = $n * $n + 1;\n    my $min_path_lex_len_sum_len_sum = $n * $n + 1;\n    my\
    \ $min_path_lex_sum_len_len_sum = $n * $n + 1;\n    my $min_path_lex_len_sum_sum_len\
    \ = $n * $n + 1;\n    my $min_path_lex_sum_len_len_sum_len = $n * $n + 1;\n  \
    \  my $min_path_lex_len_sum_sum_len_len = $n * $n + 1;\n    my $min_path_lex_sum_len_len_sum_len_len\
    \ = $n * $n + 1;\n    my $min_path_lex_len_sum_sum_len_len_len = $n * $n + 1;\n\
    \    my $min_path_lex_sum_len_len_sum_len", "my ($grid, $k) = @_;\n    my $n =\
    \ scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_found = 0;\n    my\
    \ $min_path_sum_found_at = 0;\n    my $min_path_sum_found_at_i = 0;\n    my $min_path_sum_found_at_j\
    \ = 0;\n    my $min_path_sum_found_at_dir = 0;\n    my $min_path_sum_found_at_dir_i\
    \ = 0;\n    my $min_path_sum_found_at_dir_j = 0;\n    my $min_path_sum_found_at_dir_dir\
    \ = 0;\n    my $min_path_sum_found_at_dir_dir_i = 0;\n    my $min_path_sum_found_at_dir_dir_j\
    \ = 0;\n    my $min_path_sum_found_at_dir_dir_dir = 0;\n    my $min_path_sum_found_at_dir_dir_dir_i\
    \ = 0;\n    my $min_path_sum_found_at_dir_dir_dir_j = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir\
    \ = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir_i = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir_j\
    \ = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir_dir = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir_dir_i\
    \ = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir_dir_j = 0;\n    my $min_path_sum_found_at_dir_dir_dir_dir_dir_dir\
    \ = 0", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar\
    \ @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n\
    \    my $min_path_sum_k = $min_path_sum;\n    my $min_path_sum_k_1 = $min_path_sum;\n\
    \    my $min_path_sum_k_2 = $min_path_sum;\n    my $min_path_sum_k_3 = $min_path_sum;\n\
    \    my $min_path_sum_k_4 = $min_path_sum;\n    my $min_path_sum_k_5 = $min_path_sum;\n\
    \    my $min_path_sum_k_6 = $min_path_sum;\n    my $min_path_sum_k_7 = $min_path_sum;\n\
    \    my $min_path_sum_k_8 = $min_path_sum;\n    my $min_path_sum_k_9 = $min_path_sum;\n\
    \    my $min_path_sum_k_10 = $min_path_sum;\n    my $min_path_sum_k_11 = $min_path_sum;\n\
    \    my $min_path_sum_k_12 = $min_path_sum;\n    my $min_path_sum_k_13 = $min_path_sum;\n\
    \    my $min_path_sum_k_14 = $min_path_sum;\n    my $min_path_sum_k_15 = $min_path_sum;\n\
    \    my $min_path_sum_k_16 = $min_path_sum;\n    my $min_path_sum_k_17 = $min_path_sum;\n\
    \    my $min_path_sum_k_18 = $min_path_sum;\n    my $min_path_sum_k_19 = $min_path_sum;\n\
    \    my $min_path_sum_k_20 = $min_path_sum;\n    my $min", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $minPath\
    \ = [];\n    my $minSum = $n * $n * $k;\n    my $minPathSum = $minSum;\n    my\
    \ $minPathSum2 = $minSum;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = 0; $j < $m; $j++) {\n            my $path = [];\n            my $sum =\
    \ 0;\n            my $sum2 = 0;\n            my $pathSum = 0;\n            my\
    \ $pathSum2 = 0;\n            my $path2 = [];\n            my $path3 = [];\n \
    \           my $path4 = [];\n            my $path5 = [];\n            my $path6\
    \ = [];\n            my $path7 = [];\n            my $path8 = [];\n          \
    \  my $path9 = [];\n            my $path10 = [];\n            my $path11 = [];\n\
    \            my $path12 = [];\n            my $path13 = [];\n            my $path14\
    \ = [];\n            my $path15 = [];\n            my $path16 = [];\n        \
    \    my $path17 = [];\n            my $path18 = [];\n            my $path19 =\
    \ [];\n            my $path20 = [];\n            my $path21 = [];\n          \
    \  my $path22 = [];\n            my $path23 = [];\n            my $path24 = [];\n\
    \            my $path25 = [];\n            my $path26 = [];\n            my $path27\
    \ = [];\n            my $path28 = [];\n            my $path29 = [];\n        \
    \    my $path30 = [];\n            my $path31 = [];\n            my $path32 =\
    \ [];\n            my $path33 = [];\n            my $path34 = [];\n          \
    \  my $path35 = [];\n            my $path36 = [];\n            my $path37 = [];\n\
    \            my $path38 = [];\n            my $path39 = [];\n            my $path40\
    \ = [];\n            my $path41 = [];\n            my $path42 = [];\n        \
    \    my $path43 = [];\n            my", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $minPath = [];\n    my $minValue\
    \ = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            my $path = [];\n            my $value = 0;\n            findMinPath($grid,\
    \ $i, $j, $k, $path, $value);\n            if ($value < $minValue) {\n       \
    \         $minValue = $value;\n                $minPath = $path;\n           \
    \ }\n        }\n    }\n    return $minPath;\n}", "my ($grid, $k) = @_;\n    my\
    \ $n = scalar @$grid;\n    my @path;\n    my $min_path;\n    my $min_value = $n\
    \ * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n\
    \            if ($grid->[$i][$j] < $min_value) {\n                $min_value =\
    \ $grid->[$i][$j];\n                $min_path = [$i, $j];\n            }\n   \
    \     }\n    }\n    my $visited = {};\n    my $min_path_value = $min_value;\n\
    \    my $min_path_length = 1;\n    my $min_path_index = 0;\n    my $min_path_length_index\
    \ = 0;\n    my $min_path_length_value = $min_value;\n    my $min_path_length_value_index\
    \ = 0;\n    my $min_path_length_value_length = 1;\n    my $min_path_length_value_length_index\
    \ = 0;\n    my $min_path_length_value_length_value = $min_value;\n    my $min_path_length_value_length_value_index\
    \ = 0;\n    my $min_path_length_value_length_value_length = 1;\n    my $min_path_length_value_length_value_length_index\
    \ = 0;\n    my $min_path_length_value_length_value_length_value = $min_value;\n\
    \    my $min_path_length_value_length_value_length_value_index = 0;\n    my $min_path_length_value_length_value_length_value_length\
    \ = 1;\n    my $min_path_length_value_length_value_length_value_length_index =\
    \ 0;\n    my $min_path_length_value_length_value_length_value_length_value = $min_value;\n\
    \    my $min_path_length_value_length_value_length_value_length_value_index =\
    \ 0;", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_value = $n * $n + 1;\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n \
    \           my $value = 0;\n            my $visited = {};\n            my $queue\
    \ = [[$i, $j]];\n            while (@$queue) {\n                my $cell = shift\
    \ @$queue;\n                my ($x, $y) = @$cell;\n                next if $visited->{\"\
    $x,$y\"};\n                $visited->{\"$x,$y\"} = 1;\n                push @$path,\
    \ $grid->[$x][$y];\n                $value += $grid->[$x][$y];\n             \
    \   if (@$path == $k) {\n                    if ($value < $min_value) {\n    \
    \                    $min_value = $value;\n                        $min_path =\
    \ $path;\n                    }\n                    last;\n                }\n\
    \                for my $dx (-1, 0, 1) {\n                    for my $dy (-1,\
    \ 0, 1) {\n                        next if $dx == 0 && $dy == 0;\n           \
    \             my $nx = $x + $dx;\n                        my $ny = $y + $dy;\n\
    \                        next if $nx < 0 || $nx >= $n || $ny < 0 || $ny >= $m;\n\
    \                        push @$queue, [$nx, $ny];\n                    }\n  \
    \              }\n            }\n        }\n    }\n    return $min_path;\n}",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum\
    \ = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            my $path = [];\n            my $path_sum = 0;\n          \
    \  my $path_len = 0;\n            my $visited = [];\n            for my $i (0\
    \ .. $n - 1) {\n                for my $j (0 .. $m - 1) {\n                  \
    \  $visited->[$i][$j] = 0;\n                }\n            }\n            $visited->[$i][$j]\
    \ = 1;\n            push @$path, $grid->[$i][$j];\n            $path_sum += $grid->[$i][$j];\n\
    \            $path_len++;\n            my $res = dfs($grid, $i, $j, $k, $visited,\
    \ $path, $path_sum, $path_len);\n            if ($res->[0] < $min_sum) {\n   \
    \             $min_sum = $res->[0];\n                $min_path = $res->[1];\n\
    \                $min_path_sum = $res->[2];\n            } elsif ($res->[0] ==\
    \ $min_sum) {\n                if ($res->[2] < $min_path_sum) {\n            \
    \        $min_path = $res->[1];\n                    $min_path_sum = $res->[2];\n\
    \                }\n            }\n        }\n    }\n    return $min_path;\n}",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $sum = 0;\n            dfs($grid, $i, $j, $k, $path, $sum);\n    \
    \        if ($sum < $min_sum) {\n                $min_sum = $sum;\n          \
    \      $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
    }", "my ($grid, $k) = @_;\n    my @path;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $visited = {};\n    my $min_path = [];\n    my $min_path_sum = $n * $n\
    \ * $k;\n    my $min_path_sum_found = 0;\n    my $min_path_found = 0;\n    my\
    \ $min_path_sum_found_at = 0;\n    my $min_path_found_at = 0;\n    my $min_path_sum_found_at_i\
    \ = 0;\n    my $min_path_found_at_i = 0;\n    my $min_path_sum_found_at_j = 0;\n\
    \    my $min_path_found_at_j = 0;\n    my $min_path_sum_found_at_k = 0;\n    my\
    \ $min_path_found_at_k = 0;\n    my $min_path_sum_found_at_l = 0;\n    my $min_path_found_at_l\
    \ = 0;\n    my $min_path_sum_found_at_m = 0;\n    my $min_path_found_at_m = 0;\n\
    \    my $min_path_sum_found_at_n = 0;\n    my $min_path_found_at_n = 0;\n    my\
    \ $min_path_sum_found_at_o = 0;\n    my $min_path_found_at_o = 0;\n    my $min_path_sum_found_at_p\
    \ = 0;\n    my $min_path_found_at_p = 0;\n    my $min_path_sum_found_at_q = 0;\n\
    \    my $min_path_found_at_q = 0;\n    my $min_path_sum_found_at_r = 0;\n    my\
    \ $min_path_found_at_r = 0;\n    my $min_path_sum_found_at_s = 0;\n    my $min_path_found_at_s\
    \ = 0;\n   ", "my ($grid, $k) = @_;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $min_path = [$min];\n    my $min_paths =\
    \ {};\n    my $visited = {};\n    my $queue = [];\n    my $paths = {};\n    my\
    \ $path = [];\n    my $path_key = '';\n    my $path_key_min = '';\n    my $path_key_min_prev\
    \ = '';\n    my $path_key_prev = '';\n    my $path_key_prev_prev = '';\n    my\
    \ $path_key_prev_prev_prev = '';\n    my $path_key_prev_prev_prev_prev = '';\n\
    \    my $path_key_prev_prev_prev_prev_prev = '';\n    my $path_key_prev_prev_prev_prev_prev_prev\
    \ = '';\n    my $path_key_prev_prev_prev_prev_prev_prev_prev = '';\n    my $path_key_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = '';\n    my $path_key_prev_prev_prev_prev_prev_prev_prev_prev_prev = '';\n\
    \    my $path_key_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = '';\n  \
    \  my $path_key_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = '';\n\
    \    my $path_key_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = '';\n    my $path_key_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = '';\n    my $path_key_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = '';\n    my $path_key_prev_prev_prev_prev_prev_prev_", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $minPath\
    \ = [];\n    my $minSum = $n * $n + 1;\n    my $minPathSum = $minSum;\n    my\
    \ $minPathSum2 = $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n  \
    \  my $minPathSum3 = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPath4\
    \ = [];\n    my $minPath5 = [];\n    my $minPathSum5 = $minSum;\n    my $minPathSum6\
    \ = $minSum;\n    my $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7\
    \ = $minSum;\n    my $minPathSum8 = $minSum;\n    my $minPath8 = [];\n    my $minPath9\
    \ = [];\n    my $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n   \
    \ my $minPath10 = [];\n    my $minPath11 = [];\n    my $minPathSum11 = $minSum;\n\
    \    my $minPathSum12 = $minSum;\n    my $minPath12 = [];\n    my $minPath13 =\
    \ [];\n    my $minPathSum13 = $minSum;\n    my $minPathSum14 = $minSum;\n    my\
    \ $minPath14 = [];\n    my $minPath15 = [];\n    my $minPathSum15 = $minSum;\n\
    \    my $minPathSum16 = $minSum;\n    my $minPath16 = [];\n    my $minPath17 =\
    \ [];\n    my $minPathSum17 = $minSum;\n    my $minPathSum18 = $minSum;\n    my\
    \ $minPath18 = [];\n    my $minPath19 = [];\n    my $minPathSum19 = $minSum;\n\
    \    my $minPathSum20 = $minSum;\n    my $minPath20 = [];\n    my $minPath21 =\
    \ [];\n    my $minPathSum21 =", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $minPath;\n    my $minPathSum = $n\
    \ * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            my $path = _minPath($grid, $k, $i, $j, $n, $m);\n            my $pathSum\
    \ = sum(@$path);\n            if ($pathSum < $minPathSum) {\n                $minPath\
    \ = $path;\n                $minPathSum = $pathSum;\n            }\n        }\n\
    \    }\n    return $minPath;\n}", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum =\
    \ $n * $n + 1;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_idx = -1;\n\
    \    my $min_path_sum_jdx = -1;\n    my $min_path_sum_dir = -1;\n    for (my $i\
    \ = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n          \
    \  my $path = [];\n            my $sum = 0;\n            for (my $dir = 0; $dir\
    \ < 4; $dir++) {\n                my $path_sum = 0;\n                my $path_sum_idx\
    \ = -1;\n                my $path_sum_jdx = -1;\n                my $path_sum_dir\
    \ = -1;\n                my $path_sum_path = [];\n                my $path_sum_grid\
    \ = [];\n                for (my $ii = 0; $ii < $n; $ii++) {\n               \
    \     for (my $jj = 0; $jj < $m; $jj++) {\n                        $path_sum_grid->[$ii][$jj]\
    \ = $grid->[$ii][$jj];\n                    }\n                }\n           \
    \     my $path_sum_i = $i;\n                my $path_sum_j = $j;\n           \
    \     for (my $l = 0; $l < $k; $l++) {\n                    $path_sum += $path_sum_grid->[$path_sum_i][$path_sum_j];\n\
    \                    $path_sum_grid->[$path_sum_i][$path_sum_j] = 0;\n       \
    \             $path_sum_path->[$l] = $path_sum_grid->[$path_sum_i][$path_sum_j];\n\
    \                    if ($dir == 0) {\n                        $path_sum_i--;\n\
    \                    } elsif ($", "my ($grid, $k) = @_;\n    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum = $n\
    \ * $m * $k;\n    my $min_path_sum_found = 0;\n    my $visited = [];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $path = [];\n    my $path_sum = 0;\n    my $path_sum_found\
    \ = 0;\n    my $path_length = 0;\n    my $path_length_found = 0;\n    my $path_length_max\
    \ = 0;\n    my $path_length_max_found = 0;\n    my $path_length_max_found_sum\
    \ = 0;\n    my $path_length_max_found_sum_found = 0;\n    my $path_length_max_found_sum_found_length\
    \ = 0;\n    my $path_length_max_found_sum_found_length_found = 0;\n    my $path_length_max_found_sum_found_length_found_sum\
    \ = 0;\n    my $path_length_max_found_sum_found_length_found_sum_found = 0;\n\
    \    my $path_length_max_found_sum_found_length_found_sum_found_length = 0;\n\
    \    my $path_length_max_found_sum_found_length_found_sum_found_length_found =\
    \ 0;\n    my $path_length_max_found_sum_found_length_found_sum_found_length_found_sum\
    \ = 0;\n    my $path_length_max_found_sum_found_length_found_sum_found_length_found_sum_found\
    \ = 0;\n    my $path_length_max_found_sum_found_length_found_sum_found_length_found_sum_found_length\
    \ = 0;\n    my $path_length_max_", "my ($grid, $k) = @_;\n    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum = $n\
    \ * $m * $k;\n    my $min_path_sum_grid = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $min_path_sum_grid->[$i]->[$j]\
    \ = $n * $m * $k;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            my $path = [];\n            my $path_sum\
    \ = 0;\n            my $path_sum_grid = [];\n            for my $i (0 .. $n -\
    \ 1) {\n                for my $j (0 .. $m - 1) {\n                    $path_sum_grid->[$i]->[$j]\
    \ = $n * $m * $k;\n                }\n            }\n            my $visited =\
    \ [];\n            for my $i (0 .. $n - 1) {\n                for my $j (0 ..\
    \ $m - 1) {\n                    $visited->[$i]->[$j] = 0;\n                }\n\
    \            }\n            find_path($grid, $i, $j, $k, $path, $path_sum, $path_sum_grid,\
    \ $visited, $min_path, $min_path_sum, $min_path_sum_grid);\n        }\n    }\n\
    \    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min = [map { [map { [0, []] } (0 ..\
    \ $m - 1)] } (0 .. $n - 1)];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            my $val = $grid->[$i][$j];\n            my $path\
    \ = [$val];\n            if ($i > 0) {\n                my $prev = $min->[$i -\
    \ 1][$j];\n                if ($prev->[0] < $val || ($prev->[0] == $val && $prev->[1]\
    \ cmp $path < 0)) {\n                    $min->[$i][$j] = [$prev->[0], $prev->[1]];\n\
    \                }\n            }\n            if ($j > 0) {\n               \
    \ my $prev = $min->[$i][$j - 1];\n                if ($prev->[0] < $val || ($prev->[0]\
    \ == $val && $prev->[1] cmp $path < 0)) {\n                    $min->[$i][$j]\
    \ = [$prev->[0], $prev->[1]];\n                }\n            }\n            if\
    \ ($min->[$i][$j][0] == 0) {\n                $min->[$i][$j] = [$val, $path];\n\
    \            }\n        }\n    }\n    my $path = $min->[$n - 1][$m - 1][1];\n\
    \    while ($k > 1) {\n        my $val = $path->[-1];\n        my $i = $n - 1;\n\
    \        my $j = $m - 1;\n        while ($i > 0 && $min->[$i - 1][$j][0] >= $val)\
    \ {\n            $i--;\n        }\n        while ($j > 0 && $min->[$i][$j - 1][0]\
    \ >= $val) {\n            $j--;\n       ", "my ($grid, $k) = @_;\n    my $n =\
    \ scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min = [];\n    my\
    \ $visited = {};\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n   \
    \ my $min_path_sum = 0;\n    my $min_path_len = 0;\n    my $min_path_idx = 0;\n\
    \    my $min_path_idx_sum = 0;\n    my $min_path_idx_len = 0;\n    my $min_path_idx_sum_len\
    \ = 0;\n    my $min_path_idx_sum_len_idx = 0;\n    my $min_path_idx_sum_len_idx_sum\
    \ = 0;\n    my $min_path_idx_sum_len_idx_sum_len = 0;\n    my $min_path_idx_sum_len_idx_sum_len_idx\
    \ = 0;\n    my $min_path_idx_sum_len_idx_sum_len_idx_sum = 0;\n    my $min_path_idx_sum_len_idx_sum_len_idx_sum_len\
    \ = 0;\n    my $min_path_idx_sum_len_idx_sum_len_idx_sum_len_idx = 0;\n    my\
    \ $min_path_idx_sum_len_idx_sum_len_idx_sum_len_idx_sum = 0;\n    my $min_path_idx_sum_len_idx_sum_len_idx_sum_len_idx_sum_len\
    \ = 0;\n    my $min_path_idx_sum_len_idx_sum_len_idx_sum_len_idx_sum_len_idx =\
    \ 0;\n    my $min_path_idx_sum_len_idx_sum_len_idx_sum_len_idx_sum_len_idx_sum\
    \ = 0;\n", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar\
    \ @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $path_sum = 0;\n            my $visited = {};\n\
    \            my $found = dfs($grid, $i, $j, $k, $path, $path_sum, $visited);\n\
    \            if ($found && $path_sum < $min_path_sum) {\n                $min_path\
    \ = $path;\n                $min_path_sum = $path_sum;\n            }\n      \
    \  }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n    my $minPath2 = [];\n\
    \    my $minPath3 = [];\n    my $minPathSum3 = $n * $n + 1;\n    my $minPath4\
    \ = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum5\
    \ = $n * $n + 1;\n    my $minPath6 = [];\n    my $minPathSum6 = $n * $n + 1;\n\
    \    my $minPath7 = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath8\
    \ = [];\n    my $minPathSum8 = $n * $n + 1;\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n  \
    \          my $pathSum = 0;\n            my $path2 = [];\n            my $pathSum2\
    \ = 0;\n            my $path3 = [];\n            my $pathSum3 = 0;\n         \
    \   my $path4 = [];\n            my $pathSum4 = 0;\n            my $path5 = [];\n\
    \            my $pathSum5 = 0;\n            my $path6 = [];\n            my $pathSum6\
    \ = 0;\n            my $path7 = [];\n            my $pathSum7 = 0;\n         \
    \   my $path8 = [];\n            my $pathSum8 = 0;\n            my $paths = [$path,\
    \ $path2, $path3, $path4, $path5, $path6, $path7, $path8];\n            my $pathSums\
    \ = [$pathSum, $pathSum2, $pathSum3, $pathSum4, $pathSum5, $pathSum6, $pathSum7,\
    \ $", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
    \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n   \
    \     }\n    }\n    my $minPath = [];\n    for my $i (0..$n-1) {\n        for\
    \ my $j (0..$m-1) {\n            my $path = [$grid->[$i][$j]];\n            my\
    \ $visited = {};\n            $visited->{$i}{$j} = 1;\n            minPathHelper($grid,\
    \ $i, $j, $k-1, $path, $visited);\n            if (scalar @$path < scalar @$minPath)\
    \ {\n                $minPath = $path;\n            } elsif (scalar @$path ==\
    \ scalar @$minPath) {\n                $minPath = $path if $path->[0] < $minPath->[0];\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "my ($grid, $k) =\
    \ @_;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_sum = $n * $m * $k;\n    my $min_path_sum = $min_sum;\n    my $min_path_len\
    \ = $k;\n    my $min_path_len_sum = $min_sum;\n    my $min_path_len_sum_len =\
    \ $k;\n    my $min_path_len_sum_len_sum = $min_sum;\n    my $min_path_len_sum_len_sum_len\
    \ = $k;\n    my $min_path_len_sum_len_sum_len_sum = $min_sum;\n    my $min_path_len_sum_len_sum_len_sum_len\
    \ = $k;\n    my $min_path_len_sum_len_sum_len_sum_len_sum = $min_sum;\n    my\
    \ $min_path_len_sum_len_sum_len_sum_len_sum_len = $k;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum\
    \ = $min_sum;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len =\
    \ $k;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum = $min_sum;\n\
    \    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len = $k;\n\
    \    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum = $min_sum;\n\
    \    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len\
    \ = $k;\n    my $min_path_len_sum_len_sum", "my ($grid, $k) = @_;\n    my $n =\
    \ scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_sum = $n * $n * $k;\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum = $grid->[$i][$j];\n\
    \            my $path_sum = $grid->[$i][$j];\n            my $path_len = 1;\n\
    \            my $path_end = [$i, $j];\n            while ($path_len < $k) {\n\
    \                my $min_path_sum = $n * $n * $k;\n                my $min_path_end\
    \ = [];\n                for my $x ($i - 1 .. $i + 1) {\n                    for\
    \ my $y ($j - 1 .. $j + 1) {\n                        if ($x >= 0 && $x < $n &&\
    \ $y >= 0 && $y < $m && $x != $i && $y != $j) {\n                            my\
    \ $path_sum = $sum + $grid->[$x][$y];\n                            if ($path_sum\
    \ < $min_path_sum) {\n                                $min_path_sum = $path_sum;\n\
    \                                $min_path_end = [$x, $y];\n                 \
    \           }\n                        }\n                    }\n            \
    \    }\n                $sum = $min_path_sum;\n                $path_end = $min_path_end;\n\
    \                $path_len++;\n            }\n            if ($sum < $min_sum)\
    \ {\n                $min_sum = $sum;\n                $min_path = $path;\n  \
    \          }\n        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n     \
    \   for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum\
    \ = 0;\n            my $visited = [];\n            for my $x (0 .. $n - 1) {\n\
    \                for my $y (0 .. $m - 1) {\n                    $visited->[$x][$y]\
    \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n            if ($sum\
    \ < $min_sum) {\n                $min_sum = $sum;\n                $min_path =\
    \ $path;\n            }\n        }\n    }\n    return $min_path;\n}", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k\
    \ = $min_path_sum * $k;\n    my $min_path_sum_k_minus_1 = $min_path_sum_k - 1;\n\
    \    my $min_path_sum_k_minus_2 = $min_path_sum_k - 2;\n    my $min_path_sum_k_minus_3\
    \ = $min_path_sum_k - 3;\n    my $min_path_sum_k_minus_4 = $min_path_sum_k - 4;\n\
    \    my $min_path_sum_k_minus_5 = $min_path_sum_k - 5;\n    my $min_path_sum_k_minus_6\
    \ = $min_path_sum_k - 6;\n    my $min_path_sum_k_minus_7 = $min_path_sum_k - 7;\n\
    \    my $min_path_sum_k_minus_8 = $min_path_sum_k - 8;\n    my $min_path_sum_k_minus_9\
    \ = $min_path_sum_k - 9;\n    my $min_path_sum_k_minus_10 = $min_path_sum_k -\
    \ 10;\n    my $min_path_sum_k_minus_11 = $min_path_sum_k - 11;\n    my $min_path_sum_k_minus_12\
    \ = $min_path_sum_k - 12;\n    my $min_path_sum_k_minus_13 = $min_path_sum_k -\
    \ 13;\n    my $min_path_sum_k_minus_14 = $min_path_sum_k - 14;\n    my $min_path_sum_k_minus_15\
    \ = $min_path_sum_k - 15;\n    my $min_path_sum_k_minus_16 = $", "my ($grid, $k)\
    \ = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my\
    \ $min_path = [];\n    my $min_sum = $n * $n * $k;\n    my $min_path_sum = $min_sum;\n\
    \    my $min_path_sum_index = 0;\n    my $path = [];\n    my $path_sum = 0;\n\
    \    my $path_sum_index = 0;\n    my $visited = [];\n    for (my $i = 0; $i <\
    \ $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $dfs = sub {\n        my ($i, $j, $k) = @_;\n\
    \        if ($k == 0) {\n            if ($path_sum < $min_path_sum) {\n      \
    \          $min_path_sum = $path_sum;\n                $min_path_sum_index = $path_sum_index;\n\
    \            }\n            return;\n        }\n        if ($i < 0 || $i >= $n\
    \ || $j < 0 || $j >= $m) {\n            return;\n        }\n        if ($visited->[$i][$j])\
    \ {\n            return;\n        }\n        $visited->[$i][$j] = 1;\n       \
    \ $path->[$path_sum_index] = $grid->[$i][$j];\n        $path_sum += $grid->[$i][$j];\n\
    \        $path_sum_index++;\n        $dfs->($i - 1, $j, $k - 1);\n        $dfs->($i\
    \ + 1, $j, $k - 1);\n        $dfs->($i, $j - 1, $k - 1);\n        $dfs->($i, $j\
    \ + 1, $k - 1);\n        $visited->[$i][$j] = 0;\n        $path_sum -= $grid->[$",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_jdx = 0;\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $sum = 0;\n            my $path_sum = 0;\n \
    \           my $path_sum_idx = 0;\n            my $path_sum_jdx = 0;\n       \
    \     my $path_sum_k = 0;\n            my $path_sum_l = 0;\n            my $path_sum_m\
    \ = 0;\n            my $path_sum_n = 0;\n            my $path_sum_o = 0;\n   \
    \         my $path_sum_p = 0;\n            my $path_sum_q = 0;\n            my\
    \ $path_sum_r = 0;\n            my $path_sum_s = 0;\n            my $path_sum_t\
    \ = 0;\n            my $path_sum_u = 0;\n            my $path_sum_v = 0;\n   \
    \         my $path_sum_w = 0;\n            my $path_sum_x = 0;\n            my\
    \ $path_sum_y = 0;\n            my $path_sum_z = 0;\n            my $path_sum_aa\
    \ = 0;\n            my $path_sum_bb = 0;\n            my $path_sum_cc = 0;\n \
    \           my $path_sum_dd = 0;\n            my $path_sum_ee = 0;\n         \
    \   my $path_sum_ff = 0;\n            my $path_sum_gg = 0;\n            my $path_sum_hh\
    \ = 0;\n            my $path_sum_ii = 0;\n            my $path_sum_jj = 0;\n \
    \           my $path", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n   \
    \ my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count = 0;\n    my $min_path_sum_count_max\
    \ = 0;\n    my $min_path_sum_count_max_count = 0;\n    my $min_path_sum_count_max_count_max\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count = 0;\n    my $min_path_sum_count_max_count_max_count_max\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count = 0;\n    my\
    \ $min_path_sum_count_max_count_max_count_max_count_max = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min = $grid->[0][0];\n    my $min_path = [$min];\n    my $min_paths =\
    \ {};\n    my $paths = {};\n    my $path = [$min];\n    my $paths_to_check = [$path];\n\
    \    my $paths_to_check_next = [];\n    my $paths_to_check_next_next = [];\n \
    \   my $paths_to_check_next_next_next = [];\n    my $paths_to_check_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next = [];\n    my $paths_to_check_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next = [];\n   \
    \ my $paths_to_check_next_next_next_next_next_next_next_next = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = [];\n    my $paths_to_check_next_next_next_next_next_next", "my ($grid, $k)\
    \ = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my\
    \ $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0;\
    \ $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n  \
    \  my $min = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0;\
    \ $j < $m; $j++) {\n            $min->[$i][$j] = [];\n        }\n    }\n    for\
    \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n   \
    \         if ($visited->[$i][$j] == 0) {\n                $visited->[$i][$j] =\
    \ 1;\n                my $path = [$grid->[$i][$j]];\n                my $min_path\
    \ = dfs($grid, $visited, $min, $i, $j, $path, $k);\n                $min->[$i][$j]\
    \ = $min_path;\n            }\n        }\n    }\n    my $min_path = $min->[0][0];\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++)\
    \ {\n            if (compare($min_path, $min->[$i][$j]) > 0) {\n             \
    \   $min_path = $min->[$i][$j];\n            }\n        }\n    }\n    return $min_path;\n\
    }", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $sum = 0;\n            my $visited = [];\n            for my $i (0\
    \ .. $n - 1) {\n                for my $j (0 .. $m - 1) {\n                  \
    \  $visited->[$i][$j] = 0;\n                }\n            }\n            dfs($grid,\
    \ $i, $j, $k, $path, $sum, $visited);\n            if ($sum < $min_sum) {\n  \
    \              $min_sum = $sum;\n                $min_path = $path;\n        \
    \    }\n        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n \
    \   my $n = scalar @$grid;\n    my @path = ();\n    my $min_path = [];\n    my\
    \ $min_sum = $n * $n + 1;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_index\
    \ = -1;\n    my $min_path_sum_index_sum = $min_sum;\n    my $min_path_sum_index_sum_index\
    \ = -1;\n    my $min_path_sum_index_sum_index_sum = $min_sum;\n    my $min_path_sum_index_sum_index_sum_index\
    \ = -1;\n    my $min_path_sum_index_sum_index_sum_index_sum = $min_sum;\n    my\
    \ $min_path_sum_index_sum_index_sum_index_sum_index = -1;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum\
    \ = $min_sum;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = -1;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = $min_sum;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = -1;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = $min_sum;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = -1;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = $min_sum;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSumIndex\
    \ = 0;\n    my $minPathSumIndexes = [];\n    my $minPathSumIndexesIndex = 0;\n\
    \    my $minPathSumIndexesIndexes = [];\n    my $minPathSumIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexes = [];\n    my $minPathSumIndexesIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexesIndexes = [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexesIndexesIndexes = [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexes = [];\n \
    \   my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n    my\
    \ $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexes = [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexesIndexes", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min =\
    \ $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n  \
    \      for my $j (0..$m-1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
    \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n   \
    \     }\n    }\n    my $min_path = [];\n    my $min_sum = $max * $k;\n    for\
    \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path = [];\n\
    \            my $sum = 0;\n            my $visited = [];\n            for my $x\
    \ (0..$n-1) {\n                for my $y (0..$m-1) {\n                    $visited->[$x][$y]\
    \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            dfs($grid, $i, $j, $k, $path, $sum, $visited, $min_path, $min_sum);\n\
    \        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n\
    \ = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_sum = $n * $n * $k;\n    my $min_path_sum = $min_sum;\n    my $min_path_hash\
    \ = {};\n    my $min_path_hash_sum = $min_sum;\n    my $min_path_hash_sum_count\
    \ = 0;\n    my $min_path_hash_sum_count_sum = $min_sum;\n    my $min_path_hash_sum_count_sum_count\
    \ = 0;\n    my $min_path_hash_sum_count_sum_count_sum = $min_sum;\n    my $min_path_hash_sum_count_sum_count_sum_count\
    \ = 0;\n    my $min_path_hash_sum_count_sum_count_sum_count_sum = $min_sum;\n\
    \    my $min_path_hash_sum_count_sum_count_sum_count_sum_count = 0;\n    my $min_path_hash_sum_count_sum_count_sum_count_sum_count_sum\
    \ = $min_sum;\n    my $min_path_hash_sum_count_sum_count_sum_count_sum_count_sum_count\
    \ = 0;\n    my $min_path_hash_sum_count_sum_count_sum_count_sum_count_sum_count_sum\
    \ = $min_sum;\n    my $min_path_hash_sum_count_sum_count_sum_count_sum_count_sum_count_sum_count\
    \ = 0;\n    my $min_path_hash_sum_count_sum_count_sum_count_sum_count_sum_count_sum_count_sum\
    \ = $min_sum;\n    my $min_path_hash_sum_count_sum_count_sum_count_sum_count_sum_count_sum_count_sum_count\
    \ = 0;\n    my $min_path_hash_sum_count_sum_count_sum", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_count = 0;\n\
    \    my $min_path_sum_count_max = 0;\n    my $min_path_sum_count_max_count = 0;\n\
    \    my $min_path_sum_count_max_count_max = 0;\n    my $min_path_sum_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max = 0;\n    my $min_path_sum_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max = 0;\n  \
    \  my $min_path_sum_count_max_count_max_count_max_count_max_count = 0;\n    my\
    \ $min_path_sum_count_max_count_max_count_max_count_max_count_max = 0;\n    my\
    \ $min_path_sum_count_max_count_max_count_max_count_max_count_max_count = 0;\n\
    \    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_sum = $n * $n * $k;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $sum = 0;\n            dfs($grid, $i, $j, $k, $path, $sum);\n    \
    \        if ($sum < $min_sum) {\n                $min_sum = $sum;\n          \
    \      $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
    }", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my @path;\n    my $min = [map {[map {[$_]} (0..$n-1)]} (0..$m-1)];\n    my\
    \ $min_path = [map {[map {[$_]} (0..$n-1)]} (0..$m-1)];\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            $min->[$i][$j][0] = $grid->[$i][$j];\n\
    \            $min_path->[$i][$j][0] = [$grid->[$i][$j]];\n        }\n    }\n \
    \   for my $l (1..$k-1) {\n        for my $i (0..$n-1) {\n            for my $j\
    \ (0..$m-1) {\n                my $min_val = $min->[$i][$j][$l-1];\n         \
    \       my $min_path_val = $min_path->[$i][$j][$l-1];\n                if ($i\
    \ > 0) {\n                    my $val = $min->[$i-1][$j][$l-1];\n            \
    \        my $path_val = $min_path->[$i-1][$j][$l-1];\n                    if ($val\
    \ < $min_val) {\n                        $min_val = $val;\n                  \
    \      $min_path_val = $path_val;\n                    }\n                   \
    \ elsif ($val == $min_val) {\n                        if ($path_val lt $min_path_val)\
    \ {\n                            $min_path_val = $path_val;\n                \
    \        }\n                    }\n                }\n                if ($i <\
    \ $n-1) {\n                    my $val = $min->[$i+1][$j][$l-1];\n           \
    \         my $path_val = $min_path->[$i+1][$j][", "my ($grid, $k) = @_;\n    my\
    \ $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_count = 0;\n    my\
    \ $min_path_sum_count_max = 0;\n    my $min_path_sum_count_max_count = 0;\n  \
    \  my $min_path_sum_count_max_count_max = 0;\n    my $min_path_sum_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max = 0;\n    my $min_path_sum_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max = 0;\n  \
    \  my $min_path_sum_count_max_count_max_count_max_count_max_count = 0;\n    my\
    \ $min_path_sum_count_max_count_max_count_max_count_max_count_max = 0;\n    my\
    \ $min_path_sum_count_max_count_max_count_max_count_max_count_max_count = 0;\n\
    \    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    my $min_path_sum_count_max_count_max_count_max_count_", "my ($grid,\
    \ $k) = @_;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $m * $k;\n    my $min_path_sum = $min_sum;\n \
    \   my $min_path_sum_idx = 0;\n    my $min_path_sum_idx_sum = 0;\n    my $min_path_sum_idx_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum = 0;\n  \
    \  my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum\
    \ = 0;", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar\
    \ @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $min_path = [$min];\n \
    \   my $min_paths = [[$min]];\n    my $visited = {};\n    my $queue = [{x => 0,\
    \ y => 0, path => [$min]}];\n    while (scalar @$queue) {\n        my $node =\
    \ shift @$queue;\n        my $x = $node->{x};\n        my $y = $node->{y};\n \
    \       my $path = $node->{path};\n        my $key = \"$x,$y\";\n        if (scalar\
    \ @$path == $k) {\n            if ($path->[0] < $min) {\n                $min\
    \ = $path->[0];\n                $min_path = $path;\n            }\n         \
    \   next;\n        }\n        next if $visited->{$key};\n        $visited->{$key}\
    \ = 1;\n        for my $i (-1, 0, 1) {\n            for my $j (-1, 0, 1) {\n \
    \               next if $i == 0 and $j == 0;\n                my $x1 = $x + $i;\n\
    \                my $y1 = $y + $j;\n                next if $x1 < 0 or $x1 >=\
    \ $n or $y1 < 0 or $y1 >= $m;\n                my $key1 = \"$x1,$y1\";\n     \
    \           next if $visited->{$key1};\n                my $path1 = [@$path, $grid->[$x1][$y1]];\n\
    \                push @$queue, {x => $x1, y => $y1, path => $path1};\n       \
    \     }\n        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $visited\
    \ = {};\n    my $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my\
    \ $min_path_sum_found = 0;\n    my $min_path_found = 0;\n    my $min_path_sum_found_at\
    \ = 0;\n    my $min_path_found_at = 0;\n    my $path = [];\n    my $path_sum =\
    \ 0;\n    my $path_sum_found = 0;\n    my $path_found = 0;\n    my $path_sum_found_at\
    \ = 0;\n    my $path_found_at = 0;\n    my $i = 0;\n    my $j = 0;\n    my $x\
    \ = 0;\n    my $y = 0;\n    my $nx = 0;\n    my $ny = 0;\n    my $value = 0;\n\
    \    my $neighbors = [];\n    my $neighbor = {};\n    my $neighbor_value = 0;\n\
    \    my $neighbor_x = 0;\n    my $neighbor_y = 0;\n    my $neighbor_visited =\
    \ 0;\n    my $neighbor_visited_at = 0;\n    my $neighbor_visited_at_index = 0;\n\
    \    my $neighbor_visited_at_value = 0;\n    my $neighbor_visited_at_value_index\
    \ = 0;\n    my $neighbor_visited_at_value_index_found = 0;\n    my $neighbor_visited_at_value_index_found_at\
    \ = 0;\n    my $neighbor_visited_at_value_index_found_at_value = 0;\n    my $neighbor_visited_at_value_index_found_at_value_index\
    \ = 0;\n    my $neighbor_visited_at_value_index_found_at_value_index", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my @path = ();\n    my @min_path\
    \ = ();\n    my $min_sum = $n * $n + 1;\n    my $min_path_found = 0;\n    my $min_path_found_sum\
    \ = 0;\n    my $min_path_found_idx = 0;\n    my $min_path_found_path = [];\n \
    \   my $min_path_found_path_sum = 0;\n    my $min_path_found_path_idx = 0;\n \
    \   my $min_path_found_path_path = [];\n    my $min_path_found_path_path_sum =\
    \ 0;\n    my $min_path_found_path_path_idx = 0;\n    my $min_path_found_path_path_path\
    \ = [];\n    my $min_path_found_path_path_path_sum = 0;\n    my $min_path_found_path_path_path_idx\
    \ = 0;\n    my $min_path_found_path_path_path_path = [];\n    my $min_path_found_path_path_path_path_sum\
    \ = 0;\n    my $min_path_found_path_path_path_path_idx = 0;\n    my $min_path_found_path_path_path_path_path\
    \ = [];\n    my $min_path_found_path_path_path_path_path_sum = 0;\n    my $min_path_found_path_path_path_path_path_idx\
    \ = 0;\n    my $min_path_found_path_path_path_path_path_path = [];\n    my $min_path_found_path_path_path_path_path_path_sum\
    \ = 0;\n    my $min_path_found_path_path_path_path_path_path_idx = 0;\n    my\
    \ $min_path_found_path_path_path_path_path_path_path = [];\n    my $min_path_found_path_path_path_path_path_path_path_",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n \
    \   my $visited = [];\n    my $path = [];\n    my $sum = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $d = 0;\n    my $x = 0;\n    my $y = 0;\n    my $dirs\
    \ = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    my $dfs = sub {\n        my ($i,\
    \ $j, $d, $sum, $path) = @_;\n        if ($d == $k) {\n            if ($sum <\
    \ $min_sum) {\n                $min_sum = $sum;\n                $min_path = $path;\n\
    \            }\n            return;\n        }\n        for my $dir (@$dirs) {\n\
    \            $x = $i + $dir->[0];\n            $y = $j + $dir->[1];\n        \
    \    if ($x >= 0 && $x < $n && $y >= 0 && $y < $m && !$visited->[$x][$y]) {\n\
    \                $visited->[$x][$y] = 1;\n                push @$path, $grid->[$x][$y];\n\
    \                $dfs->($x, $y, $d + 1, $sum + $grid->[$x][$y], $path);\n    \
    \            pop @$path;\n                $visited->[$x][$y] = 0;\n          \
    \  }\n        }\n    };\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n\
    \            $dfs->($i, $j, 1, $grid->[$i][$j],", "my ($grid, $k) = @_;\n    my\
    \ $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum\
    \ = $n * $m + 1;\n    my $min_path_sum = $n * $m + 1;\n    my $min_path_sum_idx\
    \ = 0;\n    my $min_path_sum_dir = 0;\n    my $min_path_sum_dir_idx = 0;\n   \
    \ my $min_path_sum_dir_idx_dir = 0;\n    my $min_path_sum_dir_idx_dir_idx = 0;\n\
    \    my $min_path_sum_dir_idx_dir_idx_dir = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir = 0;\n    my\
    \ $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx =\
    \ 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir\
    \ = 0;\n    my $min_path_sum_dir_idx_dir_idx_dir_idx_dir_idx_dir_idx_dir_", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3\
    \ = $n * $n * $k;\n    my $minPath4 = [];\n    my $minPathSum4 = $n * $n * $k;\n\
    \    my $minPath5 = [];\n    my $minPathSum5 = $n * $n * $k;\n    my $minPath6\
    \ = [];\n    my $minPathSum6 = $n * $n * $k;\n    my $minPath7 = [];\n    my $minPathSum7\
    \ = $n * $n * $k;\n    my $minPath8 = [];\n    my $minPathSum8 = $n * $n * $k;\n\
    \    my $minPath9 = [];\n    my $minPathSum9 = $n * $n * $k;\n    my $minPath10\
    \ = [];\n    my $minPathSum10 = $n * $n * $k;\n    my $minPath11 = [];\n    my\
    \ $minPathSum11 = $n * $n * $k;\n    my $minPath12 = [];\n    my $minPathSum12\
    \ = $n * $n * $k;\n    my $minPath13 = [];\n    my $minPathSum13 = $n * $n * $k;\n\
    \    my $minPath14 = [];\n    my $minPathSum14 = $n * $n * $k;\n    my $minPath15\
    \ = [];\n    my $minPathSum15 = $n * $n * $k;\n    my $minPath16 = [];\n    my\
    \ $minPathSum16 = $n * $n * $k;\n    my $minPath17 = [];\n    my $minPathSum17\
    \ = $n * $n * $k;\n    my $minPath18 = [];\n    my $min", "my ($grid, $k) = @_;\n\
    \    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my ($i, $j) = (0, 0);\n\
    \    my $path = [];\n    my $min = [];\n    my $min_sum = $n * $n * $k;\n    my\
    \ $sum = 0;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
    \    $visited->[0][0] = 1;\n    $path->[0] = $grid->[0][0];\n    while (1) {\n\
    \        if ($sum > $min_sum) {\n            $sum -= $path->[$#{$path}];\n   \
    \         $visited->[$i][$j] = 0;\n            pop @$path;\n            if ($#{$path}\
    \ < 0) {\n                last;\n            }\n            ($i, $j) = @{$path->[$#{$path}]};\n\
    \            next;\n        }\n        if ($sum == $min_sum) {\n            if\
    \ (lex_cmp($path, $min) < 0) {\n                $min = $path;\n            }\n\
    \            $sum -= $path->[$#{$path}];\n            $visited->[$i][$j] = 0;\n\
    \            pop @$path;\n            if ($#{$path} < 0) {\n                last;\n\
    \            }\n            ($i, $j) = @{$path->[$#{$path}]};\n            next;\n\
    \        }\n        if ($sum < $min_sum) {\n            if ($#{$path} == $k -\
    \ 1) {\n                $min_sum = $sum;\n                $min = $path;\n    \
    \            $sum -= $path->[$#{$path}];\n                $visited->[$i][$j] =\
    \ 0;\n                pop @$path;\n                if ($#{$path", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $n + 1;\n    my $minPathSumIndex = 0;\n    my $minPathSumIndexes = [];\n\
    \    my $minPathSumIndexesIndex = 0;\n    my $minPathSumIndexesIndexes = [];\n\
    \    my $minPathSumIndexesIndexesIndex = 0;\n    my $minPathSumIndexesIndexesIndexes\
    \ = [];\n    my $minPathSumIndexesIndexesIndexesIndex = 0;\n    my $minPathSumIndexesIndexesIndexesIndexes\
    \ = [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndex = 0;\n    my $minPathSumIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndex = 0;\n   \
    \ my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexes = [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexes =\
    \ [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    my $minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n   ", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m =\
    \ scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum = $n * $n\
    \ + 1;\n    my $min_path_sum_paths = [];\n    my $visited = {};\n    my $path\
    \ = [];\n    my $path_sum = 0;\n    my $path_sum_paths = [];\n    my $path_sum_paths_hash\
    \ = {};\n    my $path_sum_paths_hash_key = '';\n    my $path_sum_paths_hash_key_new\
    \ = '';\n    my $path_sum_paths_hash_key_new_min = '';\n    my $path_sum_paths_hash_key_new_min_path\
    \ = [];\n    my $path_sum_paths_hash_key_new_min_path_sum = $n * $n + 1;\n   \
    \ my $path_sum_paths_hash_key_new_min_path_sum_paths = [];\n    my $path_sum_paths_hash_key_new_min_path_sum_paths_hash\
    \ = {};\n    my $path_sum_paths_hash_key_new_min_path_sum_paths_hash_key = '';\n\
    \    my $path_sum_paths_hash_key_new_min_path_sum_paths_hash_key_new = '';\n \
    \   my $path_sum_paths_hash_key_new_min_path_sum_paths_hash_key_new_min = '';\n\
    \    my $path_sum_paths_hash_key_new_min_path_sum_paths_hash_key_new_min_path\
    \ = [];\n    my $path_sum_paths_hash_key_new_min_path_sum_paths_hash_key_new_min_path_sum\
    \ = $n * $n + 1;\n    my $path_sum_paths_hash_key_new_min_path_sum_paths", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPath2 = [];\n    my $path = [];\n    my $pathSum\
    \ = 0;\n    my $pathSum2 = 0;\n    my $path2 = [];\n    my $visited = [];\n  \
    \  for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $path =\
    \ [];\n            $pathSum = 0;\n            $path2 = [];\n            $pathSum2\
    \ = 0;\n            for (my $i = 0; $i < $n; $i++) {\n                for (my\
    \ $j = 0; $j < $m; $j++) {\n                    $visited->[$i][$j] = 0;\n    \
    \            }\n            }\n            dfs($grid, $i, $j, $k, $visited, $path,\
    \ $pathSum, $path2, $pathSum2);\n            if ($pathSum < $minPathSum) {\n \
    \               $minPathSum = $pathSum;\n                $minPath = $path;\n \
    \           }\n            if ($pathSum2 < $minPathSum2) {\n                $minPathSum2\
    \ = $pathSum2;\n                $minPath2 = $path2;\n            }\n        }\n\
    \    }\n    return $minPath;\n}", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum =\
    \ $n * $n + 1;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_index =\
    \ 0;\n    my $min_path_sum_index_sum = 0;\n    my $min_path_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum = 0;\n    my $min_path_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum = 0;\n  \
    \  my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index = 0;\n    my\
    \ $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum = 0;\n    my\
    \ $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index = 0;\n\
    \    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_grid = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            my $path = [];\n            my\
    \ $path_sum = 0;\n            my $path_grid = [];\n            my $path_grid_row\
    \ = [];\n            for my $l (0 .. $n - 1) {\n                for my $m (0 ..\
    \ $m - 1) {\n                    $path_grid_row->[$m] = 0;\n                }\n\
    \                $path_grid->[$l] = $path_grid_row;\n            }\n         \
    \   my $path_grid_row = [];\n            for my $l (0 .. $n - 1) {\n         \
    \       $path_grid_row->[$l] = 0;\n            }\n            my $path_grid_col\
    \ = [];\n            for my $l (0 .. $m - 1) {\n                $path_grid_col->[$l]\
    \ = 0;\n            }\n            my $path_grid_row_col = [];\n            for\
    \ my $l (0 .. $n - 1) {\n                $path_grid_row_col->[$l] = 0;\n     \
    \       }\n            my $path_grid_col_row = [];\n            for my $l (0 ..\
    \ $m - 1) {\n                $path_grid_col_row->[$l] = 0;\n            }\n  \
    \          my $path_grid_row_col_row = [];\n            for my $l (0 .. $n - 1)\
    \ {\n                $path_grid_row_col_row->[$l] = 0;\n            }\n      \
    \      my $path_grid_col_row_col = [];\n            for my $l (0 .. $m - 1) {\n\
    \                $path_grid_col_row_col->[$l] = 0;\n            }\n", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_grid\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $min_path_sum_grid->[$i][$j] = $n * $n * $k;\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            if\
    \ ($i > 0) {\n                if ($grid->[$i][$j] < $grid->[$i - 1][$j]) {\n \
    \                   $min_path_sum_grid->[$i][$j] = min($min_path_sum_grid->[$i][$j],\
    \ $min_path_sum_grid->[$i - 1][$j] + $grid->[$i][$j]);\n                }\n  \
    \          }\n            if ($j > 0) {\n                if ($grid->[$i][$j] <\
    \ $grid->[$i][$j - 1]) {\n                    $min_path_sum_grid->[$i][$j] = min($min_path_sum_grid->[$i][$j],\
    \ $min_path_sum_grid->[$i][$j - 1] + $grid->[$i][$j]);\n                }\n  \
    \          }\n            if ($i < $n - 1) {\n                if ($grid->[$i][$j]\
    \ < $grid->[$i + 1][$j]) {\n                    $min_path_sum_grid->[$i][$j] =\
    \ min($min_path_sum_grid->[$i][$j], $min_path_sum_grid->[$i + 1][$j] + $grid->[$i][$j]);\n\
    \                }\n            }\n            if ($j < $m - 1) {", "my ($grid,\
    \ $k) = @_;\n    my $N = scalar @$grid;\n    my $M = scalar @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_path_sum = 0;\n    my $min_path_sum_idx =\
    \ 0;\n    my $min_path_sum_idx_found = 0;\n    my $min_path_sum_idx_found_idx\
    \ = 0;\n    my $min_path_sum_idx_found_idx_found = 0;\n    my $min_path_sum_idx_found_idx_found_idx\
    \ = 0;\n    my $min_path_sum_idx_found_idx_found_idx_found = 0;\n    my $min_path_sum_idx_found_idx_found_idx_found_idx\
    \ = 0;\n    my $min_path_sum_idx_found_idx_found_idx_found_idx_found = 0;\n  \
    \  my $min_path_sum_idx_found_idx_found_idx_found_idx_found_idx = 0;\n    my $min_path_sum_idx_found_idx_found_idx_found_idx_found_idx_found\
    \ = 0;\n    my $min_path_sum_idx_found_idx_found_idx_found_idx_found_idx_found_idx\
    \ = 0;\n    my $min_path_sum_idx_found_idx_found_idx_found_idx_found_idx_found_idx_found\
    \ = 0;\n    my $min_path_sum_idx_found_idx_found_idx_found_idx_found_idx_found_idx_found_idx\
    \ = 0;\n    my $min_path_sum_idx_found_idx_found_idx_found_idx_found_idx_found_idx_found_idx_found\
    \ = 0;\n    my $min_path_sum_idx_found_id", "my ($grid, $k) = @_;\n    my $n =\
    \ @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum\
    \ = $n * $m * $k;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            my $path = [];\n            my $sum = 0;\n            my $visited\
    \ = [];\n            for my $x (0 .. $n - 1) {\n                for my $y (0 ..\
    \ $m - 1) {\n                    $visited->[$x][$y] = 0;\n                }\n\
    \            }\n            $visited->[$i][$j] = 1;\n            $path->[0] =\
    \ $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n            my $res\
    \ = dfs($grid, $i, $j, $k - 1, $visited, $path, $sum);\n            if ($res->[0]\
    \ < $min_sum) {\n                $min_sum = $res->[0];\n                $min_path\
    \ = $res->[1];\n            }\n        }\n    }\n    return $min_path;\n}", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $max = $grid->[$n-1][$m-1];\n    my $minPath\
    \ = [];\n    my $minPathSum = $max * $k;\n    my $visited = {};\n    my $path\
    \ = [];\n    my $pathSum = 0;\n    my $pathLen = 0;\n    my $paths = [];\n   \
    \ my $pathsSum = [];\n    my $pathsLen = [];\n    my $pathsMin = [];\n    my $pathsMax\
    \ = [];\n    my $pathsMinSum = [];\n    my $pathsMaxSum = [];\n    my $pathsMinLen\
    \ = [];\n    my $pathsMaxLen = [];\n    my $pathsMinPath = [];\n    my $pathsMaxPath\
    \ = [];\n    my $pathsMinPathSum = [];\n    my $pathsMaxPathSum = [];\n    my\
    \ $pathsMinPathLen = [];\n    my $pathsMaxPathLen = [];\n    my $pathsMinPathMin\
    \ = [];\n    my $pathsMinPathMax = [];\n    my $pathsMaxPathMin = [];\n    my\
    \ $pathsMaxPathMax = [];\n    my $pathsMinPathMinSum = [];\n    my $pathsMinPathMaxSum\
    \ = [];\n    my $pathsMaxPathMinSum = [];\n    my $pathsMaxPathMaxSum = [];\n\
    \    my $pathsMinPathMinLen = [];\n    my $pathsMinPathMaxLen = [];\n    my $pathsMaxPathMinLen\
    \ = [];\n    my $pathsMaxPathMaxLen = [];\n    my $pathsMinPathMinPath = [];\n\
    \    my $pathsMinPathMaxPath = [];\n    my $pathsMaxPathMinPath = [];\n    my\
    \ $pathsMaxPathMaxPath = [];\n    my $pathsMinPathMinPathSum = [];\n    my $pathsMinPathMaxPathSum\
    \ = [];\n    my $pathsMaxPathMinPathSum = [];\n    my $paths", "my ($grid, $k)\
    \ = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my\
    \ @path;\n    my $min = $grid->[0][0];\n    my $min_path = [$min];\n    my $min_path_len\
    \ = 1;\n    my $min_path_count = 1;\n    my $min_path_index = 0;\n    my $min_path_index_count\
    \ = 1;\n    my $min_path_index_count_max = 1;\n    my $min_path_index_count_max_index\
    \ = 0;\n    my $min_path_index_count_max_index_count = 1;\n    my $min_path_index_count_max_index_count_max\
    \ = 1;\n    my $min_path_index_count_max_index_count_max_index = 0;\n    my $min_path_index_count_max_index_count_max_index_count\
    \ = 1;\n    my $min_path_index_count_max_index_count_max_index_count_max = 1;\n\
    \    my $min_path_index_count_max_index_count_max_index_count_max_index = 0;\n\
    \    my $min_path_index_count_max_index_count_max_index_count_max_index_count\
    \ = 1;\n    my $min_path_index_count_max_index_count_max_index_count_max_index_count_max\
    \ = 1;\n    my $min_path_index_count_max_index_count_max_index_count_max_index_count_max_index\
    \ = 0;\n    my $min_path_index_count_max_index_count_max_index_count_max_index_count_max_index_count\
    \ = 1;\n    my $min_path_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max\
    \ = 1;\n    my $min_path_index_count_max_index_count_max_index_count_max", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_found\
    \ = 0;\n    my $min_path_sum_found_at = 0;\n    my $min_path_sum_found_at_row\
    \ = 0;\n    my $min_path_sum_found_at_col = 0;\n    my $min_path_sum_found_at_dir\
    \ = 0;\n    my $min_path_sum_found_at_dir_row = 0;\n    my $min_path_sum_found_at_dir_col\
    \ = 0;\n    my $min_path_sum_found_at_dir_row_col = 0;\n    my $min_path_sum_found_at_dir_col_row\
    \ = 0;\n    my $min_path_sum_found_at_dir_row_row = 0;\n    my $min_path_sum_found_at_dir_col_col\
    \ = 0;\n    my $min_path_sum_found_at_dir_row_col_col = 0;\n    my $min_path_sum_found_at_dir_col_row_row\
    \ = 0;\n    my $min_path_sum_found_at_dir_row_row_row = 0;\n    my $min_path_sum_found_at_dir_col_col_col\
    \ = 0;\n    my $min_path_sum_found_at_dir_row_col_col_col = 0;\n    my $min_path_sum_found_at_dir_col_row_row_row\
    \ = 0;\n    my $min_path_sum_found_at_dir_row_row_row_row = 0;\n    my $min_path_sum_found_at_dir_col_col_col_col\
    \ = 0;\n    my $min_path_sum_found_at_dir_row_col_col_col_col = 0;\n    my", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n  \
    \  for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            my $path\
    \ = [];\n            my $sum = 0;\n            dfs($grid, $i, $j, $k, $path, $sum,\
    \ $visited, $min, $min_sum);\n        }\n    }\n    return $min;\n}", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_sum = $n * $n * $k;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_idx = 0;\n    my $min_path_idx_sum = 0;\n    my $min_path_idx_sum_prev\
    \ = 0;\n    my $min_path_idx_sum_prev_prev = 0;\n    my $min_path_idx_sum_prev_prev_prev\
    \ = 0;\n    my $min_path_idx_sum_prev_prev_prev_prev = 0;\n    my $min_path_idx_sum_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_idx_sum_prev_prev_prev_prev_prev_prev = 0;\n    my $min_path_idx_sum_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_idx_sum_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    my $min_path_idx_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    my $min_path_idx_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev =\
    \ 0;\n    my $min_path_idx_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_idx_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_idx_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_idx_sum_prev_prev_prev_prev_prev_prev_prev_prev", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $min_path = [$min];\n    my $min_paths =\
    \ {};\n    my $paths = {};\n    my $path = [$min];\n    my $paths_to_check = [{path\
    \ => $path, i => 0, j => 0}];\n    while (scalar @$paths_to_check) {\n       \
    \ my $path_to_check = shift @$paths_to_check;\n        my $i = $path_to_check->{i};\n\
    \        my $j = $path_to_check->{j};\n        my $path = $path_to_check->{path};\n\
    \        my $path_len = scalar @$path;\n        if ($path_len == $k) {\n     \
    \       my $path_str = join '', @$path;\n            if (!exists $min_paths->{$path_str})\
    \ {\n                $min_paths->{$path_str} = $path;\n                if ($path->[0]\
    \ < $min) {\n                    $min = $path->[0];\n                    $min_path\
    \ = $path;\n                }\n            }\n            next;\n        }\n \
    \       if ($i > 0) {\n            my $new_path = [@$path, $grid->[$i - 1][$j]];\n\
    \            my $new_path_str = join '', @$new_path;\n            if (!exists\
    \ $paths->{$new_path_str}) {\n                $paths->{$new_path_str} = 1;\n \
    \               push @$paths_to_check, {path => $new_path, i => $i - 1, j => $j};\n\
    \            }\n        }\n        if ($i < $n - 1) {\n            my $new_path\
    \ = [@$path, $grid->[$i + 1][$j]];\n            my $new_path_str = join", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_path_value = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $path_value = [];\n            my $visited = [];\n            for\
    \ my $x (0 .. $n - 1) {\n                for my $y (0 .. $m - 1) {\n         \
    \           $visited->[$x][$y] = 0;\n                }\n            }\n      \
    \      $visited->[$i][$j] = 1;\n            $path->[0] = [$i, $j];\n         \
    \   $path_value->[0] = $grid->[$i][$j];\n            my $result = dfs($grid, $visited,\
    \ $path, $path_value, $k, 1, $n, $m);\n            if ($result) {\n          \
    \      if (!@$min_path || $path_value->[$k - 1] < $min_path_value->[$k - 1]) {\n\
    \                    $min_path = $path;\n                    $min_path_value =\
    \ $path_value;\n                }\n            }\n        }\n    }\n    return\
    \ $min_path_value;\n}", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n  \
    \  my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum = $n\
    \ * $n + 1;\n    my $min_sum_path = [];\n    my $visited = [];\n    for my $i\
    \ (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n       \
    \     my $sum_path = [];\n            $visited->[$i][$j] = 1;\n            push\
    \ @$path, [$i, $j];\n            push @$sum_path, $grid->[$i][$j];\n         \
    \   $sum += $grid->[$i][$j];\n            my $res = dfs($grid, $i, $j, $k - 1,\
    \ $n, $m, $visited, $path, $sum, $sum_path);\n            if ($res->[0] < $min_sum)\
    \ {\n                $min_sum = $res->[0];\n                $min_sum_path = $res->[1];\n\
    \            }\n            $visited->[$i][$j] = 0;\n        }\n    }\n    return\
    \ $min_sum_path;\n}", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my\
    \ $m = scalar @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $n + 1;\n\
    \    my $min_path = [];\n    my $path = [];\n    my $sum = 0;\n    my $visited\
    \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n       \
    \     $path = [];\n            $sum = 0;\n            $visited->[$i][$j] = 1;\n\
    \            push @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n\
    \            dfs($grid, $i, $j, $n, $m, $k, $path, $sum, $visited, $min, $min_sum,\
    \ $min_path);\n            $visited->[$i][$j] = 0;\n        }\n    }\n    return\
    \ $min_path;\n}", "my ($grid, $k) = @_;\n    my $N = scalar @$grid;\n    my $M\
    \ = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum = $N *\
    \ $N + 1;\n    my $min_path_sum_k = $min_path_sum;\n    my $min_path_k = [];\n\
    \    my $min_path_sum_k_1 = $min_path_sum;\n    my $min_path_k_1 = [];\n    my\
    \ $min_path_sum_k_2 = $min_path_sum;\n    my $min_path_k_2 = [];\n    my $min_path_sum_k_3\
    \ = $min_path_sum;\n    my $min_path_k_3 = [];\n    my $min_path_sum_k_4 = $min_path_sum;\n\
    \    my $min_path_k_4 = [];\n    my $min_path_sum_k_5 = $min_path_sum;\n    my\
    \ $min_path_k_5 = [];\n    my $min_path_sum_k_6 = $min_path_sum;\n    my $min_path_k_6\
    \ = [];\n    my $min_path_sum_k_7 = $min_path_sum;\n    my $min_path_k_7 = [];\n\
    \    my $min_path_sum_k_8 = $min_path_sum;\n    my $min_path_k_8 = [];\n    my\
    \ $min_path_sum_k_9 = $min_path_sum;\n    my $min_path_k_9 = [];\n    my $min_path_sum_k_10\
    \ = $min_path_sum;\n    my $min_path_k_10 = [];\n    my $min_path_sum_k_11 = $min_path_sum;\n\
    \    my $min_path_k_11 = [];\n    my $min_path_sum_k_12 = $min_path_sum;\n   \
    \ my $min_path_k_12 = [];\n    my $min_", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum\
    \ = $n * $n * $k;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_sum = 0;\n    my $min_path_sum_idx_sum_idx =\
    \ 0;\n    my $min_path_sum_idx_sum_idx_sum = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum = 0;\n  \
    \  my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx\
    \ = 0;\n    my $min_path_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_sum_idx_",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n * $k;\n    my $min_path_sum\
    \ = $min_sum;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_jdx = 0;\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $path_sum = 0;\n            my $path_sum_idx\
    \ = 0;\n            my $path_sum_jdx = 0;\n            my $path_sum_idx_prev =\
    \ $i;\n            my $path_sum_jdx_prev = $j;\n            my $path_sum_prev\
    \ = $grid->[$i][$j];\n            for my $l (0 .. $k - 1) {\n                my\
    \ $path_sum_idx_curr = $path_sum_idx_prev;\n                my $path_sum_jdx_curr\
    \ = $path_sum_jdx_prev;\n                my $path_sum_curr = $path_sum_prev;\n\
    \                if ($path_sum_idx_prev > 0 && $grid->[$path_sum_idx_prev - 1][$path_sum_jdx_prev]\
    \ < $path_sum_curr) {\n                    $path_sum_curr = $grid->[$path_sum_idx_prev\
    \ - 1][$path_sum_jdx_prev];\n                    $path_sum_idx_curr = $path_sum_idx_prev\
    \ - 1;\n                    $path_sum_jdx_curr = $path_sum_jdx_prev;\n       \
    \         }\n                if ($path_sum_idx_prev < $n - 1 && $grid->[$path_sum_idx_prev\
    \ + 1][$path_sum_jdx_prev] < $path_sum_curr) {\n                   ", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k\
    \ = $min_path_sum;\n    my $min_path_sum_k_1 = $min_path_sum;\n    my $min_path_sum_k_2\
    \ = $min_path_sum;\n    my $min_path_sum_k_3 = $min_path_sum;\n    my $min_path_sum_k_4\
    \ = $min_path_sum;\n    my $min_path_sum_k_5 = $min_path_sum;\n    my $min_path_sum_k_6\
    \ = $min_path_sum;\n    my $min_path_sum_k_7 = $min_path_sum;\n    my $min_path_sum_k_8\
    \ = $min_path_sum;\n    my $min_path_sum_k_9 = $min_path_sum;\n    my $min_path_sum_k_10\
    \ = $min_path_sum;\n    my $min_path_sum_k_11 = $min_path_sum;\n    my $min_path_sum_k_12\
    \ = $min_path_sum;\n    my $min_path_sum_k_13 = $min_path_sum;\n    my $min_path_sum_k_14\
    \ = $min_path_sum;\n    my $min_path_sum_k_15 = $min_path_sum;\n    my $min_path_sum_k_16\
    \ = $min_path_sum;\n    my $min_path_sum_k_17 = $min_path_sum;\n    my $min_path_sum_k_18\
    \ = $min_path_sum;\n    my $min_path_sum_k_19 = $min_path_sum;\n    my $min_path_sum_k_20\
    \ = $min_path_sum;\n    my $min", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count = 0;\n    my $min_path_sum_count_max\
    \ = 0;\n    my $min_path_sum_count_max_path = [];\n    my $min_path_sum_count_max_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count_max_path_sum_count = 0;\n    my $min_path_sum_count_max_path_sum_count_max\
    \ = 0;\n    my $min_path_sum_count_max_path_sum_count_max_path = [];\n    my $min_path_sum_count_max_path_sum_count_max_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count\
    \ = 0;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max =\
    \ 0;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path\
    \ = [];\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum_count\
    \ = 0;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum_count_max\
    \ = 0;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum_count_max_path\
    \ = [];\n    my $min_path_sum_", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum =\
    \ $n * $n * $k;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_idx =\
    \ 0;\n    my $min_path_sum_jdx = 0;\n    my $min_path_sum_dir = 0;\n    my $min_path_sum_dir_idx\
    \ = 0;\n    my $min_path_sum_dir_jdx = 0;\n    my $min_path_sum_dir_dir = 0;\n\
    \    my $min_path_sum_dir_dir_idx = 0;\n    my $min_path_sum_dir_dir_jdx = 0;\n\
    \    my $min_path_sum_dir_dir_dir = 0;\n    my $min_path_sum_dir_dir_dir_idx =\
    \ 0;\n    my $min_path_sum_dir_dir_dir_jdx = 0;\n    my $min_path_sum_dir_dir_dir_dir\
    \ = 0;\n    my $min_path_sum_dir_dir_dir_dir_idx = 0;\n    my $min_path_sum_dir_dir_dir_dir_jdx\
    \ = 0;\n    my $min_path_sum_dir_dir_dir_dir_dir = 0;\n    my $min_path_sum_dir_dir_dir_dir_dir_idx\
    \ = 0;\n    my $min_path_sum_dir_dir_dir_dir_dir_jdx = 0;\n    my $min_path_sum_dir_dir_dir_dir_dir_dir\
    \ = 0;\n    my $min_path_sum_dir_dir_dir_dir_dir_dir_idx = 0;\n    my $min_path_sum_dir_dir_dir_dir_dir_dir_jdx\
    \ = 0;\n    my $min_path_sum_dir_dir_dir_dir_dir_dir_", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $visited\
    \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min\
    \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            $min->[$i][$j] = [];\n        }\n    }\n    my $queue =\
    \ new Queue;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j\
    \ < $m; $j++) {\n            $queue->enqueue([$i, $j]);\n        }\n    }\n  \
    \  while (!$queue->isEmpty) {\n        my $cell = $queue->dequeue;\n        my\
    \ ($i, $j) = @$cell;\n        if ($visited->[$i][$j]) {\n            next;\n \
    \       }\n        $visited->[$i][$j] = 1;\n        my $value = $grid->[$i][$j];\n\
    \        my $neighbors = [];\n        if ($i > 0) {\n            push @$neighbors,\
    \ [$i - 1, $j];\n        }\n        if ($i < $n - 1) {\n            push @$neighbors,\
    \ [$i + 1, $j];\n        }\n        if ($j > 0) {\n            push @$neighbors,\
    \ [$i, $j - 1];\n        }\n        if ($j < $m - 1) {\n            push @$neighbors,\
    \ [$i, $j + 1];\n        }\n        for my $neighbor (@$neighbors) {\n       \
    \     my ($ni, $nj) = @$neighbor;\n            if ($visited", "my ($grid, $k)\
    \ = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my\
    \ $min = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            my $path = _minPath($grid, $i,\
    \ $j, $k);\n            my $sum = sum(@$path);\n            if ($sum < $min_sum)\
    \ {\n                $min = $path;\n                $min_sum = $sum;\n       \
    \     }\n        }\n    }\n    return $min;\n}", "my ($grid, $k) = @_;\n    my\
    \ $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $visited = [];\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min_path =\
    \ [];\n    my $min_sum = $n * $n + 1;\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n      \
    \      my $sum = 0;\n            dfs($grid, $visited, $i, $j, $k, $path, $sum);\n\
    \            if ($sum < $min_sum) {\n                $min_sum = $sum;\n      \
    \          $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
    }", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n + 1;\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n \
    \           my $pathSum = 0;\n            my $visited = [];\n            for my\
    \ $x (0 .. $n - 1) {\n                for my $y (0 .. $m - 1) {\n            \
    \        $visited->[$x][$y] = 0;\n                }\n            }\n         \
    \   $visited->[$i][$j] = 1;\n            my $curr = [$i, $j];\n            my\
    \ $currVal = $grid->[$i][$j];\n            push @$path, $currVal;\n          \
    \  $pathSum += $currVal;\n            for my $l (1 .. $k - 1) {\n            \
    \    my $next = getNext($grid, $n, $m, $curr, $visited);\n                if (!defined\
    \ $next) {\n                    last;\n                }\n                $curr\
    \ = $next;\n                $currVal = $grid->[$curr->[0]][$curr->[1]];\n    \
    \            push @$path, $currVal;\n                $pathSum += $currVal;\n \
    \           }\n            if ($pathSum < $minPathSum) {\n                $minPath\
    \ = $path;\n                $minPathSum = $pathSum;\n            }\n        }\n\
    \    }\n    return $minPath;\n}", "my ($grid, $k) = @_;\n    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my @path;\n    my $min = $grid->[0][0];\n   \
    \ my $min_path = [$grid->[0][0]];\n    my $min_path_ref = \\$min_path;\n    my\
    \ $min_path_ref_ref = \\$min_path_ref;\n    my $min_path_ref_ref_ref = \\$min_path_ref_ref;\n\
    \    my $min_path_ref_ref_ref_ref = \\$min_path_ref_ref_ref;\n    my @stack;\n\
    \    my $stack_ref = \\@stack;\n    my $stack_ref_ref = \\$stack_ref;\n    my\
    \ $stack_ref_ref_ref = \\$stack_ref_ref;\n    my $stack_ref_ref_ref_ref = \\$stack_ref_ref_ref;\n\
    \    my $stack_ref_ref_ref_ref_ref = \\$stack_ref_ref_ref_ref;\n    my $stack_ref_ref_ref_ref_ref_ref\
    \ = \\$stack_ref_ref_ref_ref_ref;\n    my $stack_ref_ref_ref_ref_ref_ref_ref =\
    \ \\$stack_ref_ref_ref_ref_ref_ref;\n    my $stack_ref_ref_ref_ref_ref_ref_ref_ref\
    \ = \\$stack_ref_ref_ref_ref_ref_ref_ref;\n    my $stack_ref_ref_ref_ref_ref_ref_ref_ref_ref\
    \ = \\$stack_ref_ref_ref_ref_ref_ref_ref_ref;\n    my $stack_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref\
    \ = \\$stack_ref_ref_ref_ref_ref_ref_ref_ref_ref;\n    my $stack_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref\
    \ = \\$stack_ref_ref_ref_ref_ref_ref", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $visited = {};\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum = $min_sum;\n  \
    \  my $min_path_sum_idx = 0;\n    my $min_path_sum_idx_i = 0;\n    my $min_path_sum_idx_j\
    \ = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            my $path = [];\n            my $sum = 0;\n            my\
    \ $path_sum = 0;\n            my $path_sum_idx = 0;\n            my $path_sum_idx_i\
    \ = 0;\n            my $path_sum_idx_j = 0;\n            my $path_sum_idx_k =\
    \ 0;\n            my $path_sum_idx_l = 0;\n            my $path_sum_idx_m = 0;\n\
    \            my $path_sum_idx_n = 0;\n            my $path_sum_idx_o = 0;\n  \
    \          my $path_sum_idx_p = 0;\n            my $path_sum_idx_q = 0;\n    \
    \        my $path_sum_idx_r = 0;\n            my $path_sum_idx_s = 0;\n      \
    \      my $path_sum_idx_t = 0;\n            my $path_sum_idx_u = 0;\n        \
    \    my $path_sum_idx_v = 0;\n            my $path_sum_idx_w = 0;\n          \
    \  my $path_sum_idx_x = 0;\n            my $path_sum_idx_y = 0;\n            my\
    \ $path_sum_idx_z = 0;\n            my $path_sum_idx_aa = 0;\n            my $path_sum_idx",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2\
    \ = $n * $n + 1;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n + 1;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n + 1;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n + 1;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n + 1;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n + 1;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n + 1;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n + 1;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n + 1;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n + 1;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n + 1;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n + 1;\n    my $minPath18 = [];\n    my\
    \ $min", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar\
    \ @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $max = $grid->[0][0];\n\
    \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $min =\
    \ $grid->[$i][$j] if $grid->[$i][$j] < $min;\n            $max = $grid->[$i][$j]\
    \ if $grid->[$i][$j] > $max;\n        }\n    }\n    my $min_path = [];\n    for\
    \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path = [];\n\
    \            dfs($grid, $i, $j, $k, $path, $min_path);\n        }\n    }\n   \
    \ return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n = @$grid;\n    my $m\
    \ = @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $n * $k;\n    my\
    \ $visited = {};\n    my $dfs;\n    $dfs = sub {\n        my ($i, $j, $sum, $path)\
    \ = @_;\n        if ($sum > $min_sum) {\n            return;\n        }\n    \
    \    if (@$path == $k) {\n            if ($sum < $min_sum) {\n               \
    \ $min_sum = $sum;\n                $min = $path;\n            }\n           \
    \ return;\n        }\n        for my $d ([-1, 0], [1, 0], [0, -1], [0, 1]) {\n\
    \            my ($x, $y) = ($i + $d->[0], $j + $d->[1]);\n            if ($x >=\
    \ 0 && $x < $n && $y >= 0 && $y < $m && !$visited->{\"$x,$y\"}) {\n          \
    \      $visited->{\"$x,$y\"} = 1;\n                $dfs->($x, $y, $sum + $grid->[$x][$y],\
    \ [@$path, $grid->[$x][$y]]);\n                $visited->{\"$x,$y\"} = 0;\n  \
    \          }\n        }\n    };\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            $visited->{\"$i,$j\"} = 1;\n            $dfs->($i,\
    \ $j, $grid->[$i][$j], [$grid->[$i][$j]]);\n            $visited->{\"$i,$j\"}\
    \ = 0;\n        }\n    }\n    return $min;\n}", "my ($grid, $k) = @_;\n    my\
    \ $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_sum = $n * $n + 1;\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_idx\
    \ = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            my $path = [];\n            my $sum = 0;\n            my\
    \ $path_sum = 0;\n            my $path_sum_idx = 0;\n            my $path_sum_idx_found\
    \ = 0;\n            my $path_sum_idx_found_idx = 0;\n            my $path_sum_idx_found_idx_found\
    \ = 0;\n            my $path_sum_idx_found_idx_found_idx = 0;\n            my\
    \ $path_sum_idx_found_idx_found_idx_found = 0;\n            my $path_sum_idx_found_idx_found_idx_found_idx\
    \ = 0;\n            my $path_sum_idx_found_idx_found_idx_found_idx_found = 0;\n\
    \            my $path_sum_idx_found_idx_found_idx_found_idx_found_idx = 0;\n \
    \           my $path_sum_idx_found_idx_found_idx_found_idx_found_idx_found = 0;\n\
    \            my $path_sum_idx_found_idx_found_idx_found_idx_found_idx_found_idx\
    \ = 0;\n            my $path_sum_idx_found_idx_found_idx_found_idx_found_idx_found_idx_found\
    \ = 0;\n            my $path_sum_idx_found_idx_found_idx_found_idx_found_idx",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n        }\n \
    \   }\n    my $minPath = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for\
    \ (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n            $visited->[$i][$j]\
    \ = 1;\n            push @$path, $grid->[$i][$j];\n            dfs($grid, $visited,\
    \ $i, $j, $path, $minPath, $k);\n            $visited->[$i][$j] = 0;\n       \
    \ }\n    }\n    return $minPath;\n}", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my @path;\n    my $min_path;\n    my $min_sum = $n * $n * $n;\n\
    \    my $sum;\n    my $i;\n    my $j;\n    my $x;\n    my $y;\n    my $m;\n  \
    \  my $n;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my\
    \ $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n\
    \    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my\
    \ $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n\
    \    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my\
    \ $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n\
    \    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my\
    \ $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n\
    \    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my\
    \ $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n\
    \    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n", "my ($grid, $k)\
    \ = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my\
    \ $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_found\
    \ = 0;\n    my $path = [];\n    my $path_sum = 0;\n    my $path_sum_found = 0;\n\
    \    my $path_sum_found_at = 0;\n    my $path_sum_found_at_found = 0;\n    my\
    \ $path_sum_found_at_found_at = 0;\n    my $path_sum_found_at_found_at_found =\
    \ 0;\n    my $path_sum_found_at_found_at_found_at = 0;\n    my $path_sum_found_at_found_at_found_at_found\
    \ = 0;\n    my $path_sum_found_at_found_at_found_at_found_at = 0;\n    my $path_sum_found_at_found_at_found_at_found_at_found\
    \ = 0;\n    my $path_sum_found_at_found_at_found_at_found_at_found_at = 0;\n \
    \   my $path_sum_found_at_found_at_found_at_found_at_found_at_found = 0;\n   \
    \ my $path_sum_found_at_found_at_found_at_found_at_found_at_found_at = 0;\n  \
    \  my $path_sum_found_at_found_at_found_at_found_at_found_at_found_at_found =\
    \ 0;\n    my $path_sum_found_at_found_at_found_at_found_at_found_at_found_at_found_at\
    \ = 0;\n    my $path_sum_found_at_found_at_found_at_found_at_found_at_found_at_found_at_found\
    \ = 0;\n    my $path_sum_found_at_found_at_found_at_found_", "my ($grid, $k) =\
    \ @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $path\
    \ = [];\n    my $min_path = [];\n    my $min_sum = $n * $n * $n;\n    my $min_path_sum\
    \ = $min_sum;\n    my $min_path_len = $k;\n    my $min_path_len_sum = $min_sum;\n\
    \    my $min_path_len_sum_len = $k;\n    my $min_path_len_sum_len_sum = $min_sum;\n\
    \    my $min_path_len_sum_len_sum_len = $k;\n    my $min_path_len_sum_len_sum_len_sum\
    \ = $min_sum;\n    my $min_path_len_sum_len_sum_len_sum_len = $k;\n    my $min_path_len_sum_len_sum_len_sum_len_sum\
    \ = $min_sum;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len = $k;\n  \
    \  my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum = $min_sum;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len\
    \ = $k;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum = $min_sum;\n\
    \    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len = $k;\n\
    \    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum = $min_sum;\n\
    \    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len\
    \ = $k;\n    my $", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my\
    \ $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum = $n * $n\
    \ + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n   \
    \         my $path = [];\n            my $sum = 0;\n            my $visited =\
    \ [];\n            for my $i (0 .. $n - 1) {\n                for my $j (0 ..\
    \ $m - 1) {\n                    $visited->[$i][$j] = 0;\n                }\n\
    \            }\n            $visited->[$i][$j] = 1;\n            dfs($grid, $i,\
    \ $j, $visited, $path, $sum, $k, $min_path, $min_sum);\n        }\n    }\n   \
    \ return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n \
    \   my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_grid = [];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $min_path_sum_grid->[$i]->[$j]\
    \ = $n * $n * $k;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            my $sum = $grid->[$i]->[$j];\n          \
    \  my $path = [$grid->[$i]->[$j]];\n            my $path_sum = $sum;\n       \
    \     my $path_sum_grid = [[$sum]];\n            my $visited = [[0]];\n      \
    \      $visited->[$i]->[$j] = 1;\n            my $q = [[$i, $j]];\n          \
    \  while (@$q) {\n                my $p = shift @$q;\n                my ($x,\
    \ $y) = @$p;\n                for my $d (0 .. 3) {\n                    my $xx\
    \ = $x + $dx[$d];\n                    my $yy = $y + $dy[$d];\n              \
    \      if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $m && !$visited->[$xx]->[$yy])\
    \ {\n                        $visited->[$xx]->[$yy] = 1;\n                   \
    \     $sum += $grid->[$xx]->[$yy];\n                        push @$path, $grid->[$xx]->[$yy];\n\
    \                        push @$q, [$xx, $yy];\n                        if (scalar\
    \ @$path == $k) {\n                            if ($sum < $min_path_sum) {\n \
    \                               $min_path_sum = $sum;\n", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n * $k;\n    my $min_path_sum = $min_sum;\n \
    \   my $min_path_sum_index = 0;\n    my $min_path_sum_index_index = 0;\n    my\
    \ $min_path_sum_index_index_index = 0;\n    my $min_path_sum_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index = 0;\n    my $min_path_sum_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index = 0;\n\
    \    my $min_path_sum_index_index_index_index_index_index_index_index = 0;\n \
    \   my $min_path_sum_index_index_index_index_index_index_index_index_index = 0;\n\
    \    my $min_path_sum_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_sum_", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n   \
    \         my $path = [];\n            my $path_sum = 0;\n            $visited->[$i][$j]\
    \ = 1;\n            dfs($grid, $n, $m, $i, $j, $k, $visited, $path, $path_sum);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min_path;\n\
    }", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n        }\n \
    \   }\n    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    for (my $i\
    \ = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n          \
    \  my $path = [];\n            my $sum = 0;\n            $visited->[$i][$j] =\
    \ 1;\n            dfs($grid, $i, $j, $k, $visited, $path, $sum);\n           \
    \ $visited->[$i][$j] = 0;\n            if ($sum < $min_sum) {\n              \
    \  $min_sum = $sum;\n                $min_path = $path;\n            }\n     \
    \   }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $minPath = [map { [map {\
    \ [()] } (0 .. $n - 1)] } (0 .. $m - 1)];\n    my $minPathLen = [map { [map {\
    \ -1 } (0 .. $n - 1)] } (0 .. $m - 1)];\n    my $minPathVal = [map { [map { -1\
    \ } (0 .. $n - 1)] } (0 .. $m - 1)];\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            $minPathVal->[$i][$j] = $grid->[$i][$j];\n\
    \            $minPathLen->[$i][$j] = 1;\n            $minPath->[$i][$j] = [$grid->[$i][$j]];\n\
    \        }\n    }\n    for my $l (2 .. $k) {\n        for my $i (0 .. $n - 1)\
    \ {\n            for my $j (0 .. $m - 1) {\n                my $minVal = $minPathVal->[$i][$j];\n\
    \                my $minPath = $minPath->[$i][$j];\n                if ($i > 0\
    \ && $minPathVal->[$i - 1][$j] < $minVal) {\n                    $minVal = $minPathVal->[$i\
    \ - 1][$j];\n                    $minPath = $minPath->[$i - 1][$j];\n        \
    \        }\n                if ($j > 0 && $minPathVal->[$i][$j - 1] < $minVal)\
    \ {\n                    $minVal = $minPathVal->[$i][$j - 1];\n              \
    \      $minPath = $minPath->[$i][$j - 1];\n                }\n               \
    \ if ($i < $n - 1 && $minPathVal->[$i + 1][$j] < $minVal) {\n                \
    \    $minVal = $minPathVal->", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $max\
    \ = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n\
    \            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n            $max\
    \ = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my $res\
    \ = [];\n    my $min_path = [];\n    for my $i (0..$n-1) {\n        for my $j\
    \ (0..$m-1) {\n            my $path = [];\n            my $curr = $grid->[$i][$j];\n\
    \            push @$path, $curr;\n            my $visited = {};\n            $visited->{$i}->{$j}\
    \ = 1;\n            my $ret = _minPath($grid, $i, $j, $k-1, $visited, $path, $min,\
    \ $max);\n            if ($ret) {\n                if (!$min_path || $ret->[0]\
    \ < $min_path->[0]) {\n                    $min_path = $ret;\n               \
    \ }\n            }\n        }\n    }\n    return $min_path->[1];\n}", "my ($grid,\
    \ $k) = @_;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $m + 1;\n    my $min_path_sum = $n * $m + 1;\n\
    \    my $min_path_sum_idx = 0;\n    my $min_path_sum_jdx = 0;\n    my $min_path_sum_dir\
    \ = 0;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n   \
    \         for my $dir (0 .. 3) {\n                my $path = [];\n           \
    \     my $sum = 0;\n                my $idx = $i;\n                my $jdx = $j;\n\
    \                for my $l (0 .. $k - 1) {\n                    push @$path, $grid->[$idx][$jdx];\n\
    \                    $sum += $grid->[$idx][$jdx];\n                    if ($dir\
    \ == 0) {\n                        $idx = ($idx + 1) % $n;\n                 \
    \   } elsif ($dir == 1) {\n                        $jdx = ($jdx + 1) % $m;\n \
    \                   } elsif ($dir == 2) {\n                        $idx = ($idx\
    \ - 1 + $n) % $n;\n                    } else {\n                        $jdx\
    \ = ($jdx - 1 + $m) % $m;\n                    }\n                }\n        \
    \        if ($sum < $min_sum) {\n                    $min_path = $path;\n    \
    \                $min_sum = $sum;\n                } elsif ($sum == $min_sum)\
    \ {\n                    for my $l (0 .. $k - 1) {\n                        if\
    \ ($path->[$l] < $min_path->[$l]) {\n                            $min_path = $path;\n\
    \                            last;\n                        } elsif ($path->[$l]\
    \ > $min_path->[$l]) {\n                            last;\n                  \
    \      }\n                    }\n                }\n                if ($sum <\
    \ $min_", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar\
    \ @{$grid->[0]};\n    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        for (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n\
    \        }\n    }\n    my $min = [];\n    for (my $i = 0; $i < $n; $i++) {\n \
    \       for (my $j = 0; $j < $m; $j++) {\n            $min->[$i][$j] = [];\n \
    \       }\n    }\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0;\
    \ $j < $m; $j++) {\n            if ($visited->[$i][$j] == 0) {\n             \
    \   my $path = [];\n                dfs($grid, $visited, $min, $i, $j, $path,\
    \ $k);\n            }\n        }\n    }\n    return $min->[0][0];\n}", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min = [map { [map { [0, []] } (0 .. $m - 1)] } (0 .. $n - 1)];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $min_val\
    \ = $grid->[$i][$j];\n            my $min_path = [$grid->[$i][$j]];\n        \
    \    for my $d (0 .. $k - 1) {\n                if ($d > 0) {\n              \
    \      if ($i > 0) {\n                        if ($min->[$i - 1][$j][0] + $grid->[$i][$j]\
    \ < $min_val) {\n                            $min_val = $min->[$i - 1][$j][0]\
    \ + $grid->[$i][$j];\n                            $min_path = [@{$min->[$i - 1][$j][1]},\
    \ $grid->[$i][$j]];\n                        }\n                    }\n      \
    \              if ($j > 0) {\n                        if ($min->[$i][$j - 1][0]\
    \ + $grid->[$i][$j] < $min_val) {\n                            $min_val = $min->[$i][$j\
    \ - 1][0] + $grid->[$i][$j];\n                            $min_path = [@{$min->[$i][$j\
    \ - 1][1]}, $grid->[$i][$j]];\n                        }\n                   \
    \ }\n                    if ($i < $n - 1) {\n                        if ($min->[$i\
    \ + 1][$j][0] + $grid->[$i][$j] < $min_val) {\n                            $min_val\
    \ = $min->[$i + 1][$j][0] + $grid->[$i][$j];\n                            $min_path\
    \ = [@{$min->[$i + 1][$j][", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum =\
    \ $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1)\
    \ {\n            my $path = [];\n            my $sum = 0;\n            dfs($grid,\
    \ $i, $j, $k, $path, $sum);\n            if ($sum < $min_sum) {\n            \
    \    $min_sum = $sum;\n                $min_path = $path;\n            }\n   \
    \     }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n =\
    \ @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n\
    \ * $n + 1;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $sum = 0;\n            $visited->[$i][$j] =\
    \ 1;\n            $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $path, $sum, $visited, $min, $min_sum);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min;\n}",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n        }\n \
    \   }\n    my $min = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = 0; $j < $m; $j++) {\n            $min->[$i][$j] = [];\n        }\n    }\n\
    \    my $q = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0;\
    \ $j < $m; $j++) {\n            push @$q, [$i, $j];\n            $visited->[$i][$j]\
    \ = 1;\n            $min->[$i][$j] = [$grid->[$i][$j]];\n        }\n    }\n  \
    \  while (scalar @$q) {\n        my $cur = shift @$q;\n        my $i = $cur->[0];\n\
    \        my $j = $cur->[1];\n        $visited->[$i][$j] = 0;\n        for (my\
    \ $d = 0; $d < 4; $d++) {\n            my $ni = $i + $dx[$d];\n            my\
    \ $nj = $j + $dy[$d];\n            if ($ni >= 0 && $ni < $n && $nj >= 0 && $nj\
    \ < $m) {\n                my $lst = $min->[$i][$j];\n                my $nlst\
    \ = $min->[$ni][$nj];\n                if (scalar @$lst < $k) {\n            \
    \        if (scalar @$nlst == 0 || $lst->[0] < $nlst->[0]) {\n               \
    \         $min", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m\
    \ = scalar @{$grid->[0]};\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n \
    \       for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n         \
    \   for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n     \
    \       }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n       \
    \ }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n\
    \            for my $j (0 .. $m - 1) {\n                my $min = [];\n      \
    \          for my $d (0 .. 3) {\n                    my $x = $i + $dx[$d];\n \
    \                   my $y = $j + $dy[$d];\n                    if ($x >= 0 &&\
    \ $x < $n && $y >= 0 && $y < $m) {\n                        if (scalar @{$dp->[$x][$y][$l\
    \ - 1]} > 0) {\n                            my $cur = [@{$dp->[$x][$y][$l - 1]},\
    \ $grid->[$i][$j]];\n                            if (scalar @$min == 0 || $cur\
    \ < $min) {\n                                $min = $cur;\n                  \
    \          }\n                        }\n                    }\n             \
    \   }\n                $dp->[$i][$j][$l] = $min;\n            }\n        }\n \
    \   }\n    my $min = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            if (scalar @{$dp->[$i][$j][$k - 1", "my ($grid, $k)\
    \ = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my\
    \ $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n    \
    \            $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                if ($i > 0) {\n                    my\
    \ $tmp = [@{$dp->[$i - 1][$j][$l - 1]}, $grid->[$i][$j]];\n                  \
    \  if (!@$min || $tmp lt $min) {\n                        $min = $tmp;\n     \
    \               }\n                }\n                if ($i < $n - 1) {\n   \
    \                 my $tmp = [@{$dp->[$i + 1][$j][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (!@$min || $tmp lt $min) {\n                        $min\
    \ = $tmp;\n                    }\n                }\n                if ($j >\
    \ 0) {\n                    my $tmp = [@{$dp->[$i][$j - 1][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (!@$min || $tmp lt $min) {\n                        $min\
    \ = $tmp;\n                    }\n                }\n                if ($j <\
    \ $m - 1) {\n                    my $tmp = [@{$dp->[$i][$j", "my ($grid, $k) =\
    \ @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n * $k;\n    my $min_path_sum = $min_sum;\n \
    \   my $min_path_sum_idx = 0;\n    my $min_path_sum_idx_row = 0;\n    my $min_path_sum_idx_col\
    \ = 0;\n    my $min_path_sum_idx_dir = 0;\n    my $min_path_sum_idx_dir_row =\
    \ 0;\n    my $min_path_sum_idx_dir_col = 0;\n    my $min_path_sum_idx_dir_row_col\
    \ = 0;\n    my $min_path_sum_idx_dir_row_col_row = 0;\n    my $min_path_sum_idx_dir_row_col_col\
    \ = 0;\n    my $min_path_sum_idx_dir_row_col_row_col = 0;\n    my $min_path_sum_idx_dir_row_col_row_col_row\
    \ = 0;\n    my $min_path_sum_idx_dir_row_col_row_col_col = 0;\n    my $min_path_sum_idx_dir_row_col_row_col_row_col\
    \ = 0;\n    my $min_path_sum_idx_dir_row_col_row_col_row_col_row = 0;\n    my\
    \ $min_path_sum_idx_dir_row_col_row_col_row_col_col = 0;\n    my $min_path_sum_idx_dir_row_col_row_col_row_col_row_col\
    \ = 0;\n    my $min_path_sum_idx_dir_row_col_row_col_row_col_row_col_row = 0;\n\
    \    my $min_path_sum_idx_dir_row_col_row_", "my ($grid, $k) = @_;\n    my $n\
    \ = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $visited = [];\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath =\
    \ [];\n    my $minSum = $n * $n * $k;\n    my $minPathSum = $minSum;\n    for\
    \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n   \
    \         my $path = [];\n            my $pathSum = 0;\n            $visited->[$i][$j]\
    \ = 1;\n            push @$path, $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n\
    \            my $res = minPathHelper($grid, $visited, $path, $pathSum, $k, $n,\
    \ $m);\n            if ($res->[0] < $minPathSum) {\n                $minPathSum\
    \ = $res->[0];\n                $minPath = $res->[1];\n            }\n       \
    \     $visited->[$i][$j] = 0;\n        }\n    }\n    return $minPath;\n}", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minSum = $n * $n * $k;\n    my $minPathSum = $minSum;\n\
    \    my $minPathSum2 = $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n\
    \    my $minPathSum3 = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPath4\
    \ = [];\n    my $minPath5 = [];\n    my $minPathSum5 = $minSum;\n    my $minPathSum6\
    \ = $minSum;\n    my $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7\
    \ = $minSum;\n    my $minPathSum8 = $minSum;\n    my $minPath8 = [];\n    my $minPath9\
    \ = [];\n    my $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n   \
    \ my $minPath10 = [];\n    my $minPath11 = [];\n    my $minPathSum11 = $minSum;\n\
    \    my $minPathSum12 = $minSum;\n    my $minPath12 = [];\n    my $minPath13 =\
    \ [];\n    my $minPathSum13 = $minSum;\n    my $minPathSum14 = $minSum;\n    my\
    \ $minPath14 = [];\n    my $minPath15 = [];\n    my $minPathSum15 = $minSum;\n\
    \    my $minPathSum16 = $minSum;\n    my $minPath16 = [];\n    my $minPath17 =\
    \ [];\n    my $minPathSum17 = $minSum;\n    my $minPathSum18 = $minSum;\n    my\
    \ $minPath18 = [];\n    my $minPath19 = [];\n    my $minPathSum19 = $minSum;\n\
    \    my $minPathSum20 = $minSum;\n    my $minPath20 = [];\n    my $minPath21 =\
    \ [];\n    my $minPathSum21", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n    my $minPath2 = [];\n\
    \    my $minPathSum3 = $n * $n + 1;\n    my $minPath3 = [];\n    my $minPathSum4\
    \ = $n * $n + 1;\n    my $minPath4 = [];\n    my $minPathSum5 = $n * $n + 1;\n\
    \    my $minPath5 = [];\n    my $minPathSum6 = $n * $n + 1;\n    my $minPath6\
    \ = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath7 = [];\n    my $minPathSum8\
    \ = $n * $n + 1;\n    my $minPath8 = [];\n    my $minPathSum9 = $n * $n + 1;\n\
    \    my $minPath9 = [];\n    my $minPathSum10 = $n * $n + 1;\n    my $minPath10\
    \ = [];\n    my $minPathSum11 = $n * $n + 1;\n    my $minPath11 = [];\n    my\
    \ $minPathSum12 = $n * $n + 1;\n    my $minPath12 = [];\n    my $minPathSum13\
    \ = $n * $n + 1;\n    my $minPath13 = [];\n    my $minPathSum14 = $n * $n + 1;\n\
    \    my $minPath14 = [];\n    my $minPathSum15 = $n * $n + 1;\n    my $minPath15\
    \ = [];\n    my $minPathSum16 = $n * $n + 1;\n    my $minPath16 = [];\n    my\
    \ $minPathSum17 = $n * $n + 1;\n    my $minPath17 = [];\n    my $minPathSum18\
    \ = $n * $n + 1;\n    my $minPath18 = [];\n    my $min", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $path =\
    \ [];\n    my $min = [];\n    my $min_val = 1000000000;\n    my $min_path = [];\n\
    \    my $min_path_val = 1000000000;\n    my $min_path_len = 1000000000;\n    my\
    \ $min_path_len_val = 1000000000;\n    my $min_path_len_path = [];\n    my $min_path_len_path_val\
    \ = 1000000000;\n    my $min_path_len_path_len = 1000000000;\n    my $min_path_len_path_len_val\
    \ = 1000000000;\n    my $min_path_len_path_len_path = [];\n    my $min_path_len_path_len_path_val\
    \ = 1000000000;\n    my $min_path_len_path_len_path_len = 1000000000;\n    my\
    \ $min_path_len_path_len_path_len_val = 1000000000;\n    my $min_path_len_path_len_path_len_path\
    \ = [];\n    my $min_path_len_path_len_path_len_path_val = 1000000000;\n    my\
    \ $min_path_len_path_len_path_len_path_len = 1000000000;\n    my $min_path_len_path_len_path_len_path_len_val\
    \ = 1000000000;\n    my $min_path_len_path_len_path_len_path_len_path = [];\n\
    \    my $min_path_len_path_len_path_len_path_len_path_val = 1000000000;\n    my\
    \ $min_path_len_path_len_path_len_path_len_path_len = 1000000000;\n    my $min_path_len_path_len_path_len_path_len_path_len_val\
    \ = 1000000000;\n    my $min_path_len_path_len_path_len_path_len_path_len_path\
    \ = [];\n    my $min_path", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_grid = [];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $min_path_sum_grid->[$i]->[$j]\
    \ = $n * $n * $k;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            my $path = [];\n            my $path_sum\
    \ = 0;\n            my $path_sum_grid = [];\n            for my $i (0 .. $n -\
    \ 1) {\n                for my $j (0 .. $m - 1) {\n                    $path_sum_grid->[$i]->[$j]\
    \ = $n * $n * $k;\n                }\n            }\n            find_path($grid,\
    \ $i, $j, $k, $path, $path_sum, $path_sum_grid, $min_path, $min_path_sum, $min_path_sum_grid);\n\
    \        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n\
    \ = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
    \    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n         \
    \   $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my\
    \ $min_path = [];\n    my $min_path_sum = $max * $k;\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            my $path = [];\n            my\
    \ $path_sum = 0;\n            my $path_len = 0;\n            my $visited = {};\n\
    \            my $dfs;\n            $dfs = sub {\n                my ($i, $j) =\
    \ @_;\n                return if $path_len == $k;\n                return if $visited->{\"\
    $i,$j\"};\n                $visited->{\"$i,$j\"} = 1;\n                $path_sum\
    \ += $grid->[$i][$j];\n                $path_len++;\n                push @$path,\
    \ $grid->[$i][$j];\n                if ($path_len == $k) {\n                 \
    \   if ($path_sum < $min_path_sum) {\n                        $min_path_sum =\
    \ $path_sum;\n                        $min_path = $path;\n                   \
    \ }\n                    return;\n                }\n                $dfs->($i-1,\
    \ $j) if $i > 0;\n                $dfs->($i+1, $j) if $i < $n-1;\n           \
    \     $dfs->($i, $j-1) if $j > 0;\n                $dfs->($i, $j+1) if $j <",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum\
    \ = $min_sum;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_jdx = 0;\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $sum = 0;\n            my $path_sum = 0;\n \
    \           my $path_sum_idx = 0;\n            my $path_sum_jdx = 0;\n       \
    \     my $path_sum_min = $n * $n + 1;\n            my $path_sum_min_idx = 0;\n\
    \            my $path_sum_min_jdx = 0;\n            my $path_sum_max = 0;\n  \
    \          my $path_sum_max_idx = 0;\n            my $path_sum_max_jdx = 0;\n\
    \            my $path_sum_max_idx_2 = 0;\n            my $path_sum_max_jdx_2 =\
    \ 0;\n            my $path_sum_max_2 = 0;\n            my $path_sum_max_idx_3\
    \ = 0;\n            my $path_sum_max_jdx_3 = 0;\n            my $path_sum_max_3\
    \ = 0;\n            my $path_sum_max_idx_4 = 0;\n            my $path_sum_max_jdx_4\
    \ = 0;\n            my $path_sum_max_4 = 0;\n            my $path_sum_max_idx_5\
    \ = 0;\n            my $path_sum_max_jdx_5 = 0;\n            my $path_sum_max_5\
    \ = 0;\n            my $path_sum_max_idx_6 = 0;\n            my $path_sum_max_jdx_6\
    \ = 0;\n            my $", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_found = 0;\n    my $min_path_sum_found_count\
    \ = 0;\n    my $min_path_sum_found_count_max = $n * $n;\n    my $min_path_sum_found_count_max_found\
    \ = 0;\n    my $min_path_sum_found_count_max_found_count = 0;\n    my $min_path_sum_found_count_max_found_count_max\
    \ = $n * $n;\n    my $min_path_sum_found_count_max_found_count_max_found = 0;\n\
    \    my $min_path_sum_found_count_max_found_count_max_found_count = 0;\n    my\
    \ $min_path_sum_found_count_max_found_count_max_found_count_max = $n * $n;\n \
    \   my $min_path_sum_found_count_max_found_count_max_found_count_max_found = 0;\n\
    \    my $min_path_sum_found_count_max_found_count_max_found_count_max_found_count\
    \ = 0;\n    my $min_path_sum_found_count_max_found_count_max_found_count_max_found_count_max\
    \ = $n * $n;\n    my $min_path_sum_found_count_max_found_count_max_found_count_max_found_count_max_found\
    \ = 0;\n    my $min_path_sum_found_count_max_found_count_max_found_count_max_found_count_max_found_count\
    \ = 0;\n    my $min_path_sum_found_count_max_found_count_max_found_count_max_found_count_max_found_count_max\
    \ = $n * $n;\n    my $", "my ($grid, $k) = @_;\n    my $n = @$grid;\n    my @path\
    \ = ();\n    my $min = $n * $n;\n    my @min_path = ();\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $n - 1) {\n            my $cur = $grid->[$i][$j];\n\
    \            my @cur_path = ($cur);\n            my $cur_min = $cur;\n       \
    \     my @cur_min_path = ($cur);\n            for my $l (1 .. $k - 1) {\n    \
    \            my $min_neighbor = $n * $n;\n                my @min_neighbor_path\
    \ = ();\n                for my $x ($i - 1 .. $i + 1) {\n                    next\
    \ if $x < 0 || $x >= $n;\n                    for my $y ($j - 1 .. $j + 1) {\n\
    \                        next if $y < 0 || $y >= $n;\n                       \
    \ next if $x == $i && $y == $j;\n                        my $neighbor = $grid->[$x][$y];\n\
    \                        if ($neighbor < $min_neighbor) {\n                  \
    \          $min_neighbor = $neighbor;\n                            @min_neighbor_path\
    \ = ($neighbor);\n                        } elsif ($neighbor == $min_neighbor)\
    \ {\n                            push @min_neighbor_path, $neighbor;\n       \
    \                 }\n                    }\n                }\n              \
    \  $cur_min += $min_neighbor;\n                push @cur_min_path, @min_neighbor_path;\n\
    \                $i = $min_neighbor_path[0] - 1;\n                $j = $min_neighbor_path[0]\
    \ - 1;\n            }\n            if ($cur_min < $min) {\n                $min\
    \ = $cur_min;\n                @min_path = @cur_min_path;\n            }\n   \
    \     }\n    }\n    return @min_path;\n}", "my ($grid, $k) = @_;\n    my $n =\
    \ scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n \
    \           my $visited = [];\n            for my $x (0 .. $n - 1) {\n       \
    \         for my $y (0 .. $m - 1) {\n                    $visited->[$x][$y] =\
    \ 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
    \            my $res = dfs($grid, $i, $j, $n, $m, $k - 1, $visited, $path, $sum);\n\
    \            if ($res->[0] < $min_sum) {\n                $min_sum = $res->[0];\n\
    \                $min_path = $res->[1];\n            }\n        }\n    }\n   \
    \ return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n \
    \   my $m = scalar @{$grid->[0]};\n    my $minPath = [];\n    my $minPathSum =\
    \ $n * $n * $k;\n    my $minPathSum2 = $n * $n * $k;\n    my $minPath2 = [];\n\
    \    my $minPath3 = [];\n    my $minPathSum3 = $n * $n * $k;\n    my $minPath4\
    \ = [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum5\
    \ = $n * $n * $k;\n    my $minPath6 = [];\n    my $minPathSum6 = $n * $n * $k;\n\
    \    my $minPath7 = [];\n    my $minPathSum7 = $n * $n * $k;\n    my $minPath8\
    \ = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum9\
    \ = $n * $n * $k;\n    my $minPath10 = [];\n    my $minPathSum10 = $n * $n * $k;\n\
    \    my $minPath11 = [];\n    my $minPathSum11 = $n * $n * $k;\n    my $minPath12\
    \ = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath13 = [];\n    my\
    \ $minPathSum13 = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum14\
    \ = $n * $n * $k;\n    my $minPath15 = [];\n    my $minPathSum15 = $n * $n * $k;\n\
    \    my $minPath16 = [];\n    my $minPathSum16 = $n * $n * $k;\n    my $minPath17\
    \ = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath18 = [];\n    my\
    \ $min", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar\
    \ @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum = $n * $n * $k;\n  \
    \  my $min_path_sum = $min_sum;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_jdx\
    \ = 0;\n    my $min_path_sum_dir = 0;\n    my $min_path_sum_len = 0;\n    my $min_path_sum_val\
    \ = 0;\n    my $min_path_sum_val_idx = 0;\n    my $min_path_sum_val_jdx = 0;\n\
    \    my $min_path_sum_val_dir = 0;\n    my $min_path_sum_val_len = 0;\n    my\
    \ $min_path_sum_val_val = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        for\
    \ (my $j = 0; $j < $m; $j++) {\n            for (my $dir = 0; $dir < 4; $dir++)\
    \ {\n                for (my $len = 0; $len < $k; $len++) {\n                \
    \    my $sum = $grid->[$i][$j];\n                    my $path = [$grid->[$i][$j]];\n\
    \                    my $idx = $i;\n                    my $jdx = $j;\n      \
    \              for (my $l = 0; $l < $len; $l++) {\n                        if\
    \ ($dir == 0) {\n                            $idx--;\n                       \
    \ } elsif ($dir == 1) {\n                            $jdx++;\n               \
    \         } elsif ($dir == 2) {\n                            $idx++;\n       \
    \                 } elsif ($dir == 3) {\n                            $jdx--;\n\
    \                        }\n                        if ($idx < 0 || $idx >= $n\
    \ || $jdx < 0 || $jdx >= $m) {\n                            $sum = $n * $n * $k;",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $sum = 0;\n            my $visited = [];\n            for my $x (0\
    \ .. $n - 1) {\n                for my $y (0 .. $m - 1) {\n                  \
    \  $visited->[$x][$y] = 0;\n                }\n            }\n            $visited->[$i][$j]\
    \ = 1;\n            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n         \
    \   if ($sum < $min_sum) {\n                $min_sum = $sum;\n               \
    \ $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
    }", "my ($grid, $k) = @_;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_sum = $n * $m * $k;\n    my $min_path_sum\
    \ = $min_sum;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $visited->[$i][$j] = 1;\n            my $path = [];\n            my $path_sum\
    \ = $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n            my\
    \ $path_len = 1;\n            my $res = dfs($grid, $i, $j, $k, $path, $path_sum,\
    \ $path_len, $visited);\n            if ($res->[0] < $min_path_sum) {\n      \
    \          $min_path = $res->[1];\n                $min_path_sum = $res->[0];\n\
    \            }\n            $visited->[$i][$j] = 0;\n        }\n    }\n    return\
    \ $min_path;\n}", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m\
    \ = scalar @{$grid->[0]};\n    my $minPath = [];\n    my $minPathSum = $n * $n\
    \ + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n   \
    \         my $path = [];\n            my $pathSum = 0;\n            my $visited\
    \ = [];\n            for my $x (0 .. $n - 1) {\n                for my $y (0 ..\
    \ $m - 1) {\n                    $visited->[$x][$y] = 0;\n                }\n\
    \            }\n            $visited->[$i][$j] = 1;\n            push @$path,\
    \ $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n            dfs($grid,\
    \ $i, $j, $k - 1, $visited, $path, $pathSum);\n            if ($pathSum < $minPathSum)\
    \ {\n                $minPathSum = $pathSum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "my ($grid, $k) =\
    \ @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min\
    \ = $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
    \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n   \
    \     }\n    }\n    my $min_path = [];\n    for my $i (0..$n-1) {\n        for\
    \ my $j (0..$m-1) {\n            my $path = [];\n            my $path_len = 0;\n\
    \            my $visited = {};\n            my $curr = [$i, $j];\n           \
    \ while ($path_len < $k) {\n                push @$path, $grid->[$curr->[0]][$curr->[1]];\n\
    \                $visited->{$curr->[0]}->{$curr->[1]} = 1;\n                $path_len++;\n\
    \                my $next = [$curr->[0], $curr->[1]];\n                for my\
    \ $d (0..3) {\n                    my $x = $curr->[0] + $dirs[$d][0];\n      \
    \              my $y = $curr->[1] + $dirs[$d][1];\n                    if ($x\
    \ >= 0 && $x < $n && $y >= 0 && $y < $m && !$visited->{$x}->{$y}) {\n        \
    \                if ($grid->[$x][$y] < $grid->[$next->[0]][$next->[1]]) {\n  \
    \                          $next = [$x, $y];\n                        }\n    \
    \                }\n                }\n                $curr = $next;\n      \
    \      }\n            $min_path = $path", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_idx = 0;\n    my $min_path_sum_idx = 0;\n \
    \   for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n           \
    \ my $path = [];\n            my $path_sum = 0;\n            my $path_idx = 0;\n\
    \            my $path_sum_idx = 0;\n            my $visited = [];\n          \
    \  for my $x (0 .. $n - 1) {\n                for my $y (0 .. $m - 1) {\n    \
    \                $visited->[$x][$y] = 0;\n                }\n            }\n \
    \           my $queue = [];\n            push @$queue, [$i, $j];\n           \
    \ $visited->[$i][$j] = 1;\n            while (@$queue) {\n                my $node\
    \ = shift @$queue;\n                my ($x, $y) = @$node;\n                $path->[$path_idx++]\
    \ = $grid->[$x][$y];\n                $path_sum += $grid->[$x][$y];\n        \
    \        $path_sum_idx++;\n                if ($path_sum_idx == $k) {\n      \
    \              if ($path_sum < $min_path_sum) {\n                        $min_path\
    \ = $path;\n                        $min_path_sum = $path_sum;\n             \
    \           $min_path_idx = $path_idx;\n                        $min_path_sum_idx\
    \ = $path_sum_idx;\n                    }\n                    elsif ($path_sum\
    \ == $min_path_sum) {\n                        for my $i (0 .. $k - 1) {\n   \
    \                         if ($path->[$i] < $min_path->[$i]) {\n             \
    \                   $min_path = $path;\n                                $", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n        }\n \
    \   }\n    my $min_path = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for\
    \ (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n            $visited->[$i][$j]\
    \ = 1;\n            push @$path, $grid->[$i][$j];\n            dfs($grid, $visited,\
    \ $i, $j, $k - 1, $path, $min_path);\n            $visited->[$i][$j] = 0;\n  \
    \      }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n =\
    \ scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_found = 0;\n    my\
    \ $path = [];\n    my $path_sum = 0;\n    my $path_sum_found = 0;\n    my $visited\
    \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $dfs\
    \ = sub {\n        my ($i, $j) = @_;\n        if ($path_sum_found) {\n       \
    \     return;\n        }\n        if ($visited->[$i][$j]) {\n            return;\n\
    \        }\n        $visited->[$i][$j] = 1;\n        push @$path, $grid->[$i][$j];\n\
    \        $path_sum += $grid->[$i][$j];\n        if (scalar @$path == $k) {\n \
    \           $path_sum_found = 1;\n            if ($path_sum < $min_path_sum) {\n\
    \                $min_path_sum = $path_sum;\n                $min_path = [@$path];\n\
    \            }\n            pop @$path;\n            $path_sum -= $grid->[$i][$j];\n\
    \            $visited->[$i][$j] = 0;\n            return;\n        }\n       \
    \ if ($i > 0) {\n            $dfs->($i - 1, $j);\n        }\n        if ($i <\
    \ $n - 1) {\n            $dfs->($i + 1, $j);\n        }\n        if ($j > 0) {\n\
    \            $dfs->($i, $j - 1);\n        }\n        if ($j < $m - 1) {\n    \
    \        $dfs->($", "my ($grid, $k) = @_;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n         \
    \   my $sum = 0;\n            my $visited = [];\n            for my $x (0 .. $n\
    \ - 1) {\n                for my $y (0 .. $m - 1) {\n                    $visited->[$x][$y]\
    \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            dfs($grid, $i, $j, $k, $path, $sum, $visited, $min, $min_sum);\n\
    \        }\n    }\n    return $min;\n}", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum\
    \ = $n * $n * $k;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_idx\
    \ = 0;\n    my $path = [];\n    my $path_sum = 0;\n    my $path_sum_idx = 0;\n\
    \    my $visited = [];\n    my $visited_sum = 0;\n    my $visited_sum_idx = 0;\n\
    \    my $visited_sum_idx_max = $n * $n - 1;\n    my $visited_sum_idx_min = 0;\n\
    \    my $visited_sum_idx_mid = 0;\n    my $visited_sum_idx_mid_prev = 0;\n   \
    \ my $visited_sum_idx_mid_next = 0;\n    my $visited_sum_idx_mid_prev_diff = 0;\n\
    \    my $visited_sum_idx_mid_next_diff = 0;\n    my $visited_sum_idx_mid_diff\
    \ = 0;\n    my $visited_sum_idx_mid_diff_prev = 0;\n    my $visited_sum_idx_mid_diff_next\
    \ = 0;\n    my $visited_sum_idx_mid_diff_prev_diff = 0;\n    my $visited_sum_idx_mid_diff_next_diff\
    \ = 0;\n    my $visited_sum_idx_mid_diff_diff = 0;\n    my $visited_sum_idx_mid_diff_diff_prev\
    \ = 0;\n    my $visited_sum_idx_mid_diff_diff_next = 0;\n    my $visited_sum_idx_mid_diff_diff_prev_diff\
    \ = 0;\n    my $visited_sum_idx_mid_diff_diff_next_diff = 0;\n    my $visited_sum",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum\
    \ = $min_sum;\n    my $min_path_sum_idx = -1;\n    my $min_path_sum_jdx = -1;\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  if ($grid->[$i][$j] < $min_sum) {\n                $min_sum = $grid->[$i][$j];\n\
    \                $min_path_sum_idx = $i;\n                $min_path_sum_jdx =\
    \ $j;\n            }\n        }\n    }\n    my $min_path_sum_idx_prev = $min_path_sum_idx;\n\
    \    my $min_path_sum_jdx_prev = $min_path_sum_jdx;\n    for my $i (0 .. $k -\
    \ 1) {\n        $min_path->[$i] = $grid->[$min_path_sum_idx][$min_path_sum_jdx];\n\
    \        $min_path_sum += $grid->[$min_path_sum_idx][$min_path_sum_jdx];\n   \
    \     my $min_path_sum_idx_next = -1;\n        my $min_path_sum_jdx_next = -1;\n\
    \        my $min_path_sum_next = $min_path_sum + $n * $n + 1;\n        if ($min_path_sum_idx\
    \ > 0) {\n            if ($grid->[$min_path_sum_idx - 1][$min_path_sum_jdx] <\
    \ $min_path_sum_next) {\n                $min_path_sum_next = $grid->[$min_path_sum_idx\
    \ - 1][$min_path_sum_jdx];\n                $", "my ($grid, $k) = @_;\n    my\
    \ $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_path_sum = $n * $n * $k;\n    my $visited = [];\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n\
    \            my $path_sum = 0;\n            my $visited = [];\n            _minPath($grid,\
    \ $i, $j, $k, $path, $path_sum, $min_path, $min_path_sum, $visited);\n       \
    \ }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $dp = [];\n    for my $i\
    \ (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j]\
    \ = [];\n            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l]\
    \ = [];\n            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $m - 1) {\n            for my $l (0 .. $k - 1) {\n      \
    \          if ($l == 0) {\n                    $dp->[$i][$j][$l] = [$grid->[$i][$j]];\n\
    \                } else {\n                    my $min = [];\n               \
    \     if ($i > 0) {\n                        my $tmp = [@{$dp->[$i - 1][$j][$l\
    \ - 1]}, $grid->[$i][$j]];\n                        if (!@$min || $tmp lt $min)\
    \ {\n                            $min = $tmp;\n                        }\n   \
    \                 }\n                    if ($i < $n - 1) {\n                \
    \        my $tmp = [@{$dp->[$i + 1][$j][$l - 1]}, $grid->[$i][$j]];\n        \
    \                if (!@$min || $tmp lt $min) {\n                            $min\
    \ = $tmp;\n                        }\n                    }\n                \
    \    if ($j > 0) {\n                        my $tmp = [@{$dp->[$i][$j - 1][$l\
    \ - 1]}, $grid->[$i][$j]];\n                        if (!@$min || $tmp lt $min)\
    \ {\n                            $min = $tmp;\n                        }\n   \
    \                 }\n                    if ($j < $m - 1) {\n                \
    \        my $tmp = [@{$dp->[$i][$j + 1][$l - 1]}, $grid->[$i][$j", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_path_val = [];\n    my $min_path_len = $k\
    \ + 1;\n    my $path = [];\n    my $path_val = [];\n    my $path_len = 0;\n  \
    \  my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j\
    \ = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++)\
    \ {\n            $path = [];\n            $path_val = [];\n            $path_len\
    \ = 0;\n            $visited->[$i][$j] = 1;\n            push @$path, [$i, $j];\n\
    \            push @$path_val, $grid->[$i][$j];\n            $path_len++;\n   \
    \         dfs($grid, $n, $m, $i, $j, $k, $path, $path_val, $path_len, $visited,\
    \ $min_path, $min_path_val, $min_path_len);\n            $visited->[$i][$j] =\
    \ 0;\n        }\n    }\n    return $min_path_val;\n}", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n     \
    \   for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum\
    \ = 0;\n            my $visited = [];\n            for my $x (0 .. $n - 1) {\n\
    \                for my $y (0 .. $m - 1) {\n                    $visited->[$x][$y]\
    \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n            if ($sum\
    \ < $min_sum) {\n                $min_sum = $sum;\n                $min_path =\
    \ $path;\n            }\n        }\n    }\n    return $min_path;\n}", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_grid\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $min_path_sum_grid->[$i]->[$j] = $n * $n * $k;\n        }\n    }\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $path_sum = 0;\n            my $path_sum_grid\
    \ = [];\n            for my $i (0 .. $n - 1) {\n                for my $j (0 ..\
    \ $m - 1) {\n                    $path_sum_grid->[$i]->[$j] = $n * $n * $k;\n\
    \                }\n            }\n            find_path($grid, $i, $j, $k, $path,\
    \ $path_sum, $path_sum_grid, $min_path, $min_path_sum, $min_path_sum_grid);\n\
    \        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n\
    \ = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_sum = $n * $n + 1;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_index\
    \ = 0;\n    my $min_path_sum_index_value = 0;\n    my $min_path_sum_index_value_index\
    \ = 0;\n    my $min_path_sum_index_value_index_value = 0;\n    my $min_path_sum_index_value_index_value_index\
    \ = 0;\n    my $min_path_sum_index_value_index_value_index_value = 0;\n    my\
    \ $min_path_sum_index_value_index_value_index_value_index = 0;\n    my $min_path_sum_index_value_index_value_index_value_index_value\
    \ = 0;\n    my $min_path_sum_index_value_index_value_index_value_index_value_index\
    \ = 0;\n    my $min_path_sum_index_value_index_value_index_value_index_value_index_value\
    \ = 0;\n    my $min_path_sum_index_value_index_value_index_value_index_value_index_value_index\
    \ = 0;\n    my $min_path_sum_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = 0;\n    my $min_path_sum_index_value_index_value_index_value_index_value_index_value_index_value_index\
    \ = 0;\n    my $min_path_sum_index_value_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = 0;\n    my $min_path_sum_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\
    \ = 0;\n    my $min_path_sum_index", "my ($grid, $k) = @_;\n    my $n = @$grid;\n\
    \    my @path;\n    my $min = $grid->[0][0];\n    my $min_i = 0;\n    my $min_j\
    \ = 0;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n   \
    \         if ($grid->[$i][$j] < $min) {\n                $min = $grid->[$i][$j];\n\
    \                $min_i = $i;\n                $min_j = $j;\n            }\n \
    \       }\n    }\n    my $i = $min_i;\n    my $j = $min_j;\n    for (1 .. $k)\
    \ {\n        push @path, $grid->[$i][$j];\n        my $min = $grid->[$i][$j];\n\
    \        my $min_i = $i;\n        my $min_j = $j;\n        if ($i > 0 && $grid->[$i\
    \ - 1][$j] < $min) {\n            $min = $grid->[$i - 1][$j];\n            $min_i\
    \ = $i - 1;\n            $min_j = $j;\n        }\n        if ($i < $n - 1 && $grid->[$i\
    \ + 1][$j] < $min) {\n            $min = $grid->[$i + 1][$j];\n            $min_i\
    \ = $i + 1;\n            $min_j = $j;\n        }\n        if ($j > 0 && $grid->[$i][$j\
    \ - 1] < $min) {\n            $min = $grid->[$i][$j - 1];\n            $min_i\
    \ = $i;\n            $min_j = $j - 1;\n        }\n        if ($j < $n - 1 && $grid->[$i][$j\
    \ + 1] < $min) {\n            $min = $grid->[$i][$j + 1];\n            $min_i\
    \ = $i;\n            $min_j = $j + 1;\n", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count = 0;\n    my $min_path_sum_count_max\
    \ = 0;\n    my $min_path_sum_count_max_path = [];\n    my $min_path_sum_count_max_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count_max_path_sum_count = 0;\n    my $min_path_sum_count_max_path_sum_count_max\
    \ = 0;\n    my $min_path_sum_count_max_path_sum_count_max_path = [];\n    my $min_path_sum_count_max_path_sum_count_max_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count\
    \ = 0;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max =\
    \ 0;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path\
    \ = [];\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum_count\
    \ = 0;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum_count_max\
    \ = 0;\n    my $min_path_sum_count_max_path_sum_count_max_path_sum_count_max_path_sum_count_max_path\
    \ = [];\n    my $min_path_sum_", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $max\
    \ = $grid->[$n-1][$m-1];\n    my $min_path = [];\n    my $min_path_sum = $max\
    \ * $k;\n    my $path = [];\n    my $path_sum = 0;\n    my $visited = [];\n  \
    \  for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    my $dfs = sub {\n\
    \        my ($i, $j, $k) = @_;\n        if ($k == 0) {\n            if ($path_sum\
    \ < $min_path_sum) {\n                $min_path_sum = $path_sum;\n           \
    \     $min_path = [@$path];\n            }\n            return;\n        }\n \
    \       if ($i < 0 || $i >= $n || $j < 0 || $j >= $m) {\n            return;\n\
    \        }\n        if ($visited->[$i][$j]) {\n            return;\n        }\n\
    \        $visited->[$i][$j] = 1;\n        push @$path, $grid->[$i][$j];\n    \
    \    $path_sum += $grid->[$i][$j];\n        $dfs->($i-1, $j, $k-1);\n        $dfs->($i+1,\
    \ $j, $k-1);\n        $dfs->($i, $j-1, $k-1);\n        $dfs->($i, $j+1, $k-1);\n\
    \        pop @$path;\n        $path_sum -= $grid->[$i][$j];\n        $visited->[$i][$j]\
    \ = 0;\n    };\n    $dfs->(0, 0, $k);\n", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my @path;\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum = $min_sum;\n  \
    \  my $min_path_size = $k + 1;\n    my $min_path_size_sum = $min_path_size;\n\
    \    my $min_path_size_sum_size = $min_path_size;\n    my $min_path_size_sum_size_size\
    \ = $min_path_size;\n    my $min_path_size_sum_size_size_size = $min_path_size;\n\
    \    my $min_path_size_sum_size_size_size_size = $min_path_size;\n    my $min_path_size_sum_size_size_size_size_size\
    \ = $min_path_size;\n    my $min_path_size_sum_size_size_size_size_size_size =\
    \ $min_path_size;\n    my $min_path_size_sum_size_size_size_size_size_size_size\
    \ = $min_path_size;\n    my $min_path_size_sum_size_size_size_size_size_size_size_size\
    \ = $min_path_size;\n    my $min_path_size_sum_size_size_size_size_size_size_size_size_size\
    \ = $min_path_size;\n    my $min_path_size_sum_size_size_size_size_size_size_size_size_size_size\
    \ = $min_path_size;\n    my $min_path_size_sum_size_size_size_size_size_size_size_size_size_size_size\
    \ = $min_path_size;\n    my $min_path_size_sum_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = $min_path_size;\n    my $min_path", "my ($grid, $k) = @_;\n    my $n = @$grid;\n\
    \    my @minPath;\n    my $minPathSum = $n * $n + 1;\n    my @path;\n    my $pathSum\
    \ = 0;\n    my @visited;\n    my $visitedSum = 0;\n    my @stack;\n    my $stackSize\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    my $row;\n    my $col;\n    my $value;\n\
    \    my $nextValue;\n    my $nextRow;\n    my $nextCol;\n    my $nextVisitedSum;\n\
    \    my $nextPathSum;\n    my $nextStackSize;\n    my $nextPath;\n    my $nextVisited;\n\
    \    my $nextStack;\n    my $nextI;\n    my $nextJ;\n    my $next;\n    my $nextNext;\n\
    \    my $nextNextValue;\n    my $nextNextRow;\n    my $nextNextCol;\n    my $nextNextVisitedSum;\n\
    \    my $nextNextPathSum;\n    my $nextNextStackSize;\n    my $nextNextPath;\n\
    \    my $nextNextVisited;\n    my $nextNextStack;\n    my $nextNextI;\n    my\
    \ $nextNextJ;\n    my $nextNextNext;\n    my $nextNextNextValue;\n    my $nextNextNextRow;\n\
    \    my $nextNextNextCol;\n    my $nextNextNextVisitedSum;\n    my $nextNextNextPathSum;\n\
    \    my $nextNextNextStackSize;\n    my $nextNextNextPath;\n    my $nextNextNextVisited;\n\
    \    my $nextNextNextStack;\n    my $nextNextNextI;\n    my $nextNextNextJ;\n\
    \    my $nextNextNextNext;\n    my $nextNextNextNextValue;\n    my $nextNextNextNextRow;\n\
    \    my $nextNextNextNextCol;\n    my $nextNextNextNextVisitedSum;\n    my $nextNextNextNextPathSum;\n\
    \    my $nextNextNextNextStackSize;\n    my $nextNextNextNextPath;\n    my", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n * $k;\n    my $min_sum_path\
    \ = [];\n    my $min_sum_path_hash = {};\n    my $min_sum_path_hash_key = '';\n\
    \    my $min_sum_path_hash_value = [];\n    my $min_sum_path_hash_value_key =\
    \ '';\n    my $min_sum_path_hash_value_value = [];\n    my $min_sum_path_hash_value_value_key\
    \ = '';\n    my $min_sum_path_hash_value_value_value = [];\n    my $min_sum_path_hash_value_value_value_key\
    \ = '';\n    my $min_sum_path_hash_value_value_value_value = [];\n    my $min_sum_path_hash_value_value_value_value_key\
    \ = '';\n    my $min_sum_path_hash_value_value_value_value_value = [];\n    my\
    \ $min_sum_path_hash_value_value_value_value_value_key = '';\n    my $min_sum_path_hash_value_value_value_value_value_value\
    \ = [];\n    my $min_sum_path_hash_value_value_value_value_value_value_key = '';\n\
    \    my $min_sum_path_hash_value_value_value_value_value_value_value = [];\n \
    \   my $min_sum_path_hash_value_value_value_value_value_value_value_key = '';\n\
    \    my $min_sum_path_hash_value_value_value_value_value_value_value_value = [];\n\
    \    my $min_sum_path_hash_value_value_value_value_value_value_value_value_key\
    \ = '';\n    my $min_sum_path_hash_value_value_value_value_value_value_value_value_",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my @path = ();\n    my $min\
    \ = $grid->[0][0];\n    my $min_path = [$min];\n    my $min_path_len = 1;\n  \
    \  my $min_path_idx = 0;\n    my $min_path_idx_end = 0;\n    my $min_path_idx_start\
    \ = 0;\n    my $min_path_idx_start_end = 0;\n    my $min_path_idx_start_start\
    \ = 0;\n    my $min_path_idx_start_start_end = 0;\n    my $min_path_idx_start_start_start\
    \ = 0;\n    my $min_path_idx_start_start_start_end = 0;\n    my $min_path_idx_start_start_start_start\
    \ = 0;\n    my $min_path_idx_start_start_start_start_end = 0;\n    my $min_path_idx_start_start_start_start_start\
    \ = 0;\n    my $min_path_idx_start_start_start_start_start_end = 0;\n    my $min_path_idx_start_start_start_start_start_start\
    \ = 0;\n    my $min_path_idx_start_start_start_start_start_start_end = 0;\n  \
    \  my $min_path_idx_start_start_start_start_start_start_start = 0;\n    my $min_path_idx_start_start_start_start_start_start_start_end\
    \ = 0;\n    my $min_path_idx_start_start_start_start_start_start_start_start =\
    \ 0;\n    my $min_path_idx_start_start_start_start_start_start_start_start_end\
    \ = 0;\n    my $min_path_idx_start_start_start_start_start_start_start_start_start\
    \ = 0;\n    my $min_path_idx_start_start_start", "my ($grid, $k) = @_;\n    my\
    \ $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
    \    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n         \
    \   $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my\
    \ $path = [];\n    my $min_path = [];\n    for my $i (0..$n-1) {\n        for\
    \ my $j (0..$m-1) {\n            $path = [];\n            $path = find_path($grid,\
    \ $i, $j, $k, $n, $m, $min, $max, $path);\n            if (!@$min_path || $path\
    \ < $min_path) {\n                $min_path = $path;\n            }\n        }\n\
    \    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum = $n\
    \ * $m * $k;\n    my $min_path_sum_found = 0;\n    my $min_path_sum_found_at =\
    \ 0;\n    my $min_path_sum_found_at_i = 0;\n    my $min_path_sum_found_at_j =\
    \ 0;\n    my $min_path_sum_found_at_k = 0;\n    my $min_path_sum_found_at_l =\
    \ 0;\n    my $min_path_sum_found_at_m = 0;\n    my $min_path_sum_found_at_n =\
    \ 0;\n    my $min_path_sum_found_at_o = 0;\n    my $min_path_sum_found_at_p =\
    \ 0;\n    my $min_path_sum_found_at_q = 0;\n    my $min_path_sum_found_at_r =\
    \ 0;\n    my $min_path_sum_found_at_s = 0;\n    my $min_path_sum_found_at_t =\
    \ 0;\n    my $min_path_sum_found_at_u = 0;\n    my $min_path_sum_found_at_v =\
    \ 0;\n    my $min_path_sum_found_at_w = 0;\n    my $min_path_sum_found_at_x =\
    \ 0;\n    my $min_path_sum_found_at_y = 0;\n    my $min_path_sum_found_at_z =\
    \ 0;\n    my $min_path_sum_found_at_aa = 0;\n    my $min_path_sum_found_at_ab\
    \ = 0;\n    my $min_path_sum_found_at_ac = 0;\n    my $min_path_sum_found_at_ad\
    \ = 0;\n    my $min_path_sum_found_at_ae = 0;\n    my", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path;\n\
    \    my $min_path_sum;\n    my $min_path_val;\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            my $path = [$grid->[$i][$j]];\n\
    \            my $path_sum = $grid->[$i][$j];\n            my $path_val = $grid->[$i][$j];\n\
    \            my $visited = {};\n            $visited->{$i}{$j} = 1;\n        \
    \    my $res = minPathHelper($grid, $i, $j, $k - 1, $path, $path_sum, $path_val,\
    \ $visited);\n            if (!defined $min_path || $res->{path_sum} < $min_path_sum\
    \ || ($res->{path_sum} == $min_path_sum && $res->{path_val} < $min_path_val))\
    \ {\n                $min_path = $res->{path};\n                $min_path_sum\
    \ = $res->{path_sum};\n                $min_path_val = $res->{path_val};\n   \
    \         }\n        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n\
    \    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
    \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n   \
    \         $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath = [];\n \
    \   my $minSum = $n * $m * $n * $m;\n    my $minPathSum = $minSum;\n    my $minPathSum2\
    \ = $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3\
    \ = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPath4 = [];\n    my $minPath5\
    \ = [];\n    my $minPathSum5 = $minSum;\n    my $minPathSum6 = $minSum;\n    my\
    \ $minPath6 = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j =\
    \ 0; $j < $m; $j++) {\n            my $path = [];\n            my $sum = 0;\n\
    \            my $pathSum = 0;\n            my $pathSum2 = 0;\n            my $path2\
    \ = [];\n            my $path3 = [];\n            my $pathSum3 = 0;\n        \
    \    my $pathSum4 = 0;\n            my $path4 = [];\n            my $path5 = [];\n\
    \            my $pathSum5 = 0;\n            my $pathSum6 = 0;\n            my\
    \ $path6 = [];\n            $visited->[$i][$j] = 1;\n            push @$path,\
    \ $grid->[$i][$j];\n            push @$path2, $grid->[$i][$j];\n            push\
    \ @$path3, $grid->[$i][$j];\n            push @$path4, $grid->[$i][$j];\n    \
    \        push @$path5, $grid->[$i][", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my @path;\n    my $min_path = [map { [map { [0, 0] } (0 .. $n -\
    \ 1)] } (0 .. $n - 1)];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $n - 1) {\n            my $val = $grid->[$i][$j];\n            my $min_val =\
    \ $val;\n            my $min_path_len = 1;\n            if ($i > 0) {\n      \
    \          my $prev_val = $min_path->[$i - 1][$j][0];\n                if ($prev_val\
    \ < $min_val) {\n                    $min_val = $prev_val;\n                 \
    \   $min_path_len = $min_path->[$i - 1][$j][1] + 1;\n                }\n     \
    \           elsif ($prev_val == $min_val) {\n                    $min_path_len\
    \ = $min_path->[$i - 1][$j][1] + 1;\n                }\n            }\n      \
    \      if ($j > 0) {\n                my $prev_val = $min_path->[$i][$j - 1][0];\n\
    \                if ($prev_val < $min_val) {\n                    $min_val = $prev_val;\n\
    \                    $min_path_len = $min_path->[$i][$j - 1][1] + 1;\n       \
    \         }\n                elsif ($prev_val == $min_val) {\n               \
    \     $min_path_len = $min_path->[$i][$j - 1][1] + 1;\n                }\n   \
    \         }\n            $min_path->[$i][$j] = [$min_val, $min_path_len];\n  \
    \      }\n    }\n    my $i = $n - 1;\n    my $j = $n - 1;\n    while ($k > 0)\
    \ {\n        push @path, $grid->[$i][$j];\n        if ($i > 0 && $min_path->[",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $sum = 0;\n            dfs($grid, $i, $j, $k, $path, $sum);\n    \
    \        if ($sum < $min_sum) {\n                $min_sum = $sum;\n          \
    \      $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
    }", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n * $k;\n    my $min_path_sum_grid\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $min_path_sum_grid->[$i][$j] = $n * $n * $k;\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my\
    \ $path = [];\n            my $path_sum = 0;\n            my $path_sum_grid =\
    \ [];\n            for my $i (0 .. $n - 1) {\n                for my $j (0 ..\
    \ $m - 1) {\n                    $path_sum_grid->[$i][$j] = $n * $n * $k;\n  \
    \              }\n            }\n            find_min_path($grid, $k, $i, $j,\
    \ $path, $path_sum, $path_sum_grid, $min_path, $min_path_sum, $min_path_sum_grid);\n\
    \        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n\
    \ = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $m * $k;\n    my $min_path_sum_grid = [];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $min_path_sum_grid->[$i]->[$j]\
    \ = $n * $m * $k;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            my $path = [];\n            my $path_sum\
    \ = 0;\n            my $path_sum_grid = [];\n            for my $i (0 .. $n -\
    \ 1) {\n                for my $j (0 .. $m - 1) {\n                    $path_sum_grid->[$i]->[$j]\
    \ = $n * $m * $k;\n                }\n            }\n            my $path_sum_grid_queue\
    \ = [];\n            push @$path_sum_grid_queue, [$i, $j];\n            $path_sum_grid->[$i]->[$j]\
    \ = $grid->[$i]->[$j];\n            while (@$path_sum_grid_queue) {\n        \
    \        my $cell = shift @$path_sum_grid_queue;\n                my ($i, $j)\
    \ = @$cell;\n                my $path_sum_grid_cell = $path_sum_grid->[$i]->[$j];\n\
    \                if ($i > 0 && $path_sum_grid->[$i - 1]->[$j] > $path_sum_grid_cell\
    \ + $grid->[$i - 1]->[$j]) {\n                    $path_sum_grid->[$i - 1]->[$j]\
    \ = $path_sum_grid_cell + $grid->[$i - 1]->[$j];\n                    push @$path_sum_grid_queue,\
    \ [", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n * $k;\n    my $min_path_sum\
    \ = 0;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n   \
    \         my $path = [];\n            my $path_sum = 0;\n            my $path_length\
    \ = 0;\n            my $visited = {};\n            my $queue = [[$i, $j]];\n \
    \           while (scalar @$queue) {\n                my $cell = shift @$queue;\n\
    \                my ($x, $y) = @$cell;\n                if ($x < 0 || $x >= $n\
    \ || $y < 0 || $y >= $m) {\n                    next;\n                }\n   \
    \             if ($visited->{\"$x,$y\"}) {\n                    next;\n      \
    \          }\n                $visited->{\"$x,$y\"} = 1;\n                $path_sum\
    \ += $grid->[$x][$y];\n                $path_length++;\n                push @$path,\
    \ $grid->[$x][$y];\n                if ($path_length == $k) {\n              \
    \      if ($path_sum < $min_sum) {\n                        $min_sum = $path_sum;\n\
    \                        $min_path = $path;\n                    }\n         \
    \           last;\n                }\n                push @$queue, [$x - 1, $y];\n\
    \                push @$queue, [$x + 1, $y];\n                push @$queue, [$x,\
    \ $y - 1];\n                push @$queue, [$x, $y + 1];\n            }\n     \
    \   }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $path = [];\n    my $min = [];\n    my $min_sum = $n * $n +\
    \ 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n     \
    \       $path = [];\n            my $sum = dfs($grid, $i, $j, $k, $path);\n  \
    \          if ($sum < $min_sum) {\n                $min_sum = $sum;\n        \
    \        $min = $path;\n            }\n        }\n    }\n    return $min;\n}",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            my $path = [$grid->[$i][$j]];\n            my $visited\
    \ = {};\n            $visited->{$i}->{$j} = 1;\n            dfs($grid, $i, $j,\
    \ $path, $visited, $k, $min_path);\n        }\n    }\n    return $min_path;\n}",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum\
    \ = $min_sum;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_jdx = 0;\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $sum = 0;\n            my $path_sum = $min_sum;\n\
    \            my $path_sum_idx = 0;\n            my $path_sum_jdx = 0;\n      \
    \      for my $l (0 .. $k - 1) {\n                push @$path, $grid->[$i][$j];\n\
    \                $sum += $grid->[$i][$j];\n                if ($l == $k - 1) {\n\
    \                    if ($sum < $path_sum) {\n                        $path_sum\
    \ = $sum;\n                        $path_sum_idx = $i;\n                     \
    \   $path_sum_jdx = $j;\n                    }\n                    elsif ($sum\
    \ == $path_sum) {\n                        if ($i < $path_sum_idx) {\n       \
    \                     $path_sum = $sum;\n                            $path_sum_idx\
    \ = $i;\n                            $path_sum_jdx = $j;\n                   \
    \     }\n                        elsif ($i == $path_sum_idx) {\n             \
    \               if ($j < $path_sum_jdx) {\n                                $path_sum\
    \ = $sum;\n                                $path_sum_idx = $i;\n             \
    \                   $path_sum_jdx = $j;\n                            }\n     \
    \                   }\n                    }\n                }\n            \
    \    else {\n                    if ($i > 0) {\n                        my $path_up\
    \ = [@$path];\n                        my $sum_up = $sum;\n                  \
    \      my $path_sum_up = $path_sum", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum\
    \ = $n * $n + 1;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum = 0;\n    my $min_path_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum = 0;\n    my $min_path_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum = 0;\n  \
    \  my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index = 0;\n    my\
    \ $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum = 0;\n    my\
    \ $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index = 0;\n\
    \    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = 0;\n    my $min_path_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = 0;\n    my $min_path_sum_index", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my @path = ();\n    my $min_path = [];\n    my $min_sum = $n *\
    \ $n + 1;\n    my $min_val = $n * $n + 1;\n    my $min_idx = -1;\n    my $min_jdx\
    \ = -1;\n    my $min_val_idx = -1;\n    my $min_val_jdx = -1;\n    my $min_val_idx_sum\
    \ = $n * $n + 1;\n    my $min_val_jdx_sum = $n * $n + 1;\n    my $min_val_idx_val\
    \ = $n * $n + 1;\n    my $min_val_jdx_val = $n * $n + 1;\n    my $min_val_idx_idx\
    \ = -1;\n    my $min_val_jdx_jdx = -1;\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        for (my $j = 0; $j < $n; $j++) {\n            if ($grid->[$i][$j] < $min_val)\
    \ {\n                $min_val = $grid->[$i][$j];\n                $min_idx = $i;\n\
    \                $min_jdx = $j;\n            }\n            if ($grid->[$i][$j]\
    \ + $i + $j < $min_val_idx_sum) {\n                $min_val_idx_sum = $grid->[$i][$j]\
    \ + $i + $j;\n                $min_val_idx_val = $grid->[$i][$j];\n          \
    \      $min_val_idx_idx = $i;\n                $min_val_idx_jdx = $j;\n      \
    \      }\n            if ($grid->[$i][$j] + $i + $j < $min_val_jdx_sum) {\n  \
    \              $min_val_jdx_sum = $grid->[$i][$", "my ($grid, $k) = @_;\n    my\
    \ $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n \
    \           dfs($grid, $i, $j, $k, $path, $sum);\n            if ($sum < $min_sum)\
    \ {\n                $min_sum = $sum;\n                $min_path = $path;\n  \
    \          }\n        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $path = [];\n    my $min_path = [];\n    my\
    \ $min_path_value = $n * $n + 1;\n    my $min_path_found = 0;\n    my $visited\
    \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $n;\
    \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $n; $j++) {\n       \
    \     $path = [];\n            $visited->[$i][$j] = 1;\n            dfs($grid,\
    \ $n, $i, $j, $k, $path, $visited, $min_path, \\$min_path_value, \\$min_path_found);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min_path;\n\
    }", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $visited = [];\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n       \
    \     $visited->[$i][$j] = 1;\n            $path->[0] = $grid->[$i][$j];\n   \
    \         $sum += $grid->[$i][$j];\n            dfs($grid, $n, $m, $i, $j, $k,\
    \ $path, $sum, $visited, $min, $min_sum);\n            $visited->[$i][$j] = 0;\n\
    \        }\n    }\n    return $min;\n}", "my ($grid, $k) = @_;\n    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min = [map {[map {[undef, undef]} (0 .. $m\
    \ - 1)]} (0 .. $n - 1)];\n    my $min_path = [];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $min->[$i][$j][0] = $grid->[$i][$j];\n\
    \            $min->[$i][$j][1] = [$grid->[$i][$j]];\n            if ($i > 0) {\n\
    \                if ($min->[$i - 1][$j][0] < $min->[$i][$j][0]) {\n          \
    \          $min->[$i][$j][0] = $min->[$i - 1][$j][0];\n                    $min->[$i][$j][1]\
    \ = [@{$min->[$i - 1][$j][1]}, $grid->[$i][$j]];\n                }\n        \
    \        elsif ($min->[$i - 1][$j][0] == $min->[$i][$j][0]) {\n              \
    \      my $path = [@{$min->[$i - 1][$j][1]}, $grid->[$i][$j]];\n             \
    \       if (lexicographically_less($path, $min->[$i][$j][1])) {\n            \
    \            $min->[$i][$j][1] = $path;\n                    }\n             \
    \   }\n            }\n            if ($j > 0) {\n                if ($min->[$i][$j\
    \ - 1][0] < $min->[$i][$j][0]) {\n                    $min->[$i][$j][0] = $min->[$i][$j\
    \ - 1][0];\n                    $min->[$i][$j][1] = [@{$min->[$i][$j - 1][1]},\
    \ $grid->[$i][$", "my ($grid, $k) = @_;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $m * $k;\n    my $min_path_sum_idx\
    \ = 0;\n    my $path = [];\n    my $path_sum = 0;\n    my $path_sum_idx = 0;\n\
    \    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n        }\n \
    \   }\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            $path->[$path_sum_idx] = $grid->[$i][$j];\n           \
    \ $path_sum += $grid->[$i][$j];\n            $path_sum_idx++;\n            $visited->[$i][$j]\
    \ = 1;\n            dfs($grid, $n, $m, $i, $j, $k, $path, $path_sum, $path_sum_idx,\
    \ $visited, $min_path, $min_path_sum, $min_path_sum_idx);\n            $path_sum\
    \ -= $grid->[$i][$j];\n            $path_sum_idx--;\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n \
    \   my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum = $n * $n + 1;\n\
    \    my $min_path_sum_index = 0;\n    my $min_path_sum_index_value = 0;\n    my\
    \ $min_path_sum_index_value_index = 0;\n    for my $i (0 .. $n - 1) {\n      \
    \  for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum\
    \ = 0;\n            my $path_sum = 0;\n            my $path_sum_index = 0;\n \
    \           my $path_sum_index_value = 0;\n            my $path_sum_index_value_index\
    \ = 0;\n            my $path_sum_index_value_index_value = 0;\n            my\
    \ $path_sum_index_value_index_value_index = 0;\n            my $path_sum_index_value_index_value_index_value\
    \ = 0;\n            my $path_sum_index_value_index_value_index_value_index = 0;\n\
    \            my $path_sum_index_value_index_value_index_value_index_value = 0;\n\
    \            my $path_sum_index_value_index_value_index_value_index_value_index\
    \ = 0;\n            my $path_sum_index_value_index_value_index_value_index_value_index_value\
    \ = 0;\n            my $path_sum_index_value_index_value_index_value_index_value_index_value_index\
    \ = 0;\n            my $path_sum_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = 0;\n            my $path_sum_index_value_index_value_index_value_index_value_index_value_index_value_index\
    \ = 0;\n            my $path_sum_index_value_index", "my ($grid, $k) = @_;\n \
    \   my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min_path = [];\n    my\
    \ $min_path_sum = $n * $m * $k;\n    my $min_path_sum_found = 0;\n    my $path\
    \ = [];\n    my $path_sum = 0;\n    my $path_sum_found = 0;\n    my $path_sum_found_count\
    \ = 0;\n    my $path_sum_found_count_max = $n * $m;\n    my $path_sum_found_count_max_found\
    \ = 0;\n    my $path_sum_found_count_max_found_count = 0;\n    my $path_sum_found_count_max_found_count_max\
    \ = $n * $m;\n    my $path_sum_found_count_max_found_count_max_found = 0;\n  \
    \  my $path_sum_found_count_max_found_count_max_found_count = 0;\n    my $path_sum_found_count_max_found_count_max_found_count_max\
    \ = $n * $m;\n    my $path_sum_found_count_max_found_count_max_found_count_max_found\
    \ = 0;\n    my $path_sum_found_count_max_found_count_max_found_count_max_found_count\
    \ = 0;\n    my $path_sum_found_count_max_found_count_max_found_count_max_found_count_max\
    \ = $n * $m;\n    my $path_sum_found_count_max_found_count_max_found_count_max_found_count_max_found\
    \ = 0;\n    my $path_sum_found_count_max_found_count_max_found_count_max_found_count_max_found_count\
    \ = 0;\n    my $path_sum_found_count_max_found_count_max_found_count_max_found_count_max_found_count_max\
    \ = $n * $m;\n    my $path_", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $n * $k;\n    my $minPathSum2 = $n * $n * $k;\n    my $minPath2 = [];\n\
    \    my $minPathSum3 = $n * $n * $k;\n    my $minPath3 = [];\n    my $minPathSum4\
    \ = $n * $n * $k;\n    my $minPath4 = [];\n    my $minPathSum5 = $n * $n * $k;\n\
    \    my $minPath5 = [];\n    my $minPathSum6 = $n * $n * $k;\n    my $minPath6\
    \ = [];\n    my $minPathSum7 = $n * $n * $k;\n    my $minPath7 = [];\n    my $minPathSum8\
    \ = $n * $n * $k;\n    my $minPath8 = [];\n    my $minPathSum9 = $n * $n * $k;\n\
    \    my $minPath9 = [];\n    my $minPathSum10 = $n * $n * $k;\n    my $minPath10\
    \ = [];\n    my $minPathSum11 = $n * $n * $k;\n    my $minPath11 = [];\n    my\
    \ $minPathSum12 = $n * $n * $k;\n    my $minPath12 = [];\n    my $minPathSum13\
    \ = $n * $n * $k;\n    my $minPath13 = [];\n    my $minPathSum14 = $n * $n * $k;\n\
    \    my $minPath14 = [];\n    my $minPathSum15 = $n * $n * $k;\n    my $minPath15\
    \ = [];\n    my $minPathSum16 = $n * $n * $k;\n    my $minPath16 = [];\n    my\
    \ $minPathSum17 = $n * $n * $k;\n    my $minPath17 = [];\n    my $minPathSum18\
    \ = $n * $n", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar\
    \ @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $n * $k;\n    my $path\
    \ = [];\n    my $path_sum = 0;\n    my $visited = [];\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $dfs = sub {\n        my ($i, $j, $k) = @_;\n\
    \        if ($k == 0) {\n            if ($path_sum < $min_sum) {\n           \
    \     $min_sum = $path_sum;\n                $min = [@$path];\n            }\n\
    \            return;\n        }\n        if ($i < 0 || $i >= $n || $j < 0 || $j\
    \ >= $m) {\n            return;\n        }\n        if ($visited->[$i][$j]) {\n\
    \            return;\n        }\n        $visited->[$i][$j] = 1;\n        $path_sum\
    \ += $grid->[$i][$j];\n        push @$path, $grid->[$i][$j];\n        $dfs->($i\
    \ - 1, $j, $k - 1);\n        $dfs->($i + 1, $j, $k - 1);\n        $dfs->($i, $j\
    \ - 1, $k - 1);\n        $dfs->($i, $j + 1, $k - 1);\n        $visited->[$i][$j]\
    \ = 0;\n        $path_sum -= $grid->[$i][$j];\n        pop @$path;\n    };\n \
    \   for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n\
    \            $dfs->($i, $j, $k);\n", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_grid = [];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $min_path_sum_grid->[$i]->[$j]\
    \ = $n * $n * $k;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for\
    \ my $j (0 .. $m - 1) {\n            my $path = [];\n            my $path_sum\
    \ = 0;\n            my $path_sum_grid = [];\n            for my $i (0 .. $n -\
    \ 1) {\n                for my $j (0 .. $m - 1) {\n                    $path_sum_grid->[$i]->[$j]\
    \ = $n * $n * $k;\n                }\n            }\n            $path_sum_grid->[$i]->[$j]\
    \ = 0;\n            my $path_sum_grid_queue = [[$i, $j]];\n            while (scalar\
    \ @$path_sum_grid_queue > 0) {\n                my $curr = shift @$path_sum_grid_queue;\n\
    \                my $curr_i = $curr->[0];\n                my $curr_j = $curr->[1];\n\
    \                my $curr_sum = $path_sum_grid->[$curr_i]->[$curr_j];\n      \
    \          if ($curr_sum >= $k) {\n                    last;\n               \
    \ }\n                push @$path, $grid->[$curr_i]->[$curr_j];\n             \
    \   $path_sum += $grid->[$curr_i]->[$curr_j];\n                if ($curr_i > 0)\
    \ {\n                    if ($path_sum_grid->[$curr_i - 1", "my ($grid, $k) =\
    \ @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n  \
    \      for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $pathSum\
    \ = 0;\n            my $visited = [];\n            for my $x (0 .. $n - 1) {\n\
    \                for my $y (0 .. $m - 1) {\n                    $visited->[$x][$y]\
    \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            $path->[0] = $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n\
    \            my $result = dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum);\n\
    \            if ($result->[0] < $minPathSum) {\n                $minPathSum =\
    \ $result->[0];\n                $minPath = $result->[1];\n            }\n   \
    \     }\n    }\n    return $minPath;\n}", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $path = [];\n    my $path_sum = 0;\n    my $visited\
    \ = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m;\
    \ $j++) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    dfs($grid,\
    \ $n, $m, $k, 0, 0, $path, $path_sum, $visited, $min_path, $min_path_sum);\n \
    \   return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my @visited = ();\n    my @path = ();\n\
    \    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n \
    \   my $sum = 0;\n    my $path = [];\n    my $i = 0;\n    my $j = 0;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $visited[$i][$j] = 0;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $sum = 0;\n            $path\
    \ = [];\n            $visited[$i][$j] = 1;\n            $sum += $grid->[$i][$j];\n\
    \            push @$path, $grid->[$i][$j];\n            dfs($grid, $i, $j, $k\
    \ - 1, $sum, $path, $visited, $min, $min_sum, $min_path);\n            $visited[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n \
    \   my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $minPath\
    \ = [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2 = $n * $n + 1;\n\
    \    my $minPath2 = [];\n    my $minPathSum3 = $n * $n + 1;\n    my $minPath3\
    \ = [];\n    my $minPathSum4 = $n * $n + 1;\n    my $minPath4 = [];\n    my $minPathSum5\
    \ = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum6 = $n * $n + 1;\n\
    \    my $minPath6 = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath7\
    \ = [];\n    my $minPathSum8 = $n * $n + 1;\n    my $minPath8 = [];\n    my $minPathSum9\
    \ = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum10 = $n * $n + 1;\n\
    \    my $minPath10 = [];\n    my $minPathSum11 = $n * $n + 1;\n    my $minPath11\
    \ = [];\n    my $minPathSum12 = $n * $n + 1;\n    my $minPath12 = [];\n    my\
    \ $minPathSum13 = $n * $n + 1;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum15 = $n * $n + 1;\n\
    \    my $minPath15 = [];\n    my $minPathSum16 = $n * $n + 1;\n    my $minPath16\
    \ = [];\n    my $minPathSum17 = $n * $n + 1;\n    my $minPath17 = [];\n    my\
    \ $minPathSum18 = $n * $n + 1;\n    my $minPath18 = [];\n    my $min", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $sum = 0;\n            dfs($grid, $i, $j, $k, $path, $sum);\n    \
    \        if ($sum < $min_sum) {\n                $min_sum = $sum;\n          \
    \      $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
    }", "my ($grid, $k) = @_;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_path_sum = $n * $m * $k;\n    my $min_path_sum_grid\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $min_path_sum_grid->[$i]->[$j] = $n * $m * $k;\n        }\n    }\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $path_sum = 0;\n            my $path_sum_grid\
    \ = [];\n            for my $i (0 .. $n - 1) {\n                for my $j (0 ..\
    \ $m - 1) {\n                    $path_sum_grid->[$i]->[$j] = $n * $m * $k;\n\
    \                }\n            }\n            find_min_path($grid, $i, $j, $k,\
    \ $path, $path_sum, $path_sum_grid, $min_path, $min_path_sum, $min_path_sum_grid);\n\
    \        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n\
    \ = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $visited = [];\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min = [];\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++)\
    \ {\n            $min->[$i][$j] = [];\n        }\n    }\n    my $queue = [];\n\
    \    my $min_path = [];\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = 0; $j < $m; $j++) {\n            push @$queue, [$i, $j, $grid->[$i][$j],\
    \ 1];\n            $visited->[$i][$j] = 1;\n            $min->[$i][$j] = [$grid->[$i][$j]];\n\
    \            $min_path = [$grid->[$i][$j]];\n        }\n    }\n    while (scalar\
    \ @$queue) {\n        my $cur = shift @$queue;\n        my ($i, $j, $val, $len)\
    \ = @$cur;\n        if ($len == $k) {\n            if (less($min->[$i][$j], $min_path))\
    \ {\n                $min_path = $min->[$i][$j];\n            }\n            next;\n\
    \        }\n        for (my $d = 0; $d < 4; $d++) {\n            my $ni = $i +\
    \ $dir[$d][0];\n            my $nj = $j + $dir[$d][1];\n            if ($ni <\
    \ 0 || $ni >= $n || $nj < 0 || $nj >= $m) {\n                next", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_path_value = [];\n    my $min_path_length\
    \ = $n * $m;\n    my $visited = [];\n    for (my $i = 0; $i < $n; $i++) {\n  \
    \      for (my $j = 0; $j < $m; $j++) {\n            $visited->[$i][$j] = 0;\n\
    \        }\n    }\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j =\
    \ 0; $j < $m; $j++) {\n            my $path = [];\n            my $path_value\
    \ = [];\n            my $path_length = 0;\n            my $path_visited = [];\n\
    \            for (my $i = 0; $i < $n; $i++) {\n                for (my $j = 0;\
    \ $j < $m; $j++) {\n                    $path_visited->[$i][$j] = 0;\n       \
    \         }\n            }\n            find_path($grid, $i, $j, $k, $path, $path_value,\
    \ $path_length, $path_visited, $min_path, $min_path_value, $min_path_length, $visited);\n\
    \        }\n    }\n    return $min_path_value;\n}", "my ($grid, $k) = @_;\n  \
    \  my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n + 1;\n    my $visited = [];\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            my $path = [];\n            my $path_sum = 0;\n  \
    \          $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n\
    \            $path_sum += $grid->[$i][$j];\n            dfs($grid, $i, $j, $k\
    \ - 1, $path, $path_sum, $visited, $min_path, $min_path_sum);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n \
    \   my $n = scalar @$grid;\n    my @path = ();\n    my $min_path = [];\n    my\
    \ $min_sum = $n * $n + 1;\n    my $min_path_sum = $min_sum;\n    my $min_path_val\
    \ = $min_sum;\n    my $min_path_val_sum = $min_sum;\n    my $min_path_val_sum_idx\
    \ = $min_sum;\n    my $min_path_val_sum_idx_val = $min_sum;\n    my $min_path_val_sum_idx_val_sum\
    \ = $min_sum;\n    my $min_path_val_sum_idx_val_sum_idx = $min_sum;\n    my $min_path_val_sum_idx_val_sum_idx_val\
    \ = $min_sum;\n    my $min_path_val_sum_idx_val_sum_idx_val_sum = $min_sum;\n\
    \    my $min_path_val_sum_idx_val_sum_idx_val_sum_idx = $min_sum;\n    my $min_path_val_sum_idx_val_sum_idx_val_sum_idx_val\
    \ = $min_sum;\n    my $min_path_val_sum_idx_val_sum_idx_val_sum_idx_val_sum =\
    \ $min_sum;\n    my $min_path_val_sum_idx_val_sum_idx_val_sum_idx_val_sum_idx\
    \ = $min_sum;\n    my $min_path_val_sum_idx_val_sum_idx_val_sum_idx_val_sum_idx_val\
    \ = $min_sum;\n    my $min_path_val_sum_idx_val_sum_idx_val_sum_idx_val_sum_idx_val_sum\
    \ = $min_sum;\n    my $min_path_val_sum_idx_val_sum_", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min =\
    \ $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n  \
    \      for my $j (0..$m-1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
    \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n   \
    \     }\n    }\n    my $min_path = [];\n    my $min_sum = $max * $k;\n    for\
    \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path = [];\n\
    \            my $sum = 0;\n            my $visited = {};\n            $visited->{$i}->{$j}\
    \ = 1;\n            dfs($grid, $i, $j, $k, $path, $sum, $visited, $min_path, $min_sum);\n\
    \        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n\
    \ = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min = [];\n   \
    \ my $min_sum = $n * $n * $k;\n    my $visited = [];\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n\
    \        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $visited->[$i][$j] = 1;\n            my $path = [];\n    \
    \        push @$path, $grid->[$i][$j];\n            dfs($grid, $visited, $path,\
    \ $i, $j, $k, $min, $min_sum);\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    return $min;\n}", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $min_path\
    \ = [$min];\n    my $min_paths = {};\n    my $paths = {};\n    my $path = [$min];\n\
    \    my $paths_to_visit = {};\n    my $visited = {};\n    my $visited_paths =\
    \ {};\n    my $visited_paths_to_visit = {};\n    my $visited_path = [$min];\n\
    \    my $visited_paths_to_visit_path = {};\n    my $visited_paths_to_visit_path_to_visit\
    \ = {};\n    my $visited_paths_to_visit_path_to_visit_path = {};\n    my $visited_paths_to_visit_path_to_visit_path_to_visit\
    \ = {};\n    my $visited_paths_to_visit_path_to_visit_path_to_visit_path = {};\n\
    \    my $visited_paths_to_visit_path_to_visit_path_to_visit_path_to_visit = {};\n\
    \    my $visited_paths_to_visit_path_to_visit_path_to_visit_path_to_visit_path\
    \ = {};\n    my $visited_paths_to_visit_path_to_visit_path_to_visit_path_to_visit_path_to_visit\
    \ = {};\n    my $visited_paths_to_visit_path_to_visit_path_to_visit_path_to_visit_path_to_visit_path\
    \ = {};\n    my $visited_paths_to_visit_path_to_visit_path_to_visit_path_to_visit_path_to_visit_path_to_",
  "my ($grid, $k) = @_;\n    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $dp->[$i][$j] = {};\n        }\n    }\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j]{$l} = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            for\
    \ my $l (0 .. $k - 1) {\n                $dp->[$i][$j]{$l} = [];\n           \
    \ }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j]{$l}\
    \ = [];\n            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $m - 1) {\n            for my $l (0 .. $k - 1) {\n      \
    \          $dp->[$i][$j]{$l} = [];\n            }\n        }\n    }\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            for my $l\
    \ (0 .. $k - 1) {\n                $dp->[$i][$j]{$l} = [];\n            }\n  \
    \      }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1)\
    \ {\n            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j]", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k\
    \ = $min_path_sum;\n    my $min_path_sum_k_1 = $min_path_sum;\n    my $min_path_sum_k_2\
    \ = $min_path_sum;\n    my $min_path_sum_k_3 = $min_path_sum;\n    my $min_path_sum_k_4\
    \ = $min_path_sum;\n    my $min_path_sum_k_5 = $min_path_sum;\n    my $min_path_sum_k_6\
    \ = $min_path_sum;\n    my $min_path_sum_k_7 = $min_path_sum;\n    my $min_path_sum_k_8\
    \ = $min_path_sum;\n    my $min_path_sum_k_9 = $min_path_sum;\n    my $min_path_sum_k_10\
    \ = $min_path_sum;\n    my $min_path_sum_k_11 = $min_path_sum;\n    my $min_path_sum_k_12\
    \ = $min_path_sum;\n    my $min_path_sum_k_13 = $min_path_sum;\n    my $min_path_sum_k_14\
    \ = $min_path_sum;\n    my $min_path_sum_k_15 = $min_path_sum;\n    my $min_path_sum_k_16\
    \ = $min_path_sum;\n    my $min_path_sum_k_17 = $min_path_sum;\n    my $min_path_sum_k_18\
    \ = $min_path_sum;\n    my $min_path_sum_k_19 = $min_path_sum;\n    my $min_path_sum_k_20\
    \ = $min_path_sum;\n    my $min", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_k = $min_path_sum;\n    my $min_path_sum_k_1\
    \ = $min_path_sum;\n    my $min_path_sum_k_2 = $min_path_sum;\n    my $min_path_sum_k_3\
    \ = $min_path_sum;\n    my $min_path_sum_k_4 = $min_path_sum;\n    my $min_path_sum_k_5\
    \ = $min_path_sum;\n    my $min_path_sum_k_6 = $min_path_sum;\n    my $min_path_sum_k_7\
    \ = $min_path_sum;\n    my $min_path_sum_k_8 = $min_path_sum;\n    my $min_path_sum_k_9\
    \ = $min_path_sum;\n    my $min_path_sum_k_10 = $min_path_sum;\n    my $min_path_sum_k_11\
    \ = $min_path_sum;\n    my $min_path_sum_k_12 = $min_path_sum;\n    my $min_path_sum_k_13\
    \ = $min_path_sum;\n    my $min_path_sum_k_14 = $min_path_sum;\n    my $min_path_sum_k_15\
    \ = $min_path_sum;\n    my $min_path_sum_k_16 = $min_path_sum;\n    my $min_path_sum_k_17\
    \ = $min_path_sum;\n    my $min_path_sum_k_18 = $min_path_sum;\n    my $min_path_sum_k_19\
    \ = $min_path_sum;\n    my $min_path_sum_k_20 = $min_path_sum;\n    my $min",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_hash = {};\n    my $min_path_hash_sum = {};\n\
    \    my $min_path_hash_sum_k = {};\n    my $min_path_hash_sum_k_path = {};\n \
    \   for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n           \
    \ my $path = [];\n            my $sum = 0;\n            my $path_hash = {};\n\
    \            my $path_hash_sum = {};\n            my $path_hash_sum_k = {};\n\
    \            my $path_hash_sum_k_path = {};\n            my $path_hash_sum_k_path_min\
    \ = [];\n            my $path_hash_sum_k_path_min_sum = $n * $n + 1;\n       \
    \     my $path_hash_sum_k_path_min_sum_k = $n * $n + 1;\n            my $path_hash_sum_k_path_min_sum_k_path\
    \ = [];\n            my $path_hash_sum_k_path_min_sum_k_path_min = [];\n     \
    \       my $path_hash_sum_k_path_min_sum_k_path_min_sum = $n * $n + 1;\n     \
    \       my $path_hash_sum_k_path_min_sum_k_path_min_sum_k = $n * $n + 1;\n   \
    \         my $path_hash_sum_k_path_min_sum_k_path_min_sum_k_path = [];\n     \
    \       my $path_hash_sum_k_path_min_sum_k_path_min_sum_k_path_min = [];\n   \
    \         my $path_hash_sum_k_path_min_sum_", "my ($grid, $k) = @_;\n    my $n\
    \ = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_sum = $n * $n * $k;\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n \
    \           my $visited = {};\n            my $dfs;\n            $dfs = sub {\n\
    \                my ($i, $j, $k) = @_;\n                return if $k < 0;\n  \
    \              return if $i < 0 || $i >= $n || $j < 0 || $j >= $m;\n         \
    \       return if $visited->{\"$i,$j\"};\n                $visited->{\"$i,$j\"\
    } = 1;\n                push @$path, $grid->[$i][$j];\n                $sum +=\
    \ $grid->[$i][$j];\n                if ($k == 0) {\n                    if ($sum\
    \ < $min_sum) {\n                        $min_sum = $sum;\n                  \
    \      $min_path = [@$path];\n                    }\n                } else {\n\
    \                    $dfs->($i - 1, $j, $k - 1);\n                    $dfs->($i\
    \ + 1, $j, $k - 1);\n                    $dfs->($i, $j - 1, $k - 1);\n       \
    \             $dfs->($i, $j + 1, $k - 1);\n                }\n               \
    \ pop @$path;\n                $sum -= $grid->[$i][$j];\n                delete\
    \ $visited->{\"$i,$j\"};\n            };\n            $dfs->($i, $j, $k);\n  \
    \      }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n    my $n =\
    \ scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n\
    \    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_k = $min_path_sum *\
    \ $k;\n    my $path = [];\n    my $path_sum = 0;\n    my $path_sum_k = 0;\n  \
    \  my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m\
    \ - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $dfs =\
    \ sub {\n        my ($i, $j) = @_;\n        if ($path_sum_k > $min_path_sum_k)\
    \ {\n            return;\n        }\n        if ($k == 0) {\n            if ($path_sum\
    \ < $min_path_sum) {\n                $min_path_sum = $path_sum;\n           \
    \     $min_path_sum_k = $path_sum_k;\n                $min_path = [@$path];\n\
    \            }\n            return;\n        }\n        if ($i < 0 || $i >= $n\
    \ || $j < 0 || $j >= $m) {\n            return;\n        }\n        if ($visited->[$i][$j])\
    \ {\n            return;\n        }\n        $visited->[$i][$j] = 1;\n       \
    \ push @$path, $grid->[$i][$j];\n        $path_sum += $grid->[$i][$j];\n     \
    \   $path_sum_k += $grid->[$i][$j] * $k;\n        $dfs->($i - 1, $j);\n      \
    \  $dfs->($i + 1, $j);\n        $dfs->($i, $j - 1);\n        $dfs->($i, $j + 1);\n\
    \        pop @$path;\n        $path_sum -= $grid->[$i][", "my ($grid, $k) = @_;\n\
    \    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_found = 0;\n\
    \    my $min_path_sum_found_count = 0;\n    my $min_path_sum_found_count_max =\
    \ $n * $n;\n    my $min_path_sum_found_count_max_max = $n * $n * $n;\n    my $min_path_sum_found_count_max_max_max\
    \ = $n * $n * $n * $n;\n    my $min_path_sum_found_count_max_max_max_max = $n\
    \ * $n * $n * $n * $n;\n    my $min_path_sum_found_count_max_max_max_max_max =\
    \ $n * $n * $n * $n * $n * $n;\n    my $min_path_sum_found_count_max_max_max_max_max_max\
    \ = $n * $n * $n * $n * $n * $n * $n;\n    my $min_path_sum_found_count_max_max_max_max_max_max_max\
    \ = $n * $n * $n * $n * $n * $n * $n * $n;\n    my $min_path_sum_found_count_max_max_max_max_max_max_max_max\
    \ = $n * $n * $n * $n * $n * $n * $n * $n * $n;\n    my $min_path_sum_found_count_max_max_max_max_max_max_max_max_max\
    \ = $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n    my $min_path_sum_found_count_max_max_max_max_max_max_max_max_max_max\
    \ = $n", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar\
    \ @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $max = $grid->[$n-1][$m-1];\n\
    \    my $minPath = [];\n    my $minPathSum = $max * $k;\n    my $minPathSum2 =\
    \ $max * $k;\n    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3\
    \ = $max * $k;\n    my $minPath4 = [];\n    my $minPathSum4 = $max * $k;\n   \
    \ my $minPath5 = [];\n    my $minPathSum5 = $max * $k;\n    my $minPath6 = [];\n\
    \    my $minPathSum6 = $max * $k;\n    my $minPath7 = [];\n    my $minPathSum7\
    \ = $max * $k;\n    my $minPath8 = [];\n    my $minPathSum8 = $max * $k;\n   \
    \ my $minPath9 = [];\n    my $minPathSum9 = $max * $k;\n    my $minPath10 = [];\n\
    \    my $minPathSum10 = $max * $k;\n    my $minPath11 = [];\n    my $minPathSum11\
    \ = $max * $k;\n    my $minPath12 = [];\n    my $minPathSum12 = $max * $k;\n \
    \   my $minPath13 = [];\n    my $minPathSum13 = $max * $k;\n    my $minPath14\
    \ = [];\n    my $minPathSum14 = $max * $k;\n    my $minPath15 = [];\n    my $minPathSum15\
    \ = $max * $k;\n    my $minPath16 = [];\n    my $minPathSum16 = $max * $k;\n \
    \   my $minPath17 = [];\n    my $minPathSum17 = $max * $k;\n    my $minPath18\
    \ = [];\n    my $minPathSum18 = $max * $k;\n    my $minPath19", "my ($grid, $k)\
    \ = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my\
    \ $min = [];\n    my $min_sum = $n * $n + 1;\n    my $visited = {};\n    my $dfs;\n\
    \    $dfs = sub {\n        my ($i, $j, $sum, $path) = @_;\n        return if $sum\
    \ > $min_sum;\n        return if $i < 0 || $i >= $n || $j < 0 || $j >= $m;\n \
    \       return if $visited->{\"$i,$j\"};\n        push @$path, $grid->[$i][$j];\n\
    \        $sum += $grid->[$i][$j];\n        if (@$path == $k) {\n            if\
    \ ($sum < $min_sum) {\n                $min_sum = $sum;\n                $min\
    \ = [@$path];\n            }\n            elsif ($sum == $min_sum) {\n       \
    \         my $cmp = $path cmp $min;\n                if ($cmp < 0) {\n       \
    \             $min = [@$path];\n                }\n            }\n        }\n\
    \        else {\n            $visited->{\"$i,$j\"} = 1;\n            $dfs->($i\
    \ - 1, $j, $sum, $path);\n            $dfs->($i + 1, $j, $sum, $path);\n     \
    \       $dfs->($i, $j - 1, $sum, $path);\n            $dfs->($i, $j + 1, $sum,\
    \ $path);\n            delete $visited->{\"$i,$j\"};\n        }\n        pop @$path;\n\
    \    };\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $dfs->($i, $j, 0, []);\n        }\n    }\n    return $min;\n}", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $minPath = [];\n    my $minSum = $n * $n * $k;\n    my $minPathSum = $minSum;\n\
    \    my $minPathVal = $minSum;\n    my $minPathValSum = $minSum;\n    my $minPathValSumSum\
    \ = $minSum;\n    my $minPathValSumSumSum = $minSum;\n    my $minPathValSumSumSumSum\
    \ = $minSum;\n    my $minPathValSumSumSumSumSum = $minSum;\n    my $minPathValSumSumSumSumSumSum\
    \ = $minSum;\n    my $minPathValSumSumSumSumSumSumSum = $minSum;\n    my $minPathValSumSumSumSumSumSumSumSum\
    \ = $minSum;\n    my $minPathValSumSumSumSumSumSumSumSumSum = $minSum;\n    my\
    \ $minPathValSumSumSumSumSumSumSumSumSumSum = $minSum;\n    my $minPathValSumSumSumSumSumSumSumSumSumSumSum\
    \ = $minSum;\n    my $minPathValSumSumSumSumSumSumSumSumSumSumSumSum = $minSum;\n\
    \    my $minPathValSumSumSumSumSumSumSumSumSumSumSumSumSum = $minSum;\n    my\
    \ $minPathValSumSumSumSumSumSumSumSumSumSumSumSumSumSum = $minSum;\n    my $minPathValSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = $minSum;\n    my $minPathValSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = $minSum;\n    my $minPathValSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = $minSum;\n    my $minPathValSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = $minSum;\n    my $minPathValSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = $minSum;\n    my $min", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum =\
    \ $n * $n + 1;\n    my $min_path_sum = $n * $n + 1;\n    my $min_path_sum_idx\
    \ = -1;\n    my $min_path_sum_jdx = -1;\n    for my $i (0 .. $n - 1) {\n     \
    \   for my $j (0 .. $m - 1) {\n            my $sum = $grid->[$i][$j];\n      \
    \      my $path = [[$i, $j]];\n            my $path_sum = $sum;\n            my\
    \ $path_sum_idx = $i;\n            my $path_sum_jdx = $j;\n            for my\
    \ $l (1 .. $k - 1) {\n                my $min_path_sum_idx_new = -1;\n       \
    \         my $min_path_sum_jdx_new = -1;\n                for my $idx ($path_sum_idx\
    \ - 1 .. $path_sum_idx + 1) {\n                    for my $jdx ($path_sum_jdx\
    \ - 1 .. $path_sum_jdx + 1) {\n                        if ($idx >= 0 && $idx <\
    \ $n && $jdx >= 0 && $jdx < $m &&\n                            $idx != $path_sum_idx\
    \ && $jdx != $path_sum_jdx) {\n                            my $sum_new = $grid->[$idx][$jdx];\n\
    \                            if ($sum_new < $sum || ($sum_new == $sum &&\n   \
    \                             ($idx < $min_path_sum_idx_new ||\n             \
    \                   ($idx == $min_path_sum_idx_new &&\n                      \
    \          $jdx < $min_path_sum_jdx_new)))) {\n                              \
    \  $min_path_sum_idx_new = $idx;\n                                $min_path_sum_jdx_new\
    \ =", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n * $k;\n    my $visited = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 1;\n    \
    \        my $path = [];\n            my $sum = $grid->[$i][$j];\n            push\
    \ @$path, $grid->[$i][$j];\n            my $res = dfs($grid, $i, $j, $k - 1, $n,\
    \ $m, $visited, $path, $sum);\n            if ($res->[0] < $min_sum) {\n     \
    \           $min_sum = $res->[0];\n                $min_path = $res->[1];\n  \
    \          }\n            $visited->[$i][$j] = 0;\n        }\n    }\n    return\
    \ $min_path;\n}", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m\
    \ = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum = $n *\
    \ $n + 1;\n    my $min_path_sum_k = $min_path_sum;\n    my $min_path_k = [];\n\
    \    my $min_path_sum_k_1 = $min_path_sum;\n    my $min_path_k_1 = [];\n    my\
    \ $min_path_sum_k_2 = $min_path_sum;\n    my $min_path_k_2 = [];\n    my $min_path_sum_k_3\
    \ = $min_path_sum;\n    my $min_path_k_3 = [];\n    my $min_path_sum_k_4 = $min_path_sum;\n\
    \    my $min_path_k_4 = [];\n    my $min_path_sum_k_5 = $min_path_sum;\n    my\
    \ $min_path_k_5 = [];\n    my $min_path_sum_k_6 = $min_path_sum;\n    my $min_path_k_6\
    \ = [];\n    my $min_path_sum_k_7 = $min_path_sum;\n    my $min_path_k_7 = [];\n\
    \    my $min_path_sum_k_8 = $min_path_sum;\n    my $min_path_k_8 = [];\n    my\
    \ $min_path_sum_k_9 = $min_path_sum;\n    my $min_path_k_9 = [];\n    my $min_path_sum_k_10\
    \ = $min_path_sum;\n    my $min_path_k_10 = [];\n    my $min_path_sum_k_11 = $min_path_sum;\n\
    \    my $min_path_k_11 = [];\n    my $min_path_sum_k_12 = $min_path_sum;\n   \
    \ my $min_path_k_12 = [];\n    my $min_", "my ($grid, $k) = @_;\n    my $n = scalar\
    \ @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n * $k;\n    my $min_path_sum_found = 0;\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n         \
    \   my $path_sum = 0;\n            my $path_sum_found = 0;\n            my $path_sum_found_callback\
    \ = sub {\n                my ($i, $j, $path_sum) = @_;\n                if ($path_sum\
    \ < $min_path_sum) {\n                    $min_path_sum = $path_sum;\n       \
    \             $min_path = $path;\n                }\n                $path_sum_found\
    \ = 1;\n            };\n            my $path_sum_found_callback_ref = \\&$path_sum_found_callback;\n\
    \            my $path_sum_found_callback_ref_ref = \\$path_sum_found_callback_ref;\n\
    \            my $path_sum_found_callback_ref_ref_ref = \\$path_sum_found_callback_ref_ref;\n\
    \            my $path_sum_found_callback_ref_ref_ref_ref = \\$path_sum_found_callback_ref_ref_ref;\n\
    \            my $path_sum_found_callback_ref_ref_ref_ref_ref = \\$path_sum_found_callback_ref_ref_ref_ref;\n\
    \            my $path_sum_found_callback_ref_ref_ref_ref_ref_ref = \\$path_sum_found_callback_ref_ref_ref_ref_ref;\n\
    \            my $path_sum_found_callback_ref_ref_ref_ref_ref_ref_ref = \\$path_sum_found_callback_ref_ref_ref_ref_ref_ref;\n\
    \            my $path_sum_found_callback_ref_ref_ref_ref_ref_ref_ref_ref =", "my\
    \ ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n * $k;\n    my $min_path_sum\
    \ = $min_sum;\n    my $min_path_last = $min_sum;\n    my $min_path_last_sum =\
    \ $min_sum;\n    my $min_path_last_last = $min_sum;\n    my $min_path_last_last_sum\
    \ = $min_sum;\n    my $min_path_last_last_last = $min_sum;\n    my $min_path_last_last_last_sum\
    \ = $min_sum;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1)\
    \ {\n            my $path = [];\n            my $sum = 0;\n            my $path_last\
    \ = $min_sum;\n            my $path_last_sum = $min_sum;\n            my $path_last_last\
    \ = $min_sum;\n            my $path_last_last_sum = $min_sum;\n            my\
    \ $path_last_last_last = $min_sum;\n            my $path_last_last_last_sum =\
    \ $min_sum;\n            for my $l (0 .. $k - 1) {\n                push @$path,\
    \ $grid->[$i][$j];\n                $sum += $grid->[$i][$j];\n               \
    \ if ($sum < $min_path_sum) {\n                    $min_path = $path;\n      \
    \              $min_path_sum = $sum;\n                    $min_path_last = $path_last;\n\
    \                    $min_path_last_sum = $path_last_sum;\n                  \
    \  $min_path_last_last = $path_last_last;\n                    $min_path_last_last_sum\
    \ = $path_last_last_sum;\n                    $min_path_last_last_last = $path_last_last_last;\n\
    \                    $min", "my ($grid, $k) = @_;\n    my $n = @$grid;\n    my\
    \ $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $n + 1;\n   \
    \ my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m\
    \ - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i\
    \ (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n\
    \            my $sum = 0;\n            $visited->[$i][$j] = 1;\n            push\
    \ @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n           \
    \ dfs($grid, $n, $m, $i, $j, $k - 1, $path, $sum, $visited, $min, $min_sum);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min;\n}",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $sum = 0;\n            my $visited = [];\n            for my $row\
    \ (0 .. $n - 1) {\n                for my $col (0 .. $m - 1) {\n             \
    \       $visited->[$row][$col] = 0;\n                }\n            }\n      \
    \      $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n  \
    \          $sum += $grid->[$i][$j];\n            my $res = dfs($grid, $i, $j,\
    \ $k - 1, $visited, $path, $sum);\n            if ($res->[0] < $min_sum) {\n \
    \               $min_sum = $res->[0];\n                $min_path = $res->[1];\n\
    \            }\n        }\n    }\n    return $min_path;\n}", "my ($grid, $k) =\
    \ @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n     \
    \   for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum\
    \ = 0;\n            my $visited = [];\n            for my $x (0 .. $n - 1) {\n\
    \                for my $y (0 .. $m - 1) {\n                    $visited->[$x][$y]\
    \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n            if ($sum\
    \ < $min_sum) {\n                $min_sum = $sum;\n                $min_path =\
    \ $path;\n            }\n        }\n    }\n    return $min_path;\n}", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $sum = 0;\n            my $visited = {};\n            my $dfs = sub\
    \ {\n                my ($i, $j, $k) = @_;\n                return if $k == 0;\n\
    \                return if $i < 0 || $i >= $n || $j < 0 || $j >= $m;\n       \
    \         return if $visited->{\"$i,$j\"};\n                $visited->{\"$i,$j\"\
    } = 1;\n                push @$path, $grid->[$i][$j];\n                $sum +=\
    \ $grid->[$i][$j];\n                $dfs->($i - 1, $j, $k - 1);\n            \
    \    $dfs->($i + 1, $j, $k - 1);\n                $dfs->($i, $j - 1, $k - 1);\n\
    \                $dfs->($i, $j + 1, $k - 1);\n                pop @$path;\n  \
    \              $sum -= $grid->[$i][$j];\n                delete $visited->{\"\
    $i,$j\"};\n            };\n            $dfs->($i, $j, $k);\n            if ($sum\
    \ < $min_sum) {\n                $min_sum = $sum;\n                $min_path =\
    \ $path;\n            }\n        }\n    }\n    return $min_path;\n}", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum =\
    \ $min_sum;\n    my $min_path_sum_idx = 0;\n    my $min_path_sum_idx_prev = 0;\n\
    \    my $min_path_sum_idx_prev_prev = 0;\n    my $min_path_sum_idx_prev_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev =\
    \ 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $min_path_sum_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_k = $n * $n + 1;\n    my $min_path_k =\
    \ [];\n    my $min_sum_k = $n * $n + 1;\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n      \
    \      my $sum = 0;\n            my $path_sum = 0;\n            my $path_sum_k\
    \ = 0;\n            my $path_k = [];\n            my $sum_k = 0;\n           \
    \ my $visited = [];\n            for (my $i = 0; $i < $n; $i++) {\n          \
    \      for (my $j = 0; $j < $m; $j++) {\n                    $visited->[$i][$j]\
    \ = 0;\n                }\n            }\n            dfs($grid, $i, $j, $path,\
    \ $sum, $path_sum, $path_sum_k, $path_k, $sum_k, $visited, $k);\n            if\
    \ ($sum < $min_sum) {\n                $min_sum = $sum;\n                $min_path\
    \ = $path;\n            }\n            if ($path_sum < $min_path_sum) {\n    \
    \            $min_path_sum = $path_sum;\n                $min_path = $path;\n\
    \            }\n            if ($path_sum_k < $min_path_sum_k) {\n           \
    \     $min_path_sum_k = $path_sum_k;\n                $min_path_k = $path_k;\n\
    \            }\n            if ($sum_k < $min_sum_k) {\n                $min_sum_k\
    \ = $sum_k;\n               ", "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n\
    \    my $m = scalar @{$grid->[0]};\n    my $min_path = [];\n    my $min_path_sum\
    \ = $n * $n + 1;\n    my $min_path_sum_k = $min_path_sum;\n    my $min_path_sum_k_1\
    \ = $min_path_sum;\n    my $min_path_sum_k_2 = $min_path_sum;\n    my $min_path_sum_k_3\
    \ = $min_path_sum;\n    my $min_path_sum_k_4 = $min_path_sum;\n    my $min_path_sum_k_5\
    \ = $min_path_sum;\n    my $min_path_sum_k_6 = $min_path_sum;\n    my $min_path_sum_k_7\
    \ = $min_path_sum;\n    my $min_path_sum_k_8 = $min_path_sum;\n    my $min_path_sum_k_9\
    \ = $min_path_sum;\n    my $min_path_sum_k_10 = $min_path_sum;\n    my $min_path_sum_k_11\
    \ = $min_path_sum;\n    my $min_path_sum_k_12 = $min_path_sum;\n    my $min_path_sum_k_13\
    \ = $min_path_sum;\n    my $min_path_sum_k_14 = $min_path_sum;\n    my $min_path_sum_k_15\
    \ = $min_path_sum;\n    my $min_path_sum_k_16 = $min_path_sum;\n    my $min_path_sum_k_17\
    \ = $min_path_sum;\n    my $min_path_sum_k_18 = $min_path_sum;\n    my $min_path_sum_k_19\
    \ = $min_path_sum;\n    my $min_path_sum_k_20 = $min_path_sum;\n    my $min",
  "my ($grid, $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $n * $k;\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n \
    \           my $sum = 0;\n            my $visited = [];\n            for my $x\
    \ (0 .. $n - 1) {\n                for my $y (0 .. $m - 1) {\n               \
    \     $visited->[$x][$y] = 0;\n                }\n            }\n            dfs($grid,\
    \ $i, $j, $k, $path, $sum, $visited);\n            if ($sum < $min_sum) {\n  \
    \              $min_sum = $sum;\n                $min_path = $path;\n        \
    \    }\n        }\n    }\n    return $min_path;\n}", "my ($grid, $k) = @_;\n \
    \   my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n    my $minPath\
    \ = [];\n    my $minSum = $n * $n + 1;\n    for my $i (0 .. $n - 1) {\n      \
    \  for my $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum\
    \ = 0;\n            my $visited = {};\n            my $dfs = sub {\n         \
    \       my ($i, $j, $k) = @_;\n                if ($k == 0) {\n              \
    \      if ($sum < $minSum) {\n                        $minSum = $sum;\n      \
    \                  $minPath = [@$path];\n                    }\n             \
    \       return;\n                }\n                for my $dir ([-1, 0], [1,\
    \ 0], [0, -1], [0, 1]) {\n                    my ($ni, $nj) = ($i + $dir->[0],\
    \ $j + $dir->[1]);\n                    next if $ni < 0 || $ni >= $n || $nj <\
    \ 0 || $nj >= $m;\n                    next if $visited->{\"$ni,$nj\"};\n    \
    \                $visited->{\"$ni,$nj\"} = 1;\n                    push @$path,\
    \ $grid->[$ni][$nj];\n                    $sum += $grid->[$ni][$nj];\n       \
    \             $dfs->($ni, $nj, $k - 1);\n                    pop @$path;\n   \
    \                 $sum -= $grid->[$ni][$nj];\n                    delete $visited->{\"\
    $ni,$nj\"};\n                }\n            };\n            push @$path, $grid->[$i][$j];\n\
    \            $sum += $grid->[$i][$j];\n            $dfs->($i, $j, $k - 1);\n \
    \       }\n    }\n    return $minPath;\n}", "my ($grid, $k) = @_;\n    my $n =\
    \ @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n\
    \ * $n + 1;\n    my $min_path = [];\n    my $path = [];\n    my $sum = 0;\n  \
    \  my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m\
    \ - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i\
    \ (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $sum = 0;\n\
    \            $path = [];\n            $visited->[$i][$j] = 1;\n            $sum\
    \ += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n           \
    \ dfs($grid, $i, $j, $k - 1, $sum, $path, $visited, $min, $min_sum);\n       \
    \     $visited->[$i][$j] = 0;\n        }\n    }\n    return $min;\n}", "my ($grid,\
    \ $k) = @_;\n    my $n = scalar @$grid;\n    my $m = scalar @{$grid->[0]};\n \
    \   my $min = $grid->[0][0];\n    my $max = $grid->[$n-1][$m-1];\n    my $minPath\
    \ = [];\n    my $minPathSum = $max * $k;\n    my $curPath = [];\n    my $curPathSum\
    \ = 0;\n    my $curPathLen = 0;\n    my $curPathIdx = 0;\n    my $curPathIdx2\
    \ = 0;\n    my $curPathIdx3 = 0;\n    my $curPathIdx4 = 0;\n    my $curPathIdx5\
    \ = 0;\n    my $curPathIdx6 = 0;\n    my $curPathIdx7 = 0;\n    my $curPathIdx8\
    \ = 0;\n    my $curPathIdx9 = 0;\n    my $curPathIdx10 = 0;\n    my $curPathIdx11\
    \ = 0;\n    my $curPathIdx12 = 0;\n    my $curPathIdx13 = 0;\n    my $curPathIdx14\
    \ = 0;\n    my $curPathIdx15 = 0;\n    my $curPathIdx16 = 0;\n    my $curPathIdx17\
    \ = 0;\n    my $curPathIdx18 = 0;\n    my $curPathIdx19 = 0;\n    my $curPathIdx20\
    \ = 0;\n    my $curPathIdx21 = 0;\n    my $curPathIdx22 = 0;\n    my $curPathIdx23\
    \ = 0;\n    my $curPathIdx24 = 0;\n    my $curPathIdx25 = 0;\n    my $curPathIdx26\
    \ = 0;\n    my $curPathIdx27 = 0;\n    my $curPathIdx28 = 0;\n    my $curPathIdx29\
    \ = 0;\n    my $curPathIdx30 = 0;\n    my $curPathIdx31 = 0;\n    my $curPathIdx32\
    \ = 0;\n    my $"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
