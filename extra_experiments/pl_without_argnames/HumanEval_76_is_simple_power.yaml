name: HumanEval_76_is_simple_power
language: pl
prompt: "# Your task is to write a function that returns true if a number x is a simple\n\
  # power of n and false in other cases.\n# x is a simple power of n if n**int=x\n\
  # For example:\n# >>> is_simple_power(1, 4)\n# true\n# >>> is_simple_power(2, 2)\n\
  # true\n# >>> is_simple_power(8, 2)\n# true\n# >>> is_simple_power(3, 2)\n# false\n\
  # >>> is_simple_power(3, 1)\n# false\n# >>> is_simple_power(5, 3)\n# false\nsub\
  \ is_simple_power {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_simple_power;\n\
  \        if(eq_deeply($candidate->(16, 2),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(143214, 16),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4,\
  \ 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9,\
  \ 3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16,\
  \ 4),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(24,\
  \ 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(128, 4),\"\")) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(12, 6),\"\")) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 12),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["my ($x, $n) = @_;\n    return $x == $n**int($x/$n);\n}", "my ($x, $n)\
    \ = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "my ($x, $n) = @_;\n    return $x ==\
    \ $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my\
    \ ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n)\
    \ = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int($x/$n);\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "my ($x, $n) = @_;\n    return $x ==\
    \ $n**int($x**(1/$n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int($x**(1/$n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int($x**(1/$n));\n}", "my ($x, $n) = @_;\n    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my ($x, $n)\
    \ = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int($x**(1/$n));\n}", "my ($x, $n) = @_;\n    return $x\
    \ == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return $x == $n**int($x/$n);\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int($x**(1/$n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my\
    \ ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n)\
    \ = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return $x == $n**int($x/$n);\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int($x**(1/$n));\n}", "my ($x, $n) = @_;\n \
    \   my $int = int(log($x) / log($n));\n    return $n**$int == $x;\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my ($x, $n)\
    \ = @_;\n    return $x == $n**int($x**(1/$n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int($x/$n);\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return log($x) / log($n) == int(log($x) / log($n));\n}", "my\
    \ ($x, $n) = @_;\n    return $x == $n**int($x**(1/$n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "my ($x, $n) = @_;\n    return $x ==\
    \ $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my\
    \ ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n)\
    \ = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my\
    \ ($x, $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    my $i = 1;\n  \
    \  my $result = $n ** $i;\n    while ($result <= $x) {\n        if ($result ==\
    \ $x) {\n            return 1;\n        }\n        $i++;\n        $result = $n\
    \ ** $i;\n    }\n    return 0;\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "my ($x, $n) = @_;\n    return $x ==\
    \ $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int($x/$n);\n\
    }", "my ($x, $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my\
    \ ($x, $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    if ($x == 1) {\n        return\
    \ 1;\n    }\n    if ($x == $n) {\n        return 1;\n    }\n    my $i = 2;\n \
    \   my $result = $n;\n    while ($result <= $x) {\n        $result *= $n;\n  \
    \      if ($result == $x) {\n            return 1;\n        }\n    }\n    return\
    \ 0;\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}",
  "my ($x, $n) = @_;\n    return $x == $n**int($x**(1/$n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my\
    \ ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n)\
    \ = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int($x/$n);\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int($x**(1/$n));\n}", "my ($x, $n) = @_;\n    return $x\
    \ == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    my $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n\
    \    }\n    return $i == $x;\n}", "my ($x, $n) = @_;\n    return $x == $n**int($x**(1/$n));\n\
    }", "my ($x, $n) = @_;\n    my $int = int(log($x) / log($n));\n    return $n**$int\
    \ == $x;\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    my $i = 1;\n    while ( $i < $x ) {\n        $i *= $n;\n    }\n\
    \    return $i == $x;\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int($x**(1/$n));\n}", "my ($x, $n) = @_;\n    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "my ($x, $n) = @_;\n    my $int = int(log($x) / log($n));\n\
    \    return $n**$int == $x;\n}", "my ($x, $n) = @_;\n    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    my $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n\
    \    }\n    return $i == $x;\n}", "my ($x, $n) = @_;\n    return $x == $n**int($x/$n);\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my\
    \ ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n)\
    \ = @_;\n    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my ($x, $n)\
    \ = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int($x**(1/$n));\n}", "my ($x, $n) = @_;\n    return $x\
    \ == $n**int($x**(1/$n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my\
    \ ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n)\
    \ = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "my ($x, $n) = @_;\n    return $x ==\
    \ $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    my $int = int(log($x) / log($n));\n    return $x == $n ** $int;\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    my\
    \ $i = 1;\n    while ($n**$i < $x) {\n        $i++;\n    }\n    return $n**$i\
    \ == $x;\n}", "my ($x, $n) = @_;\n    return $x == $n**int($x/$n);\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    my $int = int(log($x)\
    \ / log($n));\n    return $n**$int == $x;\n}", "my ($x, $n) = @_;\n    my $int\
    \ = int(log($x) / log($n));\n    return $n**$int == $x;\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n ** int(log($x) / log($n));\n}", "my ($x, $n)\
    \ = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "my ($x, $n) = @_;\n    return $x ==\
    \ $n**int($x**(1/$n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    my $i = 1;\n    my $result = 1;\n    while ($result\
    \ <= $x) {\n        $result = $n ** $i;\n        if ($result == $x) {\n      \
    \      return 1;\n        }\n        $i++;\n    }\n    return 0;\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int($x/$n);\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    my $i\
    \ = 1;\n    my $result = $n ** $i;\n    while ($result <= $x) {\n        if ($result\
    \ == $x) {\n            return 1;\n        }\n        $i++;\n        $result =\
    \ $n ** $i;\n    }\n    return 0;\n}", "my ($x, $n) = @_;\n    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n**int($x**(1/$n));\n\
    }", "my ($x, $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x,\
    \ $n) = @_;\n    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n\
    \    return $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return\
    \ $x == $n**int(log($x)/log($n));\n}", "my ($x, $n) = @_;\n    return $x == $n\
    \ ** int(log($x) / log($n));\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
