name: HumanEval_88_sort_array
language: pl
prompt: "# Given an array of non-negative integers, return a copl of the given array\
  \ after sorting,\n# you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n# or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n# Note:\n# * don't\
  \ change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n# >>> sort_array([5])\n\
  # [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array([2,\
  \ 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\nsub sort_array {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
  \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 42,\
  \ 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
  \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum\
    \ % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else {\n       \
    \ return sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n    my $sum =\
    \ $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        @array = sort {$b\
    \ <=> $a} @array;\n    } else {\n        @array = sort {$a <=> $b} @array;\n \
    \   }\n    return @array;\n}", "my @array = @_;\n    my $first = $array[0];\n\
    \    my $last = $array[-1];\n    my $sum = $first + $last;\n    if ($sum % 2 ==\
    \ 0) {\n        @array = sort {$b <=> $a} @array;\n    } else {\n        @array\
    \ = sort {$a <=> $b} @array;\n    }\n    return @array;\n}", "my $array = shift;\n\
    \    my $sum = $array->[0] + $array->[-1];\n    my $order = $sum % 2 ? '<' : '>';\n\
    \    my @sorted = sort { $a $order $b } @$array;\n    return \\@sorted;\n}", "my\
    \ @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0)\
    \ {\n        return sort {$b <=> $a} @array;\n    } else {\n        return sort\
    \ {$a <=> $b} @array;\n    }\n}", "my $array = shift;\n    return [] unless @$array;\n\
    \    return [$array->[0]] if @$array == 1;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}", "my $arr = shift;\n  \
    \  my $len = scalar @$arr;\n    return $arr if $len < 2;\n    my $sum = $arr->[0]\
    \ + $arr->[$len - 1];\n    my $cmp = $sum % 2 ? sub { $a <=> $b } : sub { $b <=>\
    \ $a };\n    return [ sort $cmp @$arr ];\n}", "my @array = @_;\n    my $sum =\
    \ $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return sort {$b <=>\
    \ $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n    }\n}",
  "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n    my $order =\
    \ $sum % 2 ? '<' : '>';\n    return [sort { $a <=> $b } @$array] if $order eq\
    \ '<';\n    return [sort { $b <=> $a } @$array] if $order eq '>';\n}", "my $array\
    \ = shift;\n    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0)\
    \ {\n        return sort {$b <=> $a} @$array;\n    } else {\n        return sort\
    \ {$a <=> $b} @$array;\n    }\n}", "my ($arr) = @_;\n    return [] if !@$arr;\n\
    \    return [$arr->[0]] if @$arr == 1;\n    my $sum = $arr->[0] + $arr->[-1];\n\
    \    my $sorted = $sum % 2 ? [sort {$a <=> $b} @$arr] : [sort {$b <=> $a} @$arr];\n\
    \    return $sorted;\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my @arr = @_;\n    my\
    \ @result;\n    if ($arr[0] + $arr[-1] % 2 == 0) {\n        @result = sort { $b\
    \ <=> $a } @arr;\n    } else {\n        @result = sort { $a <=> $b } @arr;\n \
    \   }\n    return @result;\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n  \
    \  my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n\
    \    }\n}", "my $arr = shift;\n    my $len = scalar @$arr;\n    if ($len < 2)\
    \ {\n        return $arr;\n    }\n    my $sum = $arr->[0] + $arr->[$len - 1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$arr];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$arr];\n    }\n}", "my $arr = shift;\n\
    \    my $len = scalar @$arr;\n    if ($len == 0 || $len == 1) {\n        return\
    \ $arr;\n    }\n    my $sum = $arr->[0] + $arr->[$len - 1];\n    if ($sum % 2\
    \ == 0) {\n        return [sort {$b <=> $a} @$arr];\n    } else {\n        return\
    \ [sort {$a <=> $b} @$arr];\n    }\n}", "my @array = @_;\n    my $sum = $array[0]\
    \ + $array[-1];\n    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n\
    \    } else {\n        return sort {$a <=> $b} @array;\n    }\n}", "my @array\
    \ = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     return sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=>\
    \ $b} @array;\n    }\n}", "my $arr = shift;\n    my $len = scalar @$arr;\n   \
    \ my $sum = $arr->[0] + $arr->[$len - 1];\n    if ($sum % 2 == 0) {\n        return\
    \ [sort {$b <=> $a} @$arr];\n    } else {\n        return [sort {$a <=> $b} @$arr];\n\
    \    }\n}", "my $arr = shift;\n    my $len = scalar @$arr;\n    return $arr if\
    \ $len < 2;\n    my $sum = $arr->[0] + $arr->[$len - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        return [sort {$b <=> $a} @$arr];\n    } else {\n        return\
    \ [sort {$a <=> $b} @$arr];\n    }\n}", "my @array = @_;\n    my $sum = $array[0]\
    \ + $array[-1];\n    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n\
    \    } else {\n        return sort {$a <=> $b} @array;\n    }\n}", "my ($arr)\
    \ = @_;\n    my $sum = $arr->[0] + $arr->[-1];\n    my $order = $sum % 2 ? 1 :\
    \ -1;\n    return [sort { $order * ($a <=> $b) } @$arr];\n}", "my @array = @_;\n\
    \    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n\
    \    }\n}", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n \
    \   if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}", "my @array = @_;\n   \
    \ my @sorted;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n\
    \        @sorted = sort { $b <=> $a } @array;\n    } else {\n        @sorted =\
    \ sort { $a <=> $b } @array;\n    }\n    return @sorted;\n}", "my $arr = shift;\n\
    \    my $sum = $arr->[0] + $arr->[-1];\n    return $arr if $sum == 0;\n    return\
    \ [sort {$a <=> $b} @$arr] if $sum % 2;\n    return [sort {$b <=> $a} @$arr];\n\
    }", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2\
    \ == 0) {\n        return sort {$b <=> $a} @array;\n    } else {\n        return\
    \ sort {$a <=> $b} @array;\n    }\n}", "my $array = shift;\n    my $sum = $array->[0]\
    \ + $array->[-1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a}\
    \ @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n\
    }", "my ($arr) = @_;\n    my $sum = $arr->[0] + $arr->[-1];\n    my $cmp = $sum\
    \ % 2 ? sub { $a <=> $b } : sub { $b <=> $a };\n    my @sorted = sort $cmp @$arr;\n\
    \    return \\@sorted;\n}", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}", "my @array = @_;\n\
    \    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n\
    \    }\n}", "my $arr = shift;\n    my $len = scalar @$arr;\n    return $arr if\
    \ $len < 2;\n    my $sum = $arr->[0] + $arr->[$len - 1];\n    my $sort_func =\
    \ $sum % 2 ? sub { $b <=> $a } : sub { $a <=> $b };\n    return [ sort $sort_func\
    \ @$arr ];\n}", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}", "my @array = @_;\n\
    \    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n\
    \    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum\
    \ % 2 == 0) {\n        @array = sort {$b <=> $a} @array;\n    } else {\n     \
    \   @array = sort {$a <=> $b} @array;\n    }\n    return @array;\n}", "my @array\
    \ = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     return sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=>\
    \ $b} @array;\n    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my $arr = shift;\n \
    \   my $len = scalar @$arr;\n    if ($len == 0 || $len == 1) {\n        return\
    \ $arr;\n    }\n    my $sum = $arr->[0] + $arr->[$len - 1];\n    if ($sum % 2\
    \ == 0) {\n        return [sort {$b <=> $a} @$arr];\n    } else {\n        return\
    \ [sort {$a <=> $b} @$arr];\n    }\n}", "my $arr = shift;\n    my $len = scalar\
    \ @$arr;\n    if ($len == 0) {\n        return [];\n    }\n    elsif ($len ==\
    \ 1) {\n        return [$arr->[0]];\n    }\n    else {\n        my $first = $arr->[0];\n\
    \        my $last = $arr->[$len - 1];\n        my $sum = $first + $last;\n   \
    \     if ($sum % 2 == 0) {\n            return [sort {$b <=> $a} @$arr];\n   \
    \     }\n        else {\n            return [sort {$a <=> $b} @$arr];\n      \
    \  }\n    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n   \
    \ if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else {\n\
    \        return sort {$a <=> $b} @array;\n    }\n}", "my $array = shift;\n   \
    \ my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ [sort {$b <=> $a} @$array];\n    } else {\n        return [sort {$a <=> $b}\
    \ @$array];\n    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my $array = shift;\n\
    \    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2) {\n        return\
    \ [sort {$a <=> $b} @$array];\n    } else {\n        return [sort {$b <=> $a}\
    \ @$array];\n    }\n}", "my @array = @_;\n    return @array if @array < 2;\n \
    \   my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort { $b <=> $a } @array;\n    }\n    else {\n        return sort { $a <=>\
    \ $b } @array;\n    }\n}", "my ($arr) = @_;\n    my $len = scalar @$arr;\n   \
    \ if ($len == 0) {\n        return [];\n    }\n    if ($len == 1) {\n        return\
    \ [$arr->[0]];\n    }\n    my $sum = $arr->[0] + $arr->[$len - 1];\n    if ($sum\
    \ % 2 == 0) {\n        return [sort {$b <=> $a} @$arr];\n    } else {\n      \
    \  return [sort {$a <=> $b} @$arr];\n    }\n}", "my @arr = @_;\n    my $sum =\
    \ $arr[0] + $arr[-1];\n    if ($sum % 2 == 0) {\n        @arr = sort { $b <=>\
    \ $a } @arr;\n    } else {\n        @arr = sort { $a <=> $b } @arr;\n    }\n \
    \   return @arr;\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my $arr = shift;\n \
    \   my $sum = $arr->[0] + $arr->[-1];\n    my $order = $sum % 2 ? '<' : '>';\n\
    \    return [sort { $a <=> $b } @$arr] if $order eq '<';\n    return [sort { $b\
    \ <=> $a } @$arr] if $order eq '>';\n}", "my @arr = @_;\n    my $sum = $arr[0]\
    \ + $arr[-1];\n    if ($sum % 2 == 0) {\n        return sort { $b <=> $a } @arr;\n\
    \    }\n    else {\n        return sort { $a <=> $b } @arr;\n    }\n}", "my @array\
    \ = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     return sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=>\
    \ $b} @array;\n    }\n}", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? '<' : '>';\n    return [sort { $a <=> $b } @$array];\n\
    }", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n    my $order\
    \ = $sum % 2 ? '<' : '>';\n    my @sorted = sort { $a $order $b } @$array;\n \
    \   return \\@sorted;\n}", "my $arr = shift;\n    my $len = scalar @$arr;\n  \
    \  return $arr if $len < 2;\n    my $sum = $arr->[0] + $arr->[$len - 1];\n   \
    \ if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$arr];\n    } else {\n\
    \        return [sort {$a <=> $b} @$arr];\n    }\n}", "my ($arr) = @_;\n    my\
    \ $len = scalar @$arr;\n    if ($len == 0) {\n        return [];\n    }\n    if\
    \ ($len == 1) {\n        return [$arr->[0]];\n    }\n    my $sum = $arr->[0] +\
    \ $arr->[$len - 1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a}\
    \ @$arr];\n    } else {\n        return [sort {$a <=> $b} @$arr];\n    }\n}",
  "my $array = shift;\n    return [] unless @$array;\n    return [$array->[0]] if\
    \ @$array == 1;\n    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2)\
    \ {\n        return [sort {$a <=> $b} @$array];\n    } else {\n        return\
    \ [sort {$b <=> $a} @$array];\n    }\n}", "my $arr = shift;\n    my $sum = $arr->[0]\
    \ + $arr->[-1];\n    my $order = $sum % 2 ? '<' : '>';\n    my @sorted = sort\
    \ { $a $order $b } @$arr;\n    return \\@sorted;\n}", "my $array = shift;\n  \
    \  my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ [sort {$b <=> $a} @$array];\n    } else {\n        return [sort {$a <=> $b}\
    \ @$array];\n    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n  \
    \  my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n\
    \    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum\
    \ % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else {\n       \
    \ return sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n    my $len =\
    \ scalar @array;\n    if ($len == 0) {\n        return @array;\n    }\n    if\
    \ ($len == 1) {\n        return @array;\n    }\n    my $sum = $array[0] + $array[$len\
    \ - 1];\n    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n \
    \   } else {\n        return sort {$a <=> $b} @array;\n    }\n}", "my @array =\
    \ @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n     \
    \   return sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=>\
    \ $b} @array;\n    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n  \
    \  my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n\
    \    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum\
    \ % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else {\n       \
    \ return sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n    my $sum =\
    \ $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        @array = sort {$b\
    \ <=> $a} @array;\n    } else {\n        @array = sort {$a <=> $b} @array;\n \
    \   }\n    return @array;\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n  \
    \  my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n\
    \    }\n}", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n \
    \   if ($sum % 2 == 0) {\n        return [reverse sort {$a <=> $b} @$array];\n\
    \    }\n    else {\n        return [sort {$a <=> $b} @$array];\n    }\n}", "my\
    \ $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2)\
    \ {\n        return [sort {$a <=> $b} @$array];\n    } else {\n        return\
    \ [sort {$b <=> $a} @$array];\n    }\n}", "my @array = @_;\n    my $len = scalar\
    \ @array;\n    if ($len == 0) {\n        return @array;\n    }\n    if ($len ==\
    \ 1) {\n        return @array;\n    }\n    if ($array[0] + $array[$len - 1] %\
    \ 2 == 0) {\n        @array = sort {$b <=> $a} @array;\n    } else {\n       \
    \ @array = sort {$a <=> $b} @array;\n    }\n    return @array;\n}", "my @arr =\
    \ @_;\n    my @sorted;\n    if ($arr[0] + $arr[-1] % 2 == 0) {\n        @sorted\
    \ = sort { $b <=> $a } @arr;\n    } else {\n        @sorted = sort { $a <=> $b\
    \ } @arr;\n    }\n    return @sorted;\n}", "my @arr = @_;\n    my $sum = $arr[0]\
    \ + $arr[-1];\n    if ($sum % 2 == 0) {\n        return sort { $b <=> $a } @arr;\n\
    \    }\n    else {\n        return sort { $a <=> $b } @arr;\n    }\n}", "my $arr\
    \ = shift;\n    my $len = scalar @$arr;\n    my $sum = $arr->[0] + $arr->[$len\
    \ - 1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$arr];\n\
    \    } else {\n        return [sort {$a <=> $b} @$arr];\n    }\n}", "my @array\
    \ = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     return sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=>\
    \ $b} @array;\n    }\n}", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $order = $sum % 2 ? 1 : -1;\n    return [sort { $order * ($a <=> $b) }\
    \ @$array];\n}", "my $arr = shift;\n    my $sum = $arr->[0] + $arr->[-1];\n  \
    \  my $order = $sum % 2 ? 1 : -1;\n    return [sort { $order * ($a <=> $b) } @$arr];\n\
    }", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2\
    \ == 0) {\n        return sort {$b <=> $a} @array;\n    } else {\n        return\
    \ sort {$a <=> $b} @array;\n    }\n}", "my $array = shift;\n    my $sum = $array->[0]\
    \ + $array->[-1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a}\
    \ @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n\
    }", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n    if ($sum\
    \ % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else {\n    \
    \    return [sort {$a <=> $b} @$array];\n    }\n}", "my $arr = shift;\n    return\
    \ [] unless @$arr;\n    return [$arr->[0]] if @$arr == 1;\n    my $sum = $arr->[0]\
    \ + $arr->[-1];\n    if ($sum % 2) {\n        return [sort {$a <=> $b} @$arr];\n\
    \    } else {\n        return [sort {$b <=> $a} @$arr];\n    }\n}", "my @array\
    \ = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     return sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=>\
    \ $b} @array;\n    }\n}", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}", "my @array = @_;\n   \
    \ my $sum = $array[0] + $array[-1];\n    if ($sum % 2) {\n        @array = sort\
    \ { $a <=> $b } @array;\n    } else {\n        @array = sort { $b <=> $a } @array;\n\
    \    }\n    return @array;\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my ($arr) = @_;\n  \
    \  my $len = scalar @$arr;\n    my $sum = $arr->[0] + $arr->[$len - 1];\n    if\
    \ ($sum % 2 == 0) {\n        return [sort { $b <=> $a } @$arr];\n    }\n    else\
    \ {\n        return [sort { $a <=> $b } @$arr];\n    }\n}", "my $array = shift;\n\
    \    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2) {\n        return\
    \ [sort {$a <=> $b} @$array];\n    } else {\n        return [sort {$b <=> $a}\
    \ @$array];\n    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my $array = shift;\n\
    \    my $sum = $array->[0] + $array->[-1];\n    my $order = $sum % 2 ? '<' : '>';\n\
    \    my @sorted = sort { $a $order $b } @$array;\n    return \\@sorted;\n}", "my\
    \ @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0)\
    \ {\n        return sort {$b <=> $a} @array;\n    } else {\n        return sort\
    \ {$a <=> $b} @array;\n    }\n}", "my $array = shift;\n    my $sum = $array->[0]\
    \ + $array->[-1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a}\
    \ @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n\
    }", "my ($arr) = @_;\n    my $len = scalar @$arr;\n    return $arr if $len < 2;\n\
    \    my $sum = $arr->[0] + $arr->[$len - 1];\n    my $cmp = $sum % 2 ? sub { $a\
    \ <=> $b } : sub { $b <=> $a };\n    my @sorted = sort $cmp @$arr;\n    return\
    \ \\@sorted;\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n  \
    \  if ($sum % 2 == 0) {\n        @array = sort {$b <=> $a} @array;\n    } else\
    \ {\n        @array = sort {$a <=> $b} @array;\n    }\n    return @array;\n}",
  "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0)\
    \ {\n        return sort {$b <=> $a} @array;\n    } else {\n        return sort\
    \ {$a <=> $b} @array;\n    }\n}", "my $arr = shift;\n    my $len = scalar @$arr;\n\
    \    if ($len == 0 || $len == 1) {\n        return $arr;\n    }\n    my $sum =\
    \ $arr->[0] + $arr->[$len - 1];\n    if ($sum % 2 == 0) {\n        return [sort\
    \ {$b <=> $a} @$arr];\n    } else {\n        return [sort {$a <=> $b} @$arr];\n\
    \    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum\
    \ % 2) {\n        return sort { $a <=> $b } @array;\n    }\n    else {\n     \
    \   return sort { $b <=> $a } @array;\n    }\n}", "my $arr = shift;\n    my $len\
    \ = scalar @$arr;\n    my $sum = $arr->[0] + $arr->[$len - 1];\n    my $order\
    \ = $sum % 2 ? 1 : -1;\n    my @sorted = sort { $order * ($a <=> $b) } @$arr;\n\
    \    return \\@sorted;\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    }\n  \
    \  else {\n        return sort {$a <=> $b} @array;\n    }\n}", "my $arr = shift;\n\
    \    my $len = scalar @$arr;\n    if ($len == 0 || $len == 1) {\n        return\
    \ $arr;\n    }\n    my $sum = $arr->[0] + $arr->[$len - 1];\n    if ($sum % 2\
    \ == 0) {\n        return [sort {$b <=> $a} @$arr];\n    } else {\n        return\
    \ [sort {$a <=> $b} @$arr];\n    }\n}", "my @array = @_;\n    my $sum = $array[0]\
    \ + $array[-1];\n    if ($sum % 2 == 0) {\n        @array = sort {$b <=> $a} @array;\n\
    \    } else {\n        @array = sort {$a <=> $b} @array;\n    }\n    return @array;\n\
    }", "my $arr = shift;\n    return [] unless @$arr;\n    return [$arr->[0]] if\
    \ @$arr == 1;\n    my $sum = $arr->[0] + $arr->[-1];\n    if ($sum % 2) {\n  \
    \      return [sort {$a <=> $b} @$arr];\n    } else {\n        return [sort {$b\
    \ <=> $a} @$arr];\n    }\n}", "my $arr = shift;\n    my $len = @$arr;\n    if\
    \ ($len == 0) {\n        return [];\n    }\n    if ($len == 1) {\n        return\
    \ [$arr->[0]];\n    }\n    if ($arr->[0] + $arr->[-1] % 2 == 0) {\n        return\
    \ [sort {$b <=> $a} @$arr];\n    }\n    else {\n        return [sort {$a <=> $b}\
    \ @$arr];\n    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n  \
    \  my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n\
    \    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum\
    \ % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else {\n       \
    \ return sort {$a <=> $b} @array;\n    }\n}", "my $arr = shift;\n    my $len =\
    \ scalar @$arr;\n    return $arr if $len < 2;\n    my $sum = $arr->[0] + $arr->[$len\
    \ - 1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$arr];\n\
    \    } else {\n        return [sort {$a <=> $b} @$arr];\n    }\n}", "my @array\
    \ = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     return reverse sort {$a <=> $b} @array;\n    }\n    else {\n        return\
    \ sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n    my $sum = $array[0]\
    \ + $array[-1];\n    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n\
    \    } else {\n        return sort {$a <=> $b} @array;\n    }\n}", "my $arr =\
    \ shift;\n    my $sum = $arr->[0] + $arr->[-1];\n    if ($sum % 2) {\n       \
    \ return [sort {$a <=> $b} @$arr];\n    } else {\n        return [sort {$b <=>\
    \ $a} @$arr];\n    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        @array = sort {$b <=> $a} @array;\n    } else\
    \ {\n        @array = sort {$a <=> $b} @array;\n    }\n    return @array;\n}",
  "my $arr = shift;\n    my $len = scalar @$arr;\n    if ($len == 0) {\n        return\
    \ [];\n    }\n    if ($len == 1) {\n        return [$arr->[0]];\n    }\n    if\
    \ (($arr->[0] + $arr->[$len - 1]) % 2 == 0) {\n        return [sort {$b <=> $a}\
    \ @$arr];\n    } else {\n        return [sort {$a <=> $b} @$arr];\n    }\n}",
  "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0)\
    \ {\n        return sort {$b <=> $a} @array;\n    } else {\n        return sort\
    \ {$a <=> $b} @array;\n    }\n}", "my $array = shift;\n    my $sum = $array->[0]\
    \ + $array->[-1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a}\
    \ @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n\
    }", "my $array = shift;\n    my $len = scalar @$array;\n    my $sum = $array->[0]\
    \ + $array->[$len - 1];\n    my $order = $sum % 2 ? 1 : -1;\n    my @sorted =\
    \ sort { $order * ($a <=> $b) } @$array;\n    return \\@sorted;\n}", "my @array\
    \ = @_;\n    if (@array == 0 || @array == 1) {\n        return @array;\n    }\n\
    \    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort { $b <=> $a } @array;\n    }\n    else {\n        return sort { $a <=>\
    \ $b } @array;\n    }\n}", "my @array = @_;\n    if (@array == 0) {\n        return\
    \ @array;\n    }\n    if (@array == 1) {\n        return @array;\n    }\n    if\
    \ (($array[0] + $array[-1]) % 2 == 0) {\n        return sort { $b <=> $a } @array;\n\
    \    }\n    else {\n        return sort { $a <=> $b } @array;\n    }\n}", "my\
    \ $arr = shift;\n    my $len = scalar @$arr;\n    if ($len == 0) {\n        return\
    \ $arr;\n    }\n    elsif ($len == 1) {\n        return $arr;\n    }\n    else\
    \ {\n        my $sum = $arr->[0] + $arr->[$len - 1];\n        if ($sum % 2 ==\
    \ 0) {\n            return [sort {$b <=> $a} @$arr];\n        }\n        else\
    \ {\n            return [sort {$a <=> $b} @$arr];\n        }\n    }\n}", "my @array\
    \ = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     @array = sort {$b <=> $a} @array;\n    } else {\n        @array = sort {$a\
    \ <=> $b} @array;\n    }\n    return @array;\n}", "my $arr = shift;\n    my $sum\
    \ = $arr->[0] + $arr->[-1];\n    if ($sum % 2 == 0) {\n        return [sort {$b\
    \ <=> $a} @$arr];\n    } else {\n        return [sort {$a <=> $b} @$arr];\n  \
    \  }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum\
    \ % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else {\n       \
    \ return sort {$a <=> $b} @array;\n    }\n}", "my @arr = @_;\n    my $len = scalar\
    \ @arr;\n    return @arr if $len == 0 || $len == 1;\n    my $sum = $arr[0] + $arr[$len\
    \ - 1];\n    if ($sum % 2 == 0) {\n        return reverse sort { $a <=> $b } @arr;\n\
    \    }\n    else {\n        return sort { $a <=> $b } @arr;\n    }\n}", "my $arr\
    \ = shift;\n    return [] unless @$arr;\n    return [$arr->[0]] if @$arr == 1;\n\
    \    my $sum = $arr->[0] + $arr->[-1];\n    if ($sum % 2) {\n        return [sort\
    \ {$a <=> $b} @$arr];\n    } else {\n        return [sort {$b <=> $a} @$arr];\n\
    \    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    my @sorted_array\
    \ = sort {$a <=> $b} @array;\n    if ($sum % 2 == 0) {\n        @sorted_array\
    \ = reverse @sorted_array;\n    }\n    return @sorted_array;\n}", "my @array =\
    \ @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n     \
    \   return sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=>\
    \ $b} @array;\n    }\n}", "my ($arr) = @_;\n    my $len = scalar @$arr;\n    if\
    \ ($len == 0) {\n        return [];\n    }\n    if ($len == 1) {\n        return\
    \ [$arr->[0]];\n    }\n    my $sum = $arr->[0] + $arr->[$len - 1];\n    if ($sum\
    \ % 2 == 0) {\n        return [sort {$b <=> $a} @$arr];\n    } else {\n      \
    \  return [sort {$a <=> $b} @$arr];\n    }\n}", "my @array = @_;\n    my @sorted_array;\n\
    \    if (scalar @array == 0) {\n        return @array;\n    }\n    if (scalar\
    \ @array == 1) {\n        return @array;\n    }\n    my $first_index = $array[0];\n\
    \    my $last_index = $array[-1];\n    my $sum = $first_index + $last_index;\n\
    \    if ($sum % 2 == 0) {\n        @sorted_array = sort {$b <=> $a} @array;\n\
    \    }\n    else {\n        @sorted_array = sort {$a <=> $b} @array;\n    }\n\
    \    return @sorted_array;\n}", "my $array = shift;\n    my $sum = $array->[0]\
    \ + $array->[-1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a}\
    \ @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n\
    }", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2\
    \ == 0) {\n        return sort {$b <=> $a} @array;\n    } else {\n        return\
    \ sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n    my $sum = $array[0]\
    \ + $array[-1];\n    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n\
    \    } else {\n        return sort {$a <=> $b} @array;\n    }\n}", "my ($array)\
    \ = @_;\n    my $sum = $array->[0] + $array->[-1];\n    my @sorted = sort { $a\
    \ <=> $b } @$array;\n    if ($sum % 2 == 0) {\n        return [reverse @sorted];\n\
    \    }\n    else {\n        return \\@sorted;\n    }\n}", "my @array = @_;\n \
    \   my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n\
    \    }\n}", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n \
    \   if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}", "my @array = @_;\n\
    \    if (scalar @array == 0) {\n        return @array;\n    }\n    my $sum = $array[0]\
    \ + $array[-1];\n    if ($sum % 2 == 0) {\n        @array = sort {$b <=> $a} @array;\n\
    \    } else {\n        @array = sort {$a <=> $b} @array;\n    }\n    return @array;\n\
    }", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n    if ($sum\
    \ % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n        return\
    \ [sort {$b <=> $a} @$array];\n    }\n}", "my @array = @_;\n    my $sum = $array[0]\
    \ + $array[-1];\n    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n\
    \    } else {\n        return sort {$a <=> $b} @array;\n    }\n}", "my ($array)\
    \ = @_;\n    my @sorted_array = sort { $a <=> $b } @$array;\n    if (scalar @$array\
    \ == 0) {\n        return [];\n    }\n    if (scalar @$array == 1) {\n       \
    \ return [$array->[0]];\n    }\n    if (($array->[0] + $array->[-1]) % 2 == 0)\
    \ {\n        return [reverse @sorted_array];\n    }\n    return \\@sorted_array;\n\
    }", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2\
    \ == 0) {\n        return sort {$b <=> $a} @array;\n    } else {\n        return\
    \ sort {$a <=> $b} @array;\n    }\n}", "my $arr = shift;\n    my $len = scalar\
    \ @$arr;\n    return $arr if $len <= 1;\n    my $sum = $arr->[0] + $arr->[$len\
    \ - 1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$arr];\n\
    \    } else {\n        return [sort {$a <=> $b} @$arr];\n    }\n}", "my @array\
    \ = @_;\n    if (scalar @array == 0) {\n        return @array;\n    }\n    my\
    \ $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return sort\
    \ {$b <=> $a} @array;\n    }\n    else {\n        return sort {$a <=> $b} @array;\n\
    \    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum\
    \ % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else {\n       \
    \ return sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n    my $sum =\
    \ $array[0] + $array[-1];\n    if ($sum % 2) {\n        return sort { $a <=> $b\
    \ } @array;\n    }\n    else {\n        return sort { $b <=> $a } @array;\n  \
    \  }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum\
    \ % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else {\n       \
    \ return sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n    my $sum =\
    \ $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        @array = sort {$b\
    \ <=> $a} @array;\n    } else {\n        @array = sort {$a <=> $b} @array;\n \
    \   }\n    return @array;\n}", "my @array = @_;\n    my $first = $array[0];\n\
    \    my $last = $array[-1];\n    my $sum = $first + $last;\n    if ($sum % 2 ==\
    \ 0) {\n        return sort {$b <=> $a} @array;\n    }\n    else {\n        return\
    \ sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n    my $sum = $array[0]\
    \ + $array[-1];\n    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n\
    \    } else {\n        return sort {$a <=> $b} @array;\n    }\n}", "my $array\
    \ = shift;\n    my $len = @$array;\n    my $sum = $array->[0] + $array->[$len\
    \ - 1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n\
    \    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n}", "my ($arr)\
    \ = @_;\n    my $len = scalar @$arr;\n    return [] if $len == 0;\n    return\
    \ [$arr->[0]] if $len == 1;\n    my $sum = $arr->[0] + $arr->[$len - 1];\n   \
    \ if ($sum % 2 == 0) {\n        return [sort { $b <=> $a } @$arr];\n    }\n  \
    \  else {\n        return [sort { $a <=> $b } @$arr];\n    }\n}", "my @array =\
    \ @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n     \
    \   return sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=>\
    \ $b} @array;\n    }\n}", "my $arr = shift;\n    return [] unless @$arr;\n   \
    \ my $sum = $arr->[0] + $arr->[-1];\n    return $arr if $sum % 2;\n    return\
    \ [reverse @$arr];\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n  \
    \  my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n\
    \    }\n}", "my $arr = shift;\n    my $sum = $arr->[0] + $arr->[-1];\n    if ($sum\
    \ % 2 == 0) {\n        return [sort {$b <=> $a} @$arr];\n    } else {\n      \
    \  return [sort {$a <=> $b} @$arr];\n    }\n}", "my $arr = shift;\n    my $len\
    \ = scalar @$arr;\n    return $arr if $len < 2;\n    my $sum = $arr->[0] + $arr->[$len\
    \ - 1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$arr];\n\
    \    } else {\n        return [sort {$a <=> $b} @$arr];\n    }\n}", "my $arr =\
    \ shift;\n    my $len = scalar @$arr;\n    return $arr if $len < 2;\n    my $sum\
    \ = $arr->[0] + $arr->[$len - 1];\n    if ($sum % 2 == 0) {\n        return [sort\
    \ {$b <=> $a} @$arr];\n    } else {\n        return [sort {$a <=> $b} @$arr];\n\
    \    }\n}", "my @array = @_;\n    if (scalar @array == 0) {\n        return @array;\n\
    \    }\n    if (scalar @array == 1) {\n        return @array;\n    }\n    if (($array[0]\
    \ + $array[-1]) % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    }\n\
    \    else {\n        return sort {$a <=> $b} @array;\n    }\n}", "my $arr = shift;\n\
    \    my $len = scalar @$arr;\n    return $arr if $len < 2;\n    my $sum = $arr->[0]\
    \ + $arr->[$len - 1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=>\
    \ $a} @$arr];\n    } else {\n        return [sort {$a <=> $b} @$arr];\n    }\n\
    }", "my $arr = shift;\n    my $len = scalar @$arr;\n    my $sum = $arr->[0] +\
    \ $arr->[$len - 1];\n    if ($sum % 2) {\n        return [sort {$a <=> $b} @$arr];\n\
    \    } else {\n        return [sort {$b <=> $a} @$arr];\n    }\n}", "my $arr =\
    \ shift;\n    return [] unless @$arr;\n    return [$arr->[0]] if @$arr == 1;\n\
    \    my $sum = $arr->[0] + $arr->[-1];\n    if ($sum % 2) {\n        return [sort\
    \ {$a <=> $b} @$arr];\n    } else {\n        return [sort {$b <=> $a} @$arr];\n\
    \    }\n}", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n \
    \   if ($sum % 2 == 0) {\n        return [reverse sort {$a <=> $b} @$array];\n\
    \    }\n    else {\n        return [sort {$a <=> $b} @$array];\n    }\n}", "my\
    \ $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2)\
    \ {\n        return [sort {$a <=> $b} @$array];\n    } else {\n        return\
    \ [sort {$b <=> $a} @$array];\n    }\n}", "my ($arr) = @_;\n    my $sum = $arr->[0]\
    \ + $arr->[-1];\n    if ($sum % 2 == 0) {\n        return [sort { $b <=> $a }\
    \ @$arr];\n    }\n    else {\n        return [sort { $a <=> $b } @$arr];\n   \
    \ }\n}", "my $arr = shift;\n    my $len = scalar @$arr;\n    return $arr if $len\
    \ < 2;\n    my $sum = $arr->[0] + $arr->[$len - 1];\n    if ($sum % 2 == 0) {\n\
    \        return [sort {$b <=> $a} @$arr];\n    } else {\n        return [sort\
    \ {$a <=> $b} @$arr];\n    }\n}", "my $arr = shift;\n    my $len = scalar @$arr;\n\
    \    return $arr if $len < 2;\n    my $sum = $arr->[0] + $arr->[$len - 1];\n \
    \   my $sort_func = $sum % 2 ? sub { $b <=> $a } : sub { $a <=> $b };\n    my\
    \ @sorted = sort $sort_func @$arr;\n    return \\@sorted;\n}", "my $arr = shift;\n\
    \    my $sum = $arr->[0] + $arr->[-1];\n    my $order = $sum % 2 ? 1 : -1;\n \
    \   return [sort { $order * ($a <=> $b) } @$arr];\n}", "my $arr = shift;\n   \
    \ my $len = scalar @$arr;\n    return $arr if $len < 2;\n    my $sum = $arr->[0]\
    \ + $arr->[$len - 1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=>\
    \ $a} @$arr];\n    } else {\n        return [sort {$a <=> $b} @$arr];\n    }\n\
    }", "my $array = shift;\n    my $len = @$array;\n    if ($len == 0) {\n      \
    \  return [];\n    }\n    elsif ($len == 1) {\n        return [$array->[0]];\n\
    \    }\n    else {\n        my $sum = $array->[0] + $array->[$len - 1];\n    \
    \    if ($sum % 2 == 0) {\n            return [sort {$b <=> $a} @$array];\n  \
    \      }\n        else {\n            return [sort {$a <=> $b} @$array];\n   \
    \     }\n    }\n}", "my $arr = shift;\n    my $len = @$arr;\n    return $arr if\
    \ $len < 2;\n    my $sum = $arr->[0] + $arr->[-1];\n    my $cmp = $sum % 2 ? sub\
    \ { $a <=> $b } : sub { $b <=> $a };\n    return [sort $cmp @$arr];\n}", "my @array\
    \ = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     return sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=>\
    \ $b} @array;\n    }\n}", "my $arr = shift;\n    my $len = scalar @$arr;\n   \
    \ if ($len == 0) {\n        return [];\n    }\n    elsif ($len == 1) {\n     \
    \   return [$arr->[0]];\n    }\n    else {\n        my $sum = $arr->[0] + $arr->[$len\
    \ - 1];\n        if ($sum % 2 == 0) {\n            return [sort {$b <=> $a} @$arr];\n\
    \        }\n        else {\n            return [sort {$a <=> $b} @$arr];\n   \
    \     }\n    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n  \
    \  my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=> $b} @array;\n\
    \    }\n}", "my $arr = shift;\n    my $len = scalar @$arr;\n    return $arr if\
    \ $len < 2;\n    my $sum = $arr->[0] + $arr->[$len - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        return [sort {$b <=> $a} @$arr];\n    } else {\n        return\
    \ [sort {$a <=> $b} @$arr];\n    }\n}", "my $array = shift;\n    return [] unless\
    \ @$array;\n    return [$array->[0]] if @$array == 1;\n    my $sum = $array->[0]\
    \ + $array->[-1];\n    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n\
    \    } else {\n        return [sort {$b <=> $a} @$array];\n    }\n}", "my ($array)\
    \ = @_;\n    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0) {\n\
    \        return [sort { $b <=> $a } @$array];\n    }\n    else {\n        return\
    \ [sort { $a <=> $b } @$array];\n    }\n}", "my @array = @_;\n    my $sum = $array[0]\
    \ + $array[-1];\n    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n\
    \    } else {\n        return sort {$a <=> $b} @array;\n    }\n}", "my @array\
    \ = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     return sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=>\
    \ $b} @array;\n    }\n}", "my @array = @_;\n    return @array if @array == 0;\n\
    \    return @array if @array == 1;\n    my $sum = $array[0] + $array[-1];\n  \
    \  if ($sum % 2 == 0) {\n        return sort { $b <=> $a } @array;\n    }\n  \
    \  else {\n        return sort { $a <=> $b } @array;\n    }\n}", "my @array =\
    \ @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n     \
    \   return sort {$b <=> $a} @array;\n    } else {\n        return sort {$a <=>\
    \ $b} @array;\n    }\n}", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}", "my @arr = @_;\n \
    \   my $len = scalar @arr;\n    return @arr if $len == 0;\n    return @arr if\
    \ $len == 1;\n    my $sum = $arr[0] + $arr[$len - 1];\n    if ($sum % 2 == 0)\
    \ {\n        return reverse sort { $a <=> $b } @arr;\n    }\n    else {\n    \
    \    return sort { $a <=> $b } @arr;\n    }\n}", "my $arr = shift;\n    return\
    \ [] unless @$arr;\n    return [$arr->[0]] if @$arr == 1;\n    my $sum = $arr->[0]\
    \ + $arr->[-1];\n    my $sort_func = $sum % 2 ? sub { $b <=> $a } : sub { $a <=>\
    \ $b };\n    return [sort $sort_func @$arr];\n}", "my $arr = shift;\n    my $len\
    \ = scalar @$arr;\n    if ($len == 0) {\n        return [];\n    }\n    if ($len\
    \ == 1) {\n        return [$arr->[0]];\n    }\n    my $sum = $arr->[0] + $arr->[$len\
    \ - 1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$arr];\n\
    \    } else {\n        return [sort {$a <=> $b} @$arr];\n    }\n}", "my $array\
    \ = shift;\n    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0)\
    \ {\n        return [sort {$b <=> $a} @$array];\n    } else {\n        return\
    \ [sort {$a <=> $b} @$array];\n    }\n}", "my @array = @_;\n    my $sum = $array[0]\
    \ + $array[-1];\n    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n\
    \    }\n    else {\n        return sort {$a <=> $b} @array;\n    }\n}", "my $array\
    \ = shift;\n    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0)\
    \ {\n        return [sort {$b <=> $a} @$array];\n    } else {\n        return\
    \ [sort {$a <=> $b} @$array];\n    }\n}", "my $array = shift;\n    my $sum = $array->[0]\
    \ + $array->[-1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a}\
    \ @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n\
    }", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2\
    \ == 0) {\n        return sort {$b <=> $a} @array;\n    }\n    else {\n      \
    \  return sort {$a <=> $b} @array;\n    }\n}", "my @arr = @_;\n    my $sum = $arr[0]\
    \ + $arr[-1];\n    if ($sum % 2 == 0) {\n        return sort { $b <=> $a } @arr;\n\
    \    }\n    else {\n        return sort { $a <=> $b } @arr;\n    }\n}", "my $arr\
    \ = shift;\n    my $len = scalar @$arr;\n    return $arr if $len < 2;\n    my\
    \ $sum = $arr->[0] + $arr->[$len - 1];\n    if ($sum % 2 == 0) {\n        return\
    \ [sort {$b <=> $a} @$arr];\n    } else {\n        return [sort {$a <=> $b} @$arr];\n\
    \    }\n}", "my ($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n  \
    \  if ($sum % 2 == 0) {\n        return [ sort { $b <=> $a } @$array ];\n    }\n\
    \    else {\n        return [ sort { $a <=> $b } @$array ];\n    }\n}", "my @array\
    \ = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     return sort {$b <=> $a} @array;\n    }\n    else {\n        return sort\
    \ {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n    my $sum = $array[0] +\
    \ $array[-1];\n    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n\
    \    }\n    else {\n        return sort {$a <=> $b} @array;\n    }\n}", "my @array\
    \ = @_;\n    my $sum = $array[0] + $array[-1];\n    if ($sum % 2 == 0) {\n   \
    \     return sort {$b <=> $a} @array;\n    }\n    else {\n        return sort\
    \ {$a <=> $b} @array;\n    }\n}", "my @array = @_;\n    if (@array == 0) {\n \
    \       return @array;\n    }\n    if (@array == 1) {\n        return @array;\n\
    \    }\n    my $first = $array[0];\n    my $last = $array[-1];\n    my $sum =\
    \ $first + $last;\n    if ($sum % 2 == 0) {\n        @array = sort { $b <=> $a\
    \ } @array;\n    } else {\n        @array = sort { $a <=> $b } @array;\n    }\n\
    \    return @array;\n}", "my $arr = shift;\n    my $len = scalar @$arr;\n    my\
    \ $sum = $arr->[0] + $arr->[$len - 1];\n    if ($sum % 2 == 0) {\n        return\
    \ [sort {$b <=> $a} @$arr];\n    } else {\n        return [sort {$a <=> $b} @$arr];\n\
    \    }\n}", "my @array = @_;\n    my $len = scalar @array;\n    my $sum = $array[0]\
    \ + $array[$len - 1];\n    if ($sum % 2 == 0) {\n        @array = sort {$b <=>\
    \ $a} @array;\n    } else {\n        @array = sort {$a <=> $b} @array;\n    }\n\
    \    return @array;\n}", "my $array = shift;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}", "my $array = shift;\n\
    \    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0) {\n       \
    \ return [sort {$b <=> $a} @$array];\n    } else {\n        return [sort {$a <=>\
    \ $b} @$array];\n    }\n}", "my @array = @_;\n    my $sum = $array[0] + $array[-1];\n\
    \    if ($sum % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
