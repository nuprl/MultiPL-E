name: HumanEval_120_maximum
language: pl
prompt: "# Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
  \ maximum([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum([4, -4, 4],\
  \ 2)\n# [4, 4]\n# Example 3:\n# >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n\
  # Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The\
  \ elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n\
  sub maximum {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
  \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
  \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
  \ 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
  \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n \
    \   return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my @sorted = sort\
    \ { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n\
    \    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n\
    \    while ($i < $n && $j < $k) {\n        if ($arr->[$i] > $arr->[$j]) {\n  \
    \          $result[$j] = $arr->[$i];\n            $i++;\n        } else {\n  \
    \          $result[$j] = $arr->[$j];\n            $j++;\n        }\n    }\n  \
    \  while ($i < $n) {\n        $result[$j] = $arr->[$i];\n        $i++;\n     \
    \   $j++;\n    }\n    while ($j < $k) {\n        $result[$j] = $arr->[$j];\n \
    \       $j++;\n    }\n    return @result;\n}", "my ($arr, $k) = @_;\n    my @max;\n\
    \    my $i = 0;\n    while ($i < $k) {\n        my $max = shift @$arr;\n     \
    \   foreach my $num (@$arr) {\n            $max = $num if $num > $max;\n     \
    \   }\n        push @max, $max;\n        $i++;\n    }\n    return @max;\n}", "my\
    \ ($arr, $k) = @_;\n    my @max;\n    for my $i (0 .. $k - 1) {\n        my $max\
    \ = $arr->[$i];\n        my $max_index = $i;\n        for my $j ($i + 1 .. $#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $max[$i]\
    \ = $max;\n        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n    my @max;\n    my $i\
    \ = 0;\n    while ($i < $k) {\n        my $max = $arr->[0];\n        my $max_index\
    \ = 0;\n        for (my $j = 1; $j < @$arr; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        push @max, $max;\n        splice @$arr,\
    \ $max_index, 1;\n        $i++;\n    }\n    return @max;\n}", "my ($arr, $k) =\
    \ @_;\n    my $len = scalar @$arr;\n    return [] if $len == 0;\n    return [@$arr]\
    \ if $len <= $k;\n    my $res = [];\n    for (my $i = 0; $i < $k; $i++) {\n  \
    \      my $max = $arr->[$i];\n        my $max_idx = $i;\n        for (my $j =\
    \ $i + 1; $j < $len; $j++) {\n            if ($arr->[$j] > $max) {\n         \
    \       $max = $arr->[$j];\n                $max_idx = $j;\n            }\n  \
    \      }\n        $res->[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n\
    \    }\n    return $res;\n}", "my ($arr, $k) = @_;\n    my @max;\n    for my $n\
    \ (@$arr) {\n        if (@max < $k) {\n            push @max, $n;\n          \
    \  @max = sort { $b <=> $a } @max;\n        } else {\n            if ($n > $max[-1])\
    \ {\n                pop @max;\n                push @max, $n;\n             \
    \   @max = sort { $b <=> $a } @max;\n            }\n        }\n    }\n    return\
    \ @max;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n\
    \    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my $n = scalar\
    \ @$arr;\n    my @res;\n    for my $i (0..$n-1) {\n        my $j = $#res;\n  \
    \      while ($j >= 0 && $arr->[$i] > $res[$j]) {\n            $j--;\n       \
    \ }\n        if ($j < $k-1) {\n            splice @res, $j+1, 0, $arr->[$i];\n\
    \            pop @res if scalar @res > $k;\n        }\n    }\n    return \\@res;\n\
    }", "my ($arr, $k) = @_;\n    my @max;\n    for (my $i = 0; $i < @$arr; $i++)\
    \ {\n        if (@max < $k) {\n            push @max, $arr->[$i];\n          \
    \  @max = sort {$b <=> $a} @max;\n        }\n        else {\n            if ($arr->[$i]\
    \ > $max[-1]) {\n                pop @max;\n                push @max, $arr->[$i];\n\
    \                @max = sort {$b <=> $a} @max;\n            }\n        }\n   \
    \ }\n    return @max;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=>\
    \ $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my\
    \ @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my\
    \ ($arr, $k) = @_;\n    my @result;\n    my $size = scalar @$arr;\n    return\
    \ $arr if $k >= $size;\n    my $i = 0;\n    while ($i < $k) {\n        my $max\
    \ = $arr->[$i];\n        my $max_index = $i;\n        for (my $j = $i + 1; $j\
    \ < $size; $j++) {\n            if ($arr->[$j] > $max) {\n                $max\
    \ = $arr->[$j];\n                $max_index = $j;\n            }\n        }\n\
    \        $result[$i] = $max;\n        $arr->[$max_index] = $arr->[$i];\n     \
    \   $i++;\n    }\n    return \\@result;\n}", "my ($arr, $k) = @_;\n    my @sorted\
    \ = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k)\
    \ = @_;\n    my @max;\n    my $i = 0;\n    while ($i < $k) {\n        my $max\
    \ = $arr->[0];\n        my $max_index = 0;\n        for (my $j = 1; $j < @$arr;\
    \ $j++) {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        push @max,\
    \ $max;\n        splice @$arr, $max_index, 1;\n        $i++;\n    }\n    return\
    \ @max;\n}", "my ($arr, $k) = @_;\n    my @res;\n    my $len = scalar @$arr;\n\
    \    return $arr if $k == $len;\n    for (my $i = 0; $i < $k; $i++) {\n      \
    \  my $max = $arr->[$i];\n        my $max_idx = $i;\n        for (my $j = $i +\
    \ 1; $j < $len; $j++) {\n            if ($arr->[$j] > $max) {\n              \
    \  $max = $arr->[$j];\n                $max_idx = $j;\n            }\n       \
    \ }\n        $res[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n    }\n\
    \    return \\@res;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=>\
    \ $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my\
    \ @max;\n    for my $i (0 .. $k - 1) {\n        my $max = $arr->[$i];\n      \
    \  my $max_idx = $i;\n        for my $j ($i + 1 .. $#$arr) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_idx = $j;\n\
    \            }\n        }\n        push @max, $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@max;\n}", "my ($arr,\
    \ $k) = @_;\n    my @res;\n    my %hash;\n    for my $i (0..$#$arr) {\n      \
    \  $hash{$arr->[$i]} = $i;\n    }\n    my @sorted = sort {$b <=> $a} keys %hash;\n\
    \    for my $i (0..$k-1) {\n        push @res, $sorted[$i];\n    }\n    return\
    \ @res;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n\
    \    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my @max;\n    foreach\
    \ my $num (@$arr) {\n        if (@max < $k) {\n            push @max, $num;\n\
    \            @max = sort {$b <=> $a} @max;\n        }\n        elsif ($num > $max[-1])\
    \ {\n            pop @max;\n            push @max, $num;\n            @max = sort\
    \ {$b <=> $a} @max;\n        }\n    }\n    return @max;\n}", "my ($arr, $k) =\
    \ @_;\n    my $n = scalar @$arr;\n    my @result;\n    my $i = 0;\n    while ($i\
    \ < $k) {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n      \
    \  for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n\
    \                $max = $arr->[$j];\n                $max_index = $j;\n      \
    \      }\n        }\n        $result[$i] = $max;\n        $arr->[$max_index] =\
    \ $arr->[$i];\n        $i++;\n    }\n    return \\@result;\n}", "my ($arr, $k)\
    \ = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "my ($arr, $k) = @_;\n    my @max;\n    my $i = 0;\n    while ($i < $k) {\n\
    \        my $max = $arr->[0];\n        my $max_index = 0;\n        for (my $j\
    \ = 1; $j < @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n           \
    \     $max = $arr->[$j];\n                $max_index = $j;\n            }\n  \
    \      }\n        push @max, $max;\n        splice @$arr, $max_index, 1;\n   \
    \     $i++;\n    }\n    return @max;\n}", "my ($arr, $k) = @_;\n    my @sorted\
    \ = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr,\
    \ $k) = @_;\n    my $len = scalar @$arr;\n    my $max = $arr->[0];\n    my $max_idx\
    \ = 0;\n    my @result;\n    for (my $i = 0; $i < $k; $i++) {\n        for (my\
    \ $j = 0; $j < $len; $j++) {\n            if ($arr->[$j] > $max) {\n         \
    \       $max = $arr->[$j];\n                $max_idx = $j;\n            }\n  \
    \      }\n        push @result, $max;\n        $arr->[$max_idx] = -1000;\n   \
    \     $max = -1000;\n    }\n    return @result;\n}", "my ($arr, $k) = @_;\n  \
    \  my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}",
  "my ($arr, $k) = @_;\n    my @max;\n    for my $i (0 .. $k - 1) {\n        my $max\
    \ = $arr->[$i];\n        my $max_idx = $i;\n        for my $j ($i + 1 .. @$arr\
    \ - 1) {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_idx = $j;\n            }\n        }\n        push @max,\
    \ $max;\n        $arr->[$max_idx] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n    my @arr = @$arr;\n \
    \   my @res;\n    my $i = 0;\n    my $j = 0;\n    my $len = scalar @arr;\n   \
    \ while ($i < $len) {\n        if ($j < $k) {\n            push @res, $arr[$i];\n\
    \            $j++;\n        }\n        else {\n            my $min = min(@res);\n\
    \            if ($arr[$i] > $min) {\n                @res = grep {$_ != $min}\
    \ @res;\n                push @res, $arr[$i];\n            }\n        }\n    \
    \    $i++;\n    }\n    return @res;\n}", "my ($arr, $k) = @_;\n    my @max;\n\
    \    for my $i (0 .. $#$arr) {\n        if (@max < $k) {\n            push @max,\
    \ $arr->[$i];\n            @max = sort { $b <=> $a } @max;\n        } else {\n\
    \            if ($arr->[$i] > $max[-1]) {\n                pop @max;\n       \
    \         push @max, $arr->[$i];\n                @max = sort { $b <=> $a } @max;\n\
    \            }\n        }\n    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n\
    \    my @max;\n    for my $i (0 .. $k - 1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i + 1 .. $#$arr) {\n         \
    \   if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n           \
    \     $max_idx = $j;\n            }\n        }\n        $max[$i] = $max;\n   \
    \     ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n\
    \    return \\@max;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=>\
    \ $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my\
    \ $n = scalar @$arr;\n    return [] if $k == 0;\n    return $arr if $k == $n;\n\
    \    my @result = ();\n    my $i = 0;\n    while ($i < $k) {\n        my $max\
    \ = $arr->[$i];\n        my $max_index = $i;\n        for (my $j = $i + 1; $j\
    \ < $n; $j++) {\n            if ($arr->[$j] > $max) {\n                $max =\
    \ $arr->[$j];\n                $max_index = $j;\n            }\n        }\n  \
    \      push @result, $max;\n        $arr->[$max_index] = $arr->[$i];\n       \
    \ $arr->[$i] = $max;\n        $i++;\n    }\n    return \\@result;\n}", "my ($arr,\
    \ $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n\
    }", "my ($arr, $k) = @_;\n    my @max;\n    for my $i (0 .. $k - 1) {\n      \
    \  my $max = $arr->[$i];\n        my $max_index = $i;\n        for my $j ($i +\
    \ 1 .. $#$arr) {\n            if ($arr->[$j] > $max) {\n                $max =\
    \ $arr->[$j];\n                $max_index = $j;\n            }\n        }\n  \
    \      $max[$i] = $max;\n        ($arr->[$i], $arr->[$max_index]) = ($arr->[$max_index],\
    \ $arr->[$i]);\n    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n    my @sorted\
    \ = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k)\
    \ = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return\
    \ [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=>\
    \ $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my\
    \ @res;\n    for (my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_idx = $j;\n            }\n        }\n        $res[$i] = $max;\n\
    \        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n  \
    \  }\n    return \\@res;\n}", "my ($arr, $k) = @_;\n    my $len = scalar @$arr;\n\
    \    return [] if $len == 0;\n    return $arr if $len == $k;\n    my $max = $arr->[0];\n\
    \    my $max_idx = 0;\n    for (my $i = 1; $i < $len; $i++) {\n        if ($arr->[$i]\
    \ > $max) {\n            $max = $arr->[$i];\n            $max_idx = $i;\n    \
    \    }\n    }\n    my $res = [$max];\n    my $idx = 0;\n    for (my $i = 0; $i\
    \ < $len; $i++) {\n        if ($i != $max_idx) {\n            $res->[$idx++] =\
    \ $arr->[$i];\n        }\n    }\n    return $res if $k == 1;\n    return [@$res[0..$k-1]];\n\
    }", "my ($arr, $k) = @_;\n    my $size = scalar @$arr;\n    my $max = $arr->[0];\n\
    \    my $max_index = 0;\n    my @max_arr;\n    for (my $i = 0; $i < $k; $i++)\
    \ {\n        for (my $j = 0; $j < $size; $j++) {\n            if ($arr->[$j] >\
    \ $max) {\n                $max = $arr->[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        push @max_arr, $max;\n        $arr->[$max_index]\
    \ = -1001;\n        $max = -1001;\n    }\n    return @max_arr;\n}", "my ($arr,\
    \ $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return\
    \ @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=>\
    \ $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my\
    \ @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n    while\
    \ ($i < $n) {\n        if ($j < $k) {\n            push @result, $arr->[$i];\n\
    \            $j++;\n        } else {\n            my $min = min(@result);\n  \
    \          if ($arr->[$i] > $min) {\n                my $index = first_index {\
    \ $_ == $min } @result;\n                $result[$index] = $arr->[$i];\n     \
    \       }\n        }\n        $i++;\n    }\n    return sort { $b <=> $a } @result;\n\
    }", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return\
    \ @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my @max;\n    for my $i (0\
    \ .. $#$arr) {\n        if (@max < $k) {\n            push @max, $arr->[$i];\n\
    \            @max = sort { $b <=> $a } @max;\n        } else {\n            if\
    \ ($arr->[$i] > $max[-1]) {\n                pop @max;\n                push @max,\
    \ $arr->[$i];\n                @max = sort { $b <=> $a } @max;\n            }\n\
    \        }\n    }\n    return @max;\n}", "my ($arr, $k) = @_;\n    my @max;\n\
    \    for my $i (0 .. $k - 1) {\n        my $max = $arr->[$i];\n        my $max_index\
    \ = $i;\n        for my $j ($i + 1 .. $#$arr) {\n            if ($arr->[$j] >\
    \ $max) {\n                $max = $arr->[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $max[$i] = $max;\n        $arr->[$max_index]\
    \ = $arr->[$i];\n        $arr->[$i] = $max;\n    }\n    return \\@max;\n}", "my\
    \ ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return\
    \ @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my @result;\n    my $i = 0;\n\
    \    while ($i < $k) {\n        my $max = $arr->[0];\n        my $max_index =\
    \ 0;\n        for (my $j = 1; $j < scalar @$arr; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        push @result, $max;\n        splice @$arr,\
    \ $max_index, 1;\n        $i++;\n    }\n    return @result;\n}", "my ($arr, $k)\
    \ = @_;\n    my @res;\n    my $n = scalar @$arr;\n    for (my $i = 0; $i < $k;\
    \ $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n        for\
    \ (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n  \
    \              $max = $arr->[$j];\n                $max_idx = $j;\n          \
    \  }\n        }\n        $res[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n\
    \    }\n    return @res;\n}", "my ($arr, $k) = @_;\n    my @max;\n    for my $i\
    \ (0 .. $k - 1) {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n\
    \        for my $j ($i + 1 .. $#$arr) {\n            if ($arr->[$j] > $max) {\n\
    \                $max = $arr->[$j];\n                $max_index = $j;\n      \
    \      }\n        }\n        $max[$i] = $max;\n        ($arr->[$i], $arr->[$max_index])\
    \ = ($arr->[$max_index], $arr->[$i]);\n    }\n    return \\@max;\n}", "my ($arr,\
    \ $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return\
    \ @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my @result;\n    my $i = 0;\n\
    \    while ($i < $k) {\n        my $max = $arr->[0];\n        my $max_index =\
    \ 0;\n        for (my $j = 1; $j < scalar @$arr; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        push @result, $max;\n        splice @$arr,\
    \ $max_index, 1;\n        $i++;\n    }\n    return @result;\n}", "my ($arr, $k)\
    \ = @_;\n    my @result;\n    my $size = scalar @$arr;\n    for (my $i = 0; $i\
    \ < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n\
    \        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        $result[$i] = $max;\n        $arr->[$max_index]\
    \ = $arr->[$i];\n        $arr->[$i] = $max;\n    }\n    return @result;\n}", "my\
    \ ($arr, $k) = @_;\n    my @result;\n    my $size = scalar @$arr;\n    my $i =\
    \ 0;\n    while ($i < $size) {\n        my $j = $i + 1;\n        while ($j < $size)\
    \ {\n            if ($arr->[$i] < $arr->[$j]) {\n                my $temp = $arr->[$i];\n\
    \                $arr->[$i] = $arr->[$j];\n                $arr->[$j] = $temp;\n\
    \            }\n            $j++;\n        }\n        $i++;\n    }\n    for (my\
    \ $i = 0; $i < $k; $i++) {\n        push @result, $arr->[$i];\n    }\n    return\
    \ @result;\n}", "my ($arr, $k) = @_;\n    my $n = scalar @$arr;\n    my @res;\n\
    \    for (my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n       \
    \ my $max_index = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n       \
    \     if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n         \
    \       $max_index = $j;\n            }\n        }\n        $res[$i] = $max;\n\
    \        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n    }\n\
    \    return @res;\n}", "my ($arr, $k) = @_;\n    my $n = scalar @$arr;\n    return\
    \ [] if $k == 0;\n    return $arr if $k == $n;\n    my @res = ();\n    my $i =\
    \ 0;\n    while ($i < $k) {\n        my $max = -1;\n        my $max_idx = -1;\n\
    \        for (my $j = $i; $j < $n; $j++) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        $arr->[$max_idx] = -1;\n\
    \        $i++;\n    }\n    return \\@res;\n}", "my ($arr, $k) = @_;\n    my @arr\
    \ = @$arr;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#arr) {\n            if\
    \ ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        @arr[$i, $max_idx] = @arr[$max_idx,\
    \ $i];\n        push @res, $max;\n    }\n    return @res;\n}", "my ($arr, $k)\
    \ = @_;\n    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n\
    \    while ($i < $n) {\n        if ($j < $k) {\n            push @result, $arr->[$i];\n\
    \            $j++;\n        } else {\n            my $min = $result[0];\n    \
    \        my $index = 0;\n            for (my $l = 1; $l < $k; $l++) {\n      \
    \          if ($result[$l] < $min) {\n                    $min = $result[$l];\n\
    \                    $index = $l;\n                }\n            }\n        \
    \    if ($arr->[$i] > $min) {\n                $result[$index] = $arr->[$i];\n\
    \            }\n        }\n        $i++;\n    }\n    return @result;\n}", "my\
    \ ($arr, $k) = @_;\n    my @result;\n    my $i = 0;\n    while ($i < $k) {\n \
    \       my $max = $arr->[0];\n        my $index = 0;\n        for (my $j = 1;\
    \ $j < scalar @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n         \
    \       $max = $arr->[$j];\n                $index = $j;\n            }\n    \
    \    }\n        push @result, $max;\n        splice @$arr, $index, 1;\n      \
    \  $i++;\n    }\n    return @result;\n}", "my ($arr, $k) = @_;\n    my @sorted\
    \ = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr,\
    \ $k) = @_;\n    my $n = scalar @$arr;\n    return [] if $k == 0;\n    return\
    \ [@$arr] if $k == $n;\n    my $max = $arr->[0];\n    my $max_idx = 0;\n    for\
    \ my $i (1..$k-1) {\n        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n\
    \            $max_idx = $i;\n        }\n    }\n    my @res = ($max);\n    for\
    \ my $i ($k..$n-1) {\n        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n\
    \            $max_idx = $i;\n        }\n        if ($i - $max_idx >= $k) {\n \
    \           $max = $arr->[$max_idx+1];\n            $max_idx++;\n            for\
    \ my $j ($max_idx+1..$i) {\n                if ($arr->[$j] > $max) {\n       \
    \             $max = $arr->[$j];\n                    $max_idx = $j;\n       \
    \         }\n            }\n        }\n        push @res, $max;\n    }\n    return\
    \ \\@res;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n\
    \    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my @sorted = sort\
    \ { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n\
    \    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}",
  "my ($arr, $k) = @_;\n    my @max;\n    for my $i (0 .. $k - 1) {\n        my $max\
    \ = $arr->[$i];\n        my $max_index = $i;\n        for my $j ($i + 1 .. $#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $max[$i]\
    \ = $max;\n        ($arr->[$i], $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n\
    \    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n    my $len = scalar @$arr;\n\
    \    return [] if $len == 0;\n    return [@$arr] if $len <= $k;\n    my @res =\
    \ sort {$b <=> $a} @$arr[0..$k-1];\n    for (my $i = $k; $i < $len; $i++) {\n\
    \        if ($arr->[$i] > $res[-1]) {\n            $res[-1] = $arr->[$i];\n  \
    \          @res = sort {$b <=> $a} @res;\n        }\n    }\n    return \\@res;\n\
    }", "my ($arr, $k) = @_;\n    my @res;\n    my $len = scalar @$arr;\n    my $i\
    \ = 0;\n    while ($i < $len) {\n        my $j = $i + 1;\n        while ($j <\
    \ $len) {\n            if ($arr->[$j] > $arr->[$i]) {\n                my $tmp\
    \ = $arr->[$i];\n                $arr->[$i] = $arr->[$j];\n                $arr->[$j]\
    \ = $tmp;\n            }\n            $j++;\n        }\n        $i++;\n    }\n\
    \    for (my $i = 0; $i < $k; $i++) {\n        push @res, $arr->[$i];\n    }\n\
    \    return @res;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a\
    \ } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my @sorted\
    \ = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k)\
    \ = @_;\n    my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my $max\
    \ = $arr->[0];\n        my $max_index = 0;\n        for (my $j = 1; $j < scalar\
    \ @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n                $max =\
    \ $arr->[$j];\n                $max_index = $j;\n            }\n        }\n  \
    \      push @result, $max;\n        splice @$arr, $max_index, 1;\n        $i++;\n\
    \    }\n    return @result;\n}", "my ($arr, $k) = @_;\n    my @result;\n    my\
    \ $max = -1000;\n    my $max_index = 0;\n    for my $i (0..$k-1) {\n        for\
    \ my $j ($i..$#{$arr}) {\n            if ($arr->[$j] > $max) {\n             \
    \   $max = $arr->[$j];\n                $max_index = $j;\n            }\n    \
    \    }\n        $result[$i] = $max;\n        $arr->[$max_index] = -1000;\n   \
    \     $max = -1000;\n    }\n    return \\@result;\n}", "my ($arr, $k) = @_;\n\
    \    my @max = sort {$b <=> $a} @$arr[0..$k-1];\n    for my $i ($k..@$arr-1) {\n\
    \        for my $j (0..$k-1) {\n            if ($arr->[$i] > $max[$j]) {\n   \
    \             splice @max, $j, 0, $arr->[$i];\n                pop @max;\n   \
    \             last;\n            }\n        }\n    }\n    return @max;\n}", "my\
    \ ($arr, $k) = @_;\n    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n\
    \ = scalar @$arr;\n    while ($i < $n) {\n        if ($j < $k) {\n           \
    \ push @result, $arr->[$i];\n            $j++;\n        } else {\n           \
    \ my $min = $result[0];\n            my $min_index = 0;\n            for (my $l\
    \ = 1; $l < $k; $l++) {\n                if ($result[$l] < $min) {\n         \
    \           $min = $result[$l];\n                    $min_index = $l;\n      \
    \          }\n            }\n            if ($arr->[$i] > $min) {\n          \
    \      $result[$min_index] = $arr->[$i];\n            }\n        }\n        $i++;\n\
    \    }\n    return @result;\n}", "my ($arr, $k) = @_;\n    my $n = scalar @$arr;\n\
    \    my @max;\n    for (my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        $max[$i] =\
    \ $max;\n        ($arr->[$i], $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n\
    \    }\n    return @max;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b\
    \ <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n  \
    \  my @sorted = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my\
    \ ($arr, $k) = @_;\n    my @result;\n    my @sorted = sort {$b <=> $a} @$arr;\n\
    \    for (my $i = 0; $i < $k; $i++) {\n        push @result, $sorted[$i];\n  \
    \  }\n    return @result;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b\
    \ <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n  \
    \  my @max;\n    for my $i (0 .. $#$arr) {\n        if (@max < $k) {\n       \
    \     push @max, $arr->[$i];\n            @max = sort { $b <=> $a } @max;\n  \
    \      } else {\n            if ($arr->[$i] > $max[-1]) {\n                pop\
    \ @max;\n                push @max, $arr->[$i];\n                @max = sort {\
    \ $b <=> $a } @max;\n            }\n        }\n    }\n    return @max;\n}", "my\
    \ ($arr, $k) = @_;\n    my @result;\n    my $size = scalar @$arr;\n    if ($k\
    \ > $size) {\n        return @$arr;\n    }\n    for (my $i = 0; $i < $k; $i++)\
    \ {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n        for (my\
    \ $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$j] > $max) {\n   \
    \             $max = $arr->[$j];\n                $max_index = $j;\n         \
    \   }\n        }\n        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i]\
    \ = $max;\n        push @result, $max;\n    }\n    return @result;\n}", "my ($arr,\
    \ $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "my ($arr, $k) = @_;\n    my @max_arr = ();\n    my $max_num = -1000;\n  \
    \  my $max_index = 0;\n    for (my $i = 0; $i < $k; $i++) {\n        for (my $j\
    \ = 0; $j < scalar @$arr; $j++) {\n            if ($arr->[$j] > $max_num) {\n\
    \                $max_num = $arr->[$j];\n                $max_index = $j;\n  \
    \          }\n        }\n        push @max_arr, $max_num;\n        $arr->[$max_index]\
    \ = -1000;\n        $max_num = -1000;\n    }\n    return @max_arr;\n}", "my ($arr,\
    \ $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "my ($arr, $k) = @_;\n    my $n = scalar @$arr;\n    return [] if $k == 0;\n\
    \    return $arr if $k == $n;\n    my $heap = Heap::Simple->new(\n        order\
    \ => '<',\n        elements => 'Num',\n        data => [@$arr[0..$k-1]],\n   \
    \ );\n    $heap->add($_) for @$arr[$k..$n-1];\n    return [$heap->extract_all];\n\
    }", "my ($arr, $k) = @_;\n    my @result;\n    my $i = 0;\n    while ($i < $k)\
    \ {\n        my $max = $arr->[0];\n        my $max_index = 0;\n        for (my\
    \ $j = 1; $j < scalar @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n \
    \               $max = $arr->[$j];\n                $max_index = $j;\n       \
    \     }\n        }\n        push @result, $max;\n        splice @$arr, $max_index,\
    \ 1;\n        $i++;\n    }\n    return @result;\n}", "my ($arr, $k) = @_;\n  \
    \  my $n = scalar @$arr;\n    return [] if $k == 0;\n    return $arr if $k ==\
    \ $n;\n    my $heap = Heap::Simple->new(\n        order => '<',\n        elements\
    \ => 'Num',\n        data => [@$arr[0..$k-1]],\n    );\n    $heap->heapify();\n\
    \    for my $i ($k..$n-1) {\n        if ($arr->[$i] > $heap->top()) {\n      \
    \      $heap->replace($arr->[$i]);\n        }\n    }\n    return [$heap->extract_all()];\n\
    }", "my ($arr, $k) = @_;\n    my @result;\n    for my $i (0 .. $k - 1) {\n   \
    \     my $max = $arr->[$i];\n        my $max_index = $i;\n        for my $j ($i\
    \ + 1 .. $#$arr) {\n            if ($arr->[$j] > $max) {\n                $max\
    \ = $arr->[$j];\n                $max_index = $j;\n            }\n        }\n\
    \        $result[$i] = $max;\n        $arr->[$max_index] = $arr->[$i];\n     \
    \   $arr->[$i] = $max;\n    }\n    return \\@result;\n}", "my ($arr, $k) = @_;\n\
    \    my @sorted = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}",
  "my ($arr, $k) = @_;\n    my @max;\n    for my $i (0 .. $k - 1) {\n        my $max\
    \ = $arr->[$i];\n        my $max_index = $i;\n        for my $j ($i + 1 .. $#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $max[$i]\
    \ = $max;\n        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort {\
    \ $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n\
    \    my $n = scalar @$arr;\n    my @result;\n    for my $i (0..$n-1) {\n     \
    \   my $j = $i;\n        while ($j > 0 && $arr->[$j-1] < $arr->[$j]) {\n     \
    \       ($arr->[$j-1], $arr->[$j]) = ($arr->[$j], $arr->[$j-1]);\n           \
    \ $j--;\n        }\n        if ($i >= $k) {\n            pop @$arr;\n        }\n\
    \    }\n    return $arr;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b\
    \ <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n  \
    \  my @max;\n    for my $i (0 .. $k - 1) {\n        my $max = -1000;\n       \
    \ my $max_index = -1;\n        for my $j (0 .. @$arr - 1) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        push @max, $max;\n        splice @$arr,\
    \ $max_index, 1;\n    }\n    return @max;\n}", "my ($arr, $k) = @_;\n    my @max_arr\
    \ = ();\n    my $len = scalar @$arr;\n    if ($k > $len) {\n        return @$arr;\n\
    \    }\n    for (my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $j = $i + 1; $j < $len; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        $arr->[$max_index]\
    \ = $arr->[$i];\n        $arr->[$i] = $max;\n        push @max_arr, $max;\n  \
    \  }\n    return @max_arr;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort {\
    \ $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n\
    \    my @sorted = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}",
  "my ($arr, $k) = @_;\n    my @res;\n    my $i = 0;\n    while ($i < $k) {\n    \
    \    my $max = $arr->[$i];\n        my $max_idx = $i;\n        for (my $j = $i\
    \ + 1; $j < @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n           \
    \     $max = $arr->[$j];\n                $max_idx = $j;\n            }\n    \
    \    }\n        push @res, $max;\n        splice @$arr, $max_idx, 1;\n       \
    \ $i++;\n    }\n    return \\@res;\n}", "my ($arr, $k) = @_;\n    my $n = scalar\
    \ @$arr;\n    my @result;\n    my $i = 0;\n    my $j = $n - 1;\n    while ($i\
    \ <= $j) {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n     \
    \   for (my $m = $i + 1; $m <= $j; $m++) {\n            if ($arr->[$m] > $max)\
    \ {\n                $max = $arr->[$m];\n                $max_index = $m;\n  \
    \          }\n        }\n        if ($max_index == $i) {\n            push @result,\
    \ $max;\n            $i++;\n        } else {\n            $arr->[$max_index] =\
    \ $arr->[$i];\n            $arr->[$i] = $max;\n            push @result, $max;\n\
    \            $i++;\n        }\n        if (scalar @result == $k) {\n         \
    \   last;\n        }\n    }\n    return \\@result;\n}", "my ($arr, $k) = @_;\n\
    \    my $n = scalar @$arr;\n    my @result;\n    for (my $i = 0; $i < $k; $i++)\
    \ {\n        my $max_index = $i;\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            if ($arr->[$j] > $arr->[$max_index]) {\n                $max_index\
    \ = $j;\n            }\n        }\n        ($arr->[$i], $arr->[$max_index]) =\
    \ ($arr->[$max_index], $arr->[$i]);\n        push @result, $arr->[$i];\n    }\n\
    \    return @result;\n}", "my ($arr, $k) = @_;\n    my $n = scalar @$arr;\n  \
    \  my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        $result[$i]\
    \ = $max;\n        $arr->[$max_index] = $arr->[$i];\n        $i++;\n    }\n  \
    \  return \\@result;\n}", "my ($arr, $k) = @_;\n    my @max;\n    for my $i (0\
    \ .. $k - 1) {\n        push @max, $arr->[$i];\n    }\n    @max = sort { $b <=>\
    \ $a } @max;\n    for my $i ($k .. $#$arr) {\n        if ($arr->[$i] > $max[-1])\
    \ {\n            $max[-1] = $arr->[$i];\n            @max = sort { $b <=> $a }\
    \ @max;\n        }\n    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n    my\
    \ $len = scalar @$arr;\n    my @res;\n    if ($k >= $len) {\n        @res = sort\
    \ {$b <=> $a} @$arr;\n    } else {\n        my $i = 0;\n        my $j = $len -\
    \ 1;\n        my $p = partition($arr, $i, $j);\n        while ($p != $k - 1) {\n\
    \            if ($p > $k - 1) {\n                $j = $p - 1;\n              \
    \  $p = partition($arr, $i, $j);\n            } else {\n                $i = $p\
    \ + 1;\n                $p = partition($arr, $i, $j);\n            }\n       \
    \ }\n        @res = @$arr[$p - $k + 1 .. $p];\n    }\n    return @res;\n}", "my\
    \ ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return\
    \ [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=>\
    \ $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my\
    \ $n = scalar @$arr;\n    my @res;\n    for (my $i = 0; $i < $k; $i++) {\n   \
    \     my $max = $arr->[$i];\n        my $max_idx = $i;\n        for (my $j = $i\
    \ + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n              \
    \  $max = $arr->[$j];\n                $max_idx = $j;\n            }\n       \
    \ }\n        $res[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n    }\n\
    \    return @res;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a\
    \ } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my @max;\n\
    \    for my $i (0 .. $k - 1) {\n        my $max = $arr->[$i];\n        my $max_index\
    \ = $i;\n        for my $j ($i + 1 .. $#$arr) {\n            if ($arr->[$j] >\
    \ $max) {\n                $max = $arr->[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $max[$i] = $max;\n        ($arr->[$i], $arr->[$max_index])\
    \ = ($arr->[$max_index], $arr->[$i]);\n    }\n    return \\@max;\n}", "my ($arr,\
    \ $k) = @_;\n    my $n = scalar @$arr;\n    my @res;\n    for (my $i = 0; $i <\
    \ $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n  \
    \      for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_index = $j;\n  \
    \          }\n        }\n        push @res, $max;\n        ($arr->[$i], $arr->[$max_index])\
    \ = ($arr->[$max_index], $arr->[$i]);\n    }\n    return \\@res;\n}", "my ($arr,\
    \ $k) = @_;\n    my $n = scalar @$arr;\n    my @res;\n    for (my $i = 0; $i <\
    \ $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n    \
    \    for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n\
    \    }\n    return \\@res;\n}", "my ($arr, $k) = @_;\n    my @max;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $max = $arr->[0];\n    while ($i < $k) {\n    \
    \    $max = $arr->[$j];\n        for (my $l = $j; $l < scalar @$arr; $l++) {\n\
    \            if ($arr->[$l] > $max) {\n                $max = $arr->[$l];\n  \
    \              $j = $l;\n            }\n        }\n        push @max, $max;\n\
    \        $i++;\n        $j++;\n    }\n    return @max;\n}", "my ($arr, $k) = @_;\n\
    \    my @max;\n    for my $i (0 .. $k - 1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i + 1 .. $#$arr) {\n         \
    \   if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n           \
    \     $max_idx = $j;\n            }\n        }\n        $max[$i] = $max;\n   \
    \     @$arr[$i, $max_idx] = @$arr[$max_idx, $i];\n    }\n    return \\@max;\n}",
  "my ($arr, $k) = @_;\n    my @result;\n    my $n = scalar @$arr;\n    for (my $i\
    \ = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_index\
    \ = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        @$arr[$i, $max_index] = @$arr[$max_index,\
    \ $i];\n        push @result, $max;\n    }\n    return @result;\n}", "my ($arr,\
    \ $k) = @_;\n    my @result;\n    foreach my $num (@$arr) {\n        if (@result\
    \ < $k) {\n            push @result, $num;\n        } else {\n            my $min\
    \ = $result[0];\n            my $min_index = 0;\n            for (my $i = 1; $i\
    \ < @result; $i++) {\n                if ($result[$i] < $min) {\n            \
    \        $min = $result[$i];\n                    $min_index = $i;\n         \
    \       }\n            }\n            if ($num > $min) {\n                $result[$min_index]\
    \ = $num;\n            }\n        }\n    }\n    return sort {$b <=> $a} @result;\n\
    }", "my ($arr, $k) = @_;\n    my @max;\n    for my $i (0 .. $k - 1) {\n      \
    \  my $max = $arr->[$i];\n        my $max_idx = $i;\n        for my $j ($i + 1\
    \ .. $#$arr) {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_idx = $j;\n            }\n        }\n        $max[$i] =\
    \ $max;\n        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n\
    \    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort {\
    \ $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n\
    \    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}",
  "my ($arr, $k) = @_;\n    my @result;\n    my $i = 0;\n    while ($i < $k) {\n \
    \       my $max = $arr->[0];\n        my $max_index = 0;\n        for (my $j =\
    \ 1; $j < scalar @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n      \
    \          $max = $arr->[$j];\n                $max_index = $j;\n            }\n\
    \        }\n        push @result, $max;\n        splice @$arr, $max_index, 1;\n\
    \        $i++;\n    }\n    return @result;\n}", "my ($arr, $k) = @_;\n    my @sorted\
    \ = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr,\
    \ $k) = @_;\n    my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my\
    \ $max = $arr->[0];\n        my $index = 0;\n        for (my $j = 1; $j < scalar\
    \ @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n                $max =\
    \ $arr->[$j];\n                $index = $j;\n            }\n        }\n      \
    \  push @result, $max;\n        splice @$arr, $index, 1;\n        $i++;\n    }\n\
    \    return @result;\n}", "my ($arr, $k) = @_;\n    my @max = ();\n    for my\
    \ $i (0..$k-1) {\n        my $max = -1000;\n        my $max_index = -1;\n    \
    \    for my $j (0..$#{$arr}) {\n            if ($arr->[$j] > $max) {\n       \
    \         $max = $arr->[$j];\n                $max_index = $j;\n            }\n\
    \        }\n        push @max, $max;\n        splice @{$arr}, $max_index, 1;\n\
    \    }\n    return @max;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b\
    \ <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n\
    \    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n\
    \    while ($i < $n) {\n        if ($j < $k) {\n            push @result, $arr->[$i];\n\
    \            $j++;\n        } else {\n            my $min = $result[0];\n    \
    \        my $min_index = 0;\n            for (my $m = 1; $m < $k; $m++) {\n  \
    \              if ($result[$m] < $min) {\n                    $min = $result[$m];\n\
    \                    $min_index = $m;\n                }\n            }\n    \
    \        if ($arr->[$i] > $min) {\n                $result[$min_index] = $arr->[$i];\n\
    \            }\n        }\n        $i++;\n    }\n    return @result;\n}", "my\
    \ ($arr, $k) = @_;\n    my @max;\n    my $i = 0;\n    while ($i < $k) {\n    \
    \    push @max, shift @$arr;\n        $i++;\n    }\n    @max = sort {$b <=> $a}\
    \ @max;\n    foreach my $num (@$arr) {\n        if ($num > $max[-1]) {\n     \
    \       pop @max;\n            push @max, $num;\n            @max = sort {$b <=>\
    \ $a} @max;\n        }\n    }\n    return @max;\n}", "my ($arr, $k) = @_;\n  \
    \  my @sorted = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my\
    \ ($arr, $k) = @_;\n    my @max;\n    for my $i (0 .. $k - 1) {\n        my $max\
    \ = $arr->[$i];\n        my $max_index = $i;\n        for my $j ($i + 1 .. $#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $max[$i]\
    \ = $max;\n        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n    my $len = scalar @$arr;\n\
    \    if ($k >= $len) {\n        return [sort {$b <=> $a} @$arr];\n    }\n    my\
    \ @max_k = sort {$b <=> $a} @$arr[0..$k-1];\n    for (my $i = $k; $i < $len; $i++)\
    \ {\n        if ($arr->[$i] > $max_k[-1]) {\n            $max_k[-1] = $arr->[$i];\n\
    \            @max_k = sort {$b <=> $a} @max_k;\n        }\n    }\n    return \\\
    @max_k;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n\
    \    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my @sorted = sort\
    \ { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n\
    \    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n\
    \    while ($i < $n) {\n        if ($j < $k) {\n            push @result, $arr->[$i];\n\
    \            $j++;\n        } else {\n            my $min = $result[0];\n    \
    \        my $min_index = 0;\n            for (my $l = 1; $l < $k; $l++) {\n  \
    \              if ($result[$l] < $min) {\n                    $min = $result[$l];\n\
    \                    $min_index = $l;\n                }\n            }\n    \
    \        if ($arr->[$i] > $min) {\n                $result[$min_index] = $arr->[$i];\n\
    \            }\n        }\n        $i++;\n    }\n    return @result;\n}", "my\
    \ ($arr, $k) = @_;\n    my @max;\n    for my $i (0 .. $k - 1) {\n        my $max\
    \ = -1e9;\n        my $max_index = -1;\n        for my $j ($i .. @$arr - 1) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        $max[$i] =\
    \ $max;\n        $arr->[$max_index] = -1e9;\n    }\n    return \\@max;\n}", "my\
    \ ($arr, $k) = @_;\n    my @result;\n    my $size = scalar @$arr;\n    if ($k\
    \ == 0) {\n        return @result;\n    }\n    if ($k == $size) {\n        return\
    \ @$arr;\n    }\n    my $left = 0;\n    my $right = $size - 1;\n    my $index\
    \ = partition($arr, $left, $right);\n    while ($index != $k - 1) {\n        if\
    \ ($index > $k - 1) {\n            $right = $index - 1;\n            $index =\
    \ partition($arr, $left, $right);\n        }\n        else {\n            $left\
    \ = $index + 1;\n            $index = partition($arr, $left, $right);\n      \
    \  }\n    }\n    for (my $i = 0; $i < $k; $i++) {\n        push @result, $arr->[$i];\n\
    \    }\n    return @result;\n}", "my ($arr, $k) = @_;\n    my @max;\n    for my\
    \ $i (0 .. $k - 1) {\n        my $max = $arr->[$i];\n        my $max_i = $i;\n\
    \        for my $j ($i + 1 .. $#$arr) {\n            if ($arr->[$j] > $max) {\n\
    \                $max = $arr->[$j];\n                $max_i = $j;\n          \
    \  }\n        }\n        $max[$i] = $max;\n        ($arr->[$i], $arr->[$max_i])\
    \ = ($arr->[$max_i], $arr->[$i]);\n    }\n    return \\@max;\n}", "my ($arr, $k)\
    \ = @_;\n    my $len = scalar @$arr;\n    return [] if $len == 0;\n    return\
    \ [@$arr] if $len <= $k;\n    my $res = [];\n    my $i = 0;\n    while ($i < $k)\
    \ {\n        my $j = $i;\n        while ($j < $len) {\n            if ($arr->[$j]\
    \ > $arr->[$i]) {\n                my $tmp = $arr->[$i];\n                $arr->[$i]\
    \ = $arr->[$j];\n                $arr->[$j] = $tmp;\n            }\n         \
    \   $j++;\n        }\n        $res->[$i] = $arr->[$i];\n        $i++;\n    }\n\
    \    return $res;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a\
    \ } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my @sorted\
    \ = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k)\
    \ = @_;\n    my @res;\n    my $len = scalar @$arr;\n    for (my $i = 0; $i < $len;\
    \ $i++) {\n        my $num = $arr->[$i];\n        if ($i < $k) {\n           \
    \ push @res, $num;\n            next;\n        }\n        my $j = $k - 1;\n  \
    \      while ($j >= 0 && $res[$j] < $num) {\n            $res[$j + 1] = $res[$j];\n\
    \            $j--;\n        }\n        $res[$j + 1] = $num;\n    }\n    return\
    \ @res;\n}", "my ($arr, $k) = @_;\n    my $n = scalar @$arr;\n    return [] if\
    \ $k == 0;\n    return $arr if $k == $n;\n    my @res = ();\n    for (my $i =\
    \ 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n}", "my ($arr,\
    \ $k) = @_;\n    my $n = scalar @$arr;\n    my @res;\n    for (my $i = 0; $i <\
    \ $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n    \
    \    for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return @res;\n}", "my ($arr, $k)\
    \ = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return\
    \ [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=>\
    \ $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my\
    \ $n = scalar @$arr;\n    return [] if $k == 0;\n    return $arr if $k == $n;\n\
    \    my $max = $arr->[0];\n    my $max_idx = 0;\n    for (my $i = 1; $i < $n;\
    \ $i++) {\n        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n\
    \            $max_idx = $i;\n        }\n    }\n    my $res = [$max];\n    my $left\
    \ = maximum([@$arr[0..$max_idx-1]], $k-1);\n    my $right = maximum([@$arr[$max_idx+1..$n-1]],\
    \ $k-1);\n    return [@$left, @$res, @$right];\n}", "my ($arr, $k) = @_;\n   \
    \ my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n       \
    \ my $idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $idx = $j;\n\
    \            }\n        }\n        $res[$i] = $max;\n        $arr->[$idx] = $arr->[$i];\n\
    \        $arr->[$i] = $max;\n    }\n    return \\@res;\n}", "my ($arr, $k) = @_;\n\
    \    my @max;\n    for my $i (0 .. $k - 1) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for my $j ($i + 1 .. $#$arr) {\n       \
    \     if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n         \
    \       $max_index = $j;\n            }\n        }\n        $max[$i] = $max;\n\
    \        ($arr->[$i], $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n\
    \    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort {\
    \ $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n\
    \    my @sorted = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}",
  "my ($arr, $k) = @_;\n    my $n = scalar @$arr;\n    my @max = ();\n    for (my\
    \ $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_index\
    \ = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        $arr->[$max_index] = $arr->[$i];\n  \
    \      $arr->[$i] = $max;\n        push @max, $max;\n    }\n    return @max;\n\
    }", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return\
    \ @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=>\
    \ $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my\
    \ @result;\n    my @sorted = sort {$b <=> $a} @$arr;\n    for (my $i = 0; $i <\
    \ $k; $i++) {\n        push @result, $sorted[$i];\n    }\n    return @result;\n\
    }", "my ($arr, $k) = @_;\n    my @max;\n    for my $i (0 .. $k - 1) {\n      \
    \  my $max = $arr->[$i];\n        my $max_index = $i;\n        for my $j ($i +\
    \ 1 .. $#$arr) {\n            if ($arr->[$j] > $max) {\n                $max =\
    \ $arr->[$j];\n                $max_index = $j;\n            }\n        }\n  \
    \      $max[$i] = $max;\n        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i]\
    \ = $max;\n    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n    my @max;\n\
    \    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[0];\n       \
    \ my $max_index = 0;\n        for (my $j = 1; $j < @$arr; $j++) {\n          \
    \  if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n            \
    \    $max_index = $j;\n            }\n        }\n        push @max, $max;\n  \
    \      splice @$arr, $max_index, 1;\n        $i++;\n    }\n    return \\@max;\n\
    }", "my ($arr, $k) = @_;\n    my @max;\n    for my $i (0 .. $#$arr) {\n      \
    \  if (@max < $k) {\n            push @max, $arr->[$i];\n            @max = sort\
    \ { $b <=> $a } @max;\n        } else {\n            if ($arr->[$i] > $max[-1])\
    \ {\n                pop @max;\n                push @max, $arr->[$i];\n     \
    \           @max = sort { $b <=> $a } @max;\n            }\n        }\n    }\n\
    \    return @max;\n}", "my ($arr, $k) = @_;\n    my $len = scalar @$arr;\n   \
    \ my $left = 0;\n    my $right = $len - 1;\n    my $index = partition($arr, $left,\
    \ $right);\n    while ($index != $k - 1) {\n        if ($index > $k - 1) {\n \
    \           $right = $index - 1;\n            $index = partition($arr, $left,\
    \ $right);\n        } else {\n            $left = $index + 1;\n            $index\
    \ = partition($arr, $left, $right);\n        }\n    }\n    return [@$arr[0..$k-1]];\n\
    }", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return\
    \ [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=>\
    \ $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my\
    \ @sorted = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr,\
    \ $k) = @_;\n    my @result;\n    my $i = 0;\n    while ($i < $k) {\n        my\
    \ $max = $arr->[0];\n        my $max_index = 0;\n        for (my $j = 1; $j <\
    \ scalar @$arr; $j++) {\n            if ($arr->[$j] > $max) {\n              \
    \  $max = $arr->[$j];\n                $max_index = $j;\n            }\n     \
    \   }\n        push @result, $max;\n        splice @$arr, $max_index, 1;\n   \
    \     $i++;\n    }\n    return @result;\n}", "my ($arr, $k) = @_;\n    my @sorted\
    \ = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k)\
    \ = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n\
    }", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return\
    \ [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my @result;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $n = scalar @$arr;\n    while ($i < $n) {\n     \
    \   if ($j == $k) {\n            last;\n        }\n        if ($arr->[$i] > $result[$j\
    \ - 1]) {\n            $result[$j] = $arr->[$i];\n            $j++;\n        }\n\
    \        $i++;\n    }\n    return @result;\n}", "my ($arr, $k) = @_;\n    my @sorted\
    \ = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr,\
    \ $k) = @_;\n    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar\
    \ @$arr;\n    while ($i < $n) {\n        if ($j == $k) {\n            last;\n\
    \        }\n        if ($arr->[$i] > $result[$j - 1]) {\n            $result[$j]\
    \ = $arr->[$i];\n            $j++;\n        }\n        $i++;\n    }\n    return\
    \ \\@result;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n\
    \    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my @max;\n    my\
    \ $i = 0;\n    while ($i < $k) {\n        my $max = shift @$arr;\n        foreach\
    \ my $num (@$arr) {\n            if ($num > $max) {\n                $max = $num;\n\
    \            }\n        }\n        push @max, $max;\n        $i++;\n    }\n  \
    \  return @max;\n}", "my ($arr, $k) = @_;\n    my $n = scalar @$arr;\n    my @res;\n\
    \    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n      \
    \  my $max_idx = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n        \
    \    if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n          \
    \      $max_idx = $j;\n            }\n        }\n        push @res, $max;\n  \
    \      $arr->[$max_idx] = $arr->[$i];\n        $arr->[$i] = $max;\n        $i++;\n\
    \    }\n    return \\@res;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort {\
    \ $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n\
    \    my $n = scalar @$arr;\n    my @result;\n    for (my $i = 0; $i < $k; $i++)\
    \ {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n        for (my\
    \ $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n      \
    \          $max = $arr->[$j];\n                $max_index = $j;\n            }\n\
    \        }\n        $result[$i] = $max;\n        $arr->[$max_index] = $arr->[$i];\n\
    \        $arr->[$i] = $max;\n    }\n    return @result;\n}", "my ($arr, $k) =\
    \ @_;\n    my $n = scalar @$arr;\n    my @max;\n    for (my $i = 0; $i < $k; $i++)\
    \ {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n        for (my\
    \ $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n      \
    \          $max = $arr->[$j];\n                $max_index = $j;\n            }\n\
    \        }\n        $max[$i] = $max;\n        $arr->[$max_index] = $arr->[$i];\n\
    \        $arr->[$i] = $max;\n    }\n    return @max;\n}", "my ($arr, $k) = @_;\n\
    \    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}",
  "my ($arr, $k) = @_;\n    my @max;\n    for my $i (0 .. $k - 1) {\n        my $max\
    \ = $arr->[$i];\n        my $max_index = $i;\n        for my $j ($i + 1 .. $#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        push @max,\
    \ $max;\n        ($arr->[$i], $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n\
    \    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n    my @max;\n    for my\
    \ $i (0 .. $k - 1) {\n        my $max = -1000;\n        my $max_index = -1;\n\
    \        for my $j (0 .. $#{$arr}) {\n            if ($arr->[$j] > $max) {\n \
    \               $max = $arr->[$j];\n                $max_index = $j;\n       \
    \     }\n        }\n        push @max, $max;\n        splice @{$arr}, $max_index,\
    \ 1;\n    }\n    return @max;\n}", "my ($arr, $k) = @_;\n    my @max;\n    for\
    \ my $i (0 .. $k - 1) {\n        my $max = $arr->[$i];\n        my $max_index\
    \ = $i;\n        for my $j ($i + 1 .. $#$arr) {\n            if ($arr->[$j] >\
    \ $max) {\n                $max = $arr->[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $max[$i] = $max;\n        $arr->[$max_index]\
    \ = $arr->[$i];\n        $arr->[$i] = $max;\n    }\n    return \\@max;\n}", "my\
    \ ($arr, $k) = @_;\n    my $n = scalar @$arr;\n    return [] if $k == 0;\n   \
    \ return $arr if $k == $n;\n    my $result = [];\n    for (my $i = 0; $i < $k;\
    \ $i++) {\n        my $max = $arr->[$i];\n        my $idx = $i;\n        for (my\
    \ $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n      \
    \          $max = $arr->[$j];\n                $idx = $j;\n            }\n   \
    \     }\n        $result->[$i] = $max;\n        $arr->[$idx] = $arr->[$i];\n \
    \   }\n    return $result;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort {\
    \ $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n\
    \    my @res;\n    my $len = scalar @$arr;\n    for (my $i = 0; $i < $len; $i++)\
    \ {\n        my $num = $arr->[$i];\n        my $j = $i - 1;\n        while ($j\
    \ >= 0 && $num > $arr->[$j]) {\n            $arr->[$j + 1] = $arr->[$j];\n   \
    \         $j--;\n        }\n        $arr->[$j + 1] = $num;\n    }\n    for (my\
    \ $i = $len - 1; $i >= $len - $k; $i--) {\n        push @res, $arr->[$i];\n  \
    \  }\n    return @res;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=>\
    \ $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n    my\
    \ @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my\
    \ ($arr, $k) = @_;\n    my @sorted = sort { $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n\
    }", "my ($arr, $k) = @_;\n    my $len = scalar @$arr;\n    my @res;\n    for (my\
    \ $i = 0; $i < $len; $i++) {\n        my $num = $arr->[$i];\n        if ($i <\
    \ $k) {\n            push @res, $num;\n            next;\n        }\n        my\
    \ $j = $k - 1;\n        while ($j >= 0 && $res[$j] < $num) {\n            $res[$j\
    \ + 1] = $res[$j];\n            $j--;\n        }\n        $res[$j + 1] = $num;\n\
    \    }\n    return \\@res;\n}", "my ($arr, $k) = @_;\n    my @max = sort {$b <=>\
    \ $a} @$arr[0..$k-1];\n    for my $i ($k..$#$arr) {\n        if ($arr->[$i] >\
    \ $max[-1]) {\n            $max[-1] = $arr->[$i];\n            @max = sort {$b\
    \ <=> $a} @max;\n        }\n    }\n    return @max;\n}", "my ($arr, $k) = @_;\n\
    \    my @max;\n    for my $i (0 .. $k - 1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i + 1 .. $#$arr) {\n         \
    \   if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n           \
    \     $max_idx = $j;\n            }\n        }\n        $max[$i] = $max;\n   \
    \     ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n\
    \    return \\@max;\n}", "my ($arr, $k) = @_;\n    my @max;\n    my $i = 0;\n\
    \    while ($i < $k) {\n        my $max = $arr->[0];\n        my $max_i = 0;\n\
    \        for (my $j = 1; $j < @$arr; $j++) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_i = $j;\n      \
    \      }\n        }\n        push @max, $max;\n        splice @$arr, $max_i, 1;\n\
    \        $i++;\n    }\n    return \\@max;\n}", "my ($arr, $k) = @_;\n    my @res;\n\
    \    my $i = 0;\n    while ($i < $k) {\n        my $max = -1;\n        my $max_idx\
    \ = -1;\n        for (my $j = 0; $j < @$arr; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_idx = $j;\n\
    \            }\n        }\n        push @res, $max;\n        splice @$arr, $max_idx,\
    \ 1;\n        $i++;\n    }\n    return @res;\n}", "my ($arr, $k) = @_;\n    my\
    \ @sorted = sort { $b <=> $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr,\
    \ $k) = @_;\n    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#{$arr}) {\n           \
    \ if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n             \
    \   $max_idx = $j;\n            }\n        }\n        push @res, $max;\n     \
    \   ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n\
    \    return \\@res;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort { $b <=>\
    \ $a } @$arr;\n    return @sorted[0..$k-1];\n}", "my ($arr, $k) = @_;\n    my\
    \ @result;\n    my $len = scalar @$arr;\n    my $i = 0;\n    while ($i < $len)\
    \ {\n        if ($i < $k) {\n            push @result, $arr->[$i];\n        }\n\
    \        else {\n            my $j = 0;\n            while ($j < $k) {\n     \
    \           if ($arr->[$i] > $result[$j]) {\n                    splice @result,\
    \ $j, 0, $arr->[$i];\n                    pop @result;\n                    last;\n\
    \                }\n                $j++;\n            }\n        }\n        $i++;\n\
    \    }\n    return @result;\n}", "my ($arr, $k) = @_;\n    my @sorted = sort {\
    \ $b <=> $a } @$arr;\n    return [@sorted[0..$k-1]];\n}", "my ($arr, $k) = @_;\n\
    \    my @res;\n    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $max_index = $i;\n        for (my $j = $i + 1; $j < @$arr; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        push @res,\
    \ $max;\n        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \        $i++;\n    }\n    return \\@res;\n}", "my ($arr, $k) = @_;\n    my $n\
    \ = scalar @$arr;\n    my @res;\n    for (my $i = 0; $i < $k; $i++) {\n      \
    \  my $max = $arr->[$i];\n        my $max_idx = $i;\n        for (my $j = $i +\
    \ 1; $j < $n; $j++) {\n            if ($arr->[$j] > $max) {\n                $max\
    \ = $arr->[$j];\n                $max_idx = $j;\n            }\n        }\n  \
    \      $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx],\
    \ $arr->[$i]);\n    }\n    return @res;\n}", "my ($arr, $k) = @_;\n    my @result;\n\
    \    my $i = 0;\n    while ($i < $k) {\n        my $max = $arr->[0];\n       \
    \ my $index = 0;\n        for (my $j = 1; $j < scalar @$arr; $j++) {\n       \
    \     if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n         \
    \       $index = $j;\n            }\n        }\n        push @result, $max;\n\
    \        splice @$arr, $index, 1;\n        $i++;\n    }\n    return @result;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
