name: HumanEval_19_sort_numbers
language: pl
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
  \ {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
  \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
  \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my\
    \ @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n \
    \   return join ' ', @sorted_numbers;\n}", "my ($string) = @_;\n    my @numbers\
    \ = split / /, $string;\n    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n\
    \    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $numbers_to_digits{$a}\
    \ <=> $numbers_to_digits{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers\
    \ = (\n        zero  => 0,\n        one   => 1,\n        two   => 2,\n       \
    \ three => 3,\n        four  => 4,\n        five  => 5,\n        six   => 6,\n\
    \        seven => 7,\n        eight => 8,\n        nine  => 9,\n    );\n    my\
    \ @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join\
    \ ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n\
    \    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n\
    \    return join ' ', @sorted_numbers;\n}", "my $str = shift;\n    my @numbers\
    \ = split / /, $str;\n    my %numbers = (\n        zero  => 0,\n        one  \
    \ => 1,\n        two   => 2,\n        three => 3,\n        four  => 4,\n     \
    \   five  => 5,\n        six   => 6,\n        seven => 7,\n        eight => 8,\n\
    \        nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $str = shift;\n    my @numbers\
    \ = split(/ /, $str);\n    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join(\" \", @sorted_numbers);\n}", "my $numbers = shift;\n\
    \    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join(\" \", @sorted_numbers);\n}",
  "my ($string) = @_;\n    my @numbers = split(/ /, $string);\n    my @sorted = sort\
    \ { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join(' ', @sorted);\n\
    }", "my $numbers = shift;\n    my %numbers = (\n        'zero'  => 0,\n      \
    \  'one'   => 1,\n        'two'   => 2,\n        'three' => 3,\n        'four'\
    \  => 4,\n        'five'  => 5,\n        'six'   => 6,\n        'seven' => 7,\n\
    \        'eight' => 8,\n        'nine'  => 9,\n    );\n    my @numbers = split\
    \ / /, $numbers;\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n\
    \    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split\
    \ / /, $numbers;\n    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my $string = shift;\n\
    \    my @numbers = split / /, $string;\n    my @sorted = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $string\
    \ = shift;\n    my @numbers = split / /, $string;\n    my @sorted = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers\
    \ = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers = (\n    \
    \    zero  => 0,\n        one   => 1,\n        two   => 2,\n        three => 3,\n\
    \        four  => 4,\n        five  => 5,\n        six   => 6,\n        seven\
    \ => 7,\n        eight => 8,\n        nine  => 9,\n    );\n    my @sorted = sort\
    \ { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers\
    \ = (\n        'zero'  => 0,\n        'one'   => 1,\n        'two'   => 2,\n \
    \       'three' => 3,\n        'four'  => 4,\n        'five'  => 5,\n        'six'\
    \   => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'  => 9,\n\
    \    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n \
    \   return join ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split\
    \ / /, $numbers;\n    my %numbers = (\n        zero  => 0,\n        one   => 1,\n\
    \        two   => 2,\n        three => 3,\n        four  => 4,\n        five \
    \ => 5,\n        six   => 6,\n        seven => 7,\n        eight => 8,\n     \
    \   nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $string = shift;\n    my\
    \ @numbers = split(/ /, $string);\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join(' ', @sorted);\n}", "my $string = shift;\n    my\
    \ @numbers = split(/ /, $string);\n    my @sorted = sort {$number_map{$a} <=>\
    \ $number_map{$b}} @numbers;\n    return join(\" \", @sorted);\n}", "my $numbers\
    \ = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers = (\n    \
    \    zero => 0,\n        one => 1,\n        two => 2,\n        three => 3,\n \
    \       four => 4,\n        five => 5,\n        six => 6,\n        seven => 7,\n\
    \        eight => 8,\n        nine => 9,\n    );\n    my @sorted = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $string\
    \ = shift;\n    my @numbers = split(/ /, $string);\n    my @sorted_numbers = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join(\" \", @sorted_numbers);\n\
    }", "my $numbers = shift;\n    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join(\" \", @sorted_numbers);\n\
    }", "my $numbers = shift;\n    my %nums = (\n        'zero' => 0,\n        'one'\
    \ => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n  \
    \      'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight'\
    \ => 8,\n        'nine' => 9,\n    );\n    my @nums = split(/ /, $numbers);\n\
    \    my @sorted = sort { $nums{$a} <=> $nums{$b} } @nums;\n    return join(' ',\
    \ @sorted);\n}", "my $string = shift;\n    my @numbers = split / /, $string;\n\
    \    my @sorted = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n   \
    \ return join ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split\
    \ / /, $numbers;\n    my %numbers = (\n        zero  => 0,\n        one   => 1,\n\
    \        two   => 2,\n        three => 3,\n        four  => 4,\n        five \
    \ => 5,\n        six   => 6,\n        seven => 7,\n        eight => 8,\n     \
    \   nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $string = shift;\n    my\
    \ @numbers = split / /, $string;\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $string = shift;\n    my\
    \ @numbers = split / /, $string;\n    my @sorted_numbers = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my\
    \ $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join '\
    \ ', @sorted_numbers;\n}", "my $numbers = shift;\n    my @numbers = split / /,\
    \ $numbers;\n    my @sorted = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n\
    \    return join ' ', @sorted;\n}", "my $string = shift;\n    my @numbers = split\
    \ / /, $string;\n    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my $string = shift;\n\
    \    my @numbers = split / /, $string;\n    my @sorted = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $string\
    \ = shift;\n    my @numbers = split / /, $string;\n    my @sorted_numbers = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join \" \", @sorted_numbers;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join '\
    \ ', @sorted_numbers;\n}", "my $numbers = shift;\n    my @numbers = split / /,\
    \ $numbers;\n    my %numbers = (\n        zero => 0,\n        one => 1,\n    \
    \    two => 2,\n        three => 3,\n        four => 4,\n        five => 5,\n\
    \        six => 6,\n        seven => 7,\n        eight => 8,\n        nine =>\
    \ 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n\
    \    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split\
    \ / /, $numbers;\n    my %numbers = (\n        'zero' => 0,\n        'one' =>\
    \ 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n     \
    \   'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight'\
    \ => 8,\n        'nine' => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=>\
    \ $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers =\
    \ shift;\n    my @numbers = split / /, $numbers;\n    my %numbers = (\n      \
    \  zero => 0,\n        one => 1,\n        two => 2,\n        three => 3,\n   \
    \     four => 4,\n        five => 5,\n        six => 6,\n        seven => 7,\n\
    \        eight => 8,\n        nine => 9,\n    );\n    my @sorted_numbers = sort\
    \ { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $numbers = shift;\n    my @numbers = split(/ /, $numbers);\n    my %numbers\
    \ = (\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n      \
    \  'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' =>\
    \ 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n   \
    \ );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return\
    \ join(' ', @sorted);\n}", "my $numbers = shift;\n    my @numbers = split(/ /,\
    \ $numbers);\n    my %numbers = (\n        'zero' => 0,\n        'one' => 1,\n\
    \        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five'\
    \ => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n \
    \       'nine' => 9,\n    );\n    my @sorted_numbers = sort { $numbers{$a} <=>\
    \ $numbers{$b} } @numbers;\n    return join(' ', @sorted_numbers);\n}", "my $numbers\
    \ = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers = (\n    \
    \    zero => 0,\n        one => 1,\n        two => 2,\n        three => 3,\n \
    \       four => 4,\n        five => 5,\n        six => 6,\n        seven => 7,\n\
    \        eight => 8,\n        nine => 9,\n    );\n    my @sorted_numbers = sort\
    \ { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort { $number_to_numeral{$a} <=> $number_to_numeral{$b} } @numbers;\n   \
    \ return join ' ', @sorted_numbers;\n}", "my $string = shift;\n    my @numbers\
    \ = split / /, $string;\n    my @sorted = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $string = shift;\n    my\
    \ @numbers = split / /, $string;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers =\
    \ (\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three'\
    \ => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n   \
    \     'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n    );\n   \
    \ my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join\
    \ ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n\
    \    my %numbers = (\n        zero  => 0,\n        one   => 1,\n        two  \
    \ => 2,\n        three => 3,\n        four  => 4,\n        five  => 5,\n     \
    \   six   => 6,\n        seven => 7,\n        eight => 8,\n        nine  => 9,\n\
    \    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n \
    \   return join ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split\
    \ / /, $numbers;\n    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n\
    \    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my\
    \ $string = shift;\n    my @numbers = split(\" \", $string);\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join(\"\
    \ \", @sorted_numbers);\n}", "my $numbers = shift;\n    my @numbers = split(/\
    \ /, $numbers);\n    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join(' ', @sorted_numbers);\n}", "my $numbers = shift;\n\
    \    my %numbers = (\n        'zero' => 0,\n        'one' => 1,\n        'two'\
    \ => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n \
    \       'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'\
    \ => 9,\n    );\n    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join(' ', @sorted_numbers);\n\
    }", "my ($string) = @_;\n    my @numbers = split / /, $string;\n    my %numbers\
    \ = (\n        zero  => 0,\n        one   => 1,\n        two   => 2,\n       \
    \ three => 3,\n        four  => 4,\n        five  => 5,\n        six   => 6,\n\
    \        seven => 7,\n        eight => 8,\n        nine  => 9,\n    );\n    my\
    \ @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join\
    \ ' ', @sorted;\n}", "my $string = shift;\n    my @numbers = split / /, $string;\n\
    \    my %numbers = (\n        'zero' => 0,\n        'one' => 1,\n        'two'\
    \ => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n \
    \       'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'\
    \ => 9,\n    );\n    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my ($string) = @_;\n\
    \    my @numbers = split(/ /, $string);\n    my @sorted = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join(' ', @sorted);\n}", "my $numbers\
    \ = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers = (\n    \
    \    'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three' =>\
    \ 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n      \
    \  'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n    );\n    my\
    \ @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join\
    \ ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n\
    \    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n\
    \    return join ' ', @sorted_numbers;\n}", "my $string = shift;\n    my @numbers\
    \ = split / /, $string;\n    my @sorted = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my\
    \ @numbers = split / /, $numbers;\n    my %numbers = (\n        zero  => 0,\n\
    \        one   => 1,\n        two   => 2,\n        three => 3,\n        four \
    \ => 4,\n        five  => 5,\n        six   => 6,\n        seven => 7,\n     \
    \   eight => 8,\n        nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers\
    \ = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers = (\n    \
    \    zero  => 0,\n        one   => 1,\n        two   => 2,\n        three => 3,\n\
    \        four  => 4,\n        five  => 5,\n        six   => 6,\n        seven\
    \ => 7,\n        eight => 8,\n        nine  => 9,\n    );\n    my @sorted = sort\
    \ { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort { $number_to_numeral{$a} <=> $number_to_numeral{$b} } @numbers;\n   \
    \ return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n    my @numbers\
    \ = split / /, $numbers;\n    my %numbers = (\n        zero  => 0,\n        one\
    \   => 1,\n        two   => 2,\n        three => 3,\n        four  => 4,\n   \
    \     five  => 5,\n        six   => 6,\n        seven => 7,\n        eight =>\
    \ 8,\n        nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $string = shift;\n    my\
    \ @numbers = split(/ /, $string);\n    my %numbers = (\n        'zero' => 0,\n\
    \        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four'\
    \ => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n  \
    \      'eight' => 8,\n        'nine' => 9,\n    );\n    my @sorted = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join(' ', @sorted);\n}", "my $input\
    \ = shift;\n    my @numbers = split / /, $input;\n    my @sorted = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $string\
    \ = shift;\n    my @numbers = split / /, $string;\n    my @sorted_numbers = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my @numbers = split / /, shift;\n    my %numbers = (\n        zero  => 0,\n\
    \        one   => 1,\n        two   => 2,\n        three => 3,\n        four \
    \ => 4,\n        five  => 5,\n        six   => 6,\n        seven => 7,\n     \
    \   eight => 8,\n        nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers\
    \ = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers\
    \ = (\n        'zero'  => 0,\n        'one'   => 1,\n        'two'   => 2,\n \
    \       'three' => 3,\n        'four'  => 4,\n        'five'  => 5,\n        'six'\
    \   => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'  => 9,\n\
    \    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n \
    \   return join ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split\
    \ / /, $numbers;\n    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n\
    \    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join(\" \", @sorted_numbers);\n}",
  "my ($str) = @_;\n    my @numbers = split / /, $str;\n    my @sorted = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers\
    \ = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $string = shift;\n    my @numbers = split / /, $string;\n    my @sorted_numbers\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers\
    \ = (\n        zero  => 0,\n        one   => 1,\n        two   => 2,\n       \
    \ three => 3,\n        four  => 4,\n        five  => 5,\n        six   => 6,\n\
    \        seven => 7,\n        eight => 8,\n        nine  => 9,\n    );\n    my\
    \ @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join\
    \ ' ', @sorted;\n}", "my $string = shift;\n    my @numbers = split(/ /, $string);\n\
    \    my @sorted = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n   \
    \ return join(' ', @sorted);\n}", "my $string = shift;\n    my @numbers = split(/\
    \ /, $string);\n    my @sorted = sort {$number_map{$a} <=> $number_map{$b}} @numbers;\n\
    \    return join(\" \", @sorted);\n}", "my $string = shift;\n    my @numbers =\
    \ split(/ /, $string);\n    my %numbers = (\n        'zero' => 0,\n        'one'\
    \ => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n  \
    \      'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight'\
    \ => 8,\n        'nine' => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=>\
    \ $numbers{$b} } @numbers;\n    return join(' ', @sorted);\n}", "my $string =\
    \ shift;\n    my @numbers = split / /, $string;\n    my @sorted = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers\
    \ = shift;\n    my %numbers = (\n        'zero' => 0,\n        'one' => 1,\n \
    \       'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five'\
    \ => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n \
    \       'nine' => 9,\n    );\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $string = shift;\n    my @numbers = split(/ /, $string);\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join('\
    \ ', @sorted_numbers);\n}", "my $numbers = shift;\n    my @numbers = split / /,\
    \ $numbers;\n    my @sorted = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n\
    \    return join ' ', @sorted;\n}", "my $str = shift;\n    my @numbers = split(/\
    \ /, $str);\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n\
    \    return join(' ', @sorted);\n}", "my $string = shift;\n    my @numbers = split\
    \ / /, $string;\n    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n\
    \    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers =\
    \ (\n        zero  => 0,\n        one   => 1,\n        two   => 2,\n        three\
    \ => 3,\n        four  => 4,\n        five  => 5,\n        six   => 6,\n     \
    \   seven => 7,\n        eight => 8,\n        nine  => 9,\n    );\n    my @sorted\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers\
    \ = (\n        zero  => 0,\n        one   => 1,\n        two   => 2,\n       \
    \ three => 3,\n        four  => 4,\n        five  => 5,\n        six   => 6,\n\
    \        seven => 7,\n        eight => 8,\n        nine  => 9,\n    );\n    my\
    \ @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join\
    \ ' ', @sorted;\n}", "my $input = shift;\n    my @numbers = split / /, $input;\n\
    \    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n \
    \   return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n    my @numbers\
    \ = split / /, $numbers;\n    my %numbers = (\n        zero  => 0,\n        one\
    \   => 1,\n        two   => 2,\n        three => 3,\n        four  => 4,\n   \
    \     five  => 5,\n        six   => 6,\n        seven => 7,\n        eight =>\
    \ 8,\n        nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my\
    \ @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my ($string) = @_;\n    my @numbers = split / /, $string;\n    my @sorted = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }", "my $input = shift;\n    my @numbers = split / /, $input;\n    my @sorted_numbers\
    \ = sort {$number_map{$a} <=> $number_map{$b}} @numbers;\n    return join ' ',\
    \ @sorted_numbers;\n}", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n\
    \    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n \
    \   return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n    my @numbers\
    \ = split / /, $numbers;\n    my %numbers = (\n        zero  => 0,\n        one\
    \   => 1,\n        two   => 2,\n        three => 3,\n        four  => 4,\n   \
    \     five  => 5,\n        six   => 6,\n        seven => 7,\n        eight =>\
    \ 8,\n        nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my ($str) = @_;\n    my @numbers\
    \ = split / /, $str;\n    my @sorted = sort { $numeral_to_number{$a} <=> $numeral_to_number{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $string = shift;\n    my\
    \ @numbers = split(/ /, $string);\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join(' ', @sorted_numbers);\n}",
  "my $string = shift;\n    my @numbers = split / /, $string;\n    my %numbers = (\n\
    \        'zero'  => 0,\n        'one'   => 1,\n        'two'   => 2,\n       \
    \ 'three' => 3,\n        'four'  => 4,\n        'five'  => 5,\n        'six' \
    \  => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'  => 9,\n\
    \    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n \
    \   return join ' ', @sorted;\n}", "my $numbers = shift;\n    my %numbers = (\n\
    \        'zero'  => 0,\n        'one'   => 1,\n        'two'   => 2,\n       \
    \ 'three' => 3,\n        'four'  => 4,\n        'five'  => 5,\n        'six' \
    \  => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'  => 9,\n\
    \    );\n    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers = sort\
    \ { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join(' ', @sorted_numbers);\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join '\
    \ ', @sorted_numbers;\n}", "my $numbers = shift;\n    my @numbers = split / /,\
    \ $numbers;\n    my %numbers = (\n        zero => 0,\n        one => 1,\n    \
    \    two => 2,\n        three => 3,\n        four => 4,\n        five => 5,\n\
    \        six => 6,\n        seven => 7,\n        eight => 8,\n        nine =>\
    \ 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n\
    \    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split\
    \ / /, $numbers;\n    my %numbers = (\n        zero  => 0,\n        one   => 1,\n\
    \        two   => 2,\n        three => 3,\n        four  => 4,\n        five \
    \ => 5,\n        six   => 6,\n        seven => 7,\n        eight => 8,\n     \
    \   nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my\
    \ @numbers = split / /, $numbers;\n    my %numbers = (\n        zero => 0,\n \
    \       one => 1,\n        two => 2,\n        three => 3,\n        four => 4,\n\
    \        five => 5,\n        six => 6,\n        seven => 7,\n        eight =>\
    \ 8,\n        nine => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join \" \", @sorted;\n}", "my $numbers = shift;\n  \
    \  my @numbers = split(/ /, $numbers);\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join(' ', @sorted_numbers);\n}",
  "my $numbers = shift;\n    my @numbers = split(/ /, $numbers);\n    my %numbers\
    \ = (\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n      \
    \  'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' =>\
    \ 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n   \
    \ );\n    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n\
    \    return join(' ', @sorted_numbers);\n}", "my $string = shift;\n    my @numbers\
    \ = split / /, $string;\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $string = shift;\n    my\
    \ @numbers = split / /, $string;\n    my @sorted = sort { $number_map{$a} <=>\
    \ $number_map{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $string\
    \ = shift;\n    my @numbers = split / /, $string;\n    my @sorted = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $string\
    \ = shift;\n    my @numbers = split(/ /, $string);\n    my @sorted_numbers = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join(\" \", @sorted_numbers);\n\
    }", "my $string = shift;\n    my @numbers = split / /, $string;\n    my @sorted\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }", "my $string = shift;\n    my @numbers = split(/ /, $string);\n    my @sorted_numbers\
    \ = sort {$number_map{$a} <=> $number_map{$b}} @numbers;\n    return join(' ',\
    \ @sorted_numbers);\n}", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n\
    \    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return\
    \ join ' ', @sorted;\n}", "my $string = shift;\n    my @numbers = split(/ /, $string);\n\
    \    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n \
    \   return join(' ', @sorted_numbers);\n}", "my $string = shift;\n    my @numbers\
    \ = split / /, $string;\n    my @sorted = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $string = shift;\n    my\
    \ @numbers = split / /, $string;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my $numbers = shift;\n    my @nums = split / /, $numbers;\n    my @sorted = sort\
    \ { $numbers{$a} <=> $numbers{$b} } @nums;\n    return join ' ', @sorted;\n}",
  "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $string = shift;\n    my @numbers = split / /, $string;\n    my @sorted\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }", "my $string = shift;\n    my @numbers = split / /, $string;\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join '\
    \ ', @sorted_numbers;\n}", "my $numbers = shift;\n    my @numbers = split / /,\
    \ $numbers;\n    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n\
    \    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers =\
    \ (\n        zero => 0,\n        one => 1,\n        two => 2,\n        three =>\
    \ 3,\n        four => 4,\n        five => 5,\n        six => 6,\n        seven\
    \ => 7,\n        eight => 8,\n        nine => 9,\n    );\n    my @sorted = sort\
    \ { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join \" \", @sorted;\n\
    }", "my $numbers = shift;\n    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers\
    \ = sort {$number_map{$a} <=> $number_map{$b}} @numbers;\n    return join(\" \"\
    , @sorted_numbers);\n}", "my $string = shift;\n    my @numbers = split(/ /, $string);\n\
    \    my @sorted = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n   \
    \ return join(' ', @sorted);\n}", "my $numbers = shift;\n    my @numbers = split(/\
    \ /, $numbers);\n    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join(' ', @sorted_numbers);\n}", "my $numbers = shift;\n\
    \    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $number_to_numeral{$a}\
    \ <=> $number_to_numeral{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers\
    \ = (\n        zero => 0,\n        one => 1,\n        two => 2,\n        three\
    \ => 3,\n        four => 4,\n        five => 5,\n        six => 6,\n        seven\
    \ => 7,\n        eight => 8,\n        nine => 9,\n    );\n    my @sorted = sort\
    \ { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers\
    \ = (\n        zero  => 0,\n        one   => 1,\n        two   => 2,\n       \
    \ three => 3,\n        four  => 4,\n        five  => 5,\n        six   => 6,\n\
    \        seven => 7,\n        eight => 8,\n        nine  => 9,\n    );\n    my\
    \ @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join\
    \ ' ', @sorted;\n}", "my $string = shift;\n    my @numbers = split / /, $string;\n\
    \    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n\
    \    return join \" \", @sorted_numbers;\n}", "my $string = shift;\n    my @numbers\
    \ = split / /, $string;\n    my @sorted = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join \" \", @sorted;\n}", "my $string = shift;\n   \
    \ my @numbers = split(/ /, $string);\n    my @sorted_numbers = sort {\n      \
    \  $number_map{$a} <=> $number_map{$b}\n    } @numbers;\n    return join(' ',\
    \ @sorted_numbers);\n}", "my $string = shift;\n    my @numbers = split / /, $string;\n\
    \    my %numbers = (\n        'zero' => 0,\n        'one' => 1,\n        'two'\
    \ => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n \
    \       'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'\
    \ => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n\
    \    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split(/\
    \ /, $numbers);\n    my %numbers = (\n        zero  => 0,\n        one   => 1,\n\
    \        two   => 2,\n        three => 3,\n        four  => 4,\n        five \
    \ => 5,\n        six   => 6,\n        seven => 7,\n        eight => 8,\n     \
    \   nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join(\" \", @sorted);\n}", "my $numbers = shift;\n \
    \   my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my ($str) = @_;\n    my @numbers = split / /, $str;\n    my @sorted_numbers = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort {$number_map{$a} <=> $number_map{$b}} @numbers;\n    return join ' ',\
    \ @sorted_numbers;\n}", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n\
    \    my @sorted_numbers = sort { $numbers_to_digits{$a} <=> $numbers_to_digits{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n\
    \    my @numbers = split / /, $numbers;\n    my @sorted = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $string\
    \ = shift;\n    my @numbers = split / /, $string;\n    my @sorted = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $string\
    \ = shift;\n    my @numbers = split / /, $string;\n    my @sorted = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers\
    \ = shift;\n    my %numbers = (\n        'zero' => 0,\n        'one' => 1,\n \
    \       'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five'\
    \ => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n \
    \       'nine' => 9,\n    );\n    my @numbers = split / /, $numbers;\n    my @sorted\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join '\
    \ ', @sorted_numbers;\n}", "my $numbers = shift;\n    my @numbers = split(/ /,\
    \ $numbers);\n    my %numbers = (\n        'zero' => 0,\n        'one' => 1,\n\
    \        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five'\
    \ => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n \
    \       'nine' => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join(' ', @sorted);\n}", "my $numbers = shift;\n   \
    \ my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my $numbers = shift;\n    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers\
    \ = sort {$number_map{$a} <=> $number_map{$b}} @numbers;\n    return join(' ',\
    \ @sorted_numbers);\n}", "my $string = shift;\n    my @numbers = split / /, $string;\n\
    \    my @sorted = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n   \
    \ return join ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split\
    \ / /, $numbers;\n    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n\
    \    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my $numbers = shift;\n    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers\
    \ = sort { $numbers_to_digits{$a} <=> $numbers_to_digits{$b} } @numbers;\n   \
    \ return join(' ', @sorted_numbers);\n}", "my $numbers = shift;\n    my @numbers\
    \ = split(/ /, $numbers);\n    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join(' ', @sorted_numbers);\n}", "my $numbers = shift;\n\
    \    my @numbers = split ' ', $numbers;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my ($str) = @_;\n    my @numbers = split / /, $str;\n    my @sorted = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers\
    \ = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers\
    \ = (\n        zero  => 0,\n        one   => 1,\n        two   => 2,\n       \
    \ three => 3,\n        four  => 4,\n        five  => 5,\n        six   => 6,\n\
    \        seven => 7,\n        eight => 8,\n        nine  => 9,\n    );\n    my\
    \ @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join\
    \ ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split(/ /, $numbers);\n\
    \    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n\
    \    return join(\" \", @sorted_numbers);\n}", "my $numbers = shift;\n    my @numbers\
    \ = split / /, $numbers;\n    my @sorted = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my\
    \ @numbers = split / /, $numbers;\n    my %numbers = (\n        zero  => 0,\n\
    \        one   => 1,\n        two   => 2,\n        three => 3,\n        four \
    \ => 4,\n        five  => 5,\n        six   => 6,\n        seven => 7,\n     \
    \   eight => 8,\n        nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers\
    \ = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers = (\n    \
    \    zero  => 0,\n        one   => 1,\n        two   => 2,\n        three => 3,\n\
    \        four  => 4,\n        five  => 5,\n        six   => 6,\n        seven\
    \ => 7,\n        eight => 8,\n        nine  => 9,\n    );\n    my @sorted = sort\
    \ { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }", "my $string = shift;\n    my @numbers = split(/ /, $string);\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join('\
    \ ', @sorted_numbers);\n}", "my $string = shift;\n    my @numbers = split(/ /,\
    \ $string);\n    my %numbers = (\n        'zero' => 0,\n        'one' => 1,\n\
    \        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five'\
    \ => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n \
    \       'nine' => 9,\n    );\n    my @sorted_numbers = sort { $numbers{$a} <=>\
    \ $numbers{$b} } @numbers;\n    my $sorted_string = join(' ', @sorted_numbers);\n\
    \    return $sorted_string;\n}", "my ($string) = @_;\n    my @numbers = split\
    \ / /, $string;\n    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my $str = shift;\n\
    \    my @numbers = split(/ /, $str);\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join(' ', @sorted_numbers);\n}",
  "my $input = shift;\n    my @numbers = split / /, $input;\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join '\
    \ ', @sorted_numbers;\n}", "my $string = shift;\n    my @numbers = split / /,\
    \ $string;\n    my @sorted = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n\
    \    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split\
    \ / /, $numbers;\n    my %numbers = (\n        'zero'  => 0,\n        'one'  \
    \ => 1,\n        'two'   => 2,\n        'three' => 3,\n        'four'  => 4,\n\
    \        'five'  => 5,\n        'six'   => 6,\n        'seven' => 7,\n       \
    \ 'eight' => 8,\n        'nine'  => 9,\n    );\n    my @sorted = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers\
    \ = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $numbers = shift;\n    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join(\"\
    \ \", @sorted_numbers);\n}", "my $numbers = shift;\n    my @numbers = split /\
    \ /, $numbers;\n    my %numbers = (\n        zero  => 0,\n        one   => 1,\n\
    \        two   => 2,\n        three => 3,\n        four  => 4,\n        five \
    \ => 5,\n        six   => 6,\n        seven => 7,\n        eight => 8,\n     \
    \   nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my\
    \ @numbers = split / /, $numbers;\n    my @sorted_numbers = sort {$number_map{$a}\
    \ <=> $number_map{$b}} @numbers;\n    return join ' ', @sorted_numbers;\n}", "my\
    \ $str = shift;\n    my @numbers = split / /, $str;\n    my @sorted = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers\
    \ = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }", "my $numbers = shift;\n    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join(\"\
    \ \", @sorted_numbers);\n}", "my $numbers = shift;\n    my @numbers = split /\
    \ /, $numbers;\n    my %numbers = (\n        'zero'  => 0,\n        'one'   =>\
    \ 1,\n        'two'   => 2,\n        'three' => 3,\n        'four'  => 4,\n  \
    \      'five'  => 5,\n        'six'   => 6,\n        'seven' => 7,\n        'eight'\
    \ => 8,\n        'nine'  => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=>\
    \ $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers =\
    \ shift;\n    my @numbers = split / /, $numbers;\n    my %numbers = (\n      \
    \  'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three' =>\
    \ 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n      \
    \  'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n    );\n    my\
    \ @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join\
    \ ' ', @sorted;\n}", "my $string = shift;\n    my @numbers = split(/ /, $string);\n\
    \    my %numbers = (\n        'zero' => 0,\n        'one' => 1,\n        'two'\
    \ => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n \
    \       'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'\
    \ => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n\
    \    return join(' ', @sorted);\n}", "my $string = shift;\n    my @numbers = split(/\
    \ /, $string);\n    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join(\" \", @sorted_numbers);\n}", "my $string = shift;\n\
    \    my @numbers = split / /, $string;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my $numbers = shift;\n    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join('\
    \ ', @sorted_numbers);\n}", "my ($string) = @_;\n    my @numbers = split / /,\
    \ $string;\n    my @sorted = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n\
    \    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my @numbers = split\
    \ / /, $numbers;\n    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my ($string) = @_;\n\
    \    my @numbers = split(/ /, $string);\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join(' ', @sorted_numbers);\n}",
  "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted =\
    \ sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join \" \"\
    , @sorted;\n}", "my $string = shift;\n    my @numbers = split(/ /, $string);\n\
    \    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n\
    \    return join(' ', @sorted_numbers);\n}", "my $numbers = shift;\n    my @numbers\
    \ = split / /, $numbers;\n    my %numbers = (\n        zero  => 0,\n        one\
    \   => 1,\n        two   => 2,\n        three => 3,\n        four  => 4,\n   \
    \     five  => 5,\n        six   => 6,\n        seven => 7,\n        eight =>\
    \ 8,\n        nine  => 9,\n    );\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my\
    \ @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my $string = shift;\n    my @numbers = split / /, $string;\n    my @sorted = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join(' ', @sorted);\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join '\
    \ ', @sorted_numbers;\n}", "my $string = shift;\n    my @numbers = split / /,\
    \ $string;\n    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n\
    \    return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n    my @numbers\
    \ = split / /, $numbers;\n    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n\
    \    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my\
    \ $string = shift;\n    my %numbers = (\n        'zero' => 0,\n        'one' =>\
    \ 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n     \
    \   'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight'\
    \ => 8,\n        'nine' => 9,\n    );\n    my @numbers = split / /, $string;\n\
    \    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n \
    \   return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n    my @numbers\
    \ = split(/ /, $numbers);\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join(' ', @sorted);\n}", "my $string = shift;\n    my\
    \ @numbers = split / /, $string;\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $string = shift;\n    my\
    \ @numbers = split / /, $string;\n    my @sorted = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted;\n}", "my $numbers = shift;\n    my\
    \ @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my $string = shift;\n    my @numbers = split(/ /, $string);\n    my @sorted = sort\
    \ { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join(' ', @sorted);\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort { $number_map{$a} <=> $number_map{$b} } @numbers;\n    return join '\
    \ ', @sorted_numbers;\n}", "my $input = shift;\n    my @numbers = split(/ /, $input);\n\
    \    my @sorted = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return\
    \ join(\" \", @sorted);\n}", "my $numbers = shift;\n    my @numbers = split /\
    \ /, $numbers;\n    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @sorted_numbers;\n}", "my $numbers = shift;\n\
    \    my @numbers = split / /, $numbers;\n    my @sorted_numbers = sort { $number_map{$a}\
    \ <=> $number_map{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n}",
  "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my %numbers =\
    \ (\n        zero  => 0,\n        one   => 1,\n        two   => 2,\n        three\
    \ => 3,\n        four  => 4,\n        five  => 5,\n        six   => 6,\n     \
    \   seven => 7,\n        eight => 8,\n        nine  => 9,\n    );\n    my @sorted\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }", "my $string = shift;\n    my @numbers = split(/ /, $string);\n    my @sorted\
    \ = sort {$numbers{$a} <=> $numbers{$b}} @numbers;\n    return join(' ', @sorted);\n\
    }", "my $numbers = shift;\n    my @numbers = split / /, $numbers;\n    my @sorted_numbers\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
