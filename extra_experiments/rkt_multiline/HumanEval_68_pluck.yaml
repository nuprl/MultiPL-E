name: HumanEval_68_pluck
language: rkt
prompt: "#lang racket\n\n#| \"Given a list representing a branch of a tree that has\
  \ non-negative integer nodes\nyour task is to pluck one of the nodes and return\
  \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\nThe plucked node should be returned in a list, [ smalest_value, its index\
  \ ],\nIf there are no even values or the given list is empty, return [].\nExample\
  \ 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest even\
  \ value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2 3))\n(list\
  \ 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  Example 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list 5 0 3 0 4\
  \ 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there are two zeros,\n\
  so we will choose the first zero, which has the smallest index.\nConstraints:\n\
  * 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
  \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
  \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n  \
  \  (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate\
  \ (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8))\
  \ (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
  \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let\
    \ ([min-even (first arr)])\n       (for/fold ([min-even-index 0]\n           \
    \       [min-even-index-found? #f])\n                 ([i (in-naturals)])\n  \
    \       (cond\n           [(and (even? (list-ref arr i))\n                 (<\
    \ min-even (list-ref arr i)))\n            (values (list-ref arr i) i)]\n    \
    \       [(and (even? (list-ref arr i))\n                 (= min-even (list-ref\
    \ arr i))\n                 (not min-even-index-found?))\n            (values\
    \ min-even i #t)]\n           [else (values min-even min-even-index min-even-index-found?)])))]\n\
    \    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n     \
    \ (let ([evens (filter even? arr)])\n        (if (empty? evens)\n            (list)\n\
    \            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index-of min-even arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            '()\n\
    \            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index arr min-even)))))))\n", "  (if (empty? arr)\n      (list)\n      (let*\
    \ ([evens (filter even? arr)]\n             [min-even (apply min evens)])\n  \
    \      (if (empty? evens)\n            (list)\n            (list min-even (index\
    \ arr min-even))))))\n", "  (let ([evens (filter even? arr)])\n    (if (empty?\
    \ evens)\n        '()\n        (let ([min-even (apply min evens)])\n         \
    \ (list min-even (index-of min-even arr))))))\n", "  (cond [(empty? arr) empty]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [(pluck (rest arr))]))\n", "  (cond\n    [(empty? arr)\
    \ (list)]\n    [(zero? (remainder (first arr) 2)) (list (first arr) 0)]\n    [(pluck\
    \ (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter\
    \ even? arr)])\n        (if (empty? evens)\n            '()\n            (let\
    \ ([min-even (apply min evens)])\n              (list min-even (index arr min-even)))))))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([res (pluck (rest arr))])\n                (if (empty? res)\
    \ '()\n                    (list (first res) (+ 1 (second res)))))]))\n", "  (cond\n\
    \    [(empty? arr) '()]\n    [(even? (first arr))\n     (let loop ([arr (rest\
    \ arr)] [min (first arr)] [idx 1])\n       (cond\n         [(empty? arr) (list\
    \ min idx)]\n         [(even? (first arr))\n          (if (< (first arr) min)\n\
    \              (loop (rest arr) (first arr) (+ idx 1))\n              (loop (rest\
    \ arr) min idx))]\n         [else (loop (rest arr) min (+ idx 1))]))]\n    [else\
    \ (pluck (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let* ([evens\
    \ (filter even? arr)]\n             [min-even (apply min evens)])\n        (if\
    \ (empty? evens)\n            '()\n            (list min-even (index arr min-even))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min (first\
    \ arr)])\n       (for/fold ([min-index 0] [min-value min]) ([i (in-naturals)])\n\
    \         (let ([val (list-ref arr i)])\n           (cond\n             [(even?\
    \ val)\n              (cond\n                [(< val min-value) (values val i)]\n\
    \                [(= val min-value) (values min-value min-index)]\n          \
    \      [else (values min-value min-index)])]\n             [else (values min-value\
    \ min-index)])))]\n     (pluck (rest arr)))]))\n", "  (if (empty? arr)\n     \
    \ (list)\n      (let* ([evens (filter even? arr)]\n             [min-even (apply\
    \ min evens)])\n        (if (empty? evens)\n            (list)\n            (list\
    \ min-even (index-of min-even arr))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(even? (first arr))\n     (let ([min-index (first (min-indexes (first arr)\
    \ arr))])\n       (list (first arr) min-index))]\n    [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) '()]\n  \
    \  [(even? (car arr)) (list (car arr) 0)]\n    [else (pluck (cdr arr))]))\n",
  "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n      \
    \       [min-even (min evens)])\n        (if (empty? evens)\n            '()\n\
    \            (list min-even (index arr min-even))))))\n", "  (cond [(empty? arr)\
    \ empty]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [(pluck (rest arr))]))\n", "  (let loop ((arr arr)\
    \ (min-even 0) (min-even-index 0) (index 0))\n    (cond\n      [(empty? arr) (list\
    \ min-even min-even-index)]\n      [(and (even? (first arr)) (or (zero? min-even)\
    \ (< (first arr) min-even)))\n       (loop (rest arr) (first arr) index (+ index\
    \ 1))]\n      [else (loop (rest arr) min-even min-even-index (+ index 1))])))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n      \
    \       [min-even (apply min evens)])\n        (if (empty? evens)\n          \
    \  '()\n            (list min-even (index-of min-even arr))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            '()\n            (let ([min-even (apply min evens)])\n \
    \             (list min-even (index arr min-even)))))))\n", "  (if (empty? arr)\n\
    \      (list)\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            (list)\n            (let ([min-even (apply min evens)])\n       \
    \       (let ([index (index-of min-even arr)])\n                (list min-even\
    \ index)))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [(pluck (rest arr))]))\n", "  (let ([evens (filter\
    \ even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even (apply\
    \ min evens)])\n          (list min-even (index-of min-even arr))))))\n", "  (if\
    \ (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index min-even arr)))))))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [(pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even?\
    \ (first arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [(pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n   \
    \ [(even? (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n", " \
    \ (let loop ((arr arr) (min-even 0) (min-even-index 0) (index 0))\n    (cond\n\
    \      [(empty? arr) (if (zero? min-even) (list) (list min-even min-even-index))]\n\
    \      [(zero? (modulo (first arr) 2))\n       (let ((min-even (if (zero? min-even)\
    \ (first arr) (min min-even (first arr)))))\n         (loop (rest arr) min-even\
    \ index (+ index 1)))]\n      [else (loop (rest arr) min-even min-even-index (+\
    \ index 1))])))\n", "  (if (empty? arr)\n      '()\n      (let* ([evens (filter\
    \ even? arr)]\n             [min-even (apply min evens)])\n        (if (empty?\
    \ evens)\n            '()\n            (list min-even (index-of min-even arr))))))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n", " \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index arr\
    \ min-even))))))\n", "  (cond [(empty? arr) empty]\n        [(even? (first arr))\
    \ (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n", "  (let ([evens\
    \ (filter even? arr)])\n    (if (empty? evens)\n        (list)\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min-index\
    \ 0]\n           [min-value (first arr)])\n       (for ([i (in-range (length arr))])\n\
    \         (when (and (even? (list-ref arr i))\n                    (< (list-ref\
    \ arr i) min-value))\n           (set! min-index i)\n           (set! min-value\
    \ (list-ref arr i))))\n       (list min-value min-index))]\n    [else (pluck (rest\
    \ arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list\
    \ (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(even? (first arr)) (cons (first arr) (cons 1 empty))]\n \
    \   [else (pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n   \
    \ (if (empty? evens)\n        (list)\n        (let ([min-even (apply min evens)])\n\
    \          (list min-even (index arr min-even))))))\n", "  (cond [(empty? arr)\
    \ empty]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n\
    \     (let ([min (first arr)])\n       (for/fold ([min-index 0] [min-value min])\
    \ ([i (in-list (rest arr))])\n         (cond\n           [(even? i)\n        \
    \    (if (< i min-value)\n                (values i i)\n                (values\
    \ min-value min-index))]\n           [else (values min-value min-index)])))]\n\
    \    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n     \
    \ (let ([evens (filter even? arr)])\n        (if (empty? evens)\n            (list)\n\
    \            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index arr min-even)))))))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (let ([result (pluck (rest\
    \ arr))])\n                (if (empty? result)\n                    '()\n    \
    \                (list (first result) (+ 1 (second result)))))]))\n", "  (if (empty?\
    \ arr)\n      (list)\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            (list)\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index arr min-even)))))))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n\
    \     (let ([min-even (first arr)])\n       (for/fold ([min-even-index 0]\n  \
    \                [min-even-index-found #f])\n                 ([i (in-naturals)])\n\
    \                 (cond\n                   [(even? (list-ref arr i))\n      \
    \              (cond\n                      [(not min-even-index-found)\n    \
    \                   (values (list min-even i)\n                              \
    \ #t)]\n                      [(< min-even (list-ref arr i))\n               \
    \        (values (list min-even min-even-index)\n                            \
    \   #t)]\n                      [else\n                       (values (list (list-ref\
    \ arr i) i)\n                               #t)])]\n                   [else\n\
    \                    (values (list min-even min-even-index)\n                \
    \            min-even-index-found)])))\n     (pluck (rest arr))]\n    [else\n\
    \     (pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n    (if\
    \ (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n \
    \         (list min-even (index-of min-even arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (cond\n    [(empty? arr)\
    \ '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [(pluck (rest arr))]))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n       \
    \     '()\n            (let ([min-even (apply min evens)])\n              (let\
    \ ([indices (for/list ([(i e) (in-indexed arr)])\n                           \
    \    (if (= e min-even)\n                                   i))])\n          \
    \      (list min-even (apply min indices))))))))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [(pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n    (if\
    \ (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n \
    \         (list min-even (index-of min-even arr))))))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(empty? (filter even? arr)) '()]\n    [else (list (apply min\
    \ (filter even? arr)) (index-of (apply min (filter even? arr)) arr))]))\n", " \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n", " \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [(pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n   \
    \ [(even? (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([smallest (apply min\
    \ evens)])\n              (list smallest (index arr smallest)))))))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (empty? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            '()\n            (let ([min-even (apply min evens)])\n \
    \             (let ([min-even-index (find-index (lambda (x) (= x min-even)) arr)])\n\
    \                (list min-even min-even-index)))))))\n", "  (cond [(empty? arr)\
    \ '()]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck\
    \ (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let* ([evens (filter\
    \ even? arr)]\n             [min-even (apply min evens)])\n        (if (empty?\
    \ evens)\n            (list)\n            (list min-even (index-of min-even arr))))))\n",
  "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]\n                  [min-even-value\
    \ min-even])\n         ([i (in-naturals)])\n         (cond\n           [(even?\
    \ (list-ref arr i))\n            (cond\n              [(< (list-ref arr i) min-even-value)\n\
    \               (values (list-ref arr i) i)]\n              [else\n          \
    \     (values min-even-value min-even-index)])]\n           [else\n          \
    \  (values min-even-value min-even-index)])))]\n    [else\n     (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (let ((evens (filter even? arr)))\n    (if (empty? evens)\n        '()\n    \
    \    (let ((smallest (apply min evens)))\n          (list smallest (index arr\
    \ smallest))))))\n", "  (let ((evens (filter even? arr)))\n    (if (empty? evens)\n\
    \        '()\n        (let ((min-even (apply min evens)))\n          (list min-even\
    \ (index min-even arr))))))\n", "  (cond [(empty? arr) empty]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (let ([index (index-of min-even arr)])\n       \
    \         (list min-even index)))))))\n", "  (let ([evens (filter even? arr)])\n\
    \    (if (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n\
    \          (list min-even (index arr min-even))))))\n", "  (if (empty? arr)\n\
    \      (list)\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            (list)\n            (let ([min-even (apply min evens)])\n       \
    \       (list min-even (index arr min-even)))))))\n", "  (let ([evens (filter\
    \ even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even (apply\
    \ min evens)])\n          (list min-even (index-of min-even arr))))))\n", "  (if\
    \ (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n", " \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [(pluck (rest arr)) (list (first (pluck (rest arr))) (+ 1 (second (pluck\
    \ (rest arr)))))]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n \
    \     (list)\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            (list)\n            (let ([min-even (apply min evens)])\n       \
    \       (list min-even (index-of min-even arr)))))))\n", "  (let loop ((arr arr)\
    \ (min-even -1) (min-even-index -1))\n    (cond\n      [(empty? arr) (list min-even\
    \ min-even-index)]\n      [(and (even? (first arr)) (< (first arr) min-even))\n\
    \       (loop (rest arr) (first arr) (add1 (length arr)))]\n      [else (loop\
    \ (rest arr) min-even min-even-index)])))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ((evens (filter even? arr)))\n        (if (empty? evens)\n       \
    \     '()\n            (let ((min-even (apply min evens)))\n              (list\
    \ min-even (index arr min-even)))))))\n", "  (if (empty? arr)\n      '()\n   \
    \   (let ([evens (filter even? arr)])\n        (if (empty? evens)\n          \
    \  '()\n            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index-of min-even arr)))))))\n", "  (cond\n    [(empty? arr) '()]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (let\
    \ ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n        (let\
    \ ([min-even (apply min evens)])\n          (list min-even (index-of min-even\
    \ arr))))))\n", "  (if (empty? arr)\n      (list)\n      (let ([evens (filter\
    \ even? arr)])\n        (if (empty? evens)\n            (list)\n            (let\
    \ ([smallest (min evens)])\n              (list smallest (index arr smallest)))))))\n",
  "  (let* ([evens (filter even? arr)]\n         [smallest (apply min evens)])\n \
    \   (if (empty? evens)\n        '()\n        (list smallest (index arr smallest)))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index arr min-even)))))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr))\n     (let* ([evens (filter\
    \ even? arr)]\n            [min-even (apply min evens)]\n            [min-even-index\
    \ (index-of min-even arr)])\n       (list min-even min-even-index))]\n    [else\
    \ (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let* ([evens\
    \ (filter even? arr)]\n             [min-even (apply min evens)])\n        (list\
    \ min-even (index arr min-even)))))\n", "  (let loop ([arr arr] [min-even -1]\
    \ [min-even-index -1])\n    (cond [(empty? arr) (list min-even min-even-index)]\n\
    \          [(and (even? (first arr)) (< (first arr) min-even))\n           (loop\
    \ (rest arr) (first arr) (add1 (length arr)))\n           ]\n          [else (loop\
    \ (rest arr) min-even min-even-index)])))\n", "  (let* ([evens (filter even? arr)]\n\
    \         [min-even (apply min evens)])\n    (if (empty? evens)\n        '()\n\
    \        (list min-even (index arr min-even)))))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest arr))]))\n",
  "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n   \
    \          [min-even (apply min evens)])\n        (if (empty? evens)\n       \
    \     (list)\n            (list min-even (index-of min-even arr))))))\n", "  (let\
    \ ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n     \
    \   (let ([min-even (apply min evens)])\n          (list min-even (index-of min-even\
    \ arr))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [(pluck (rest arr))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (define (is-even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (pluck-helper arr min-index min-value)\n    (cond [(empty?\
    \ arr) (list min-value min-index)]\n          [(is-even? (first arr))\n      \
    \     (if (< (first arr) min-value)\n               (pluck-helper (rest arr) 0\
    \ (first arr))\n               (pluck-helper (rest arr) (+ 1 min-index) min-value))]\n\
    \          [else (pluck-helper (rest arr) (+ 1 min-index) min-value)]))\n  (pluck-helper\
    \ arr 10000 0))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr))\
    \ (pluck-even arr (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if\
    \ (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n      \
    \       [min-even (apply min evens)])\n        (if (empty? evens)\n          \
    \  (list)\n            (list min-even (index arr min-even))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let* ([evens (filter even? arr)]\n             [min-even\
    \ (apply min evens)])\n        (if (empty? evens)\n            '()\n         \
    \   (list min-even (index-of min-even arr))))))\n", "  (if (empty? arr)\n    \
    \  (list)\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            (list)\n            (let ([smallest (apply min evens)])\n       \
    \       (list smallest (index arr smallest)))))))\n", "  (let ([min-even (apply\
    \ min (filter even? arr))])\n    (if (null? min-even)\n        (list)\n      \
    \  (list min-even (index arr min-even)))))\n", "  (cond [(empty? arr) empty]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list\
    \ (first arr) 0)]\n        [else (list (first arr) 1)]))\n", "  (if (empty? arr)\n\
    \      (list)\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            (list)\n            (let ([min-even (apply min evens)])\n       \
    \       (list min-even (index arr min-even)))))))\n", "  (if (empty? arr)\n  \
    \    '()\n      (let* ([evens (filter even? arr)]\n             [min-even (apply\
    \ min evens)])\n        (if (empty? evens)\n            '()\n            (list\
    \ min-even (index-of min-even arr))))))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest arr)) (list\
    \ (first (pluck (rest arr))) (+ 1 (second (pluck (rest arr)))))]\n    [else (pluck\
    \ (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter\
    \ even? arr)])\n        (if (empty? evens)\n            '()\n            (let\
    \ ([min-even (apply min evens)])\n              (list min-even (index-of min-even\
    \ arr)))))))\n", "  (if (empty? arr)\n      (list)\n      (let ([evens (filter\
    \ even? arr)])\n        (if (empty? evens)\n            (list)\n            (let\
    \ ([smallest (apply min evens)])\n              (list smallest (index arr smallest)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n", " \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min (first\
    \ arr)])\n       (for/fold ([min-index 0] [min-value min]) ([(i v) (in-indexed\
    \ arr)])\n         (cond\n           [(even? v)\n            (cond\n         \
    \     [(< v min-value) (values v i)]\n              [(= v min-value) (values min-value\
    \ (min i min-index))])]\n           [else (values min-value min-index)])))]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even?\
    \ (first arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n    \
    \    (let ([min-even (apply min evens)])\n          (let ([min-even-index (index-of\
    \ min-even arr)])\n            (list min-even min-even-index))))))\n", "  (if\
    \ (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [(pluck (rest arr))]))\n", "  (if (null? arr)\n      '()\n      (let*\
    \ ([evens (filter even? arr)]\n             [min-even (apply min evens)])\n  \
    \      (if (null? evens)\n            '()\n            (list min-even (index arr\
    \ min-even))))))\n", "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n\
    \        '()\n        (let ([min-even (apply min evens)])\n          (list min-even\
    \ (index-of min-even arr))))))\n", "  (let ([evens (filter even? arr)])\n    (if\
    \ (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n \
    \         (list min-even (index-of min-even arr))))))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(empty? (filter even? arr)) '()]\n    [else (list (apply min\
    \ (filter even? arr)) (index-of (apply min (filter even? arr)) arr))]))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [(pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n   \
    \ [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest arr))]))\n", " \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first\
    \ arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n  \
    \  [(pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even? (first\
    \ arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr))\n     (let* ([evens (filter\
    \ even? arr)]\n            [min-even (apply min evens)]\n            [min-even-index\
    \ (index-of min-even arr)])\n       (list min-even min-even-index))]\n    [else\
    \ (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [(pluck (rest arr))]))\n", "  (if (empty? arr)\n\
    \      (list)\n      (let* ([evens (filter even? arr)]\n             [min-even\
    \ (apply min evens)])\n        (list min-even (index arr min-even)))))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [(pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n   \
    \ [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest arr))]))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index arr min-even)))))))\n", "  (if\
    \ (null? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (null? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (cond\n   \
    \ [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else\
    \ (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let ([evens\
    \ (filter even? arr)])\n        (if (empty? evens)\n            (list)\n     \
    \       (let ([min-even (apply min evens)])\n              (list min-even (index\
    \ arr min-even)))))))\n", "  (if (empty? arr)\n      (list)\n      (let ([evens\
    \ (filter even? arr)])\n        (if (empty? evens)\n            (list)\n     \
    \       (let ([min-even (apply min evens)])\n              (list min-even (index-of\
    \ min-even arr)))))))\n", "  (let ([evens (filter even? arr)])\n    (if (empty?\
    \ evens)\n        '()\n        (let ([min-even (apply min evens)])\n         \
    \ (let ([min-even-index (find-index (lambda (x) (= x min-even)) arr)])\n     \
    \       (list min-even min-even-index))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let* ([evens (filter even? arr)]\n             [min-even (apply min evens)])\n\
    \        (if (empty? evens)\n            '()\n            (list min-even (index\
    \ arr min-even))))))\n", "  (if (empty? arr)\n      empty\n      (let* ([evens\
    \ (filter even? arr)]\n             [min-even (apply min evens)])\n        (if\
    \ (empty? evens)\n            empty\n            (list min-even (index-of min-even\
    \ arr))))))\n", "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n\
    \        '()\n        (let ([min-even (apply min evens)])\n          (let ([min-even-index\
    \ (index-of min-even arr)])\n            (list min-even min-even-index))))))\n",
  "  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n   \
    \          [min-even (apply min evens)])\n        (if (empty? evens)\n       \
    \     (list)\n            (list min-even (index arr min-even))))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n  \
    \  [(pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let ([evens\
    \ (filter even? arr)])\n        (if (empty? evens)\n            (list)\n     \
    \       (let ([min-even (apply min evens)])\n              (let ([min-even-index\
    \ (index-of min-even arr)])\n                (list min-even min-even-index)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n      \
    \       [min-even (apply min evens)])\n        (if (empty? evens)\n          \
    \  '()\n            (list min-even (index arr min-even))))))\n", "  (cond\n  \
    \  [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n    [(pluck\
    \ (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n\
    \        '()\n        (let ([min-even (apply min evens)])\n          (let ([min-even-index\
    \ (find-index (lambda (x) (= x min-even)) arr)])\n            (list min-even min-even-index))))))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n", " \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min (apply min evens)])\n          (list min (index min arr))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(empty? (filter even? arr)) empty]\n  \
    \  [else (list (apply min (filter even? arr)) (index (apply min (filter even?\
    \ arr)) arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n\
    \     (let ([min-even (first arr)])\n       (for/fold ([min-even-index 0]\n  \
    \                [min-even-index-found? #f])\n                 ([i (in-naturals)]\n\
    \                  [x (in-list arr)])\n         (cond\n           [(even? x)\n\
    \            (cond\n              [(< x min-even)\n               (values x 0\
    \ #t)]\n              [(= x min-even)\n               (cond\n                \
    \ [min-even-index-found?\n                  (values min-even min-even-index min-even-index-found?)]\n\
    \                 [else\n                  (values min-even i #t)])]\n       \
    \       [else\n               (values min-even min-even-index min-even-index-found?)])]\n\
    \           [else\n            (values min-even min-even-index min-even-index-found?)])))]\n\
    \    [else\n     (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n\
    \      (let* ([evens (filter even? arr)]\n             [min (apply min evens)])\n\
    \        (list min (index-of min arr)))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n       \
    \     '()\n            (let ([min-even (apply min evens)])\n              (list\
    \ min-even (index arr min-even)))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let*\
    \ ([evens (filter even? arr)]\n             [smallest-even (apply min evens)])\n\
    \        (if (empty? evens)\n            '()\n            (list smallest-even\
    \ (index arr smallest-even))))))\n", "  (let ([evens (filter even? arr)])\n  \
    \  (if (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n\
    \          (list min-even (index arr min-even))))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest\
    \ arr))]))\n", "  (let ([arr (filter even? arr)])\n    (if (empty? arr)\n    \
    \    '()\n        (let ([min (apply min arr)])\n          (list min (index min\
    \ arr))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(and (even? (first arr))\
    \ (empty? (rest arr))) (list (first arr) 0)]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n\
    \      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n       \
    \     (list)\n            (let ([min-even (apply min evens)])\n              (list\
    \ min-even (index arr min-even)))))))\n", "  (if (empty? arr)\n      '()\n   \
    \   (let ([evens (filter even? arr)])\n        (if (empty? evens)\n          \
    \  '()\n            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index min-even arr)))))))\n", "  (define (pluck-helper arr smallest-index smallest-value)\n\
    \    (cond [(empty? arr) (list smallest-value smallest-index)]\n          [(and\
    \ (even? (first arr))\n                (or (zero? smallest-value)\n          \
    \          (< (first arr) smallest-value)))\n           (pluck-helper (rest arr)\
    \ 0 (first arr))]\n          [else (pluck-helper (rest arr) (+ 1 smallest-index)\
    \ smallest-value)]))\n  (pluck-helper arr 0 0))\n", "  (cond\n    [(empty? arr)\
    \ (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest arr))\
    \ (list (first (pluck (rest arr))) (+ 1 (second (pluck (rest arr)))))]\n    [else\
    \ (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [(pluck (rest arr))]))\n", "  (if (empty? arr)\n\
    \      (list)\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            (list)\n            (let ([min-even (apply min evens)])\n       \
    \       (list min-even (index arr min-even)))))))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(even? (first arr))\n     (let ([min-even (first arr)])\n     \
    \  (for/fold ([min-even-index 0]\n                  [min-even-value min-even])\n\
    \         ([i (in-list (rest arr))])\n         (cond\n           [(even? i)\n\
    \            (cond\n              [(< i min-even-value)\n               (values\
    \ i 0)]\n              [(= i min-even-value)\n               (values min-even-value\
    \ (add1 min-even-index))])]\n           [else (values min-even-value (add1 min-even-index))])))]\n\
    \    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            '()\n\
    \            (let ([min (apply min evens)])\n              (list min (index min\
    \ arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter even?\
    \ arr)])\n        (if (empty? evens)\n            '()\n            (let ([min-even\
    \ (apply min evens)])\n              (list min-even (index min-even arr)))))))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [(pluck (rest arr)) (list (first (pluck (rest arr))) (+ 1 (second (pluck\
    \ (rest arr)))))]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n \
    \     '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([smallest (apply min evens)])\n          \
    \    (list smallest (index arr smallest)))))))\n", "  (let ([evens (filter even?\
    \ arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even (apply\
    \ min evens)])\n          (let ([min-even-index (find min-even arr)])\n      \
    \      (list min-even min-even-index))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n       \
    \     '()\n            (let ([min (apply min evens)])\n              (list min\
    \ (index min arr)))))))\n", "  (cond [(empty? arr) empty]\n        [(even? (first\
    \ arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (let\
    \ ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n        (let\
    \ ([min-even (apply min evens)])\n          (list min-even (index min-even arr))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [(pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n    (if\
    \ (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n \
    \         (list min-even (index-of min-even arr))))))\n", "  (let ([evens (filter\
    \ even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min (apply\
    \ min evens)])\n          (list min (index arr min))))))\n", "  (define (helper\
    \ arr min-index min-value)\n    (cond\n      [(empty? arr) (list min-value min-index)]\n\
    \      [(and (even? (first arr)) (<= (first arr) min-value))\n       (helper (rest\
    \ arr) 0 (first arr))]\n      [(and (even? (first arr)) (> (first arr) min-value))\n\
    \       (helper (rest arr) (+ 1 min-index) min-value)]\n      [else (helper (rest\
    \ arr) (+ 1 min-index) min-value)]))\n  (helper arr 0 10000))\n", "  (cond [(empty?\
    \ arr) '()]\n        [(even? (first arr)) (list (first arr) 1)]\n        [else\
    \ (list (first arr) 0)]))\n", "  (if (empty? arr)\n      '()\n      (let* ([evens\
    \ (filter even? arr)]\n             [min-even (apply min evens)])\n        (if\
    \ (empty? evens)\n            '()\n            (list min-even (index arr min-even))))))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (car arr)) (list (car arr) 0)]\n \
    \   [else (pluck (cdr arr))]))\n", "  (let ([evens (filter even? arr)])\n    (if\
    \ (empty? evens)\n        '()\n        (list (apply min evens)\n             \
    \ (apply min (map (\u03BB (x) (index arr x)) evens))))))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (let ([r\
    \ (pluck (rest arr))])\n            (if (empty? r)\n                (list (first\
    \ arr) 0)\n                (list (first r) (+ 1 (second r)))))]))\n", "  (if (empty?\
    \ arr)\n      (list)\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            (list)\n            (let ([smallest (apply min evens)])\n\
    \              (list smallest (index arr smallest)))))))\n", "  (if (empty? arr)\n\
    \      (list)\n      (let* ([evens (filter even? arr)]\n             [min-even\
    \ (apply min evens)])\n        (if (empty? evens)\n            (list)\n      \
    \      (list min-even (index arr min-even))))))\n", "  (cond [(empty? arr) (list)]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let* ([evens (filter\
    \ even? arr)]\n             [min-even (apply min evens)])\n        (if (empty?\
    \ evens)\n            (list)\n            (list min-even (index-of min-even arr))))))\n",
  "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n      \
    \       [min-even (apply min evens)])\n        (if (empty? evens)\n          \
    \  '()\n            (list min-even (index arr min-even))))))\n", "  (cond [(empty?\
    \ arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let ([evens\
    \ (filter even? arr)])\n        (if (empty? evens)\n            (list)\n     \
    \       (let ([min-even (apply min evens)])\n              (list min-even (index\
    \ min-even arr)))))))\n", "  (if (empty? arr)\n      (list)\n      (let ([evens\
    \ (filter even? arr)])\n        (if (empty? evens)\n            (list)\n     \
    \       (let ([min-even (apply min evens)])\n              (list min-even (index-of\
    \ min-even arr)))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first\
    \ arr))\n     (let ([min-even (first arr)])\n       (for/fold ([min-even-index\
    \ 0]\n                  [min-even-value min-even])\n         ([i (in-list (rest\
    \ arr))])\n         (cond\n           [(even? i)\n            (cond\n        \
    \      [(< i min-even-value)\n               (values i (add1 min-even-index))]\n\
    \              [else\n               (values min-even-value (add1 min-even-index))])]\n\
    \           [else\n            (values min-even-value (add1 min-even-index))])))]\n\
    \    [else\n     (pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n\
    \    (if (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n\
    \          (list min-even (index arr min-even))))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n    [(pluck (rest\
    \ arr))]))\n", "  (if (null? arr)\n      '()\n      (let ([evens (filter even?\
    \ arr)])\n        (if (null? evens)\n            '()\n            (let ([min-even\
    \ (apply min evens)])\n              (list min-even (index min-even arr)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
