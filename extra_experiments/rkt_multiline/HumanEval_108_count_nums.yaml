name: HumanEval_108_count_nums
language: rkt
prompt: "#lang racket\n\n#| Write a function count_nums which takes a list of integers\
  \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
  \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
  \ digits -1, 2, and 3.\n>>> (count_nums (list ))\n0\n>>> (count_nums (list -1 11\
  \ -11))\n1\n>>> (count_nums (list 1 1 2))\n3|#\n(define (count_nums arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1\
  \ -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
  \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
  \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
  \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
  \ 1)) 1)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits (first arr)) 0)\
    \ (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n", " \
    \ (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr\
    \ arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond [(empty? arr) 0]\n        [else (if (sum_digits (first arr))\n        \
    \         (+ 1 (count_nums (rest arr)))\n                 (count_nums (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else\
    \ (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (length (filter (lambda (x)\n                    (if (negative?\
    \ x)\n                        (if (zero? (modulo x 10))\n                    \
    \        #f\n                            #t)\n                        (if (zero?\
    \ (modulo x 10))\n                            #f\n                           \
    \ #t)))\n                  arr)))\n", "  (cond\n    [(empty? arr) 0]\n    [(>\
    \ (sum-of-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (sum-digits\
    \ (- n)))]\n      [(< n 10) n]\n      [else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (define (count-nums-helper arr)\n    (cond\n      [(empty? arr)\
    \ 0]\n      [(> (sum-digits (first arr)) 0) (+ 1 (count-nums-helper (rest arr)))]\n\
    \      [else (count-nums-helper (rest arr))]))\n  (count-nums-helper arr))\n",
  "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [(negative? n)\
    \ (+ (modulo n 10) (sum-digits (quotient n 10)))]\n      [else (+ (modulo n 10)\
    \ (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr acc)\n  \
    \  (cond\n      [(empty? arr) acc]\n      [(> (sum-digits (first arr)) 0) (count-nums-helper\
    \ (rest arr) (+ acc 1))]\n      [else (count-nums-helper (rest arr) acc)]))\n\
    \  (count-nums-helper arr 0))\n", "  (cond [(empty? arr) 0]\n        [else (+\
    \ (if (> (sum-digits (first arr)) 0) 1 0)\n                 (count_nums (rest\
    \ arr)))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits\
    \ (first arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (define\
    \ (sum-digits n)\n    (cond\n      [(< n 0) (- n)]\n      [(= n 0) 0]\n      [else\
    \ (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper\
    \ arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(> (sum-digits (first\
    \ arr)) 0) (count-nums-helper (rest arr) (+ sum 1))]\n      [else (count-nums-helper\
    \ (rest arr) sum)]))\n  (count-nums-helper arr 0))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1 0)\n             \
    \    (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (abs\
    \ (car arr)) 9) (count_nums (cdr arr))]\n    [else (+ 1 (count_nums (cdr arr)))]))\n",
  "  (cond\n    [(null? arr) 0]\n    [(> (sum-digits (car arr)) 0) (+ 1 (count_nums\
    \ (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n", "  (define (sum-digits\
    \ n)\n    (if (zero? n)\n        0\n        (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))))\n  (define (sum-signed-digits n)\n    (if (zero? n)\n        0\n \
    \       (+ (abs (modulo n 10)) (sum-signed-digits (quotient n 10)))))\n  (define\
    \ (count-nums-helper arr count)\n    (if (null? arr)\n        count\n        (if\
    \ (> (sum-signed-digits (car arr)) 0)\n            (count-nums-helper (cdr arr)\
    \ (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1 0)\n             \
    \    (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits (first arr))\
    \ 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr) 0]\n        [else\
    \ (+ (if (> (sum-digits (first arr)) 0) 1 0)\n                 (count_nums (rest\
    \ arr)))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits\
    \ (first arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (define (sum-digits\
    \ n)\n    (cond\n      [(< n 0) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n\
    \      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum-digits (first arr)) 0) (count-nums-helper (rest arr) (+ count\
    \ 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1\
    \ 0)\n                 (count_nums (rest arr)))]))\n", "  (define (sum-digits\
    \ n)\n    (cond [(= n 0) 0]\n          [else (+ (abs (remainder n 10))\n     \
    \              (sum-digits (quotient n 10)))]))\n  (define (count-nums-iter arr\
    \ count)\n    (cond [(empty? arr) count]\n          [(> (sum-digits (first arr))\
    \ 0)\n           (count-nums-iter (rest arr) (+ count 1))]\n          [else (count-nums-iter\
    \ (rest arr) count)]))\n  (count-nums-iter arr 0))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (define (count_nums_helper arr acc)\n\
    \    (cond [(empty? arr) acc]\n          [(> (sum_digits (first arr)) 0) (count_nums_helper\
    \ (rest arr) (+ acc 1))]\n          [else (count_nums_helper (rest arr) acc)]))\n\
    \  (count_nums_helper arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1 0)\n             \
    \    (count_nums (rest arr)))]))\n", "  (cond [(empty? arr) 0]\n        [else\
    \ (+ (if (positive? (sum-digits (first arr))) 1 0)\n                 (count_nums\
    \ (rest arr)))]))\n", "  (if (null? arr)\n      0\n      (if (positive? (sum-digits\
    \ (car arr)))\n          (+ 1 (count_nums (cdr arr)))\n          (count_nums (cdr\
    \ arr)))))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (if (> (sum-digits (first arr)) 0)\n                  (+ 1\
    \ (count_nums (rest arr)))\n                  (count_nums (rest arr)))]))\n",
  "  (cond [(empty? arr) 0]\n        [else (+ (if (positive? (sum_digits (first arr)))\
    \ 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (abs (car arr)) 9) (count_nums (cdr arr))]\n    [else (+ 1\
    \ (count_nums (cdr arr)))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if\
    \ (> (sum-digits (first arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n",
  "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1\
    \ 0)\n                 (count_nums (rest arr)))]))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1 0)\n             \
    \    (count_nums (rest arr)))]))\n", "  (cond [(empty? arr) 0]\n        [else\
    \ (if (> (sum-digits (first arr)) 0)\n                  (+ 1 (count_nums (rest\
    \ arr)))\n                  (count_nums (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n      [(null?\
    \ arr) count]\n      [(> (sum-digits (car arr)) 0) (count-nums-helper (cdr arr)\
    \ (+ count 1))]\n      [else (count-nums-helper (cdr arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (cond\n    [(empty? arr) 0]\n    [(>\
    \ (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1 0)\n             \
    \    (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits\
    \ (first arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (define\
    \ (sum-digits n)\n    (cond\n      [(< n 0) (+ n (sum-digits (- n)))]\n      [(=\
    \ n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define\
    \ (count-nums-helper arr acc)\n    (cond\n      [(null? arr) acc]\n      [(> (sum-digits\
    \ (car arr)) 0) (count-nums-helper (cdr arr) (+ acc 1))]\n      [else (count-nums-helper\
    \ (cdr arr) acc)]))\n  (count-nums-helper arr 0))\n", "  (cond\n    [(empty? arr)\
    \ 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n   \
    \ [else (count_nums (rest arr))]))\n", "  (define (sum-digits n)\n    (cond\n\
    \      [(< n 0) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n      [(= n 0)\
    \ 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define\
    \ (count-nums-helper arr count)\n    (cond\n      [(null? arr) count]\n      [(>\
    \ (sum-digits (car arr)) 0) (count-nums-helper (cdr arr) (+ count 1))]\n     \
    \ [else (count-nums-helper (cdr arr) count)]))\n  (count-nums-helper arr 0))\n",
  "  (cond [(empty? arr) 0]\n        [else (+ (count_nums (rest arr))\n          \
    \       (if (> (sum-digits (first arr)) 0) 1 0))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (abs (car arr)) 0) (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums\
    \ (cdr arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1\
    \ 0)\n                 (count_nums (rest arr)))]))\n", "  (if (null? arr)\n  \
    \    0\n      (if (sum-digits (car arr))\n          (+ 1 (count_nums (cdr arr)))\n\
    \          (count_nums (cdr arr)))))\n", "  (cond [(empty? arr) 0]\n        [else\
    \ (if (> (sum-digits (first arr)) 0)\n                 (+ 1 (count_nums (rest\
    \ arr)))\n                 (count_nums (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr) 0]\n        [else\
    \ (+ (if (> (sum_digits (first arr)) 0) 1 0)\n                 (count_nums (rest\
    \ arr)))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits\
    \ (first arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond\
    \ [(empty? arr) 0]\n        [else (+ (if (> (abs (car arr)) 9)\n             \
    \       0\n                    (if (zero? (modulo (abs (car arr)) 10))\n     \
    \                   0\n                        1))\n                  (count_nums\
    \ (cdr arr)))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits\
    \ (first arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [(positive? (sum-digits (first arr)))\n     (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1 0)\n             \
    \    (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1\
    \ 0)\n                 (count_nums (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (abs (car arr)) 9) (count_nums (cdr arr))]\n    [else (+ 1 (count_nums (cdr\
    \ arr)))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits\
    \ (first arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest\
    \ arr)))]\n    [else (count_nums (rest arr))]))\n", "  (define (sum-digits n)\n\
    \    (if (zero? n)\n        0\n        (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))))\n  (define (count-nums-helper arr count)\n    (if (null? arr)\n  \
    \      count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (cond [(empty? arr) 0]\n        [else (if\
    \ (not (zero? (sum_digits (car arr))))\n                 (+ 1 (count_nums (cdr\
    \ arr)))\n                 (count_nums (cdr arr)))]))\n", "  (define (sum-digits\
    \ n)\n    (cond [(zero? n) 0]\n          [(negative? n) (+ (sum-digits (- n))\
    \ (modulo n 10))]\n          [else (+ (sum-digits (quotient n 10)) (modulo n 10))]))\n\
    \  (define (sum-digits-arr arr)\n    (cond [(empty? arr) 0]\n          [else (+\
    \ (sum-digits (first arr)) (sum-digits-arr (rest arr)))]))\n  (sum-digits-arr\
    \ arr))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (abs (car arr)) 9) (count_nums\
    \ (cdr arr))]\n    [else (+ 1 (count_nums (cdr arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (cond [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest\
    \ arr)))]\n                   [else (count_nums (rest arr))])]))\n", "  (define\
    \ (sum-digits n)\n    (if (zero? n)\n        0\n        (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))))\n  (define (count-nums-helper arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum_digits\
    \ (first arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest\
    \ arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr)\
    \ 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n   \
    \ [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(>\
    \ (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (count-nums-helper arr sum)\n    (if (null? arr)\n        sum\n   \
    \     (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr arr)\
    \ (+ sum 1))\n            (count-nums-helper (cdr arr) sum))))\n  (count-nums-helper\
    \ arr 0))\n", "  (cond [(empty? arr) 0]\n        [else (if (positive? (sum_digits\
    \ (first arr)))\n                 (+ 1 (count_nums (rest arr)))\n            \
    \     (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(>\
    \ (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum_digits (first arr)) 0) 1\
    \ 0)\n                 (count_nums (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (abs (car arr)) 0) (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums\
    \ (cdr arr))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits\
    \ (first arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond\
    \ [(empty? arr) 0]\n        [else (if (> (sum_digits (first arr)) 0)\n       \
    \           (+ 1 (count_nums (rest arr)))\n                  (count_nums (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (define (count_nums_helper\
    \ arr acc)\n    (if (null? arr)\n        acc\n        (if (> (sum_digits (car\
    \ arr)) 0)\n            (count_nums_helper (cdr arr) (+ acc 1))\n            (count_nums_helper\
    \ (cdr arr) acc))))\n  (count_nums_helper arr 0))\n", "  (cond\n    [(empty? arr)\
    \ 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n   \
    \ [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(>\
    \ (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond [(empty? arr) 0]\n        [else (if (> (sum-digits\
    \ (first arr)) 0)\n                 (+ 1 (count_nums (rest arr)))\n          \
    \       (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(>\
    \ (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (define (sum-digits n)\n    (cond [(zero? n) 0]\n    \
    \      [(negative? n) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n      \
    \    [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper\
    \ arr count)\n    (cond [(null? arr) count]\n          [(> (sum-digits (car arr))\
    \ 0) (count-nums-helper (cdr arr) (+ count 1))]\n          [else (count-nums-helper\
    \ (cdr arr) count)]))\n  (count-nums-helper arr 0))\n", "  (cond\n    [(null?\
    \ arr) 0]\n    [(> (sum-digits (car arr)) 0) (+ 1 (count_nums (cdr arr)))]\n \
    \   [else (count_nums (cdr arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(>\
    \ (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits\
    \ (first arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond\
    \ [(empty? arr) 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1 0)\n\
    \                 (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n   \
    \ [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(>\
    \ (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond [(empty? arr) 0]\n        [else (+ (if (> (abs (car arr)) 0) 1 0)\n   \
    \              (count_nums (cdr arr)))]))\n", "  (cond [(empty? arr) 0]\n    \
    \    [else (+ (count_nums (rest arr))\n                 (if (positive? (sum_digits\
    \ (first arr))) 1 0))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (>\
    \ (sum-digits (first arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits (first arr)) 0)\n     (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (if (> (sum-digits (first arr)) 0)\n                  (+ 1\
    \ (count_nums (rest arr)))\n                  (count_nums (rest arr)))]))\n",
  "  (cond\n    [(null? arr) 0]\n    [(> (sum_digits (car arr)) 0) (+ 1 (count_nums\
    \ (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (abs (car arr)) 9) (count_nums (cdr arr))]\n    [else (+ 1\
    \ (count_nums (cdr arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (define (count_nums_helper arr sum)\n    (cond\n      [(empty?\
    \ arr) sum]\n      [(> (sum_digits (first arr)) 0) (count_nums_helper (rest arr)\
    \ (+ sum 1))]\n      [else (count_nums_helper (rest arr) sum)]))\n  (count_nums_helper\
    \ arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [(negative? n)\
    \ (+ (modulo n 10) (sum-digits (quotient n 10)))]\n      [else (+ (modulo n 10)\
    \ (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr acc)\n  \
    \  (cond\n      [(empty? arr) acc]\n      [(> (sum-digits (first arr)) 0) (count-nums-helper\
    \ (rest arr) (+ acc 1))]\n      [else (count-nums-helper (rest arr) acc)]))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n        (if (zero? n)\n            0\n     \
    \       (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (count-nums-helper\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum-digits (car\
    \ arr)) 0)\n            (count-nums-helper (cdr arr) (+ count 1))\n          \
    \  (count-nums-helper (cdr arr) count))))\n  (count-nums-helper arr 0))\n", " \
    \ (cond\n    [(empty? arr) 0]\n    [(positive? (sum-digits (first arr))) (+ 1\
    \ (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (define\
    \ (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [(negative? n) (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]\n      [else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n \
    \     [(empty? arr) count]\n      [(> (sum-digits (first arr)) 0) (count-nums-helper\
    \ (rest arr) (+ count 1))]\n      [else (count-nums-helper (rest arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (if (null? arr)\n\
    \      0\n      (if (positive? (sum-digits (abs (car arr))))\n          (+ 1 (count_nums\
    \ (cdr arr)))\n          (count_nums (cdr arr)))))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (if (> (sum-digits (first arr)) 0)\n                  (+ 1\
    \ (count_nums (rest arr)))\n                  (count_nums (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (if (null? arr)\n      0\n      (if\
    \ (sum-digits (car arr))\n          (+ 1 (count_nums (cdr arr)))\n          (count_nums\
    \ (cdr arr)))))\n", "  (define (sum-digits n)\n    (if (negative? n)\n       \
    \ (add1 (sum-digits (abs n)))\n        (if (zero? n)\n            0\n        \
    \    (add1 (sum-digits (quotient n 10))))))\n  (define (sum-digits-of-list lst)\n\
    \    (if (null? lst)\n        0\n        (add1 (sum-digits-of-list (cdr lst))\
    \ (sum-digits (car lst)))))\n  (sum-digits-of-list arr))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1 0)\n             \
    \    (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr) 0]\n        [else\
    \ (if (sum_digits (first arr))\n                 (+ 1 (count_nums (rest arr)))\n\
    \                 (count_nums (rest arr)))]))\n", "  (cond [(empty? arr) 0]\n\
    \        [else (+ (if (> (sum-digits (first arr)) 0) 1 0)\n                 (count_nums\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (abs (car arr))\
    \ 0) (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n", " \
    \ (cond\n    [(empty? arr) 0]\n    [(> (apply + (map abs (digits (car arr))))\
    \ 0)\n     (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1 0)\n             \
    \    (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (cond\n    [(null? arr) 0]\n    [(> (sum-digits (car arr)) 0)\
    \ (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest\
    \ arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr)\
    \ 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n   \
    \ [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr) 0]\n        [else\
    \ (if (> (sum-digits (first arr)) 0)\n                  (+ 1 (count_nums (rest\
    \ arr)))\n                  (count_nums (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (define (sum-digits n)\n    (cond\
    \ [(< n 0) (- n)]\n          [(zero? n) 0]\n          [else (+ (remainder n 10)\
    \ (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n\
    \    (cond [(null? arr) count]\n          [(> (sum-digits (car arr)) 0) (count-nums-helper\
    \ (cdr arr) (+ count 1))]\n          [else (count-nums-helper (cdr arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits\
    \ (first arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [(positive? (sum-digits (first arr)))\n     (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1 0)\n             \
    \    (count_nums (rest arr)))]))\n", "  (cond [(empty? arr) 0]\n        [else\
    \ (+ (if (> (sum-digits (first arr)) 0) 1 0)\n                 (count_nums (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond [(empty? arr) 0]\n        [else (+ (if (positive? (sum_digits (first arr)))\
    \ 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr) 0]\n        [else\
    \ (+ (if (> (sum-digits (first arr)) 0) 1 0)\n                 (count_nums (rest\
    \ arr)))]))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (positive? (sum-digits\
    \ (first arr))) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (define\
    \ (sum_digits n)\n    (cond\n      [(zero? n) 0]\n      [(negative? n) (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]\n      [else (+ (modulo n 10) (sum_digits\
    \ (quotient n 10)))]))\n  (define (count_nums_helper arr count)\n    (cond\n \
    \     [(empty? arr) count]\n      [(> (sum_digits (first arr)) 0) (count_nums_helper\
    \ (rest arr) (+ count 1))]\n      [else (count_nums_helper (rest arr) count)]))\n\
    \  (count_nums_helper arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (sum_digits (first arr)))\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
