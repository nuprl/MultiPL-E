name: HumanEval_143_words_in_sentence
language: rkt
prompt: "#lang racket\n\n#| You are given a string representing a sentence,\nthe sentence\
  \ contains some words separated by a space,\nand you have to return a string that\
  \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
  the order of the words in the new string should be the same as the original one.\n\
  Example 1:\n>>> (words_in_sentence \"This is a test\")\n\"is\"\nExample 2:\n>>>\
  \ (words_in_sentence \"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
  \ len(sentence) <= 100\n* sentence contains only letters|#\n(define (words_in_sentence\
  \ sentence)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n\
  \    (check-equal? (candidate \"This is a test\") \"is\")\n    (check-equal? (candidate\
  \ \"lets go for swimming\") \"go for\")\n    (check-equal? (candidate \"there is\
  \ no place available here\") \"there is no place\")\n    (check-equal? (candidate\
  \ \"Hi I am Hussein\") \"Hi am Hussein\")\n    (check-equal? (candidate \"go for\
  \ it\") \"go for it\")\n    (check-equal? (candidate \"here\") \"\")\n    (check-equal?\
  \ (candidate \"here is\") \"is\")\n))\n\n(test-humaneval)"
completions: ["  (define (is-prime? n)\n    (define (divisible? a b)\n      (= (modulo\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (define (prime-words sentence)\n    (cond ((null? sentence) '())\n\
    \          ((is-prime? (string-length (car sentence)))\n           (cons (car\
    \ sentence) (prime-words (cdr sentence))))\n          (else (prime-words (cdr\
    \ sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper? n i)\n \
    \     (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper? n (- i 1))]))\n    (is-prime-helper? n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-helper\
    \ (rest sentence) (string-append result (first sentence) \" \"))]\n      [else\
    \ (words-in-sentence-helper (rest sentence) result)]))\n  (string-trim (words-in-sentence-helper\
    \ (string-split sentence #\\space) \"\")))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter sentence result)\n\
    \    (cond\n      [(empty? sentence) (string-join result)]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (iter (rest sentence) (append result\
    \ (list (first sentence))))]\n      [else (iter (rest sentence) result)]))\n \
    \ (iter (string-split sentence) '()))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond\n    \
    \  [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (words-in-sentence-helper (rest sentence)))]\n\
    \      [else (words-in-sentence-helper (rest sentence))]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (words-in-sentence-helper (rest sentence) (string-append result (first\
    \ sentence) \" \"))]\n      [else (words-in-sentence-helper (rest sentence) result)]))\n\
    \  (substring (words-in-sentence-helper (string-split sentence #\\space) \"\"\
    ) 0 (- (string-length (words-in-sentence-helper (string-split sentence #\\space)\
    \ \"\")) 1)))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n\
    \      (= (remainder a b) 0))\n    (define (iter divisor)\n      (cond ((> divisor\
    \ (/ n 2)) #t)\n            ((is-divisible? n divisor) #f)\n            (else\
    \ (iter (+ divisor 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (word-at-index\
    \ sentence index)\n    (list-ref (string-split sentence #\\space) index))\n  (define\
    \ (word-at-index-is-prime? sentence index)\n    (is-prime? (string-length (word-at-index\
    \ sentence index))))\n  (define (word-at-index-is-prime? sentence index)\n   \
    \ (is-prime? (string-length (word-at-index sentence index))))\n  (define (prime-words\
    \ sentence)\n    (filter word-at-index-is-prime? (word-lengths sentence)))\n \
    \ (define (prime-words-in-sentence sentence)\n    (string-join (filter word-at-index-is-prime?\
    \ (word-lengths sentence)) #\\space))\n  (prime-words-in-sentence sentence))\n",
  "  (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a\
    \ b) 0))\n    (define (loop i)\n      (cond\n        [(> i (/ n 2)) #t]\n    \
    \    [(is-divisible? n i) #f]\n        [else (loop (+ i 1))]))\n    (cond\n  \
    \    [(= n 1) #f]\n      [(= n 2) #t]\n      [else (loop 2)]))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (word-at-index sentence i)\n    (string-split sentence #\\space i))\n  (define\
    \ (word-indexes sentence)\n    (filter (lambda (i) (is-prime? (string-length (word-at-index\
    \ sentence i))))\n            (range (string-length sentence))))\n  (define (words-at-indexes\
    \ sentence indexes)\n    (map (lambda (i) (word-at-index sentence i)) indexes))\n\
    \  (string-join (words-at-indexes sentence (word-indexes sentence)) \" \"))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(zero? (modulo n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (helper i)\n  \
    \    (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (helper (- i 1))]))\n    (helper (- n 1)))\n  (define (helper2 lst)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(is-prime? (string-length (first lst))) (cons\
    \ (first lst) (helper2 (rest lst)))]\n      [else (helper2 (rest lst))]))\n  (string-join\
    \ (helper2 (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define\
    \ (loop i)\n      (cond\n        [(= i n) #t]\n        [(is-divisible? n i) #f]\n\
    \        [else (loop (+ i 1))]))\n    (loop 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (word-at-index\
    \ sentence i)\n    (list-ref (string-split sentence #\\space) i))\n  (define (words-with-prime-lengths\
    \ sentence)\n    (define (loop i)\n      (cond\n        [(= i (length sentence))\
    \ '()]\n        [(is-prime? (list-ref (word-lengths sentence) i))\n         (cons\
    \ (word-at-index sentence i) (loop (+ i 1)))]\n        [else (loop (+ i 1))]))\n\
    \    (loop 0))\n  (string-join (words-with-prime-lengths sentence) #\\space))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (define (iter words acc)\n    (cond\n      [(empty? words) (string-join\
    \ (reverse acc) \" \")]\n      [(is-prime? (string-length (first words)))\n  \
    \     (iter (rest words) (cons (first words) acc))]\n      [else (iter (rest words)\
    \ acc)]))\n  (iter (string-split sentence #\\space) '()))\n", "  (define (is-prime?\
    \ n)\n    (and (> n 1)\n         (not (any (lambda (i) (= (remainder n i) 0))\n\
    \                   (range 2 (sqrt n))))))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (word-at-index sentence i)\n    (list-ref (string-split\
    \ sentence #\\space) i))\n  (define (word-at-index-with-length sentence i)\n \
    \   (list (word-at-index sentence i)\n          (string-length (word-at-index\
    \ sentence i))))\n  (define (prime-word-lengths sentence)\n    (filter (lambda\
    \ (word-length) (is-prime? (cadr word-length)))\n            (map (lambda (i)\
    \ (word-at-index-with-length sentence i))\n                 (range 0 (length (string-split\
    \ sentence #\\space))))))\n  (string-join (map (lambda (word-length) (car word-length))\n\
    \                    (prime-word-lengths sentence))\n               #\\space))\n",
  "  (string-join\n   (filter\n    (lambda (word)\n      (is-prime? (string-length\
    \ word)))\n    (string-split sentence #\\space))\n   #\\space))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond\n        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words acc)\n    (cond\n  \
    \    [(empty? words) (string-join (reverse acc) \" \")]\n      [(is-prime? (string-length\
    \ (first words)))\n       (iter (rest words) (cons (first words) acc))]\n    \
    \  [else (iter (rest words) acc)]))\n  (iter (string-split sentence #\\space)\
    \ '()))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond [(=\
    \ i 1) #t]\n            [(= (modulo n i) 0) #f]\n            [else (helper (-\
    \ i 1))]))\n    (helper (- n 1)))\n  (define (helper sentence)\n    (cond [(empty?\
    \ sentence) '()]\n          [(is-prime? (string-length (first sentence)))\n  \
    \         (cons (first sentence) (helper (rest sentence)))]\n          [else (helper\
    \ (rest sentence))]))\n  (string-join (helper (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n     \
    \    (cond\n           [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n \
    \          [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter words)\n\
    \    (cond\n      [(empty? words) \"\"]\n      [(is-prime? (string-length (first\
    \ words)))\n       (string-append (first words) \" \" (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (iter (string-split sentence #\\space)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (helper i)\n  \
    \    (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (helper (- i 1))]))\n    (helper (- n 1)))\n  (define (helper words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (helper (rest words)))]\n      [else (helper (rest\
    \ words))]))\n  (string-join (helper (string-split sentence #\\space)) \" \"))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime n)\n    (define (iter i)\n     \
    \ (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (iter word result)\n    (cond\n\
    \      [(empty? word) result]\n      [(is-prime (string-length (first word)))\n\
    \       (iter (rest word) (string-append result (first word) \" \"))]\n      [else\
    \ (iter (rest word) result)]))\n  (define (trim-last-space str)\n    (substring\
    \ str 0 (- (string-length str) 1)))\n  (trim-last-space (iter (string-split sentence\
    \ #\\space) \"\")))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n divisor)\n      (if (= divisor 1)\n          #t\n          (if (zero? (modulo\
    \ n divisor))\n              #f\n              (is-prime-helper n (- divisor 1)))))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (word-lengths-in-sentence sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths-in-sentence\
    \ sentence)\n    (filter is-prime? (word-lengths-in-sentence sentence)))\n  (define\
    \ (prime-words-in-sentence sentence)\n    (filter (lambda (word)\n           \
    \   (is-prime? (string-length word)))\n            (string-split sentence #\\\
    space)))\n  (string-join (prime-words-in-sentence sentence) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (word-lengths sentence)\n    (map string-length (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (lambda (word)\n   \
    \        (list-ref (string-split sentence #\\space) word))\n          (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n```\n\n## Problem\
    \ 3\n\n```racket\n#lang racket\n", "  (define (is-prime? n)\n    (define (is-prime-iter\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-iter n (- i 1))]))\n    (is-prime-iter n (quotient n 2)))\n\
    \  (define (prime-words-in-sentence sentence)\n    (define (prime-words-in-sentence-iter\
    \ sentence acc)\n      (cond\n        [(empty? sentence) acc]\n        [(is-prime?\
    \ (string-length (first sentence)))\n         (prime-words-in-sentence-iter (rest\
    \ sentence) (append acc (list (first sentence))))]\n        [else (prime-words-in-sentence-iter\
    \ (rest sentence) acc)]))\n    (prime-words-in-sentence-iter (string-split sentence)\
    \ '()))\n  (string-join (prime-words-in-sentence sentence) \" \"))\n```\n\n##\
    \ Problem 3\n\n```racket\n#lang racket\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n\
    \      [(empty? words) \"\"]\n      [(is-prime? (string-length (first words)))\n\
    \       (string-append (first words) \" \" (iter (rest words)))]\n      [else\
    \ (iter (rest words))]))\n  (iter (string-split sentence #\\space)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(> i (sqrt n)) #t]\n\
    \        [(zero? (modulo n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (word-at-index sentence\
    \ i)\n    (list-ref (string-split sentence #\\space) i))\n  (define (word-at-index-with-length\
    \ sentence i)\n    (list (word-at-index sentence i) (string-length (word-at-index\
    \ sentence i))))\n  (define (prime-words sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words-with-lengths sentence)\n    (filter (lambda\
    \ (x) (is-prime? (cadr x))) (map word-at-index-with-length (build-list (string-length\
    \ sentence) (lambda (i) sentence)))))\n  (define (prime-words-in-sentence sentence)\n\
    \    (map car (prime-words-with-lengths sentence)))\n  (string-join (prime-words-in-sentence\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n\
    \  (define (words-in-sentence-iter sentence acc)\n    (cond\n      [(null? sentence)\
    \ (string-join (reverse acc) \" \")]\n      [(is-prime? (string-length (car sentence)))\n\
    \       (words-in-sentence-iter (cdr sentence) (cons (car sentence) acc))]\n \
    \     [else (words-in-sentence-iter (cdr sentence) acc)]))\n  (words-in-sentence-iter\
    \ (string-split sentence #\\space) '()))\n", "  (define (is-prime? n)\n    (cond\n\
    \      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n \
    \      (define (iter i)\n         (cond\n           [(= i n) #t]\n           [(=\
    \ (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n\
    \  (define (word-lengths sentence)\n    (map (lambda (word) (string-length word))\n\
    \         (string-split sentence #\\space)))\n  (define (prime-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (lambda (word)\n              (member (string-length word)\n    \
    \                  (prime-lengths sentence)))\n            (string-split sentence\
    \ #\\space)))\n  (string-join prime-words #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(zero?\
    \ (modulo n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define\
    \ (word-lengths sentence)\n    (map string-length (string-split sentence #\\space)))\n\
    \  (define (prime-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (words-with-prime-lengths sentence)\n    (filter (lambda (word)\n \
    \             (member (string-length word) (prime-lengths sentence)))\n      \
    \      (string-split sentence #\\space)))\n  (string-join (words-with-prime-lengths\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n     \
    \ (if (= i n)\n          #t\n          (if (= (remainder n i) 0)\n           \
    \   #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (list-ref (string-split sentence #\\space) word))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ lst)\n    (cond ((null? lst) '())\n          ((is-prime? (string-length (car\
    \ lst)))\n           (cons (car lst) (iter (cdr lst))))\n          (else (iter\
    \ (cdr lst)))))\n  (string-join (iter (string-split sentence #\\space)) \" \"\
    ))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(>\
    \ i (sqrt n)) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (prime-words-in-sentence sentence)\n    (cond\n    \
    \  [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (prime-words-in-sentence (rest sentence)))]\n \
    \     [else (prime-words-in-sentence (rest sentence))]))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(zero? (modulo\
    \ n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n\
    \    (cond\n      [(empty? words) '()]\n      [(is-prime? (string-length (first\
    \ words)))\n       (cons (first words) (iter (rest words)))]\n      [else (iter\
    \ (rest words))]))\n  (string-join (iter (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (let loop ([i 3])\n    \
    \     (cond\n           [(= i n) #t]\n           [(zero? (modulo n i)) #f]\n \
    \          [else (loop (+ i 2))]))]))\n  (string-join\n   (filter\n    (lambda\
    \ (word)\n      (is-prime? (string-length word)))\n    (string-split sentence\
    \ #\\space))\n   #\\space))\n", "  (define (is-prime n)\n    (define (is-prime-iter\
    \ n i)\n      (cond [(= i 1) #t]\n            [(= (modulo n i) 0) #f]\n      \
    \      [else (is-prime-iter n (- i 1))]))\n    (is-prime-iter n (- n 1)))\n  (define\
    \ (is-prime-word word)\n    (is-prime (string-length word)))\n  (define (words-in-sentence-iter\
    \ sentence result)\n    (cond [(empty? sentence) result]\n          [(is-prime-word\
    \ (first sentence))\n           (words-in-sentence-iter (rest sentence) (string-append\
    \ result (first sentence) \" \"))]\n          [else (words-in-sentence-iter (rest\
    \ sentence) result)]))\n  (substring (words-in-sentence-iter (string-split sentence\
    \ #\\space) \"\") 0 (- (string-length (words-in-sentence-iter (string-split sentence\
    \ #\\space) \"\")) 1)))\n", "  (define (is-prime? n)\n    (define (iter i)\n \
    \     (cond\n        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n       \
    \ [else (iter (+ i 1))]))\n    (iter 2))\n  (define (word-is-prime? word)\n  \
    \  (is-prime? (string-length word)))\n  (define (word-is-not-prime? word)\n  \
    \  (not (word-is-prime? word)))\n  (define (filter-words words)\n    (filter word-is-prime?\
    \ words))\n  (define (join-words words)\n    (string-join words \" \"))\n  (define\
    \ (split-sentence sentence)\n    (string-split sentence #\\space))\n  (define\
    \ (sentence-words sentence)\n    (split-sentence sentence))\n  (define (sentence-words-that-are-prime\
    \ sentence)\n    (filter-words (sentence-words sentence)))\n  (define (sentence-words-that-are-not-prime\
    \ sentence)\n    (filter word-is-not-prime? (sentence-words sentence)))\n  (define\
    \ (sentence-words-that-are-prime-joined sentence)\n    (join-words (sentence-words-that-are-prime\
    \ sentence)))\n  (sentence-words-that-are-prime-joined sentence))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond\n        [(= i\
    \ 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (-\
    \ i 1))]))\n    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-iter (rest sentence)\
    \ (string-append result (first sentence) \" \"))]\n      [else (words-in-sentence-iter\
    \ (rest sentence) result)]))\n  (substring (words-in-sentence-iter (string-split\
    \ sentence) \"\") 0 (- (string-length (words-in-sentence-iter (string-split sentence)\
    \ \"\")) 1)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (iter\
    \ (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty?\
    \ words) '()]\n      [(is-prime? (string-length (first words)))\n       (cons\
    \ (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime? (string-length\
    \ (first words)))\n       (cons (first words) (iter (rest words)))]\n      [else\
    \ (iter (rest words))]))\n  (string-join (iter (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (helper\
    \ (- i 1))]))\n    (helper (- n 1)))\n  (define (helper sentence)\n    (cond\n\
    \      [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (helper (rest sentence)))]\n      [else (helper\
    \ (rest sentence))]))\n  (string-join (helper (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n  \
    \    (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (+ i 1))]))\n    (is-prime-helper n 2))\n  (define (word-lengths-are-prime?\
    \ word-lengths)\n    (cond\n      [(empty? word-lengths) #t]\n      [(is-prime?\
    \ (first word-lengths)) (word-lengths-are-prime? (rest word-lengths))]\n     \
    \ [else #f]))\n  (define (word-lengths sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(char=? (first sentence) #\\space) (word-lengths (rest sentence))]\n\
    \      [else (cons (string-length (first (string-split sentence #\\space)))\n\
    \                  (word-lengths (rest sentence)))]))\n  (define (words-in-sentence-helper\
    \ sentence words)\n    (cond\n      [(empty? sentence) (string-join words)]\n\
    \      [(char=? (first sentence) #\\space) (words-in-sentence-helper (rest sentence)\
    \ words)]\n      [else (words-in-sentence-helper (rest sentence) (cons (first\
    \ (string-split sentence #\\space)) words))]))\n  (words-in-sentence-helper sentence\
    \ empty))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i\
    \ 1))]))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda (word)\
    \ (string-length word))\n         (string-split sentence #\\space)))\n  (define\
    \ (prime-length-words sentence)\n    (filter (lambda (word) (is-prime? (string-length\
    \ word)))\n            (string-split sentence #\\space)))\n  (string-join (prime-length-words\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (prime-words-in-sentence sentence)\n    (define (prime-words-in-sentence-helper\
    \ sentence acc)\n      (cond\n        [(empty? sentence) acc]\n        [(is-prime?\
    \ (string-length (first sentence)))\n         (prime-words-in-sentence-helper\
    \ (rest sentence) (append acc (list (first sentence))))]\n        [else (prime-words-in-sentence-helper\
    \ (rest sentence) acc)]))\n    (prime-words-in-sentence-helper (string-split sentence\
    \ #\\space) '()))\n  (string-join (prime-words-in-sentence sentence) #\\space))\n",
  "  (define (is-prime? n)\n    (define (helper i)\n      (if (= i n)\n          #t\n\
    \          (if (= (modulo n i) 0)\n              #f\n              (helper (+\
    \ i 1)))))\n    (helper 2))\n  (define (helper2 words)\n    (if (null? words)\n\
    \        \"\"\n        (if (is-prime? (string-length (car words)))\n         \
    \   (string-append (car words) \" \" (helper2 (cdr words)))\n            (helper2\
    \ (cdr words)))))\n  (helper2 (string-split sentence #\\space)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n    \
    \    [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (word-lengths sentence)\n    (map string-length (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime (word-lengths\
    \ sentence)))\n  (define (word-lengths-to-words sentence)\n    (map (lambda (length)\n\
    \           (list-ref (string-split sentence #\\space) length))\n          (prime-word-lengths\
    \ sentence)))\n  (string-join (word-lengths-to-words sentence) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-iter? n i)\n      (if (= i 1)\n\
    \          #t\n          (if (= (modulo n i) 0)\n              #f\n          \
    \    (is-prime-iter? n (- i 1)))))\n    (is-prime-iter? n (- n 1)))\n  (define\
    \ (word-is-prime? word)\n    (is-prime? (string-length word)))\n  (define (words-in-sentence-iter\
    \ sentence acc)\n    (if (empty? sentence)\n        acc\n        (let ([word (first\
    \ sentence)])\n          (if (word-is-prime? word)\n              (words-in-sentence-iter\
    \ (rest sentence) (string-append acc \" \" word))\n              (words-in-sentence-iter\
    \ (rest sentence) acc)))))\n  (words-in-sentence-iter (string-split sentence #\\\
    space) \"\"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n\
    \      (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n            (else\
    \ (is-prime-helper n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (prime-words-in-sentence sentence)\n    (cond ((null? sentence) '())\n     \
    \     ((is-prime? (string-length (car sentence)))\n           (cons (car sentence)\
    \ (prime-words-in-sentence (cdr sentence))))\n          (else (prime-words-in-sentence\
    \ (cdr sentence)))))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (helper i)\n  \
    \    (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (helper (- i 1))]))\n    (helper (- n 1)))\n  (define (helper2 lst)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(is-prime? (string-length (first lst))) (cons\
    \ (first lst) (helper2 (rest lst)))]\n      [else (helper2 (rest lst))]))\n  (string-join\
    \ (helper2 (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n \
    \       [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (words-in-sentence-helper (rest sentence) (string-append\
    \ result (first sentence) \" \"))]\n      [else (words-in-sentence-helper (rest\
    \ sentence) result)]))\n  (substring (words-in-sentence-helper (string-split sentence\
    \ #\\space) \"\") 0 (- (string-length (words-in-sentence-helper (string-split\
    \ sentence #\\space) \"\")) 1)))\n```\n\n### [Problem #5](https://www.codewars.com/kata/5a3fe3dde1ce0e8ed6000097/train/racket)\n\
    \n```racket\n#lang racket\n", "  (define (prime? n)\n    (cond\n      [(< n 2)\
    \ #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n   \
    \    (define (iter i)\n         (cond\n           [(> i (sqrt n)) #t]\n      \
    \     [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter\
    \ 3)]))\n  (define (words-in-sentence-iter sentence result)\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(prime? (string-length (first sentence)))\n\
    \       (words-in-sentence-iter (rest sentence) (string-append result \" \" (first\
    \ sentence)))]\n      [else (words-in-sentence-iter (rest sentence) result)]))\n\
    \  (words-in-sentence-iter (string-split sentence) \"\"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(> i (/ n 2)) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define\
    \ (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime? (string-length\
    \ (first words)))\n       (cons (first words) (iter (rest words)))]\n      [else\
    \ (iter (rest words))]))\n  (string-join (iter (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (define (iter sentence result)\n    (cond\n \
    \     [(null? sentence) result]\n      [(is-prime? (string-length (car sentence)))\n\
    \       (iter (cdr sentence) (string-append result (car sentence) \" \"))]\n \
    \     [else (iter (cdr sentence) result)]))\n  (substring (iter (string-split\
    \ sentence) \"\") 0 (- (string-length (iter (string-split sentence) \"\")) 1)))\n",
  "  (define (is-prime? n)\n    (define (is-divisible? n divisor)\n      (if (= divisor\
    \ 1)\n          #t\n          (if (= (remainder n divisor) 0)\n              #f\n\
    \              (is-divisible? n (- divisor 1)))))\n    (is-divisible? n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence)\n    (if (empty? sentence)\n  \
    \      '()\n        (if (is-prime? (string-length (first sentence)))\n       \
    \     (cons (first sentence) (words-in-sentence-helper (rest sentence)))\n   \
    \         (words-in-sentence-helper (rest sentence)))))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-iter? n i)\n      (cond\n        [(= i 1) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n    (cond\n  \
    \    [(empty? sentence) (string-join (reverse acc) \" \")]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-iter (rest sentence)\
    \ (cons (first sentence) acc))]\n      [else (words-in-sentence-iter (rest sentence)\
    \ acc)]))\n  (words-in-sentence-iter (string-split sentence) '()))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n      \
    \  [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n\
    \  (define (word-lengths sentence)\n    (map string-length (string-split sentence\
    \ #\\space)))\n  (define (filter-prime-lengths lengths)\n    (filter prime? lengths))\n\
    \  (define (filter-prime-words words lengths)\n    (filter (lambda (word) (member\
    \ (string-length word) lengths)) words))\n  (define (join-words words)\n    (string-join\
    \ words #\\space))\n  (define (words-in-sentence sentence)\n    (join-words (filter-prime-words\
    \ (string-split sentence #\\space)\n                                    (filter-prime-lengths\
    \ (word-lengths sentence)))))\n  (words-in-sentence sentence))\n```\n\n## Problem\
    \ 2\n\n```racket\n#lang racket\n", "  (define (is-prime n)\n    (define (is-prime-iter\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-iter n (- i 1))]))\n    (is-prime-iter n (- n 1)))\n \
    \ (define (word-lengths-in-sentence sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (words-with-prime-lengths sentence)\n    (filter\
    \ is-prime (word-lengths-in-sentence sentence)))\n  (define (words-with-prime-lengths-in-sentence\
    \ sentence)\n    (map string-join (map list->string (map string-split (string-split\
    \ sentence #\\space) #\\space) (words-with-prime-lengths sentence))))\n  (string-join\
    \ (words-with-prime-lengths-in-sentence sentence) #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (if (= i 2)\n          #t\n   \
    \       (if (= (modulo n i) 0)\n              #f\n              (is-prime-helper\
    \ n (- i 1)))))\n    (if (<= n 1)\n        #f\n        (is-prime-helper n (- n\
    \ 1))))\n  (define (words-in-sentence-helper sentence result)\n    (if (empty?\
    \ sentence)\n        result\n        (let ([word (first sentence)])\n        \
    \  (if (is-prime? (string-length word))\n              (words-in-sentence-helper\
    \ (rest sentence) (string-append result \" \" word))\n              (words-in-sentence-helper\
    \ (rest sentence) result)))))\n  (words-in-sentence-helper (string-split sentence)\
    \ \"\"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words)\
    \ \"\"]\n      [(is-prime? (string-length (first words)))\n       (string-append\
    \ (first words) \" \" (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (string-trim (iter (string-split sentence #\\space))))\n", "  (define (is-prime?\
    \ n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define\
    \ (iter i)\n      (cond\n        [(> i (sqrt n)) #t]\n        [(is-divisible?\
    \ n i) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter lst)\n\
    \    (cond\n      [(null? lst) '()]\n      [(is-prime? (string-length (car lst)))\
    \ (cons (car lst) (iter (cdr lst)))]\n      [else (iter (cdr lst))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime n)\n\
    \    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(is-divisible? n i) #f]\n  \
    \      [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word)\n              (member (string-length\
    \ word)\n                      (prime-word-lengths sentence)))\n            (string-split\
    \ sentence #\\space)))\n  (string-join prime-words #\\space))\n", "  (string-join\n\
    \   (filter (lambda (word)\n             (prime? (string-length word)))\n    \
    \       (string-split sentence #\\space))\n   #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-iter n i)\n      (cond\n        [(= i 1) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (is-prime-iter n (- i 1))]))\n  \
    \  (is-prime-iter n (- n 1)))\n  (define (word-lengths-are-prime? sentence)\n\
    \    (map is-prime? (map string-length (string-split sentence #\\space))))\n \
    \ (define (words-in-sentence-iter sentence word-lengths-are-prime?)\n    (cond\n\
    \      [(empty? sentence) empty]\n      [(empty? word-lengths-are-prime?) empty]\n\
    \      [(and (first word-lengths-are-prime?) (not (empty? (first sentence))))\n\
    \       (cons (first sentence) (words-in-sentence-iter (rest sentence) (rest word-lengths-are-prime?)))]\n\
    \      [else (words-in-sentence-iter (rest sentence) (rest word-lengths-are-prime?))]))\n\
    \  (string-join (words-in-sentence-iter (string-split sentence #\\space) (word-lengths-are-prime?\
    \ sentence)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ (\u03BB (word) (string-length word)) (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (filter (\u03BB (word) (member (string-length\
    \ word) (prime-word-lengths sentence)))\n            (string-split sentence #\\\
    space)))\n  (string-join prime-words #\\space))\n", "  (define (is-prime n)\n\
    \    (define (is-prime-iter n i)\n      (cond\n        [(= i 1) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (is-prime-iter n (- i 1))]))\n    (is-prime-iter\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(is-prime (string-length (first sentence)))\n\
    \       (words-in-sentence-iter (rest sentence) (string-append result (first sentence)\
    \ \" \"))]\n      [else (words-in-sentence-iter (rest sentence) result)]))\n \
    \ (string-trim (words-in-sentence-iter (string-split sentence #\\space) \"\")))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (define (iter sentence)\n    (cond\n      [(empty? sentence) '()]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (iter (rest sentence)))]\n      [else (iter (rest sentence))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-iter? n i)\n      (cond\n        [(= i 1) #t]\n       \
    \ [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (words-in-sentence-iter (rest sentence) (string-append result (first sentence)\
    \ \" \"))]\n      [else (words-in-sentence-iter (rest sentence) result)]))\n \
    \ (string-trim (words-in-sentence-iter (string-split sentence) \"\")))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word)\n           (list-ref (string-split sentence #\\space) word))\n     \
    \     (prime-word-lengths sentence)))\n  (string-join (prime-words sentence) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) empty]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n```\n\n### [Problem 2](https://www.codewars.com/kata/5b4e474305f04bea11000148)\n\
    \n```racket\n#lang racket\n", "  (define (is-prime? n)\n    (define (helper i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (helper (- i 1))]))\n    (helper (- n 1)))\n  (define (helper lst)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(is-prime? (string-length (first lst)))\n\
    \       (cons (first lst) (helper (rest lst)))]\n      [else (helper (rest lst))]))\n\
    \  (string-join (helper (string-split sentence #\\space)) \" \"))\n```\n\n###\
    \ [Problem #3](https://www.codewars.com/kata/5a1a76c8a7ad6aa26a0007a0)\n\n```racket\n\
    #lang racket\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-helper\
    \ (rest sentence) (string-append result (first sentence) \" \"))]\n      [else\
    \ (words-in-sentence-helper (rest sentence) result)]))\n  (words-in-sentence-helper\
    \ (string-split sentence) \"\"))\n", "  (define (is-prime? n)\n    (define (helper\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (helper (- i 1))]))\n    (helper (- n 1)))\n  (define (helper sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (helper (rest sentence)))]\n\
    \      [else (helper (rest sentence))]))\n  (string-join (helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n \
    \       [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words acc)\n \
    \   (cond\n      [(empty? words) (string-join (reverse acc) \" \")]\n      [(is-prime?\
    \ (string-length (first words)))\n       (iter (rest words) (cons (first words)\
    \ acc))]\n      [else (iter (rest words) acc)]))\n  (iter (string-split sentence\
    \ #\\space) '()))\n", "  (define (is-prime? n)\n    (define (is-divisible? n d)\n\
    \      (= (remainder n d) 0))\n    (define (smallest-divisor n)\n      (define\
    \ (find-divisor n test-divisor)\n        (cond ((> (square test-divisor) n) n)\n\
    \              ((is-divisible? n test-divisor) test-divisor)\n              (else\
    \ (find-divisor n (+ test-divisor 1)))))\n      (find-divisor n 2))\n    (= n\
    \ (smallest-divisor n)))\n  (define (prime-words-in-sentence sentence)\n    (define\
    \ (prime-words-in-sentence-iter sentence result)\n      (cond ((null? sentence)\
    \ result)\n            ((is-prime? (string-length (car sentence)))\n         \
    \    (prime-words-in-sentence-iter (cdr sentence) (append result (list (car sentence)))))\n\
    \            (else (prime-words-in-sentence-iter (cdr sentence) result))))\n \
    \   (prime-words-in-sentence-iter (string-split sentence #\\space) '()))\n  (string-join\
    \ (prime-words-in-sentence sentence) #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n\
    \        (if (zero? (modulo n i)) i)))\n    (empty? (divisors n)))\n  (define\
    \ (word-lengths sentence)\n    (map (lambda (word) (string-length word))\n   \
    \      (string-split sentence #\\space)))\n  (define (prime-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (map (lambda (word) (string-ref word 0))\n         (filter (lambda (word)\
    \ (is-prime? (string-length word)))\n                 (string-split sentence #\\\
    space))))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n\
    \      [else\n       (define (iter i)\n         (cond\n           [(> (* i i)\
    \ n) #t]\n           [(zero? (modulo n i)) #f]\n           [else (iter (+ i 2))]))\n\
    \       (iter 3)]))\n  (define (is-prime-word? word)\n    (is-prime? (string-length\
    \ word)))\n  (string-join (filter is-prime-word? (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter? n i)\n   \
    \   (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-iter? n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter\
    \ sentence acc)\n    (cond\n      [(empty? sentence) (string-join (reverse acc)\
    \ \" \")]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-iter\
    \ (rest sentence) (cons (first sentence) acc))]\n      [else (words-in-sentence-iter\
    \ (rest sentence) acc)]))\n  (words-in-sentence-iter (string-split sentence) '()))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (word) (is-prime? (string-length word)))\n            (string-split sentence\
    \ #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-iter? n i)\n      (cond\n        [(= i 1) #t]\n  \
    \      [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (- i 1))]))\n\
    \    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n\
    \    (cond\n      [(empty? sentence) (string-join (reverse acc) \" \")]\n    \
    \  [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-iter\
    \ (rest sentence) (cons (first sentence) acc))]\n      [else (words-in-sentence-iter\
    \ (rest sentence) acc)]))\n  (words-in-sentence-iter (string-split sentence #\\\
    space) '()))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (iter\
    \ (+ i 1))]))\n    (iter 2))\n  (define (word-lengths lst)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(is-prime? (string-length (first lst)))\n       (cons (first\
    \ lst) (word-lengths (rest lst)))]\n      [else (word-lengths (rest lst))]))\n\
    \  (string-join (word-lengths (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n    \
    \    [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\n      \
    \  [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (words-in-sentence-iter words)\n    (cond\n      [(empty?\
    \ words) \"\"]\n      [(is-prime (string-length (first words)))\n       (string-append\
    \ (first words) \" \" (words-in-sentence-iter (rest words)))]\n      [else (words-in-sentence-iter\
    \ (rest words))]))\n  (words-in-sentence-iter (string-split sentence #\\space)))\n",
  "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n  \
    \    [(even? n) #f]\n      [else\n       (define (is-divisible? n divisor)\n \
    \        (cond\n           [(= divisor 1) #f]\n           [(= (modulo n divisor)\
    \ 0) #t]\n           [else (is-divisible? n (- divisor 1))]))\n       (is-divisible?\
    \ n (- n 1))]))\n  (define (prime-words sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (prime-words (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n    \
    \    [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-helper (rest sentence)\
    \ (string-append result (first sentence) \" \"))]\n      [else (words-in-sentence-helper\
    \ (rest sentence) result)]))\n  (substring (words-in-sentence-helper (string-split\
    \ sentence) \"\") 0 (- (string-length (words-in-sentence-helper (string-split\
    \ sentence) \"\")) 1)))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (loop i)\n      (cond ((> i\
    \ (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n            (else (loop\
    \ (+ i 1)))))\n    (loop 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (word-at-index sentence i)\n \
    \   (list-ref (string-split sentence #\\space) i))\n  (define (loop sentence i)\n\
    \    (cond ((>= i (length sentence)) \"\")\n          ((is-prime? (list-ref (word-lengths\
    \ sentence) i))\n           (string-append (word-at-index sentence i) \" \" (loop\
    \ sentence (+ i 1))))\n          (else (loop sentence (+ i 1)))))\n  (string-trim\
    \ (loop sentence 0)))\n", "  (define (is-prime? n)\n    (define (helper i)\n \
    \     (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (helper (- i 1))]))\n    (helper (- n 1)))\n  (define (helper words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (helper (rest words)))]\n      [else (helper (rest\
    \ words))]))\n  (string-join (helper (string-split sentence #\\space)) \" \"))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter lst)\n    (cond\n      [(empty? lst) '()]\n      [(is-prime?\
    \ (string-length (first lst)))\n       (cons (first lst) (iter (rest lst)))]\n\
    \      [else (iter (rest lst))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (divisors n)\n\
    \      (for/list ([i (in-range 1 (+ 1 (quotient n 2)))])\n        (if (zero? (modulo\
    \ n i)) i)))\n    (null? (divisors n)))\n  (define (word-lengths sentence)\n \
    \   (for/list ([word (in-list (string-split sentence))])\n      (string-length\
    \ word)))\n  (define (prime-lengths sentence)\n    (for/list ([length (in-list\
    \ (word-lengths sentence))])\n      (if (is-prime? length) length)))\n  (define\
    \ (prime-words sentence)\n    (for/list ([word (in-list (string-split sentence))])\n\
    \      (if (member (string-length word) (prime-lengths sentence))\n          word)))\n\
    \  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n      \
    \  [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n   \
    \ (is-prime-helper n (- n 1)))\n  (define (get-prime-words sentence)\n    (define\
    \ (get-prime-words-helper sentence acc)\n      (cond\n        [(empty? sentence)\
    \ acc]\n        [(is-prime? (string-length (first sentence)))\n         (get-prime-words-helper\
    \ (rest sentence) (append acc (list (first sentence))))]\n        [else (get-prime-words-helper\
    \ (rest sentence) acc)]))\n    (get-prime-words-helper (string-split sentence\
    \ #\\space) '()))\n  (string-join (get-prime-words sentence) #\\space))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n      (cond\n\
    \        [(<= divisor 1) #t]\n        [(= (modulo n divisor) 0) #f]\n        [else\
    \ (is-prime-helper n (- divisor 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (word-lengths sentence)\n    (map (lambda (word) (string-length word)) (string-split\
    \ sentence #\\space)))\n  (define (prime-length-words sentence)\n    (filter (lambda\
    \ (word) (is-prime? (string-length word))) (string-split sentence #\\space)))\n\
    \  (string-join (prime-length-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (helper i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (helper (- i 1))]))\n    (helper (- n 1)))\n  (define\
    \ (helper-2 sentence)\n    (cond\n      [(null? sentence) '()]\n      [(is-prime?\
    \ (string-length (car sentence)))\n       (cons (car sentence) (helper-2 (cdr\
    \ sentence)))]\n      [else (helper-2 (cdr sentence))]))\n  (string-join (helper-2\
    \ (string-split sentence \" \")) \" \"))", "  (define (is-prime? n)\n    (define\
    \ (prime? n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0)\
    \ #f]\n        [else (prime? n (- i 1))]))\n    (prime? n (- n 1)))\n  (define\
    \ (get-words sentence)\n    (define (get-words-iter sentence words)\n      (cond\n\
    \        [(empty? sentence) (reverse words)]\n        [(char=? (first sentence)\
    \ #\\space) (get-words-iter (rest sentence) words)]\n        [else (get-words-iter\
    \ (rest sentence) (cons (string (first sentence)) words))]))\n    (get-words-iter\
    \ sentence '()))\n  (define (get-prime-words words)\n    (define (get-prime-words-iter\
    \ words prime-words)\n      (cond\n        [(empty? words) (reverse prime-words)]\n\
    \        [(is-prime? (string-length (first words))) (get-prime-words-iter (rest\
    \ words) (cons (first words) prime-words))]\n        [else (get-prime-words-iter\
    \ (rest words) prime-words)]))\n    (get-prime-words-iter words '()))\n  (define\
    \ (join-words words)\n    (define (join-words-iter words sentence)\n      (cond\n\
    \        [(empty? words) sentence]\n        [else (join-words-iter (rest words)\
    \ (string-append sentence (string #\\space) (first words)))]))\n    (join-words-iter\
    \ words \"\"))\n  (join-words (get-prime-words (get-words sentence))))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper n d)\n      (cond\n    \
    \    [(= d 1) #t]\n        [(= (modulo n d) 0) #f]\n        [else (is-prime-helper\
    \ n (- d 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond\n      [(empty? sentence) '()]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words-in-sentence (rest\
    \ sentence)))]\n      [else (prime-words-in-sentence (rest sentence))]))\n  (string-join\
    \ (prime-words-in-sentence (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n divisor)\n      (cond\n      \
    \  [(= divisor 1) #t]\n        [(= (modulo n divisor) 0) #f]\n        [else (is-prime-helper\
    \ n (- divisor 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n\
    \    (iter (- n 1)))\n  (define (iter sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (iter (rest sentence)))]\n      [else (iter (rest sentence))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (get-prime-words sentence)\n    (define (iter words)\n      (cond\n\
    \        [(empty? words) empty]\n        [(is-prime? (string-length (first words)))\n\
    \         (cons (first words) (iter (rest words)))]\n        [else (iter (rest\
    \ words))]))\n    (iter (string-split sentence #\\space)))\n  (string-join (get-prime-words\
    \ sentence) #\\space))\n", "  (define (prime? n)\n    (define (prime-helper n\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (prime-helper n (+ i 1))]))\n    (prime-helper n 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word)) (string-split sentence\
    \ #\\space)))\n  (define (prime-length-words sentence)\n    (filter prime? (word-lengths\
    \ sentence)))\n  (define (prime-length-words-in-sentence sentence)\n    (map (lambda\
    \ (word) (string-ref sentence word)) (prime-length-words sentence)))\n  (string-join\
    \ (prime-length-words-in-sentence sentence) #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (helper n i)\n      (cond\n        [(= i n) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (helper n (+ i 1))]))\n    (helper n 2))\n\
    \  (define (helper sentence)\n    (cond\n      [(empty? sentence) empty]\n   \
    \   [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (helper (rest sentence)))]\n      [else (helper (rest sentence))]))\n  (string-join\
    \ (helper (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n d)\n      (cond ((= d 1) #t)\n          \
    \  ((= (modulo n d) 0) #f)\n            (else (is-prime-helper n (- d 1)))))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (word-lengths sentence)\n    (map\
    \ (lambda (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (prime-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (map (lambda (word) (string-append word\
    \ \" \"))\n         (filter (lambda (word) (member (string-length word) (prime-lengths\
    \ sentence)))\n                 (string-split sentence #\\space))))\n  (string-trim\
    \ (apply string-append (prime-words sentence))))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-iter? n d)\n      (cond\n        [(= d 1) #t]\n       \
    \ [(= (modulo n d) 0) #f]\n        [else (is-prime-iter? n (- d 1))]))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n    (cond\n  \
    \    [(empty? sentence) (string-join (reverse acc) \" \")]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-iter (rest sentence)\
    \ (cons (first sentence) acc))]\n      [else (words-in-sentence-iter (rest sentence)\
    \ acc)]))\n  (words-in-sentence-iter (string-split sentence) '()))\n", "  (define\
    \ (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even?\
    \ n) #f]\n      [else\n       (define (is-divisible? n d)\n         (if (= d 1)\n\
    \             #t\n             (if (zero? (modulo n d))\n                 #f\n\
    \                 (is-divisible? n (- d 1)))))\n       (is-divisible? n (- n 1))]))\n\
    \  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (iter lst)\n    (cond\n      [(null?\
    \ lst) \"\"]\n      [(prime? (string-length (car lst)))\n       (string-append\
    \ (car lst) \" \" (iter (cdr lst)))]\n      [else (iter (cdr lst))]))\n  (string-trim\
    \ (iter (string-split sentence #\\space))))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-iter? n i)\n      (cond\n        [(= i 1) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (words-in-sentence-iter (rest sentence) (string-append result (first sentence)\
    \ \" \"))]\n      [else (words-in-sentence-iter (rest sentence) result)]))\n \
    \ (substring (words-in-sentence-iter (string-split sentence) \"\") 0 (- (string-length\
    \ (words-in-sentence-iter (string-split sentence) \"\")) 1)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ words result)\n    (cond ((null? words) result)\n          ((is-prime? (string-length\
    \ (car words)))\n           (iter (cdr words) (string-append result \" \" (car\
    \ words))))\n          (else (iter (cdr words) result))))\n  (string-trim (iter\
    \ (string-split sentence #\\space) \"\")))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n\
    \      [(null? words) '()]\n      [(is-prime? (string-length (car words)))\n \
    \      (cons (car words) (iter (cdr words)))]\n      [else (iter (cdr words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(> i (/ n 2)) #t]\n\
    \        [(zero? (modulo n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (define (iter sentence)\n    (cond\n      [(empty? sentence) '()]\n \
    \     [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (iter (rest sentence)))]\n      [else (iter (rest sentence))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper? n i)\n      (if (= i 1)\n          #t\n       \
    \   (if (= (modulo n i) 0)\n              #f\n              (is-prime-helper?\
    \ n (- i 1)))))\n    (is-prime-helper? n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (define (words-in-sentence-helper-helper sentence result)\n \
    \     (if (empty? sentence)\n          result\n          (if (is-prime? (string-length\
    \ (first sentence)))\n              (words-in-sentence-helper-helper (rest sentence)\
    \ (append result (list (first sentence))))\n              (words-in-sentence-helper-helper\
    \ (rest sentence) result))))\n    (words-in-sentence-helper-helper sentence '()))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (iter (+ i\
    \ 1))]))\n    (iter 2))\n  (define (iter words acc)\n    (cond\n      [(empty?\
    \ words) (string-join (reverse acc) \" \")]\n      [(is-prime? (string-length\
    \ (first words)))\n       (iter (rest words) (cons (first words) acc))]\n    \
    \  [else (iter (rest words) acc)]))\n  (iter (string-split sentence #\\space)\
    \ '()))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n    \
    \    [(> i (sqrt n)) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter\
    \ (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty?\
    \ words) '()]\n      [(is-prime? (string-length (first words)))\n       (cons\
    \ (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n      \
    \  [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n   \
    \ (is-prime-helper n (- n 1)))\n  (define (get-words sentence)\n    (string-split\
    \ sentence #\\space))\n  (define (get-prime-words words)\n    (filter (lambda\
    \ (word) (is-prime? (string-length word))) words))\n  (define (join-words words)\n\
    \    (string-join words #\\space))\n  (join-words (get-prime-words (get-words\
    \ sentence))))\n", "  (define (is-prime? n)\n    (define (is-divisible? n d)\n\
    \      (= (remainder n d) 0))\n    (define (smallest-divisor n)\n      (define\
    \ (find-divisor n test-divisor)\n        (cond ((> (square test-divisor) n) n)\n\
    \              ((is-divisible? n test-divisor) test-divisor)\n              (else\
    \ (find-divisor n (+ test-divisor 1)))))\n      (find-divisor n 2))\n    (= n\
    \ (smallest-divisor n)))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (lambda (word) (is-prime? (string-length word)))\n            (string-split\
    \ sentence #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper? n i)\n      (if (= i 1)\n     \
    \     #t\n          (if (zero? (modulo n i))\n              #f\n             \
    \ (is-prime-helper? n (- i 1)))))\n    (is-prime-helper? n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (if (empty? sentence)\n        '()\n\
    \        (if (is-prime? (string-length (first sentence)))\n            (cons (first\
    \ sentence) (words-in-sentence-helper (rest sentence)))\n            (words-in-sentence-helper\
    \ (rest sentence)))))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (cond [(= n 1)\
    \ #f]\n          [(= n 2) #t]\n          [(= (remainder n 2) 0) #f]\n        \
    \  [else\n           (define (iter i)\n             (cond [(> i (sqrt n)) #t]\n\
    \                   [(= (remainder n i) 0) #f]\n                   [else (iter\
    \ (+ i 1))]))\n           (iter 3)]))\n  (define (iter words result)\n    (cond\
    \ [(empty? words) result]\n          [(is-prime? (string-length (first words)))\n\
    \           (iter (rest words) (string-append result \" \" (first words)))]\n\
    \          [else (iter (rest words) result)]))\n  (iter (string-split sentence)\
    \ \"\"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n     \
    \    (cond\n           [(= i n) #t]\n           [(zero? (modulo n i)) #f]\n  \
    \         [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (get-words sentence)\n    (string-split sentence #\\space))\n  (define (get-prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (get-prime-words\
    \ sentence)\n    (filter (lambda (word)\n              (is-prime? (string-length\
    \ word)))\n            (get-words sentence)))\n  (string-join (get-prime-words\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n     \
    \ (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (iter words)\n    (cond\n\
    \      [(empty? words) '()]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (helper i)\n      (cond\n        [(= i 1) #t]\n \
    \       [(= (modulo n i) 0) #f]\n        [else (helper (- i 1))]))\n    (helper\
    \ (- n 1)))\n  (define (helper words)\n    (cond\n      [(empty? words) empty]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (helper (rest words)))]\n      [else (helper (rest words))]))\n  (string-join\
    \ (helper (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(> i (sqrt n)) #t]\n       \
    \ [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define\
    \ (iter lst)\n    (cond\n      [(empty? lst) '()]\n      [(is-prime? (string-length\
    \ (first lst)))\n       (cons (first lst) (iter (rest lst)))]\n      [else (iter\
    \ (rest lst))]))\n  (string-join (iter (string-split sentence #\\space)) \" \"\
    ))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(>\
    \ i (/ n 2)) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(zero? (modulo\
    \ n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (prime-words\
    \ sentence)\n    (define (iter words)\n      (cond\n        [(empty? words) empty]\n\
    \        [(is-prime? (string-length (first words)))\n         (cons (first words)\
    \ (iter (rest words)))]\n        [else (iter (rest words))]))\n    (iter (string-split\
    \ sentence #\\space)))\n  (string-join (prime-words sentence) #\\space))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (is-prime-word? word)\n    (is-prime? (string-length word)))\n\
    \  (define (prime-words-in-sentence sentence)\n    (filter is-prime-word? (string-split\
    \ sentence #\\space)))\n  (string-join (prime-words-in-sentence sentence) #\\\
    space))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (for/and ([i (in-range 3\
    \ n 2)])\n         (not (zero? (modulo n i))))]))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (for/list ([i (in-range (length sentence))]\n               #:when\
    \ (member (string-length (list-ref (string-split sentence #\\space) i))\n    \
    \                          (prime-word-lengths sentence)))\n      (list-ref (string-split\
    \ sentence #\\space) i)))\n  (string-join (prime-words sentence) \" \"))\n```\n\
    \n## Problem 3\n\n```racket\n#lang racket\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n divisor)\n      (cond\n        [(= divisor 1) #t]\n     \
    \   [(= (modulo n divisor) 0) #f]\n        [else (is-prime-helper n (- divisor\
    \ 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (prime-words sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words (rest sentence)))]\n\
    \      [else (prime-words (rest sentence))]))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(is-prime? (string-length (car sentence)))\n     \
    \  (words-in-sentence-helper (cdr sentence) (string-append result (car sentence)\
    \ \" \"))]\n      [else (words-in-sentence-helper (cdr sentence) result)]))\n\
    \  (substring (words-in-sentence-helper (string-split sentence) \"\") 0 (- (string-length\
    \ (words-in-sentence-helper (string-split sentence) \"\")) 1)))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond\n        [(= i\
    \ 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (-\
    \ i 1))]))\n    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter\
    \ sentence acc)\n    (cond\n      [(empty? sentence) (string-join (reverse acc)\
    \ \" \")]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-iter\
    \ (rest sentence) (cons (first sentence) acc))]\n      [else (words-in-sentence-iter\
    \ (rest sentence) acc)]))\n  (words-in-sentence-iter (string-split sentence #\\\
    space) '()))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (helper\
    \ (- i 1))]))\n    (helper (- n 1)))\n  (define (helper lst)\n    (cond\n    \
    \  [(null? lst) '()]\n      [(is-prime? (string-length (car lst)))\n       (cons\
    \ (car lst) (helper (cdr lst)))]\n      [else (helper (cdr lst))]))\n  (string-join\
    \ (helper (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n\
    \      [else\n       (define (is-divisible? n divisor)\n         (cond\n     \
    \      [(= divisor 1) #f]\n           [(= (modulo n divisor) 0) #t]\n        \
    \   [else (is-divisible? n (- divisor 1))]))\n       (is-divisible? n (- n 1))]))\n\
    \  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence \" \")) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null?\
    \ words) \"\")\n          ((is-prime? (string-length (car words)))\n         \
    \  (string-append (car words) \" \" (iter (cdr words))))\n          (else (iter\
    \ (cdr words)))))\n  (string-trim (iter (string-split sentence #\\space))))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (define (prime-words-in-sentence-helper sentence acc)\n     \
    \ (cond\n        [(empty? sentence) (reverse acc)]\n        [(is-prime? (string-length\
    \ (first sentence)))\n         (prime-words-in-sentence-helper (rest sentence)\
    \ (cons (first sentence) acc))]\n        [else (prime-words-in-sentence-helper\
    \ (rest sentence) acc)]))\n    (prime-words-in-sentence-helper (string-split sentence\
    \ #\\space) '()))\n  (string-join (prime-words-in-sentence sentence) #\\space))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (floor (/ n 2))))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n```\n\n### [Problem #2](https://www.codewars.com/kata/5a9a70e1fd56cbaf7600002a)\n\
    \n```racket\n#lang racket\n", "  (define (is-prime? n)\n    (define (helper i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (helper (- i 1))]))\n    (helper (- n 1)))\n  (define (helper words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (helper (rest words)))]\n      [else (helper (rest\
    \ words))]))\n  (string-join (helper (string-split sentence #\\space)) \" \"))\n",
  "  (define (is-prime? n)\n    (define (helper i)\n      (cond\n        [(= i 1)\
    \ #t]\n        [(= (modulo n i) 0) #f]\n        [else (helper (- i 1))]))\n  \
    \  (helper (- n 1)))\n  (define (helper sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (helper (rest sentence)))]\n      [else (helper (rest sentence))]))\n\
    \  (string-join (helper (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even?\
    \ n) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(=\
    \ i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+ i\
    \ 1))]))\n       (iter 3)]))\n  (define (iter words)\n    (cond\n      [(empty?\
    \ words) \"\"]\n      [(is-prime? (string-length (first words)))\n       (string-append\
    \ (first words) \" \" (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (iter (string-split sentence #\\space)))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (map (lambda (i) (list-ref (string-split\
    \ sentence #\\space) i))\n         (filter is-prime? (word-lengths sentence))))\n\
    \  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (word-is-prime? word)\n    (is-prime? (string-length word)))\n  (define (word-is-not-prime?\
    \ word)\n    (not (word-is-prime? word)))\n  (define (filter-words words)\n  \
    \  (filter word-is-prime? words))\n  (define (words-to-string words)\n    (string-join\
    \ words \" \"))\n  (define (sentence-to-words sentence)\n    (string-split sentence\
    \ #\\space))\n  (words-to-string (filter-words (sentence-to-words sentence))))\n",
  "  (define (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond\n      \
    \  [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter?\
    \ n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-iter (rest sentence)\
    \ (string-append result (first sentence) \" \"))]\n      [else (words-in-sentence-iter\
    \ (rest sentence) result)]))\n  (string-trim (words-in-sentence-iter (string-split\
    \ sentence #\\space) \"\")))\n```\n\n## Problem 3\n\n```racket\n#lang racket\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) '()]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (cond [(= n 1) #f]\n          [(= n 2)\
    \ #t]\n          [(= (remainder n 2) 0) #f]\n          [else\n           (define\
    \ (iter i)\n             (cond [(> i (sqrt n)) #t]\n                   [(= (remainder\
    \ n i) 0) #f]\n                   [else (iter (+ i 1))]))\n           (iter 3)]))\n\
    \  (define (word-lengths sentence)\n    (map string-length (string-split sentence\
    \ #\\space)))\n  (define (prime-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (filter (lambda (word)\n\
    \              (member (string-length word) (prime-lengths sentence)))\n     \
    \       (string-split sentence #\\space)))\n  (string-join prime-words #\\space))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-helper (rest sentence)\
    \ (string-append result (first sentence) \" \"))]\n      [else (words-in-sentence-helper\
    \ (rest sentence) result)]))\n  (substring (words-in-sentence-helper (string-split\
    \ sentence) \"\") 0 (- (string-length (words-in-sentence-helper (string-split\
    \ sentence) \"\")) 1)))\n", "  (define (is-prime? n)\n    (define (iter i)\n \
    \     (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (word-is-prime? word)\n  \
    \  (is-prime? (string-length word)))\n  (define (iter words)\n    (cond\n    \
    \  [(empty? words) \"\"]\n      [(word-is-prime? (first words))\n       (string-append\
    \ (first words) \" \" (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (iter (string-split sentence #\\space)))\n", "  (define (is-prime? n)\n   \
    \ (define (helper i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n\
    \ i) 0) #f]\n        [else (helper (- i 1))]))\n    (helper (- n 1)))\n  (define\
    \ (helper2 word)\n    (cond\n      [(is-prime? (string-length word)) word]\n \
    \     [else \"\"]))\n  (string-join (map helper2 (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (divisors n)\n      (for/list\
    \ ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n\
    \    (null? (divisors n)))\n  (define (word-lengths sentence)\n    (for/list ([word\
    \ (in-list (string-split sentence))])\n      (string-length word)))\n  (define\
    \ (prime-word-lengths sentence)\n    (for/list ([word-length (in-list (word-lengths\
    \ sentence))])\n      (if (is-prime? word-length) word-length)))\n  (define (prime-words\
    \ sentence)\n    (for/list ([word (in-list (string-split sentence))]\n       \
    \        [word-length (in-list (word-lengths sentence))])\n      (if (equal? (string-length\
    \ word) word-length) word)))\n  (string-join (prime-words sentence) \" \"))\n",
  "  (define (is-prime? n)\n    (define (is-prime-iter n i)\n      (cond\n       \
    \ [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter\
    \ n (- i 1))]))\n    (is-prime-iter n (quotient n 2)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (define (prime-words-in-sentence-iter sentence acc)\n      (cond\n\
    \        [(empty? sentence) (reverse acc)]\n        [(is-prime? (string-length\
    \ (first sentence)))\n         (prime-words-in-sentence-iter (rest sentence) (cons\
    \ (first sentence) acc))]\n        [else (prime-words-in-sentence-iter (rest sentence)\
    \ acc)]))\n    (string-join (prime-words-in-sentence-iter (string-split sentence\
    \ #\\space) '()) #\\space))\n  (prime-words-in-sentence sentence))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n        [(= i\
    \ 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (-\
    \ i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-helper (rest sentence)\
    \ (string-append result (first sentence) \" \"))]\n      [else (words-in-sentence-helper\
    \ (rest sentence) result)]))\n  (substring (words-in-sentence-helper (string-split\
    \ sentence #\\space) \"\") 0 (- (string-length (words-in-sentence-helper (string-split\
    \ sentence #\\space) \"\")) 1)))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(> i (/ n 2)) #t]\n        [(zero? (modulo n i)) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter sentence)\n \
    \   (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (cons (first sentence) (iter (rest sentence)))]\n      [else\
    \ (iter (rest sentence))]))\n  (string-join (iter (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n    \
    \  (= (remainder a b) 0))\n    (define (iter i)\n      (cond\n        [(= i n)\
    \ #t]\n        [(is-divisible? n i) #f]\n        [else (iter (+ i 1))]))\n   \
    \ (iter 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (word-indexes sentence)\n    (map (lambda (x)\
    \ (if (is-prime? x) x #f)) (word-lengths sentence)))\n  (define (word-indexes-to-words\
    \ sentence)\n    (map (lambda (x) (if (is-prime? x) (list-ref (string-split sentence\
    \ #\\space) x) #f)) (word-indexes sentence)))\n  (string-join (filter (lambda\
    \ (x) (not (equal? x #f))) (word-indexes-to-words sentence)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(=\
    \ (remainder n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n\
    \           [(> i (sqrt n)) #t]\n           [(= (remainder n i) 0) #f]\n     \
    \      [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter words)\n \
    \   (cond\n      [(empty? words) empty]\n      [(is-prime? (string-length (first\
    \ words)))\n       (cons (first words) (iter (rest words)))]\n      [else (iter\
    \ (rest words))]))\n  (string-join (iter (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n     \
    \    (cond\n           [(= i n) #t]\n           [(zero? (modulo n i)) #f]\n  \
    \         [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (filter (lambda (word)\n              (is-prime?\
    \ (string-length word)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (iter (rest sentence) (string-append result (first\
    \ sentence) \" \"))]\n      [else (iter (rest sentence) result)]))\n  (string-trim\
    \ (iter (string-split sentence) \"\")))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(> i (sqrt n)) #t]\n        [(= (modulo n i)\
    \ 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (\u03BB (word) (string-length word)) (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (\u03BB\
    \ (word) (member (string-length word) (prime-word-lengths sentence))) (string-split\
    \ sentence #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-iter n i)\n      (cond\n        [(= i 1)\
    \ #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter n (- i 1))]))\n\
    \    (is-prime-iter n (quotient n 2)))\n  (define (prime-words-in-sentence sentence)\n\
    \    (define (prime-words-in-sentence-iter sentence acc)\n      (cond\n      \
    \  [(empty? sentence) acc]\n        [(is-prime? (string-length (first sentence)))\n\
    \         (prime-words-in-sentence-iter (rest sentence) (append acc (list (first\
    \ sentence))))]\n        [else (prime-words-in-sentence-iter (rest sentence) acc)]))\n\
    \    (prime-words-in-sentence-iter (string-split sentence) '()))\n  (string-join\
    \ (prime-words-in-sentence sentence) \" \"))\n", "  (define (is-prime? n)\n  \
    \  (define (is-divisible? n d)\n      (= (remainder n d) 0))\n    (define (loop\
    \ i)\n      (cond ((> i (sqrt n)) #t)\n            ((is-divisible? n i) #f)\n\
    \            (else (loop (+ i 1)))))\n    (cond ((= n 1) #f)\n          ((= n\
    \ 2) #t)\n          (else (loop 2))))\n  (define (word-lengths sentence)\n   \
    \ (map string-length (string-split sentence #\\space)))\n  (define (filter-prime-lengths\
    \ word-lengths)\n    (filter is-prime? word-lengths))\n  (define (filter-prime-words\
    \ sentence word-lengths)\n    (define (filter-word word)\n      (member (string-length\
    \ word) word-lengths))\n    (filter filter-word (string-split sentence #\\space)))\n\
    \  (define (join-words words)\n    (string-join words #\\space))\n  (join-words\
    \ (filter-prime-words sentence (filter-prime-lengths (word-lengths sentence)))))\n",
  "  (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a\
    \ b) 0))\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(is-divisible?\
    \ n i) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (words-with-prime-lengths sentence)\n \
    \   (map (lambda (word) (string-ref word 0))\n         (filter (lambda (word)\
    \ (is-prime? (string-length word)))\n                 (string-split sentence #\\\
    space))))\n  (string-join (words-with-prime-lengths sentence) #\\space))\n", " \
    \ (string-join\n   (filter\n    (lambda (word)\n      (prime? (string-length word)))\n\
    \    (string-split sentence #\\space))\n   #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(zero?\
    \ (modulo n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define\
    \ (word-lengths sentence)\n    (map string-length (string-split sentence #\\space)))\n\
    \  (define (filter-prime-lengths word-lengths)\n    (filter is-prime? word-lengths))\n\
    \  (define (filter-prime-words sentence word-lengths)\n    (filter (lambda (word)\n\
    \              (member (string-length word) word-lengths))\n            (string-split\
    \ sentence #\\space)))\n  (string-join (filter-prime-words sentence (filter-prime-lengths\
    \ (word-lengths sentence)))\n               #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n \
    \       [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (words-in-sentence-helper (rest sentence) (string-append\
    \ result (first sentence) \" \"))]\n      [else (words-in-sentence-helper (rest\
    \ sentence) result)]))\n  (substring (words-in-sentence-helper (string-split sentence)\
    \ \"\") 0 (- (string-length (words-in-sentence-helper (string-split sentence)\
    \ \"\")) 1)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((< i n) (if (zero? (modulo n i)) #f (iter (+ i 1))))\n            (else #t)))\n\
    \    (iter 2))\n  (define (word-lengths sentence)\n    (for/list ([word (in-list\
    \ (string-split sentence #\\space))])\n      (string-length word)))\n  (define\
    \ (prime-lengths sentence)\n    (for/list ([word-length (in-list (word-lengths\
    \ sentence))])\n      (if (is-prime? word-length) word-length #f)))\n  (define\
    \ (prime-words sentence)\n    (for/list ([word (in-list (string-split sentence\
    \ #\\space))]\n               [word-length (in-list (prime-lengths sentence))])\n\
    \      (if (= (string-length word) word-length) word #f)))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n\
    \  (define (words-in-sentence-iter sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(is-prime? (string-length (first sentence)))\n   \
    \    (words-in-sentence-iter (rest sentence) (string-append result (first sentence)\
    \ \" \"))]\n      [else (words-in-sentence-iter (rest sentence) result)]))\n \
    \ (string-trim (words-in-sentence-iter (string-split sentence #\\space) \"\")))\n",
  "  (define (is-prime? n)\n    (define (helper i)\n      (if (= i n)\n          #t\n\
    \          (if (= (modulo n i) 0)\n              #f\n              (helper (+\
    \ i 1)))))\n    (helper 2))\n  (define (helper lst)\n    (if (null? lst)\n   \
    \     \"\"\n        (if (is-prime? (string-length (car lst)))\n            (string-append\
    \ (car lst) \" \" (helper (cdr lst)))\n            (helper (cdr lst)))))\n  (helper\
    \ (string-split sentence #\\space)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n\
    \      [(empty? words) '()]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even?\
    \ n) #f]\n      [else\n       (define (is-divisible? n divisor)\n         (cond\n\
    \           [(= divisor 1) #f]\n           [(= (modulo n divisor) 0) #t]\n   \
    \        [else (is-divisible? n (- divisor 1))]))\n       (is-divisible? n (-\
    \ n 1))]))\n  (define (prime-words sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (prime-words (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (if (= i n)\n          #t\n\
    \          (if (= (remainder n i) 0)\n              #f\n              (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda\
    \ (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-word-indexes sentence)\n    (map (lambda (length)\n\
    \           (define (iter i)\n             (if (= (string-length (string-ref sentence\
    \ i)) length)\n                 i\n                 (iter (+ i 1))))\n       \
    \    (iter 0))\n         (prime-word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (index)\n           (string-ref sentence index))\n\
    \         (prime-word-indexes sentence)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n  \
    \    (cond\n        [(= d 1) #t]\n        [(= (modulo n d) 0) #f]\n        [else\
    \ (is-prime-helper n (- d 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (word-lengths sentence)\n    (map (lambda (word) (string-length word)) (string-split\
    \ sentence #\\space)))\n  (define (prime-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (word) (is-prime? (string-length word))) (string-split sentence #\\space)))\n\
    \  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n\
    \    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n   \
    \   [else\n       (define (is-prime-aux n i)\n         (cond\n           [(= i\
    \ n) #t]\n           [(zero? (modulo n i)) #f]\n           [else (is-prime-aux\
    \ n (+ i 1))]))\n       (is-prime-aux n 3)]))\n  (define (words-in-sentence-aux\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-aux (rest\
    \ sentence)))]\n      [else (words-in-sentence-aux (rest sentence))]))\n  (string-join\
    \ (words-in-sentence-aux (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter words result)\n    (cond\n      [(empty? words) result]\n   \
    \   [(is-prime? (string-length (first words)))\n       (iter (rest words) (string-append\
    \ result (first words) \" \"))]\n      [else (iter (rest words) result)]))\n \
    \ (string-trim (iter (string-split sentence #\\space) \"\")))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (word-is-prime? word)\n    (is-prime? (string-length word)))\n  (define (word-is-not-prime?\
    \ word)\n    (not (word-is-prime? word)))\n  (define (filter-prime-words words)\n\
    \    (filter word-is-prime? words))\n  (define (filter-not-prime-words words)\n\
    \    (filter word-is-not-prime? words))\n  (define (join-words words)\n    (string-join\
    \ words \" \"))\n  (define (split-words sentence)\n    (string-split sentence\
    \ #\\space))\n  (define (filter-prime-words-in-sentence sentence)\n    (join-words\
    \ (filter-prime-words (split-words sentence))))\n  (define (filter-not-prime-words-in-sentence\
    \ sentence)\n    (join-words (filter-not-prime-words (split-words sentence))))\n\
    \  (filter-prime-words-in-sentence sentence))\n", "  (define (is-prime? n)\n \
    \   (define (is-prime-iter? n d)\n      (cond\n        [(= d 1) #t]\n        [(=\
    \ (modulo n d) 0) #f]\n        [else (is-prime-iter? n (- d 1))]))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (words-in-sentence-iter (rest sentence) (string-append result (first sentence)\
    \ \" \"))]\n      [else (words-in-sentence-iter (rest sentence) result)]))\n \
    \ (substring (words-in-sentence-iter (string-split sentence #\\space) \"\") 0\
    \ (- (string-length (words-in-sentence-iter (string-split sentence #\\space) \"\
    \")) 1)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i\
    \ 1)))))\n    (iter (- n 1)))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-word-indexes\
    \ sentence)\n    (map (lambda (length)\n           (define (iter i)\n        \
    \     (cond ((= i (string-length sentence)) #f)\n                   ((= (string-length\
    \ (string-trim (string-take sentence i))) length) i)\n                   (else\
    \ (iter (+ i 1)))))\n           (iter 0))\n         (prime-word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (map (lambda (index)\n           (string-trim\
    \ (string-take sentence index)))\n         (prime-word-indexes sentence)))\n \
    \ (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n \
    \   (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(zero? (modulo\
    \ n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n\
    \    (cond\n      [(empty? words) \"\"]\n      [(is-prime? (string-length (first\
    \ words)))\n       (string-append (first words) \" \" (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-trim (iter (string-split sentence\
    \ #\\space))))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n\
    \      (= (remainder a b) 0))\n    (define (loop i)\n      (cond\n        [(=\
    \ i 1) #t]\n        [(is-divisible? n i) #f]\n        [else (loop (- i 1))]))\n\
    \    (loop (- n 1)))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-lengths sentence)\n   \
    \ (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (lambda (word) (member (string-length word) (prime-lengths sentence)))\n\
    \            (string-split sentence #\\space)))\n  (string-join prime-words #\\\
    space))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) \"\"\
    ]\n      [(is-prime (string-length (first words)))\n       (string-append (first\
    \ words) \" \" (iter (rest words)))]\n      [else (iter (rest words))]))\n  (iter\
    \ (string-split sentence #\\space)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i)\
    \ 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (word-lengths sentence)\n    (map (lambda (word) (string-length word))\n   \
    \      (string-split sentence #\\space)))\n  (define (prime-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (lambda (word) (member (string-length word) (prime-lengths sentence)))\n\
    \            (string-split sentence #\\space)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n  \
    \    (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-helper\
    \ (rest sentence) (string-append result (first sentence) \" \"))]\n      [else\
    \ (words-in-sentence-helper (rest sentence) result)]))\n  (substring (words-in-sentence-helper\
    \ (string-split sentence #\\space) \"\") 0 (- (string-length (words-in-sentence-helper\
    \ (string-split sentence #\\space) \"\")) 1)))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n i)\n      (cond\n        [(= i n) #t]\n      \
    \  [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (+ i 1))]))\n   \
    \ (is-prime-helper n 2))\n  (define (is-prime-word? word)\n    (is-prime? (string-length\
    \ word)))\n  (define (prime-words-in-sentence sentence)\n    (cond\n      [(empty?\
    \ sentence) empty]\n      [(is-prime-word? (first sentence))\n       (cons (first\
    \ sentence) (prime-words-in-sentence (rest sentence)))]\n      [else (prime-words-in-sentence\
    \ (rest sentence))]))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (prime? n i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (prime? n (- i 1))]))\n    (prime? n (- n 1)))\n  (define (prime-words sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words (rest sentence)))]\n\
    \      [else (prime-words (rest sentence))]))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n \
    \       [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n\
    \      [(empty? words) '()]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (word-lengths sentence)\n    (map string-length (string-split sentence\
    \ #\\space)))\n  (define (prime-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (filter (lambda (word)\n\
    \              (member (string-length word) (prime-lengths sentence)))\n     \
    \       (string-split sentence #\\space)))\n  (string-join prime-words #\\space))\n",
  "  (define (is-prime? n)\n    (define (is-prime-iter n i)\n      (cond\n       \
    \ [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter\
    \ n (- i 1))]))\n    (is-prime-iter n (- n 1)))\n  (define (words-in-sentence-iter\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-iter (rest sentence)\
    \ (string-append result (first sentence) \" \"))]\n      [else (words-in-sentence-iter\
    \ (rest sentence) result)]))\n  (substring (words-in-sentence-iter (string-split\
    \ sentence) \"\") 0 (- (string-length (words-in-sentence-iter (string-split sentence)\
    \ \"\")) 1)))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n\
    \      (cond\n        [(= d 1) #t]\n        [(= (modulo n d) 0) #f]\n        [else\
    \ (is-prime-helper n (- d 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence) empty]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n\
    \  (define (words-in-sentence-iter sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(is-prime? (string-length (first sentence)))\n   \
    \    (words-in-sentence-iter (rest sentence) (string-append result (first sentence)\
    \ \" \"))]\n      [else (words-in-sentence-iter (rest sentence) result)]))\n \
    \ (substring (words-in-sentence-iter (string-split sentence) \"\") 0 (- (string-length\
    \ (words-in-sentence-iter (string-split sentence) \"\")) 1)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (if (= i n)\n          #t\n          (if (zero?\
    \ (modulo n i))\n              #f\n              (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (prime-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word) (member (string-length word) (prime-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (loop\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n \
    \       [else (loop (+ i 1))]))\n    (loop 2))\n  (define (loop words acc)\n \
    \   (cond\n      [(empty? words) (string-join (reverse acc) \" \")]\n      [(is-prime?\
    \ (string-length (first words)))\n       (loop (rest words) (cons (first words)\
    \ acc))]\n      [else (loop (rest words) acc)]))\n  (loop (string-split sentence)\
    \ '()))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n\
    \      (cond\n        [(= divisor 1) #t]\n        [(= (modulo n divisor) 0) #f]\n\
    \        [else (is-prime-helper n (- divisor 1))]))\n    (is-prime-helper n (-\
    \ n 1)))\n  (define (words-in-sentence-helper sentence result)\n    (cond\n  \
    \    [(empty? sentence) result]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (words-in-sentence-helper (rest sentence) (string-append result (first\
    \ sentence) \" \"))]\n      [else (words-in-sentence-helper (rest sentence) result)]))\n\
    \  (substring (words-in-sentence-helper (string-split sentence #\\space) \"\"\
    ) 0 -1))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n   \
    \   (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-helper\
    \ (rest sentence) (string-append result (first sentence) \" \"))]\n      [else\
    \ (words-in-sentence-helper (rest sentence) result)]))\n  (string-trim (words-in-sentence-helper\
    \ (string-split sentence #\\space) \"\")))\n```\n\n## Problem 3\n\n```racket\n\
    #lang racket\n", "  (define (is-prime n)\n    (define (is-prime-helper n i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (define (words-in-sentence-helper-helper\
    \ sentence)\n      (cond\n        [(empty? sentence) empty]\n        [(is-prime\
    \ (string-length (first sentence))) (cons (first sentence) (words-in-sentence-helper-helper\
    \ (rest sentence)))]\n        [else (words-in-sentence-helper-helper (rest sentence))]))\n\
    \    (string-join (words-in-sentence-helper-helper (string-split sentence #\\\
    space)) \" \"))\n  (words-in-sentence-helper (string-split sentence #\\space)))\n",
  "  (define (is-prime? n)\n    (define (helper i)\n      (cond\n        [(= i 1)\
    \ #t]\n        [(= (modulo n i) 0) #f]\n        [else (helper (- i 1))]))\n  \
    \  (helper (- n 1)))\n  (define (helper sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (helper (rest sentence)))]\n      [else (helper (rest sentence))]))\n\
    \  (string-join (helper (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (helper i)\n      (cond\n        [(= i 1) #t]\n \
    \       [(= (modulo n i) 0) #f]\n        [else (helper (- i 1))]))\n    (helper\
    \ (- n 1)))\n  (define (helper lst)\n    (cond\n      [(empty? lst) empty]\n \
    \     [(is-prime? (string-length (first lst)))\n       (cons (first lst) (helper\
    \ (rest lst)))]\n      [else (helper (rest lst))]))\n  (string-join (helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (prime? n)\n    (define (prime-helper\
    \ n div)\n      (if (= div 1)\n          #t\n          (if (zero? (modulo n div))\n\
    \              #f\n              (prime-helper n (- div 1)))))\n    (prime-helper\
    \ n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (define (prime-words-in-sentence-helper\
    \ sentence words)\n      (if (null? sentence)\n          words\n          (if\
    \ (prime? (string-length (car sentence)))\n              (prime-words-in-sentence-helper\
    \ (cdr sentence) (cons (car sentence) words))\n              (prime-words-in-sentence-helper\
    \ (cdr sentence) words))))\n    (reverse (prime-words-in-sentence-helper (string-split\
    \ sentence #\\space) '())))\n  (string-join (prime-words-in-sentence sentence)\
    \ #\\space))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n   \
    \   [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (let loop ([i 3])\n\
    \         (cond\n           [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n\
    \           [else (loop (+ i 2))]))]))\n  (define (prime-words sentence)\n   \
    \ (for/list ([w (in-list (string-split sentence #\\space))])\n      (when (is-prime?\
    \ (string-length w)) w)))\n  (string-join (prime-words sentence) #\\space))\n",
  "  (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a\
    \ b) 0))\n    (define (loop i)\n      (cond ((> i (/ n 2)) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (loop (+ i 1)))))\n    (loop 2))\n  (define (word-length\
    \ word)\n    (string-length word))\n  (define (word-lengths sentence)\n    (map\
    \ word-length (string-split sentence #\\space)))\n  (define (prime-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (lambda (word)\n              (is-prime? (word-length word)))\n \
    \           (string-split sentence #\\space)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (define (iter sentence result)\n    (cond\n \
    \     [(empty? sentence) result]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (iter (rest sentence) (string-append result (first sentence) \" \"))]\n\
    \      [else (iter (rest sentence) result)]))\n  (define (trim s)\n    (define\
    \ (iter s result)\n      (cond\n        [(empty? s) result]\n        [(char=?\
    \ (first s) #\\space) (iter (rest s) result)]\n        [else (iter (rest s) (string-append\
    \ result (string (first s))))]))\n    (iter s \"\"))\n  (trim (iter (string-split\
    \ sentence #\\space) \"\")))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (if (= i 1)\n          #t\n          (if (= (modulo n i) 0)\n  \
    \            #f\n              (is-prime-iter? n (- i 1)))))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n    (if (empty?\
    \ sentence)\n        acc\n        (let ([word (first sentence)])\n          (if\
    \ (is-prime? (string-length word))\n              (words-in-sentence-iter (rest\
    \ sentence) (string-append acc \" \" word))\n              (words-in-sentence-iter\
    \ (rest sentence) acc)))))\n  (words-in-sentence-iter (string-split sentence)\
    \ \"\"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n   \
    \   (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-helper\
    \ (rest sentence) (string-append result (first sentence) \" \"))]\n      [else\
    \ (words-in-sentence-helper (rest sentence) result)]))\n  (substring (words-in-sentence-helper\
    \ (string-split sentence) \"\") 0 (- (string-length (words-in-sentence-helper\
    \ (string-split sentence) \"\")) 1)))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-iter? n d)\n      (cond\n        [(= d 1) #t]\n        [(= (modulo\
    \ n d) 0) #f]\n        [else (is-prime-iter? n (- d 1))]))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (define (prime-words-in-sentence-iter\
    \ sentence acc)\n      (cond\n        [(empty? sentence) (reverse acc)]\n    \
    \    [(is-prime? (string-length (first sentence)))\n         (prime-words-in-sentence-iter\
    \ (rest sentence) (cons (first sentence) acc))]\n        [else (prime-words-in-sentence-iter\
    \ (rest sentence) acc)]))\n    (prime-words-in-sentence-iter (string-split sentence\
    \ #\\space) '()))\n  (string-join (prime-words-in-sentence sentence) #\\space))\n",
  "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n  \
    \    [(= n 3) #t]\n      [(= n 4) #f]\n      [(= n 5) #t]\n      [(= n 6) #f]\n\
    \      [(= n 7) #t]\n      [(= n 8) #f]\n      [(= n 9) #f]\n      [(= n 10) #f]\n\
    \      [(= n 11) #t]\n      [(= n 12) #f]\n      [(= n 13) #t]\n      [(= n 14)\
    \ #f]\n      [(= n 15) #f]\n      [(= n 16) #f]\n      [(= n 17) #t]\n      [(=\
    \ n 18) #f]\n      [(= n 19) #t]\n      [(= n 20) #f]\n      [(= n 21) #f]\n \
    \     [(= n 22) #f]\n      [(= n 23) #t]\n      [(= n 24) #f]\n      [(= n 25)\
    \ #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(=\
    \ n 29) #t]\n      [(= n 30) #f]\n      [(= n 31) #t]\n      [(= n 32) #f]\n \
    \     [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36)\
    \ #f]\n      [(= n 37) #t]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(=\
    \ n 40) #f]\n      [(= n 41) #t]\n      [(= n 42) #f]\n      [(= n 43) #t]\n \
    \     [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47)\
    \ #t]\n      [(= n 48) #f]\n      [(= n 49) #f]\n      [(= n 50)", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (word-lengths sentence)\n    (map (lambda (word) (string-length word))\n\
    \         (string-split sentence #\\space)))\n  (define (word-at-index sentence\
    \ i)\n    (list-ref (string-split sentence #\\space) i))\n  (define (word-lengths-to-words\
    \ sentence)\n    (define (iter i)\n      (cond\n        [(= i (string-length sentence))\
    \ '()]\n        [(is-prime? (word-length (word-at-index sentence i)))\n      \
    \   (cons (word-at-index sentence i) (iter (+ i 1)))]\n        [else (iter (+\
    \ i 1))]))\n    (iter 0))\n  (string-join (word-lengths-to-words sentence) #\\\
    space))\n", "  (define (is-prime? n)\n    (define (is-prime-iter? n i)\n     \
    \ (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-iter? n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter\
    \ sentence acc)\n    (cond\n      [(empty? sentence) (string-join (reverse acc)\
    \ \" \")]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-iter\
    \ (rest sentence) (cons (first sentence) acc))]\n      [else (words-in-sentence-iter\
    \ (rest sentence) acc)]))\n  (words-in-sentence-iter (string-split sentence #\\\
    space) '()))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (-\
    \ i 1))]))\n    (iter (- n 1)))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-words sentence)\n    (filter\
    \ is-prime? (word-lengths sentence)))\n  (define (prime-words-in-sentence sentence)\n\
    \    (map (lambda (x) (list-ref (string-split sentence #\\space) x))\n       \
    \  (prime-words sentence)))\n  (string-join (prime-words-in-sentence sentence)\
    \ \" \"))\n", "  (define (is-prime n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n     \
    \    (cond\n           [(> i (/ n 2)) #t]\n           [(= (modulo n i) 0) #f]\n\
    \           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter words)\n\
    \    (cond\n      [(empty? words) '()]\n      [(is-prime (string-length (first\
    \ words)))\n       (cons (first words) (iter (rest words)))]\n      [else (iter\
    \ (rest words))]))\n  (string-join (iter (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n\
    \      (cond\n        [(= divisor 1) #t]\n        [(= (modulo n divisor) 0) #f]\n\
    \        [else (is-prime-helper n (- divisor 1))]))\n    (is-prime-helper n (-\
    \ n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty?\
    \ sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n    \
    \   (cons (first sentence) (words-in-sentence-helper (rest sentence)))]\n    \
    \  [else (words-in-sentence-helper (rest sentence))]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n```\n\n## Problem 3\n\n```racket\n\
    #lang racket\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (-\
    \ i 1))]))\n    (iter (- n 1)))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (word-at-index sentence i)\n \
    \   (list-ref (string-split sentence #\\space) i))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-word-at-index\
    \ sentence i)\n    (word-at-index sentence i))\n  (define (prime-words sentence)\n\
    \    (map (lambda (i) (prime-word-at-index sentence i))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
