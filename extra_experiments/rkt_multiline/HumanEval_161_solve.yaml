name: HumanEval_161_solve
language: rkt
prompt: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf\
  \ the string contains no letters, reverse the string.\nThe function should return\
  \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
  ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
  \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
  \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"\
  #aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
  \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\"\
  )\n))\n\n(test-humaneval)"
completions: ["  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n  \
    \                  (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\n\
    \       (lambda (c)\n         (if (char-alphabetic? c)\n             (if (char-lower-case?\
    \ c)\n                 (char-upcase c)\n                 (char-downcase c))\n\
    \             c))\n       s)\n      (string-reverse s)))\n", "  (if (string-contains-char?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x) (char-upcase\
    \ x) (char-downcase x))) s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (first s)) (string-append (char-upcase (first\
    \ s)) (solve (rest s)))]\n    [(char-numeric? (first s)) (string-append (first\
    \ s) (solve (rest s)))]\n    [else (string-append (char-downcase (first s)) (solve\
    \ (rest s)))]))\n", "  (if (string-contains? s (regexp \"[a-zA-Z]\"))\n      (string-join\
    \ (reverse (map (lambda (x)\n                                   (if (char-alphabetic?\
    \ x)\n                                       (char-upcase x)\n               \
    \                        (char-downcase x)))\n                               \
    \  (string->list s)))\n                   \"\")\n      (string-join (reverse (string->list\
    \ s)) \"\")))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string-append (string-downcase (string-ref\
    \ s 0)) \"\")\n      (solve (substring s 1)))]\n    [(char-numeric? (string-ref\
    \ s 0))\n     (string-append\n      (string-append (string-ref s 0) \"\")\n  \
    \    (solve (substring s 1)))]\n    [else\n     (string-append\n      (string-append\
    \ (string-upcase (string-ref s 0)) \"\")\n      (solve (substring s 1)))]))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (x) (if (char-alphabetic? x) (char-upcase x) (char-downcase x))) s)\n\
    \      (string-reverse s)))\n", "  (if (string-contains? s (regexp \"[a-zA-Z]\"\
    ))\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic? c)\n\
    \             (char-upcase c)\n             (char-downcase c)))\n       s)\n \
    \     (string-reverse s)))\n", "  (string-join\n   (reverse\n    (map\n     (lambda\
    \ (c)\n       (if (char-alphabetic? c)\n           (char-upcase c)\n         \
    \  (char-downcase c)))\n     (string->list s)))))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (x)\n         (if (char-alphabetic?\
    \ x)\n             (char-upcase x)\n             (char-downcase x)))\n       s)\n\
    \      (string-reverse s)))\n", "  (cond\n    [(string-contains? s #\\a)\n   \
    \  (string-map\n      (lambda (c)\n        (if (char-alphabetic? c)\n        \
    \    (char-downcase c)\n            (char-upcase c)))\n      s)]\n    [else (string-reverse\
    \ s)]))\n", "  (if (string-contains-letter? s)\n      (string-reverse-case s)\n\
    \      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (first s))\n     (string-append\n      (if (char-lower-case? (first s))\n  \
    \        (char-upcase (first s))\n          (char-downcase (first s)))\n     \
    \ (solve (rest s)))]\n    [else\n     (string-append (first s) (solve (rest s)))]))\n",
  "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n           \
    \         (if (char-alphabetic? c)\n                        (char-upcase c)\n\
    \                        (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n \
    \                   (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (define (is-letter? c)\n    (and (char-alphabetic?\
    \ c) (not (char-numeric? c))))\n  (define (reverse-case c)\n    (if (char-lower-case?\
    \ c)\n        (char-upcase c)\n        (char-downcase c)))\n  (define (reverse-case-string\
    \ s)\n    (string-map reverse-case s))\n  (define (reverse-string s)\n    (string-reverse\
    \ s))\n  (if (string-contains s is-letter?)\n      (reverse-case-string s)\n \
    \     (reverse-string s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\n\
    \       (lambda (c)\n         (if (char-alphabetic? c)\n             (char-upcase\
    \ c)\n             (char-downcase c)))\n       s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c)\n                                  (char-downcase c)\n                  \
    \                (char-upcase c))) s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x)\n          \
    \                        (char-upcase x)\n                                  (char-downcase\
    \ x))) s)\n      (reverse s)))\n```\n\n```racket\n#lang racket\n", "  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse s)))\n", " \
    \ (if (string-contains-ci? s #\\a)\n      (string-map\n       (lambda (c)\n  \
    \       (if (char-alphabetic? c)\n             (if (char-lower-case? c)\n    \
    \             (char-upcase c)\n                 (char-downcase c))\n         \
    \    c))\n       s)\n      (string-reverse s)))\n", "  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (char-downcase x)\n                        (char-upcase\
    \ x)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-pred\
    \ s char-alphabetic?)\n      (string-map (\u03BB (c) (if (char-alphabetic? c)\n\
    \                             (char-downcase c)\n                            \
    \ (char-upcase c)))\n                 s)\n      (string-reverse s)))\n", "  (define\
    \ (is-letter? c)\n    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define\
    \ (reverse-case c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n  \
    \      (char-downcase c)))\n  (define (reverse-string s)\n    (string-reverse\
    \ s))\n  (define (reverse-case-string s)\n    (string-map reverse-case s))\n \
    \ (define (reverse-case-letters s)\n    (string-map (lambda (c) (if (is-letter?\
    \ c) (reverse-case c) c)) s))\n  (define (has-letters? s)\n    (string-any is-letter?\
    \ s))\n  (cond\n    [(has-letters? s) (reverse-case-letters s)]\n    [else (reverse-string\
    \ s)]))\n```\n\n## Problem 2\n\n```racket\n#lang racket\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric? (string-ref\
    \ s 0))\n     (string-append (string-ref s 0) (solve (substring s 1)))]\n    [else\n\
    \     (string-append (string-downcase (string-ref s 0)) (solve (substring s 1)))]))\n",
  "  (if (string-contains? s #\\a)\n      (string-map\n       (lambda (c)\n      \
    \   (if (char-alphabetic? c)\n             (char-upcase c)\n             (char-downcase\
    \ c)))\n       s)\n      (string-reverse s)))\n", "  (define (is-letter? c)\n\
    \    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define (reverse-case\
    \ c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n        (char-downcase\
    \ c)))\n  (define (reverse-case-string s)\n    (string-map reverse-case s))\n\
    \  (define (reverse-string s)\n    (string-reverse s))\n  (if (string-contains\
    \ s is-letter?)\n      (reverse-case-string s)\n      (reverse-string s)))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n    \
    \ (string-append (string-upcase (string-ref s 0))\n                    (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\
    \ (string-ref s 0)\n                    (solve (substring s 1)))]\n    [else\n\
    \     (string-append (string-downcase (string-ref s 0))\n                    (solve\
    \ (substring s 1)))]))\n", "  (define (is-letter? c)\n    (and (char-alphabetic?\
    \ c) (not (char-numeric? c))))\n  (define (reverse-case c)\n    (if (char-lower-case?\
    \ c)\n        (char-upcase c)\n        (char-downcase c)))\n  (define (reverse-string\
    \ s)\n    (if (empty? s)\n        \"\"\n        (string-append (reverse-string\
    \ (rest s)) (list (first s)))))\n  (define (reverse-string-case s)\n    (if (empty?\
    \ s)\n        \"\"\n        (string-append (reverse-string-case (rest s)) (list\
    \ (reverse-case (first s))))))\n  (define (reverse-string-case-if-letter s)\n\
    \    (if (empty? s)\n        \"\"\n        (string-append (reverse-string-case-if-letter\
    \ (rest s)) (list (if (is-letter? (first s)) (reverse-case (first s)) (first s))))))\n\
    \  (if (string-contains s (regexp \"[a-zA-Z]\"))\n      (reverse-string-case-if-letter\
    \ s)\n      (reverse-string s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (define (rev-case\
    \ c)\n    (if (char-alphabetic? c)\n        (if (char-lower-case? c)\n       \
    \     (char-upcase c)\n            (char-downcase c))\n        c))\n  (define\
    \ (rev-case-string s)\n    (string-map rev-case s))\n  (if (string-any char-alphabetic?\
    \ s)\n      (rev-case-string s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0)\n                  \
    \  (solve (substring s 1)))]\n    [else\n     (string-append (string-downcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]))\n", "  (if\
    \ (string-contains-ci? s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c)\n                                  (if (char-lower-case? c)\n           \
    \                           (char-upcase c)\n                                \
    \      (char-downcase c))\n                                  c)) s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-upcase (string-ref s 0)) (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]\n    [else (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (first s))\n     (string-append (string-downcase (string (first s)))\n     \
    \               (solve (rest s)))]\n    [(char-numeric? (first s))\n     (string-append\
    \ (string (first s))\n                    (solve (rest s)))]\n    [else\n    \
    \ (string-append (string-upcase (string (first s)))\n                    (solve\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-upcase (string-ref s 0)) (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]\n    [else\n     (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1)))]))\n", "  (if (string-contains? s\
    \ #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c) (char-downcase c) (char-upcase c))) s)\n      (string-reverse s)))\n", " \
    \ (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n   \
    \  (string-append (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0) (solve\
    \ (substring s 1)))]\n    [else (string-append (string-downcase (string-ref s\
    \ 0)) (solve (substring s 1)))]))\n", "  (if (string-contains-ci? s #\\a)\n  \
    \    (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n \
    \                       (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (define (is-letter? c)\n    (and (char-alphabetic? c) (not (char-numeric? c))))\n\
    \  (define (reverse-case c)\n    (if (char-lower-case? c)\n        (char-upcase\
    \ c)\n        (char-downcase c)))\n  (define (reverse-string s)\n    (if (empty?\
    \ s)\n        \"\"\n        (string-append (reverse-string (rest s)) (string (first\
    \ s)))))\n  (define (reverse-string-case s)\n    (if (empty? s)\n        \"\"\n\
    \        (string-append (reverse-string-case (rest s)) (string (reverse-case (first\
    \ s))))))\n  (if (string-contains s is-letter?)\n      (reverse-string-case s)\n\
    \      (reverse-string s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c)\n                                  (char-downcase\
    \ c)\n                                  (char-upcase c))) s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (x) (if\
    \ (char-alphabetic? x)\n                                  (char-upcase x)\n  \
    \                                (char-downcase x))) s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(and (char-alphabetic? (string-ref\
    \ s 0))\n          (char-lower-case? (string-ref s 0)))\n     (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))]\n    [(and (char-alphabetic? (string-ref\
    \ s 0))\n          (char-upper-case? (string-ref s 0)))\n     (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1)))]\n    [else (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]))\n", "  (if (string-contains? s #\\a)\n    \
    \  (string-map\n       (lambda (c)\n         (if (char-alphabetic? c)\n      \
    \       (if (char-lower-case? c)\n                 (char-upcase c)\n         \
    \        (char-downcase c))\n             c))\n       s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (x) (if\
    \ (char-alphabetic? x)\n                                  (char-upcase x)\n  \
    \                                (char-downcase x))) s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c)))\n                \
    \  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n  \
    \    (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n \
    \                       (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s \"a-z\")\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n", "  (define (is-letter?\
    \ c)\n    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define (reverse-case\
    \ c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n        (char-downcase\
    \ c)))\n  (define (rev-case-string s)\n    (if (string-empty? s)\n        \"\"\
    \n        (string-append (reverse-case (string-ref s 0))\n                   \
    \    (rev-case-string (substring s 1)))))\n  (if (string-any is-letter? s)\n \
    \     (rev-case-string s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c)\n                                  (char-upcase c)\n                    \
    \              (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (x) (if\
    \ (char-alphabetic? x)\n                                  (char-upcase x)\n  \
    \                                (char-downcase x))) s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (\u03BB (x)\
    \ (if (char-alphabetic? x)\n                             (char-upcase x)\n   \
    \                          (char-downcase x)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\n\
    \       (lambda (c)\n         (if (char-alphabetic? c)\n             (char-upcase\
    \ c)\n             (char-downcase c)))\n       s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-upcase (string-ref s 0)) (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]\n    [else\n     (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1)))]))\n", "  (if (string-contains-ci?\
    \ s #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n```\n\n```racket\n#lang racket\n", "  (if (string-contains-ci? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n", "  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains-ci? s\
    \ #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (if (char-lower-case? c)\n                 (char-upcase c)\n\
    \                 (char-downcase c))\n             c))\n       s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n \
    \                   (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains-letter? s)\n      (string-reverse-case s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) s]\n    [(char-alphabetic? (string-ref s\
    \ 0))\n     (string-append (string-downcase (string-ref s 0))\n              \
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append (string-ref s 0)\n                    (solve (substring s 1)))]\n\
    \    [else\n     (string-append (string-upcase (string-ref s 0))\n           \
    \         (solve (substring s 1)))]))\n", "  (if (string-contains? s #\\a)\n \
    \     (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (char-upcase x)\n                        (char-downcase\
    \ x)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (reverse s)))\n", "  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map (\u03BB (c) (if (char-alphabetic?\
    \ c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse s)))\n", " \
    \ (if (string-contains-ci? s #\\a)\n      (string-map\n       (lambda (c)\n  \
    \       (if (char-alphabetic? c)\n             (char-upcase c)\n             (char-downcase\
    \ c)))\n       s)\n      (string-reverse s)))\n", "  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0))\n                    (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0)\n\
    \                    (solve (substring s 1)))]\n    [else\n     (string-append\
    \ (string-downcase (string-ref s 0))\n                    (solve (substring s\
    \ 1)))]))\n", "  (if (string-contains? s (regexp \"[a-zA-Z]\"))\n      (string-map\n\
    \       (lambda (c)\n         (if (char-alphabetic? c)\n             (char-upcase\
    \ c)\n             (char-downcase c)))\n       s)\n      (string-reverse s)))\n",
  "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n           \
    \         (if (char-alphabetic? c)\n                        (char-upcase c)\n\
    \                        (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) s]\n    [(char-alphabetic? (string-ref s\
    \ 0))\n     (string-append\n      (string-append (string-downcase (substring s\
    \ 0 1))\n                     (substring s 1 (- (string-length s) 1)))\n     \
    \ (string-upcase (substring s (- (string-length s) 1) (string-length s))))]\n\
    \    [else\n     (string-append\n      (string-append (string-upcase (substring\
    \ s 0 1))\n                     (substring s 1 (- (string-length s) 1)))\n   \
    \   (string-downcase (substring s (- (string-length s) 1) (string-length s))))]))\n",
  "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n           \
    \         (if (char-alphabetic? c)\n                        (char-upcase c)\n\
    \                        (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n \
    \                   (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string-upcase (string-ref s 0))\n      (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\n\
    \      (string-ref s 0)\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string-downcase (string-ref s 0))\n      (solve (substring s 1)))]))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-downcase c)\n \
    \                       (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\
    \ (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (x)\n\
    \                    (if (char-alphabetic? x)\n                        (char-upcase\
    \ x)\n                        (char-downcase x)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-contains-letter? s)\n      (reverse-case\
    \ s)\n      (reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains-ci? s\
    \ #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n    \
    \ (string-append (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0) (solve\
    \ (substring s 1)))]\n    [else\n     (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1)))]))\n", "  (if (string-contains? s #\\a)\n   \
    \   (string-map\n       (lambda (c)\n         (if (char-alphabetic? c)\n     \
    \        (if (char-lower-case? c)\n                 (char-upcase c)\n        \
    \         (char-downcase c))\n             c))\n       s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n \
    \                   (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-contains-char? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (string-join (reverse\
    \ (map (lambda (x)\n                               (if (char-alphabetic? x)\n\
    \                                   (if (char-lower-case? x)\n               \
    \                        (char-upcase x)\n                                   \
    \    (char-downcase x))\n                                   x))\n            \
    \                 (string->list s)))))\n", "  (if (string-contains? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map\n       (lambda (c)\n         (if\
    \ (char-alphabetic? c)\n             (if (char-lower-case? c)\n              \
    \   (char-upcase c)\n                 (char-downcase c))\n             c))\n \
    \      s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n \
    \     (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n     \
    \ (string-append\n       (string-append\n        (string-append\n         (string-append\n\
    \          (string-append\n           (string-append\n            (string-append\n\
    \             (string-append\n              (string-append\n               (string-append\n\
    \                (string-append\n                 (string-append\n           \
    \       (string-append\n                   (string-append\n                  \
    \  (string-append\n                     (string-append\n                     \
    \ (string-append\n                       (string-append\n                    \
    \    (string-append\n                         (string-append\n               \
    \           (string-append\n                           (string-append\n      \
    \                      (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains-ci? s\
    \ #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x)\n            \
    \                      (char-upcase x)\n                                  (char-downcase\
    \ x))) s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n \
    \     (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase\
    \ c))) s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n \
    \     (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string-append (string-upcase (string-ref s 0))\n                     (string-downcase\
    \ (substring s 1)))\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string-append (string-downcase (string-ref s 0))\n                   \
    \  (string-upcase (substring s 1)))\n      (solve (substring s 1)))]))\n", " \
    \ (if (string-contains? s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse s)))\n", " \
    \ (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n             \
    \       (if (char-alphabetic? c)\n                        (char-downcase c)\n\
    \                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"\
    ]\n    [(letter? (first s))\n     (string-append\n      (if (char-lower-case?\
    \ (first s))\n          (char-upcase (first s))\n          (char-lower-case (first\
    \ s)))\n      (solve (rest s)))]\n    [else\n     (string-append (first s) (solve\
    \ (rest s)))]))\n", "  (define (is-letter? c)\n    (and (char-alphabetic? c)\n\
    \         (not (char-numeric? c))))\n  (define (reverse-case c)\n    (if (char-lower-case?\
    \ c)\n        (char-upcase c)\n        (char-downcase c)))\n  (define (reverse-case-string\
    \ s)\n    (string-map reverse-case s))\n  (define (reverse-string s)\n    (string-reverse\
    \ s))\n  (define (has-letters? s)\n    (string-any is-letter? s))\n  (cond\n \
    \   [(has-letters? s) (reverse-case-string s)]\n    [else (reverse-string s)]))\n",
  "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n           \
    \         (if (char-alphabetic? c)\n                        (char-upcase c)\n\
    \                        (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n \
    \                   (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n", "  (string-join (reverse (map (lambda (x)\n  \
    \                             (if (char-alphabetic? x)\n                     \
    \              (if (char-lower-case? x)\n                                    \
    \   (char-upcase x)\n                                       (char-downcase x))\n\
    \                                   x))\n                             (string->list\
    \ s)))))\n", "  (if (string-contains? s #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\\
    h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\\
    x #\\y #\\z)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (char-upcase x)\n                        (char-downcase\
    \ x)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n      (if\
    \ (char-lower-case? (first s))\n          (string-upcase (string (first s)))\n\
    \          (string-downcase (string (first s))))\n      (solve (rest s)))]\n \
    \   [else\n     (string-append (string (first s)) (solve (rest s)))]))\n", " \
    \ (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\
    \ (string-upcase (first s)) (solve (rest s)))]\n    [(char-numeric? (first s))\n\
    \     (string-append (first s) (solve (rest s)))]\n    [else\n     (string-append\
    \ (string-downcase (first s)) (solve (rest s)))]))\n", "  (if (string-contains-letter?\
    \ s)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-downcase c)\
    \ (char-upcase c))) s)\n      (string-reverse s)))\n", "  (if (string-contains\
    \ s #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-upcase (string-ref s 0)) (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]\n    [else (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1)))]))\n", "  (if (empty? s)\n      \"\"\n      (if\
    \ (char-alphabetic? (string-ref s 0))\n          (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))\n          (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1))))))\n", "  (if (string-contains? s\
    \ #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n", "  (string-reverse\
    \ (string-map\n                   (lambda (c)\n                     (if (char-alphabetic?\
    \ c)\n                         (char-upcase c)\n                         (char-downcase\
    \ c)))\n                   s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append (string-upcase (string-ref s 0))\n  \
    \                  (solve (substring s 1)))]\n    [(char-numeric? (string-ref\
    \ s 0))\n     (string-append (string-ref s 0)\n                    (solve (substring\
    \ s 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0))\n\
    \                    (solve (substring s 1)))]))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (\u03BB (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-downcase c)\n                        (char-upcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains-ci? s\
    \ #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric? (string-ref\
    \ s 0))\n     (string-append (string-ref s 0) (solve (substring s 1)))]\n    [else\n\
    \     (string-append (string-downcase (string-ref s 0)) (solve (substring s 1)))]))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (x)\n              \
    \      (if (char-alphabetic? x)\n                        (char-downcase x)\n \
    \                       (char-upcase x)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\
    \ (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-ci=? c #\\a)\n                            #\\A\n          \
    \                  #\\a)\n                        c))\n                  s)\n\
    \      (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (define (is-letter? c)\n  \
    \  (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define (reverse-case\
    \ c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n        (char-downcase\
    \ c)))\n  (define (reverse-string s)\n    (if (empty? s)\n        \"\"\n     \
    \   (string-append (reverse-string (rest s)) (string (first s)))))\n  (if (string-contains\
    \ s is-letter?)\n      (string-map reverse-case s)\n      (reverse-string s)))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n    \
    \ (string-append (string-upcase (string (string-ref s 0)))\n                 \
    \   (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\
    \ (string (string-ref s 0))\n                    (solve (substring s 1)))]\n \
    \   [else\n     (string-append (string (string-ref s 0))\n                   \
    \ (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s) s]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append (string-upcase (string-ref s 0))\n  \
    \                  (solve (substring s 1)))]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-downcase (string-ref s 0))\n            \
    \        (solve (substring s 1)))]\n    [else (string-append (string-ref s 0)\n\
    \                         (solve (substring s 1)))]))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n  \
    \    (string-append\n       (string-append\n        (string-append\n         (string-append\n\
    \          (string-append\n           (string-append\n            (string-append\n\
    \             (string-append\n              (string-append\n               (string-append\n\
    \                (string-append\n                 (string-append\n           \
    \       (string-append\n                   (string-append\n                  \
    \  (string-append\n                     (string-append\n                     \
    \ (string-append\n                       (string-append\n                    \
    \    (string-append\n                         (string-append\n               \
    \           (string-append\n                           (string-append\n      \
    \                      (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c)))\n                \
    \  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n  \
    \    (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n \
    \                       (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append (string-downcase (string-ref s 0))\n\
    \                    (solve (substring s 1)))]\n    [else (string-append (string-ref\
    \ s 0)\n                         (solve (substring s 1)))]))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (\u03BB (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n      (string-upcase\
    \ (string (first s)))\n      (solve (rest s)))]\n    [(char-numeric? (first s))\n\
    \     (string-append\n      (string (first s))\n      (solve (rest s)))]\n   \
    \ [else\n     (string-append\n      (string-downcase (string (first s)))\n   \
    \   (solve (rest s)))]))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n\
    \      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append (string-upcase (string-ref s 0)) (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\
    \ (string-ref s 0) (solve (substring s 1)))]\n    [else\n     (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s)\
    \ \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n      (if (char-lower-case?\
    \ (first s))\n          (string-upcase (string (first s)))\n          (string-downcase\
    \ (string (first s))))\n      (solve (rest s)))]\n    [else\n     (string-append\
    \ (string (first s)) (solve (rest s)))]))\n", "  (if (string-contains? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map (lambda (c)\n                  \
    \  (if (char-alphabetic? c)\n                        (char-upcase c)\n       \
    \                 (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string-append\n       (string-append\n  \
    \      (string-append\n         (string-append\n          (string-append\n   \
    \        (string-append\n            (string-append\n             (string-append\n\
    \              (string-append\n               (string-append\n               \
    \ (string-append\n                 (string-append\n                  (string-append\n\
    \                   (string-append\n                    (string-append\n     \
    \                (string-append\n                      (string-append\n      \
    \                 (string-append\n                        (string-append\n   \
    \                      (string-append\n                          (string-append\n\
    \                           (string-append\n                            (string-append\n\
    \                             (string-append\n                              (string-append\n\
    \                               (string-append\n                             \
    \   (string-append\n                                 (string-append\n        \
    \                          (string-append\n                                  \
    \ (string-append\n                                    (string-append\n       \
    \                              (string-append\n                              \
    \        (string-append\n                                       (string-append\n\
    \                                        (string-append\n                    \
    \                     (string-append\n                                       \
    \   (string-append\n                                           (string-append\n\
    \                                            (string-append\n                \
    \                             (string-append\n                               \
    \               (string-append\n                                             \
    \  (string-append\n                                                (string-append\n\
    \                                                 (string-append\n           \
    \                                       (string-append\n                     \
    \                              (string-append\n                              \
    \                      (string-append\n                                      \
    \               (string-append\n                                             \
    \         (string-append\n                                                   \
    \    (string-append\n                                                        (string-append\n\
    \                                                         (string-append\n   \
    \                                                       (string-append\n     \
    \                                                      (string-append\n      \
    \                                                      (string-append\n      \
    \                                                       (string-append\n     \
    \                                                         (string-append\n   \
    \                                                            (string-append\n\
    \                                                                (string-append\n\
    \                                                                 (string-append\n\
    \                                                                  (string-append\n\
    \                                                                   (string-append\n\
    \                                                                    (string-append\n\
    \                                                                     (string-append\n\
    \                                                                      (string-append\n",
  "  (define (reverse-case c)\n    (cond\n      [(char-alphabetic? c) (char-upcase\
    \ c)]\n      [(char-numeric? c) c]\n      [(char-whitespace? c) c]\n      [(char-punctuation?\
    \ c) c]\n      [(char-symbolic? c) c]\n      [else (char-downcase c)]))\n  (string-join\
    \ (map reverse-case (string->list s))))\n", "  (if (string-contains? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"\
    ]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric? (string-ref\
    \ s 0))\n     (string-append (string-ref s 0) (solve (substring s 1)))]\n    [else\n\
    \     (string-append (string-downcase (string-ref s 0)) (solve (substring s 1)))]))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (x)\n              \
    \      (if (char-alphabetic? x)\n                        (if (char-lower-case?\
    \ x)\n                            (char-upcase x)\n                          \
    \  (char-downcase x))\n                        x))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (x)\n                    (if (char-alphabetic? x)\n                \
    \        (char-upcase x)\n                        (char-downcase x)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (if\
    \ (string-contains s #\\a)\n      (string-map (lambda (x)\n                  \
    \  (if (char-alphabetic? x)\n                        (char-downcase x)\n     \
    \                   (char-upcase x)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\n       (lambda\
    \ (c)\n         (if (char-alphabetic? c)\n             (char-upcase c)\n     \
    \        (char-downcase c)))\n       s)\n      (string-reverse s)))\n", "  (if\
    \ (string-contains-ci? s \"a-z\")\n      (string-map (\u03BB (c) (if (char-alphabetic?\
    \ c) (char-downcase c) (char-upcase c))) s)\n      (string-reverse s)))\n", " \
    \ (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n   \
    \  (string-append (string-upcase (string-ref s 0))\n                    (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\
    \ (string-ref s 0)\n                    (solve (substring s 1)))]\n    [else\n\
    \     (string-append (string-downcase (string-ref s 0))\n                    (solve\
    \ (substring s 1)))]))\n", "  (cond [(empty? s) \"\"]\n        [(char-alphabetic?\
    \ (string-ref s 0))\n         (string-append (string-upcase (string-ref s 0))\n\
    \                        (solve (substring s 1)))]\n        [(char-numeric? (string-ref\
    \ s 0))\n         (string-append (string-ref s 0)\n                        (solve\
    \ (substring s 1)))]\n        [else (string-append (string-downcase (string-ref\
    \ s 0))\n                             (solve (substring s 1)))]))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n", "  (if (string-contains s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n```\n\n## Problem 2\n\
    \n```racket\n#lang racket\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
