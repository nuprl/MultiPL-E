name: HumanEval_142_sum_squares
language: rkt
prompt: "#lang racket\n\n#| \"\nThis function will take a list of integers. For all\
  \ entries in the list, the function shall square the integer entry if its index\
  \ is a \nmultiple of 3 and will cube the integer entry if its index is a multiple\
  \ of 4 and not a multiple of 3. The function will not \nchange the entries in the\
  \ list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \nExamples:\n>>> lst\n(list 1 2 3)\n>>> lst\n(list )\n\
  >>> lst\n(list -1 -5 2 -1 -5)|#\n(define (sum_squares lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
  \    (check-equal? (candidate (list 1 2 3)) 6)\n    (check-equal? (candidate (list\
  \ 1 4 9)) 14)\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate\
  \ (list 1 1 1 1 1 1 1 1 1)) 9)\n    (check-equal? (candidate (list -1 -1 -1 -1 -1\
  \ -1 -1 -1 -1)) -3)\n    (check-equal? (candidate (list 0)) 0)\n    (check-equal?\
  \ (candidate (list -1 -5 2 -1 -5)) -126)\n    (check-equal? (candidate (list -56\
  \ -99 1 0 -2)) 3030)\n    (check-equal? (candidate (list -1 0 0 0 0 0 0 0 -1)) 0)\n\
  \    (check-equal? (candidate (list -16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35\
  \ 37)) -14196)\n    (check-equal? (candidate (list -1 -3 17 -1 -15 13 -1 14 -14\
  \ -12 -5 14 -14 6 13 11 16 16 4 10)) -1448)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([i (first lst)])\n\
    \       (+ (if (and (zero? (remainder (length lst) 3)) (zero? (remainder (length\
    \ lst) 4)))\n              (* i i i)\n              (if (zero? (remainder (length\
    \ lst) 3))\n                  (* i i)\n                  i))\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(zero? (modulo (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(zero? (modulo (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let*\n\
    \         ([index (length lst)]\n          [value (first lst)]\n          [new-value\
    \ (cond\n                        [(zero? (modulo index 3)) (expt value 2)]\n \
    \                       [(zero? (modulo index 4)) (expt value 3)]\n          \
    \              [else value])])\n       (+ new-value (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n  \
    \     (+ (if (and (zero? (modulo index 3)) (not (zero? (modulo index 4))))\n \
    \               (expt (first lst) 3)\n                (if (zero? (modulo index\
    \ 3))\n                    (expt (first lst) 2)\n                    (first lst)))\n\
    \          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [else\n     (let ([x (first lst)])\n       (+ (cond\n            [(zero?\
    \ (remainder (length lst) 3)) (* x x)]\n            [(zero? (remainder (length\
    \ lst) 4)) (* x x x)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3))\
    \ (expt x 2)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n\
    \            [(zero? (remainder (length lst) 3)) (* x x)]\n            [(zero?\
    \ (remainder (length lst) 4)) (* x x x)]\n            [else x])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x\
    \ (first lst)])\n       (+ (cond\n            [(zero? (remainder (length lst)\
    \ 3)) (square x)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n\
    \            [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(= (remainder (length lst)\
    \ 3) 0) (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(= (remainder\
    \ (length lst) 4) 0) (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n    \
    \   [else (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n         \
    \   [(= (remainder (length lst) 3) 0) (* x x)]\n            [(= (remainder (length\
    \ lst) 4) 0) (* x x x)])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (remainder (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (remainder (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(= (remainder (length\
    \ lst) 3) 0)\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n   \
    \    [(= (remainder (length lst) 4) 0)\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (remainder\
    \ (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n\
    \       [(zero? (remainder (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (remainder\
    \ (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n\
    \       [(zero? (remainder (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n                [(zero? (remainder\
    \ (length lst) 3)) (square (first lst))]\n                [(zero? (remainder (length\
    \ lst) 4)) (expt (first lst) 3)]\n                [else (first lst)])\n      \
    \       (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(zero? (modulo (length lst) 3))\n        (+ (expt (first\
    \ lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n\
    \        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else\n  \
    \      (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (define (sum_squares_helper\
    \ lst index)\n    (cond\n      [(empty? lst) 0]\n      [(= (remainder index 3)\
    \ 0) (+ (expt (first lst) 2) (sum_squares_helper (rest lst) (+ index 1)))]\n \
    \     [(= (remainder index 4) 0) (+ (expt (first lst) 3) (sum_squares_helper (rest\
    \ lst) (+ index 1)))]\n      [else (+ (first lst) (sum_squares_helper (rest lst)\
    \ (+ index 1)))]))\n  (sum_squares_helper lst 0))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else (+ (cond\n               [(and (zero? (remainder (length lst)\
    \ 3)) (not (zero? (remainder (length lst) 4)))) (square (first lst))]\n      \
    \         [(zero? (remainder (length lst) 4)) (cube (first lst))]\n          \
    \     [else (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n       (+\
    \ (cond\n            [(zero? (modulo index 3)) (expt (first lst) 2)]\n       \
    \     [(zero? (modulo index 4)) (expt (first lst) 3)]\n            [else (first\
    \ lst)])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else\n     (cond\n       [(zero? (remainder (length lst) 3))\n    \
    \    (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (remainder\
    \ (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n\
    \            [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length\
    \ lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3)) (expt\
    \ x 2)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n       \
    \     [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n  \
    \      (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo\
    \ (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4))) (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [(zero? (remainder (length lst) 3)) (+ (expt (first lst)\
    \ 2) (sum_squares (rest lst)))]\n       [(zero? (remainder (length lst) 4)) (+\
    \ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else (+ (first lst)\
    \ (sum_squares (rest lst)))])])\n  )\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(zero? (modulo (length lst) 3))\n        (+ (* (first lst)\
    \ (first lst)) (sum_squares (rest lst)))]\n       [(zero? (modulo (length lst)\
    \ 4))\n        (+ (* (first lst) (first lst) (first lst)) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n\
    \            [(zero? (remainder (length lst) 3)) (* x x)]\n            [(zero?\
    \ (remainder (length lst) 4)) (* x x x)]\n            [else x])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index\
    \ (length lst)])\n       (+ (cond\n            [(zero? (modulo index 3)) (expt\
    \ (first lst) 2)]\n            [(zero? (modulo index 4)) (expt (first lst) 3)]\n\
    \            [else (first lst)])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3))\
    \ (expt x 2)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n\
    \            [(zero? (remainder (length lst) 3)) (square x)]\n            [(zero?\
    \ (remainder (length lst) 4)) (expt x 3)]\n            [else x])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index\
    \ (length lst)])\n       (+ (cond\n            [(zero? (modulo index 3)) (expt\
    \ (first lst) 2)]\n            [(zero? (modulo index 4)) (expt (first lst) 3)]\n\
    \            [else (first lst)])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3))\
    \ (expt x 2)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (if (or\
    \ (zero? (remainder (length lst) 3)) (zero? (remainder (length lst) 4)))\n   \
    \           (if (zero? (remainder (length lst) 3))\n                  (* x x)\n\
    \                  (* x x x))\n              x)\n          (sum_squares (rest\
    \ lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n     \
    \  [(zero? (remainder (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(zero? (remainder (length lst) 4))\n        (+ (expt\
    \ (first lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst)\
    \ (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(zero? (modulo (length lst) 3))\n        (+ (expt (first\
    \ lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n\
    \        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else\n  \
    \      (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n  \
    \      (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo\
    \ (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst)\
    \ 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero?\
    \ (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(zero? (remainder (length lst) 3)) (* x x)]\n          \
    \  [(zero? (remainder (length lst) 4)) (* x x x)]\n            [else x])\n   \
    \       (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n   \
    \ [else\n     (let ([x (first lst)])\n       (+ (cond\n            [(zero? (remainder\
    \ (length lst) 3)) (sqr x)]\n            [(zero? (remainder (length lst) 4)) (expt\
    \ x 3)]\n            [else x])\n          (sum_squares (rest lst))))]))\n", " \
    \ (cond [(empty? lst) 0]\n        [else (+ (cond [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4))) (expt (first lst) 3)]\n       \
    \                [(zero? (remainder (length lst) 3)) (expt (first lst) 2)]\n \
    \                      [else (first lst)])\n                (sum_squares (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([i (length\
    \ lst)])\n       (+ (if (or (= (modulo i 3) 0) (= (modulo i 4) 0))\n         \
    \     (if (= (modulo i 3) 0)\n                  (* (first lst) (first lst))\n\
    \                  (* (first lst) (first lst) (first lst)))\n              (first\
    \ lst))\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else (+ (cond\n                [(zero? (remainder (length lst) 3))\
    \ (expt (first lst) 2)]\n                [(zero? (remainder (length lst) 4)) (expt\
    \ (first lst) 3)]\n                [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index\
    \ (length lst)])\n       (+ (cond\n            [(zero? (modulo index 3)) (expt\
    \ (first lst) 2)]\n            [(zero? (modulo index 4)) (expt (first lst) 3)]\n\
    \            [else (first lst)])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3))\
    \ (expt x 2)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n\
    \            [(zero? (remainder (length lst) 3)) (square x)]\n            [(zero?\
    \ (remainder (length lst) 4)) (expt x 3)]\n            [else x])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x\
    \ (first lst)])\n       (+ (cond\n            [(zero? (remainder (length lst)\
    \ 3)) (* x x)]\n            [(zero? (remainder (length lst) 4)) (* x x x)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n</code>\nThe problem\
    \ is that when I run the code, it gives me the following error:\n<code>application:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 1\n  arguments...:\n   1\n</code>\nI'm not sure what I'm doing wrong.\
    \ I'm pretty sure it's something simple, but I can't figure it out.\n\n\nA:\n\n\
    The problem is that you're using <code>length</code> instead of <code>length+</code>.\
    \ The former is a procedure that takes a list as argument, and returns its length.\
    \ The latter is a function that takes a number as argument, and returns its length.\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n                [(zero? (remainder\
    \ (length lst) 3)) (square (first lst))]\n                [(zero? (remainder (length\
    \ lst) 4)) (expt (first lst) 3)]\n                [else (first lst)])\n      \
    \       (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(zero? (modulo (length lst) 3))\n        (+ (expt (first\
    \ lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n\
    \        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else\n  \
    \      (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (if (or (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4)))\n              (if (zero?\
    \ (remainder (length lst) 3))\n                  (* x x)\n                  (*\
    \ x x x))\n              x)\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst)\
    \ 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero?\
    \ (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n  \
    \     (+ (cond\n            [(= (modulo index 3) 0) (* (first lst) (first lst))]\n\
    \            [(= (modulo index 4) 0) (* (first lst) (first lst) (first lst))]\n\
    \            [else (first lst)])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3))\
    \ (expt x 2)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (remainder (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (remainder (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n  \
    \     (+ (cond\n            [(= (modulo index 3) 0) (* (first lst) (first lst))]\n\
    \            [(= (modulo index 4) 0) (* (first lst) (first lst) (first lst))]\n\
    \            [else (first lst)])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n  \
    \     (+ (cond\n            [(zero? (modulo index 3)) (expt (first lst) 2)]\n\
    \            [(zero? (modulo index 4)) (expt (first lst) 3)]\n            [else\
    \ (first lst)])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(= (remainder (length lst) 3) 0)\
    \ (expt (first lst) 2)]\n               [(= (remainder (length lst) 4) 0) (expt\
    \ (first lst) 3)]\n               [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index\
    \ (length lst)])\n       (+ (cond\n            [(zero? (modulo index 3)) (expt\
    \ (first lst) 2)]\n            [(zero? (modulo index 4)) (expt (first lst) 3)]\n\
    \            [else (first lst)])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3))\
    \ (expt x 2)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst)\
    \ 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero?\
    \ (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n  \
    \     (+ (cond\n            [(zero? (modulo index 3)) (expt (first lst) 2)]\n\
    \            [(zero? (modulo index 4)) (expt (first lst) 3)]\n            [else\
    \ (first lst)])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(zero? (remainder (length lst) 3))\n\
    \        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (remainder\
    \ (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(= (remainder (length lst)\
    \ 3) 0)\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(=\
    \ (remainder (length lst) 4) 0)\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n  \
    \     (+ (cond\n            [(zero? (modulo index 3)) (expt (first lst) 2)]\n\
    \            [(zero? (modulo index 4)) (expt (first lst) 3)]\n            [else\
    \ (first lst)])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([index (length lst)])\n       (+ (cond\n    \
    \        [(zero? (modulo index 3)) (expt (first lst) 2)]\n            [(zero?\
    \ (modulo index 4)) (expt (first lst) 3)]\n            [else (first lst)])\n \
    \         (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n        (+ (expt\
    \ (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo (length lst)\
    \ 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else\n\
    \        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(= (remainder (length lst) 3) 0)\n \
    \       (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(= (remainder\
    \ (length lst) 4) 0)\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n       (+\
    \ (if (or (zero? (modulo index 3)) (zero? (modulo index 4)))\n              (if\
    \ (zero? (modulo index 3))\n                  (square (first lst))\n         \
    \         (cube (first lst)))\n              (first lst))\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x\
    \ (first lst)])\n       (+ (cond\n            [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4))) (expt x 3)]\n            [(zero?\
    \ (remainder (length lst) 3)) (expt x 2)]\n            [else x])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([i\
    \ (first lst)])\n       (+ (cond\n            [(zero? (remainder (length lst)\
    \ 3)) (* i i)]\n            [(zero? (remainder (length lst) 4)) (* i i i)]\n \
    \           [else i])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n\
    \            [(or (zero? (remainder (length lst) 3)) (zero? (remainder (length\
    \ lst) 4))) (expt x 2)]\n            [(zero? (remainder (length lst) 4)) (expt\
    \ x 3)]\n            [else x])\n          (sum_squares (rest lst))))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let* ([index (length lst)]\n  \
    \          [value (first lst)])\n       (+ (cond\n            [(= (modulo index\
    \ 3) 0) (* value value)]\n            [(and (= (modulo index 4) 0)\n         \
    \         (not (= (modulo index 3) 0))) (* value value value)])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(= (remainder (length lst) 3) 0)\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(= (remainder (length lst) 4) 0)\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x\
    \ (first lst)])\n       (+ (if (or (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4)))\n              (if (zero? (remainder (length lst) 3))\n  \
    \                (* x x)\n                  (* x x x))\n              x)\n   \
    \       (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n   \
    \ [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n        (+ (expt\
    \ (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo (length lst)\
    \ 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else\n\
    \        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([index (length lst)])\n       (+ (if (or (zero?\
    \ (modulo index 3)) (zero? (modulo index 4)))\n                (if (zero? (modulo\
    \ index 3))\n                    (square (first lst))\n                    (cube\
    \ (first lst)))\n                (first lst))\n          (sum_squares (rest lst))))]))\n",
  "  (define (sum_squares_helper lst index)\n    (cond\n      [(empty? lst) 0]\n \
    \     [(= (remainder index 3) 0) (+ (expt (first lst) 2) (sum_squares_helper (rest\
    \ lst) (+ index 1)))]\n      [(= (remainder index 4) 0) (+ (expt (first lst) 3)\
    \ (sum_squares_helper (rest lst) (+ index 1)))]\n      [else (+ (first lst) (sum_squares_helper\
    \ (rest lst) (+ index 1)))]))\n  (sum_squares_helper lst 0))\n", "  (cond\n  \
    \  [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n       (+ (cond\n\
    \            [(zero? (modulo index 3)) (expt (first lst) 2)]\n            [(zero?\
    \ (modulo index 4)) (expt (first lst) 3)]\n            [else (first lst)])\n \
    \         (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [else\n     (let ([index (length lst)])\n       (+ (cond\n            [(zero?\
    \ (modulo index 3)) (expt (first lst) 2)]\n            [(zero? (modulo index 4))\
    \ (expt (first lst) 3)]\n            [else (first lst)])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(= (remainder (length lst) 3) 0) (+ (square (first lst)) (sum_squares\
    \ (rest lst)))]\n       [(= (remainder (length lst) 4) 0) (+ (cube (first lst))\
    \ (sum_squares (rest lst)))]\n       [else (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n  \
    \     (+ (if (or (zero? (modulo index 3)) (zero? (modulo index 4)))\n        \
    \       (if (zero? (modulo index 3))\n                   (square (first lst))\n\
    \                   (cube (first lst)))\n               (first lst))\n       \
    \   (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (let ([x (first lst)])\n       (+ (cond\n            [(and (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4))) (expt x 3)]\n         \
    \   [(zero? (remainder (length lst) 3)) (expt x 2)]\n            [(zero? (remainder\
    \ (length lst) 4)) (expt x 3)]\n            [else x])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x\
    \ (first lst)])\n       (+ (cond\n            [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4))) (expt x 3)]\n            [(zero?\
    \ (remainder (length lst) 3)) (expt x 2)]\n            [(zero? (remainder (length\
    \ lst) 4)) (expt x 3)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n  \
    \     (+ (cond\n            [(zero? (modulo index 3)) (expt (first lst) 2)]\n\
    \            [(zero? (modulo index 4)) (expt (first lst) 3)]\n            [else\
    \ (first lst)])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n  \
    \      (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo\
    \ (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (remainder (length\
    \ lst) 3)) (expt (first lst) 2)]\n               [(zero? (remainder (length lst)\
    \ 4)) (expt (first lst) 3)]\n               [else (first lst)])\n            \
    \ (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (let ([index (length lst)])\n       (+ (cond\n            [(zero? (modulo\
    \ index 3)) (expt (first lst) 2)]\n            [(zero? (modulo index 4)) (expt\
    \ (first lst) 3)]\n            [else (first lst)])\n          (sum_squares (rest\
    \ lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let* ([index\
    \ (length lst)]\n            [value (first lst)])\n       (+ (cond\n         \
    \   [(= (modulo index 3) 0) (* value value)]\n            [(and (= (modulo index\
    \ 4) 0)\n                  (not (= (modulo index 3) 0))) (* value value value)])\n\
    \          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [else\n     (let ([x (first lst)])\n       (+ (cond\n            [(zero?\
    \ (remainder (length lst) 3)) (square x)]\n            [(zero? (remainder (length\
    \ lst) 4)) (expt x 3)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n                [(= (remainder\
    \ (length lst) 3) 0) (square (first lst))]\n                [(= (remainder (length\
    \ lst) 4) 0) (cube (first lst))]\n                [else (first lst)])\n      \
    \       (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(zero? (modulo (length lst) 3))\n        (+ (expt (first\
    \ lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n\
    \        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else\n  \
    \      (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(zero? (remainder (length lst)\
    \ 3)) (sqr (first lst))]\n               [(zero? (remainder (length lst) 4)) (cube\
    \ (first lst))]\n               [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x\
    \ (first lst)])\n       (+ (cond\n            [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4))) (expt x 3)]\n            [(zero?\
    \ (remainder (length lst) 3)) (expt x 2)]\n            [(zero? (remainder (length\
    \ lst) 4)) (expt x 3)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3))\
    \ (expt x 2)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst)\
    \ 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero?\
    \ (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(zero? (remainder (length lst) 3)) (square x)]\n       \
    \     [(and (zero? (remainder (length lst) 4)) (not (zero? (remainder (length\
    \ lst) 3)))) (expt x 3)]\n            [else x])\n          (sum_squares (rest\
    \ lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first\
    \ lst)])\n       (+ (cond\n            [(zero? (remainder (length lst) 3)) (*\
    \ x x)]\n            [(zero? (remainder (length lst) 4)) (* x x x)]\n        \
    \    [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (if (or (zero? (remainder\
    \ (length lst) 3))\n                  (zero? (remainder (length lst) 4)))\n  \
    \            (if (zero? (remainder (length lst) 3))\n                  (* x x)\n\
    \                  (* x x x))\n              x)\n          (sum_squares (rest\
    \ lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n     \
    \  [(zero? (modulo (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(zero? (modulo (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n \
    \               [(zero? (remainder (length lst) 3)) (square (first lst))]\n  \
    \              [(zero? (remainder (length lst) 4)) (expt (first lst) 3)]\n   \
    \             [else (first lst)])\n            (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let* ([i (length lst)]\n      \
    \      [x (first lst)]\n            [y (sum_squares (rest lst))])\n       (cond\n\
    \         [(and (zero? (modulo i 3)) (zero? (modulo i 4))) (+ y (* x x))]\n  \
    \       [(zero? (modulo i 4)) (+ y (* x x x))]\n         [else (+ y x)]))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n                [(zero? (remainder\
    \ (length lst) 3)) (sqr (first lst))]\n                [(zero? (remainder (length\
    \ lst) 4)) (cube (first lst))]\n                [else (first lst)])\n        \
    \     (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (let ([i (first lst)])\n       (+ (cond\n            [(zero? (remainder\
    \ (length lst) 3)) (* i i)]\n            [(zero? (remainder (length lst) 4)) (*\
    \ i i i)]\n            [else i])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n                [(zero? (remainder\
    \ (length lst) 3)) (square (first lst))]\n                [(zero? (remainder (length\
    \ lst) 4)) (expt (first lst) 3)]\n                [else (first lst)])\n      \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (let ([index (length lst)])\n       (+ (cond\n            [(zero? (modulo\
    \ index 3)) (expt (first lst) 2)]\n            [(zero? (modulo index 4)) (expt\
    \ (first lst) 3)]\n            [else (first lst)])\n          (sum_squares (rest\
    \ lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first\
    \ lst)])\n       (+ (cond\n            [(and (zero? (remainder (length lst) 3))\
    \ (zero? (remainder (length lst) 4))) (expt x 3)]\n            [(zero? (remainder\
    \ (length lst) 3)) (expt x 2)]\n            [(zero? (remainder (length lst) 4))\
    \ (expt x 3)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond [(empty? lst) 0]\n        [else (+ (cond [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4))) (expt (first lst) 3)]\n       \
    \                [(zero? (remainder (length lst) 3)) (expt (first lst) 2)]\n \
    \                      [else (first lst)])\n                 (sum_squares (rest\
    \ lst)))]))\n", "  (cond [(empty? lst) 0]\n        [else (cond [(zero? (remainder\
    \ (length lst) 3)) (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n      \
    \             [(zero? (remainder (length lst) 4)) (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n                   [else (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (remainder\
    \ (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n\
    \       [(zero? (remainder (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(= 0 (remainder (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(= 0 (remainder (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n                [(zero? (remainder\
    \ (length lst) 3)) (cond\n                                                   \
    \   [(zero? (remainder (length lst) 4)) (expt (first lst) 3)]\n              \
    \                                        [else (expt (first lst) 2)])]\n     \
    \           [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(zero? (remainder (length lst) 3)) (square x)]\n       \
    \     [(zero? (remainder (length lst) 4)) (expt x 3)]\n            [else x])\n\
    \          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [else\n     (let ([index (length lst)])\n       (+ (cond\n            [(zero?\
    \ (modulo index 3)) (expt (first lst) 2)]\n            [(zero? (modulo index 4))\
    \ (expt (first lst) 3)]\n            [else (first lst)])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(zero? (modulo (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(= (remainder (length lst) 3) 0)\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(= (remainder (length lst) 4) 0)\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x\
    \ (first lst)])\n       (+ (cond\n            [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4))) (expt x 3)]\n            [(zero?\
    \ (remainder (length lst) 3)) (expt x 2)]\n            [(zero? (remainder (length\
    \ lst) 4)) (expt x 3)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3))\
    \ (expt x 2)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n       (+\
    \ (cond\n            [(zero? (modulo index 3)) (expt (first lst) 2)]\n       \
    \     [(zero? (modulo index 4)) (expt (first lst) 3)]\n            [else (first\
    \ lst)])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n            [(zero?\
    \ (remainder (length lst) 3)) (square x)]\n            [(zero? (remainder (length\
    \ lst) 4)) (expt x 3)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(= (remainder (length\
    \ lst) 3) 0) (+ (square (first lst)) (sum_squares (rest lst)))]\n       [(= (remainder\
    \ (length lst) 4) 0) (+ (cube (first lst)) (sum_squares (rest lst)))]\n      \
    \ [else (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3)) (square\
    \ (first lst))]\n       [(zero? (modulo (length lst) 4)) (cube (first lst))]\n\
    \       [else (first lst)])\n     (+ (first lst) (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3))\
    \ (expt x 2)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst)\
    \ 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero?\
    \ (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (define (sum_squares_helper lst index)\n    (cond\n      [(empty? lst) 0]\n \
    \     [(= (remainder index 3) 0) (+ (expt (first lst) 2) (sum_squares_helper (rest\
    \ lst) (+ index 1)))]\n      [(= (remainder index 4) 0) (+ (expt (first lst) 3)\
    \ (sum_squares_helper (rest lst) (+ index 1)))]\n      [else (+ (first lst) (sum_squares_helper\
    \ (rest lst) (+ index 1)))]))\n  (sum_squares_helper lst 0))\n", "  (cond\n  \
    \  [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst)\
    \ 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero?\
    \ (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(zero? (remainder (length lst) 3)) (* x x)]\n          \
    \  [(and (zero? (remainder (length lst) 4)) (not (zero? (remainder (length lst)\
    \ 3)))) (* x x x)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n                [(= 0 (remainder\
    \ (length lst) 3)) (expt (first lst) 2)]\n                [(= 0 (remainder (length\
    \ lst) 4)) (expt (first lst) 3)]\n                [else (first lst)])\n      \
    \       (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n                [(= (remainder (length lst) 3) 0) (expt (first lst)\
    \ 2)]\n                [(= (remainder (length lst) 4) 0) (expt (first lst) 3)]\n\
    \                [else (first lst)])\n             (sum_squares (rest lst)))]))\n\
    ```\n\n```\n#lang racket\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let\
    \ ([x (first lst)])\n       (+ (cond\n            [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4))) (expt x 3)]\n            [(zero?\
    \ (remainder (length lst) 3)) (expt x 2)]\n            [(zero? (remainder (length\
    \ lst) 4)) (expt x 3)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n  \
    \     (+ (cond\n            [(and (zero? (modulo index 3)) (zero? (modulo index\
    \ 4))) (expt (first lst) 2)]\n            [(zero? (modulo index 4)) (expt (first\
    \ lst) 3)]\n            [else (first lst)])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(zero? (remainder (length lst) 3)) (* x x)]\n          \
    \  [(zero? (remainder (length lst) 4)) (* x x x)]\n            [else x])\n   \
    \       (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n   \
    \ [else\n     (let ([x (first lst)])\n       (+ (if (or (zero? (remainder (length\
    \ lst) 3))\n                  (zero? (remainder (length lst) 4)))\n          \
    \    (if (zero? (remainder (length lst) 3))\n                  (* x x)\n     \
    \             (* x x x))\n              x)\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n  \
    \     (+ (cond\n            [(zero? (modulo index 3)) (expt (first lst) 2)]\n\
    \            [(zero? (modulo index 4)) (expt (first lst) 3)]\n            [else\
    \ (first lst)])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n  \
    \      (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo\
    \ (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n               [(= (remainder (length\
    \ lst) 3) 0) (* (first lst) (first lst))]\n               [(= (remainder (length\
    \ lst) 4) 0) (* (first lst) (first lst) (first lst))]\n               [else (first\
    \ lst)])\n            (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (if (or (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4)))\n              (if (zero?\
    \ (remainder (length lst) 3))\n                  (* x x)\n                  (*\
    \ x x x))\n              x)\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (cond\n            [(zero? (modulo (length lst)\
    \ 3)) (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n            [(zero?\
    \ (modulo (length lst) 4)) (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \            [else (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst)\
    \ 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero?\
    \ (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let* ([index (length lst)]\n  \
    \          [value (first lst)])\n       (+ (cond\n            [(= (modulo index\
    \ 3) 0) (* value value)]\n            [(and (= (modulo index 4) 0)\n         \
    \         (not (= (modulo index 3) 0)))\n             (* value value value)])\n\
    \          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [else\n     (cond\n       [(and (zero? (remainder (length lst) 3)) (zero?\
    \ (remainder (length lst) 4)))\n        (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))]\n       [(zero? (remainder (length lst) 3))\n        (+ (expt (first\
    \ lst) 2) (sum_squares (rest lst)))]\n       [(zero? (remainder (length lst) 4))\n\
    \        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else\n  \
    \      (+ (first lst) (sum_squares (rest lst)))])])\n  )\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (cond\n            [(zero? (modulo (length lst) 3)) (+ (expt\
    \ (first lst) 2) (sum_squares (rest lst)))]\n            [(zero? (modulo (length\
    \ lst) 4)) (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n            [else\
    \ (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3)) (square (first\
    \ lst))]\n       [(zero? (modulo (length lst) 4)) (cube (first lst))]\n      \
    \ [else (first lst)])\n     (+ (first lst) (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n \
    \      (+ (cond\n            [(zero? (modulo index 3)) (expt (first lst) 2)]\n\
    \            [(zero? (modulo index 4)) (expt (first lst) 3)]\n            [else\
    \ (first lst)])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n         \
    \   [(zero? (remainder (length lst) 3))\n             (* x x)]\n            [(zero?\
    \ (remainder (length lst) 4))\n             (* x x x)])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x\
    \ (first lst)])\n       (+ (cond\n            [(zero? (remainder (length lst)\
    \ 3)) (square x)]\n            [(and (zero? (remainder (length lst) 4))\n    \
    \              (not (zero? (remainder (length lst) 3)))) (expt x 3)]\n       \
    \     [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n         \
    \   [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length lst) 4)))\
    \ (expt x 3)]\n            [(zero? (remainder (length lst) 3)) (expt x 2)]\n \
    \           [(zero? (remainder (length lst) 4)) (expt x 3)]\n            [else\
    \ x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else\n     (cond\n       [(and (zero? (remainder (length lst) 3)) (zero?\
    \ (remainder (length lst) 4)))\n        (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))]\n       [(zero? (remainder (length lst) 3))\n        (+ (expt (first\
    \ lst) 2) (sum_squares (rest lst)))]\n       [(zero? (remainder (length lst) 4))\n\
    \        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else\n  \
    \      (+ (first lst) (sum_squares (rest lst)))])])\n  )\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n         \
    \   [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length lst) 4)))\
    \ (expt x 3)]\n            [(zero? (remainder (length lst) 3)) (expt x 2)]\n \
    \           [(zero? (remainder (length lst) 4)) (expt x 3)]\n            [else\
    \ x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n            [(and\
    \ (zero? (remainder (length lst) 3)) (zero? (remainder (length lst) 4))) (expt\
    \ x 3)]\n            [(zero? (remainder (length lst) 3)) (expt x 2)]\n       \
    \     [(zero? (remainder (length lst) 4)) (expt x 3)]\n            [else x])\n\
    \          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [else (+ (cond\n               [(and (zero? (remainder (length lst) 3)) (not\
    \ (zero? (remainder (length lst) 4)))) (square (first lst))]\n               [(zero?\
    \ (remainder (length lst) 4)) (cube (first lst))]\n               [else (first\
    \ lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([i (first lst)])\n       (+ (cond\n         \
    \   [(zero? (remainder (length lst) 3)) (* i i)]\n            [(zero? (remainder\
    \ (length lst) 4)) (* i i i)]\n            [else i])\n          (sum_squares (rest\
    \ lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n     \
    \  [(= (remainder (length lst) 3) 0) (+ (expt (first lst) 2) (sum_squares (rest\
    \ lst)))]\n       [(= (remainder (length lst) 4) 0) (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n                [(zero? (remainder\
    \ (length lst) 3)) (expt (first lst) 2)]\n                [(zero? (remainder (length\
    \ lst) 4)) (expt (first lst) 3)]\n                [else (first lst)])\n      \
    \       (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n                [(= (remainder (length lst) 3) 0) (square (first lst))]\n\
    \                [(= (remainder (length lst) 4) 0) (expt (first lst) 3)]\n   \
    \             [else (first lst)])\n              (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (remainder\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (remainder (length\
    \ lst) 4)) (expt (first lst) 3)]\n               [else (first lst)])\n       \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (let ([num (first lst)])\n       (+ (cond\n            [(zero? (remainder\
    \ (length lst) 3)) (* num num)]\n            [(zero? (remainder (length lst) 4))\
    \ (* num num num)]\n            [else num])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let* ([x (first lst)]\n       \
    \     [y (rest lst)]\n            [z (sum_squares y)])\n       (cond\n       \
    \  [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length lst) 4)))\
    \ (+ (expt x 3) z)]\n         [(zero? (remainder (length lst) 3)) (+ (expt x 2)\
    \ z)]\n         [(zero? (remainder (length lst) 4)) (+ (expt x 3) z)]\n      \
    \   [else (+ x z)]))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(zero? (remainder (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(zero? (remainder (length lst) 4))\n        (+ (expt\
    \ (first lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst)\
    \ (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (remainder (length lst) 3)) (expt (first lst)\
    \ 2)]\n               [(zero? (remainder (length lst) 4)) (expt (first lst) 3)]\n\
    \               [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(= (remainder (length\
    \ lst) 3) 0)\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n   \
    \    [(= (remainder (length lst) 4) 0)\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(zero? (remainder (length lst) 3)) (square x)]\n       \
    \     [(zero? (remainder (length lst) 4)) (expt x 3)]\n            [else x])\n\
    \          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [else\n     (let ([index (length lst)])\n       (+ (cond\n            [(zero?\
    \ (modulo index 3)) (expt (first lst) 2)]\n            [(zero? (modulo index 4))\
    \ (expt (first lst) 3)]\n            [else (first lst)])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n  \
    \              [(zero? (remainder (length lst) 3)) (expt (first lst) 2)]\n   \
    \             [(zero? (remainder (length lst) 4)) (expt (first lst) 3)]\n    \
    \            [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (cond\n            [(zero? (remainder\
    \ (length lst) 3)) (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n      \
    \      [(zero? (remainder (length lst) 4)) (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n            [else (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n  \
    \     (+ (cond\n            [(zero? (modulo index 3)) (expt (first lst) 2)]\n\
    \            [(zero? (modulo index 4)) (expt (first lst) 3)]\n            [else\
    \ (first lst)])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n         \
    \   [(zero? (remainder (length lst) 3)) (* x x)]\n            [(zero? (remainder\
    \ (length lst) 4)) (* x x x)]\n            [else x])\n          (sum_squares (rest\
    \ lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first\
    \ lst)])\n       (+ (cond\n            [(= (remainder (length lst) 3) 0) (* x\
    \ x)]\n            [(= (remainder (length lst) 4) 0) (* x x x)])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x\
    \ (first lst)])\n       (+ (cond\n            [(zero? (remainder (length lst)\
    \ 3)) (square x)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n\
    \            [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n\
    \            [(zero? (remainder (length lst) 3)) (* x x)]\n            [(and (zero?\
    \ (remainder (length lst) 4)) (not (zero? (remainder (length lst) 3)))) (* x x\
    \ x)]\n            [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n                [(zero? (remainder\
    \ (length lst) 3)) (square (first lst))]\n                [(zero? (remainder (length\
    \ lst) 4)) (expt (first lst) 3)]\n                [else (first lst)])\n      \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n                [(and (zero? (remainder (length lst) 3)) (not (zero?\
    \ (remainder (length lst) 4)))) (square (first lst))]\n                [(zero?\
    \ (remainder (length lst) 4)) (expt (first lst) 3)]\n                [else (first\
    \ lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n                [(= (remainder (length lst) 3)\
    \ 0) (square (first lst))]\n                [(= (remainder (length lst) 4) 0)\
    \ (cube (first lst))]\n                [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x\
    \ (first lst)])\n       (+ (cond\n            [(zero? (remainder (length lst)\
    \ 3)) (* x x)]\n            [(zero? (remainder (length lst) 4)) (* x x x)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n                [(and (zero? (remainder\
    \ (length lst) 3)) (not (zero? (remainder (length lst) 4)))) (sqr (first lst))]\n\
    \                [(zero? (remainder (length lst) 4)) (cube (first lst))]\n   \
    \             [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([index (length lst)])\n  \
    \     (+ (cond\n            [(zero? (modulo index 3)) (expt (first lst) 2)]\n\
    \            [(zero? (modulo index 4)) (expt (first lst) 3)]\n            [else\
    \ (first lst)])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let* ([index (add1 (length lst))]\n            [value\
    \ (first lst)])\n       (cond\n         [(zero? (modulo index 3))\n          (add\
    \ (expt value 2) (sum_squares (rest lst)))]\n         [(zero? (modulo index 4))\n\
    \          (add (expt value 3) (sum_squares (rest lst)))]\n         [else\n  \
    \        (add value (sum_squares (rest lst)))]))]))\n</code>\n", "  (cond\n  \
    \  [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n\
    \            [(zero? (remainder (length lst) 3)) (square x)]\n            [(and\
    \ (zero? (remainder (length lst) 4)) (not (zero? (remainder (length lst) 3))))\
    \ (expt x 3)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(zero? (remainder (length lst) 3)) (* x x)]\n          \
    \  [(zero? (remainder (length lst) 4)) (* x x x)]\n            [else x])\n   \
    \       (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n   \
    \ [else (+ (cond\n                [(zero? (remainder (length lst) 3)) (square\
    \ (first lst))]\n                [(zero? (remainder (length lst) 4)) (expt (first\
    \ lst) 3)]\n                [else (first lst)])\n            (sum_squares (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n         \
    \       [(zero? (remainder (length lst) 3)) (square (first lst))]\n          \
    \      [(zero? (remainder (length lst) 4)) (expt (first lst) 3)]\n           \
    \     [else (first lst)])\n            (sum_squares (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let* ([x (first lst)]\n            [y\
    \ (rest lst)]\n            [z (sum_squares y)])\n       (cond\n         [(or (zero?\
    \ (remainder (length lst) 3)) (zero? (remainder (length lst) 4))) (+ (expt x 2)\
    \ z)]\n         [(zero? (remainder (length lst) 4)) (+ (expt x 3) z)]\n      \
    \   [else (+ x z)]))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(zero? (modulo (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length lst)\
    \ 4)))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [(zero?\
    \ (remainder (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest\
    \ lst)))]\n       [(zero? (remainder (length lst) 4))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])])\n  )\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let\
    \ ([x (first lst)])\n       (+ (cond\n            [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4))) (expt x 3)]\n            [(zero?\
    \ (remainder (length lst) 3)) (expt x 2)]\n            [(zero? (remainder (length\
    \ lst) 4)) (expt x 3)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(and (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4)))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [(zero? (remainder (length lst) 3))\n\
    \        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (remainder\
    \ (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])])\n  )\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n      \
    \ (+ (cond\n            [(zero? (remainder (length lst) 3)) (* x x)]\n       \
    \     [(zero? (remainder (length lst) 4)) (* x x x)]\n            [else x])\n\
    \          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [else (cond\n            [(zero? (modulo (length lst) 3)) (expt (first lst)\
    \ 2)]\n            [(zero? (modulo (length lst) 4)) (expt (first lst) 3)]\n  \
    \          [else (first lst)])\n          (+ (sum_squares (rest lst)) (cond\n\
    \                                        [(zero? (modulo (length lst) 3)) (expt\
    \ (first lst) 2)]\n                                        [(zero? (modulo (length\
    \ lst) 4)) (expt (first lst) 3)]\n                                        [else\
    \ (first lst)]))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length lst)\
    \ 4)))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [(zero?\
    \ (remainder (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest\
    \ lst)))]\n       [(zero? (remainder (length lst) 4))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])])\n  )\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let\
    \ ([index (length lst)])\n       (+ (cond\n            [(zero? (modulo index 3))\
    \ (expt (first lst) 2)]\n            [(zero? (modulo index 4)) (expt (first lst)\
    \ 3)]\n            [else (first lst)])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3))\
    \ (expt x 2)]\n            [(zero? (remainder (length lst) 4)) (expt x 3)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (remainder (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (remainder (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let*\n         ([index (length\
    \ lst)]\n          [entry (first lst)]\n          [new-entry (cond\n         \
    \               [(and (zero? (modulo index 3)) (zero? (modulo index 4))) (expt\
    \ entry 3)]\n                        [(zero? (modulo index 3)) (expt entry 2)]\n\
    \                        [else entry])])\n       (+ new-entry (sum_squares (rest\
    \ lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n     \
    \  [(= (remainder (length lst) 3) 0)\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(= (remainder (length lst) 4) 0)\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
