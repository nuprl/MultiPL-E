name: HumanEval_141_file_name_check
language: rkt
prompt: "#lang racket\n\n#| Create a function which takes a string representing a\
  \ file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No'\
  \ otherwise.\nA file's name is considered to be valid if and only if all the following\
  \ conditions \nare met:\n- There should not be more than three digits ('0'-'9')\
  \ in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring\
  \ before the dot should not be empty, and it starts with a letter from \nthe latin\
  \ alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of\
  \ these: ['txt', 'exe', 'dll']\nExamples:\n>>> (file_name_check \"example.txt\"\
  )\n\"Yes\"\n>>> (file_name_check \"1example.dll\")\n\"No\"|#\n(define (file_name_check\
  \ file_name)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
  \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
  \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
  )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
  \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\")\
  \ \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\"\
  ) \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n   \
  \ (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\"\
  )\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
  \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
  \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
  ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
  \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\
  \n(test-humaneval)"
completions: ["  (define (check-digits file_name)\n    (define (check-digit file_name)\n\
    \      (if (empty? file_name)\n          #f\n          (if (char-numeric? (first\
    \ file_name))\n              (check-digit (rest file_name))\n              #t)))\n\
    \    (if (check-digit file_name)\n        #t\n        (if (empty? file_name)\n\
    \            #t\n            (if (char-numeric? (first file_name))\n         \
    \       (if (check-digits (rest file_name))\n                    #t\n        \
    \            #f)\n                #t))))\n  (define (check-dot file_name)\n  \
    \  (if (empty? file_name)\n        #f\n        (if (char=? (first file_name) #\\\
    .)\n            #t\n            (check-dot (rest file_name)))))\n  (define (check-first-part\
    \ file_name)\n    (if (empty? file_name)\n        #f\n        (if (char-alphabetic?\
    \ (first file_name))\n            #t\n            (check-first-part (rest file_name)))))\n\
    \  (define (check-second-part file_name)\n    (if (empty? file_name)\n       \
    \ #f\n        (if (char=? (first file_name) #\\.)\n            #t\n          \
    \  (check-second-part (rest file_name)))))\n  (define (check-third-part file_name)\n\
    \    (if (empty? file_name)\n        #f\n        (if (char=? (first file_name)\
    \ #\\.)\n            #t\n            (check-third-part (rest file_name)))))\n\
    \  (define (check-fourth-part file_name)\n    (if (empty? file_name)\n       \
    \ #f\n        (if (char=? (first file_name) #\\.)\n            #t\n          \
    \  (check-fourth-part (rest file_name)))))\n  (define (check-fifth-part file_name)\n\
    \    (if (empty? file_name)\n        #f\n        (if (char=? (first file_name)",
  "  (define (check-digits file_name)\n    (define (count-digits file_name)\n    \
    \  (cond\n        [(empty? file_name) 0]\n        [(char-numeric? (first file_name))\
    \ (+ 1 (count-digits (rest file_name)))]\n        [else (count-digits (rest file_name))]))\n\
    \    (if (> (count-digits file_name) 3)\n        \"No\"\n        \"Yes\"))\n \
    \ (define (check-dot file_name)\n    (define (count-dot file_name)\n      (cond\n\
    \        [(empty? file_name) 0]\n        [(char=? (first file_name) #\\.) (+ 1\
    \ (count-dot (rest file_name)))]\n        [else (count-dot (rest file_name))]))\n\
    \    (if (= (count-dot file_name) 1)\n        \"Yes\"\n        \"No\"))\n  (define\
    \ (check-substring file_name)\n    (define (check-substring-before file_name)\n\
    \      (define (check-first-char file_name)\n        (if (or (char-alphabetic?\
    \ (first file_name)) (char=? (first file_name) #\\_))\n            \"Yes\"\n \
    \           \"No\"))\n      (define (check-substring-before-helper file_name)\n\
    \        (cond\n          [(empty? file_name) \"Yes\"]\n          [(char-alphabetic?\
    \ (first file_name)) (check-substring-before-helper (rest file_name))]\n     \
    \     [(char=? (first file_name) #\\.) \"Yes\"]\n          [else \"No\"]))\n \
    \     (if (string=? (check-first-char file_name) \"Yes\")\n          (check-substring-before-helper\
    \ (rest file_name))\n          \"No\"))\n    (define (check-substring-after file_name)\n\
    \      (define (check-substring-after-helper file_name)\n        (cond\n     \
    \     [(empty? file_name) \"Yes\"]\n          [(char=? (first file_name) #\\.)\
    \ \"Yes\"]\n          [(char-alph", "  (define (count-digits str)\n    (cond [(empty?\
    \ str) 0]\n          [(char-numeric? (first str)) (+ 1 (count-digits (rest str)))]\n\
    \          [else (count-digits (rest str))]))\n  (define (count-dots str)\n  \
    \  (cond [(empty? str) 0]\n          [(char=? (first str) #\\.) (+ 1 (count-dots\
    \ (rest str)))]\n          [else (count-dots (rest str))]))\n  (define (is-valid-extension?\
    \ str)\n    (cond [(string=? str \"txt\") #t]\n          [(string=? str \"exe\"\
    ) #t]\n          [(string=? str \"dll\") #t]\n          [else #f]))\n  (define\
    \ (is-valid-file-name? str)\n    (and (not (empty? str))\n         (char-alphabetic?\
    \ (first str))\n         (not (empty? (rest str)))\n         (is-valid-extension?\
    \ (last (string-split str #\\.)))))\n  (cond [(and (= (count-digits file_name)\
    \ 3)\n              (= (count-dots file_name) 1)\n              (is-valid-file-name?\
    \ file_name)) \"Yes\"]\n        [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (define (count-digits str)\n    (if (string-empty? str)\n     \
    \   0\n        (if (char-numeric? (string-ref str 0))\n            (+ 1 (count-digits\
    \ (string-drop str 1)))\n            (count-digits (string-drop str 1)))))\n \
    \ (define (is-valid-extension ext)\n    (cond\n      [(string=? ext \"txt\") #t]\n\
    \      [(string=? ext \"exe\") #t]\n      [(string=? ext \"dll\") #t]\n      [else\
    \ #f]))\n  (define (is-valid-name name)\n    (and (not (string-empty? name))\n\
    \         (char-alphabetic? (string-ref name 0))))\n  (define (is-valid-file-name\
    \ file_name)\n    (define (split-file-name file_name)\n      (define (split-file-name-helper\
    \ file_name)\n        (if (string-empty? file_name)\n            '()\n       \
    \     (cons (string-take file_name 1)\n                  (split-file-name-helper\
    \ (string-drop file_name 1)))))\n      (define (join-file-name file_name)\n  \
    \      (if (null? file_name)\n            \"\"\n            (string-append (car\
    \ file_name) (join-file-name (cdr file_name)))))\n      (define (split-file-name-helper2\
    \ file_name)\n        (if (string-empty? file_name)\n            '()\n       \
    \     (if (string=? (string-take file_name 1) \".\")\n                (cons (join-file-name\
    \ (split-file-name-helper file_name))\n                      (string-drop file_name\
    \ 1))\n                (split-file-name-helper2 (string-drop file_name 1)))))\n\
    \      (split-file-name-helper2 (split-file-name-helper file_name)))\n    (define\
    \ (split-file-name-helper file_name)\n      (if (string-empty? file_name)\n  \
    \        '()\n          (cons (string-take file_name 1)\n", "  (define (count-digits\
    \ file_name)\n    (if (empty? file_name)\n        0\n        (if (char-numeric?\
    \ (first file_name))\n            (+ 1 (count-digits (rest file_name)))\n    \
    \        (count-digits (rest file_name)))))\n  (define (count-dots file_name)\n\
    \    (if (empty? file_name)\n        0\n        (if (char=? (first file_name)\
    \ #\\.)\n            (+ 1 (count-dots (rest file_name)))\n            (count-dots\
    \ (rest file_name)))))\n  (define (check-extension file_name)\n    (if (empty?\
    \ file_name)\n        #f\n        (if (or (string=? (substring file_name 0 3)\
    \ \"txt\")\n                (string=? (substring file_name 0 3) \"exe\")\n   \
    \             (string=? (substring file_name 0 3) \"dll\"))\n            #t\n\
    \            #f)))\n  (define (check-prefix file_name)\n    (if (empty? file_name)\n\
    \        #f\n        (if (or (char-alphabetic? (first file_name))\n          \
    \      (char=? (first file_name) #\\_))\n            #t\n            #f)))\n \
    \ (if (and (= (count-digits file_name) 3)\n           (= (count-dots file_name)\
    \ 1)\n           (check-extension file_name)\n           (check-prefix file_name))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (check_digits file_name)\n    (cond\n\
    \      [(empty? file_name) 0]\n      [(char-numeric? (first file_name)) (+ 1 (check_digits\
    \ (rest file_name)))]\n      [else (check_digits (rest file_name))]))\n  (define\
    \ (check_dot file_name)\n    (cond\n      [(empty? file_name) #f]\n      [(char=?\
    \ (first file_name) #\\.) #t]\n      [else (check_dot (rest file_name))]))\n \
    \ (define (check_first file_name)\n    (cond\n      [(empty? file_name) #f]\n\
    \      [(char-alphabetic? (first file_name)) #t]\n      [else (check_first (rest\
    \ file_name))]))\n  (define (check_last file_name)\n    (cond\n      [(empty?\
    \ file_name) #f]\n      [(string=? (list->string (rest file_name)) \"txt\") #t]\n\
    \      [(string=? (list->string (rest file_name)) \"exe\") #t]\n      [(string=?\
    \ (list->string (rest file_name)) \"dll\") #t]\n      [else #f]))\n  (cond\n \
    \   [(or (not (check_digits file_name)) (< (check_digits file_name) 4)) \"No\"\
    ]\n    [(not (check_dot file_name)) \"No\"]\n    [(not (check_first file_name))\
    \ \"No\"]\n    [(not (check_last file_name)) \"No\"]\n    [else \"Yes\"]))\n",
  "  (let ([file_name_parts (string-split file_name \"\\\\.\")])\n    (cond\n    \
    \  [(and (= (length file_name_parts) 2)\n            (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}$\"\
    \ (first file_name_parts))\n            (member (second file_name_parts) '(\"\
    txt\" \"exe\" \"dll\")))\n       \"Yes\"]\n      [else \"No\"])))\n", "  (define\
    \ (count-digits file_name)\n    (cond ((empty? file_name) 0)\n          ((char-numeric?\
    \ (first file_name))\n           (+ 1 (count-digits (rest file_name))))\n    \
    \      (else (count-digits (rest file_name)))))\n  (define (count-dots file_name)\n\
    \    (cond ((empty? file_name) 0)\n          ((char=? (first file_name) #\\.)\n\
    \           (+ 1 (count-dots (rest file_name))))\n          (else (count-dots\
    \ (rest file_name)))))\n  (define (valid-extension? file_name)\n    (cond ((empty?\
    \ file_name) #f)\n          ((char=? (first file_name) #\\.)\n           (cond\
    \ ((string=? (rest file_name) \"txt\") #t)\n                 ((string=? (rest\
    \ file_name) \"exe\") #t)\n                 ((string=? (rest file_name) \"dll\"\
    ) #t)\n                 (else #f)))\n          (else (valid-extension? (rest file_name)))))\n\
    \  (define (valid-prefix? file_name)\n    (cond ((empty? file_name) #f)\n    \
    \      ((char=? (first file_name) #\\.) #f)\n          ((char-alphabetic? (first\
    \ file_name)) #t)\n          (else (valid-prefix? (rest file_name)))))\n  (cond\
    \ ((and (= (count-digits file_name) 3)\n              (= (count-dots file_name)\
    \ 1)\n              (valid-extension? file_name)\n              (valid-prefix?\
    \ file_name))\n         \"Yes\")\n        (else \"No\")))\n", "  (define (check-digits\
    \ file_name)\n    (define (check-digit file_name)\n      (cond\n        [(empty?\
    \ file_name) 0]\n        [(char=? (first file_name) #\\0) (add1 (check-digit (rest\
    \ file_name)))]\n        [(char=? (first file_name) #\\1) (add1 (check-digit (rest\
    \ file_name)))]\n        [(char=? (first file_name) #\\2) (add1 (check-digit (rest\
    \ file_name)))]\n        [(char=? (first file_name) #\\3) (add1 (check-digit (rest\
    \ file_name)))]\n        [(char=? (first file_name) #\\4) (add1 (check-digit (rest\
    \ file_name)))]\n        [(char=? (first file_name) #\\5) (add1 (check-digit (rest\
    \ file_name)))]\n        [(char=? (first file_name) #\\6) (add1 (check-digit (rest\
    \ file_name)))]\n        [(char=? (first file_name) #\\7) (add1 (check-digit (rest\
    \ file_name)))]\n        [(char=? (first file_name) #\\8) (add1 (check-digit (rest\
    \ file_name)))]\n        [(char=? (first file_name) #\\9) (add1 (check-digit (rest\
    \ file_name)))]\n        [else (check-digit (rest file_name))]))\n    (cond\n\
    \      [(> (check-digit file_name) 3) #f]\n      [else #t]))\n  (define (check-dot\
    \ file_name)\n    (define (check-dot-helper file_name)\n      (cond\n        [(empty?\
    \ file_name) 0]\n        [(char=? (first file_name) #\\.) (add1 (check-dot-helper\
    \ (rest file_name)))]\n        [else (check-dot-helper (rest file_name))]))\n\
    \    (cond\n      [(= (check-dot-helper file_name) 1) #t]\n      [else #f]))\n\
    \ ", "  (define (count-digits file_name)\n    (define (count-digits-iter file_name\
    \ count)\n      (cond ((null? file_name) count)\n            ((char-numeric? (car\
    \ file_name))\n             (count-digits-iter (cdr file_name) (+ count 1)))\n\
    \            (else (count-digits-iter (cdr file_name) count))))\n    (count-digits-iter\
    \ file_name 0))\n  (define (count-dots file_name)\n    (define (count-dots-iter\
    \ file_name count)\n      (cond ((null? file_name) count)\n            ((char=?\
    \ (car file_name) #\\.)\n             (count-dots-iter (cdr file_name) (+ count\
    \ 1)))\n            (else (count-dots-iter (cdr file_name) count))))\n    (count-dots-iter\
    \ file_name 0))\n  (define (substring-before-dot file_name)\n    (define (substring-before-dot-iter\
    \ file_name)\n      (cond ((null? file_name) \"\")\n            ((char=? (car\
    \ file_name) #\\.)\n             (list->string (reverse (cdr file_name))))\n \
    \           (else (substring-before-dot-iter (cdr file_name)))))\n    (substring-before-dot-iter\
    \ file_name))\n  (define (substring-after-dot file_name)\n    (define (substring-after-dot-iter\
    \ file_name)\n      (cond ((null? file_name) \"\")\n            ((char=? (car\
    \ file_name) #\\.)\n             (list->string (cdr file_name)))\n           \
    \ (else (substring-after-dot-iter (cdr file_name)))))\n    (substring-after-dot-iter\
    \ file_name))\n  (define (is-valid-extension? file_name)\n    (cond ((string=?\
    \ (substring-after-dot file_name) \"txt\") #t)\n          ((string=? (substring-after-dot\
    \ file_name) \"exe\") #t)\n          ((string=? (", "  (define (is_valid_file_name\
    \ file_name)\n    (define (is_valid_extension extension)\n      (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n    (define (is_valid_name name)\n      (and (not\
    \ (empty? name))\n           (regexp-match? #rx\"^[a-zA-Z]+$\" name)))\n    (define\
    \ (is_valid_digits digits)\n      (and (not (empty? digits))\n           (<= (string-length\
    \ digits) 3)))\n    (define (is_valid_file_name_parts parts)\n      (and (is_valid_digits\
    \ (car parts))\n           (is_valid_name (cadr parts))\n           (is_valid_extension\
    \ (caddr parts))))\n    (define (split_file_name file_name)\n      (regexp-split\
    \ #rx\"\\.\" file_name))\n    (is_valid_file_name_parts (split_file_name file_name)))\n\
    \  (if (is_valid_file_name file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define\
    \ (check-digits file_name)\n    (define (helper file_name count)\n      (cond\n\
    \        [(empty? file_name) (if (> count 3) \"No\" \"Yes\")]\n        [(char-numeric?\
    \ (first file_name)) (helper (rest file_name) (+ count 1))]\n        [else (helper\
    \ (rest file_name) count)]))\n    (helper file_name 0))\n  (define (check-dot\
    \ file_name)\n    (define (helper file_name count)\n      (cond\n        [(empty?\
    \ file_name) (if (= count 1) \"Yes\" \"No\")]\n        [(char=? (first file_name)\
    \ #\\.) (helper (rest file_name) (+ count 1))]\n        [else (helper (rest file_name)\
    \ count)]))\n    (helper file_name 0))\n  (define (check-before-dot file_name)\n\
    \    (define (helper file_name)\n      (cond\n        [(empty? file_name) \"No\"\
    ]\n        [(char=? (first file_name) #\\.) \"Yes\"]\n        [(char-alphabetic?\
    \ (first file_name)) (helper (rest file_name))]\n        [else \"No\"]))\n   \
    \ (helper file_name))\n  (define (check-after-dot file_name)\n    (define (helper\
    \ file_name)\n      (cond\n        [(empty? file_name) \"No\"]\n        [(char=?\
    \ (first file_name) #\\.) (if (or (string=? (substring file_name 1 4) \"txt\"\
    )\n                                                (string=? (substring file_name\
    \ 1 4) \"exe\")\n                                                (string=? (substring\
    \ file_name 1 4) \"dll\"))\n                                            \"Yes\"\
    \n                                            \"No\")]\n        [else (helper\
    \ (rest file_name))]))\n    (helper file_name))\n  (cond\n    [(string=? (check-digits\
    \ file_name) \"No\") \"No\"]\n    [(string=? (check-dot file_name) \"No\") \"\
    No\"]\n   ", "  (let ([digits (regexp-match #rx\"[0-9]\" file_name)]\n       \
    \ [dot (regexp-match #rx\"\\.\" file_name)]\n        [before-dot (substring file_name\
    \ 0 (car dot))]\n        [after-dot (substring file_name (cadr dot))])\n    (cond\n\
    \      [(> (length digits) 3) \"No\"]\n      [(> (length dot) 1) \"No\"]\n   \
    \   [(or (empty? before-dot) (not (regexp-match #rx\"[a-zA-Z]\" before-dot)))\
    \ \"No\"]\n      [(not (member after-dot '(\"txt\" \"exe\" \"dll\"))) \"No\"]\n\
    \      [else \"Yes\"])))\n", "  (define (is_valid_extension? extension)\n    (member\
    \ extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n  \
    \  (and (not (empty? name))\n         (char-alphabetic? (string-ref name 0))\n\
    \         (not (> (count (lambda (c) (char-numeric? c)) name) 3))))\n  (define\
    \ (is_valid_file_name? file_name)\n    (let ((name (substring file_name 0 (string-index\
    \ file_name #\\.)))\n          (extension (substring file_name (+ 1 (string-index\
    \ file_name #\\.)))))\n      (and (is_valid_name? name)\n           (is_valid_extension?\
    \ extension))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"\
    No\"))\n", "  (define (count-digits file_name)\n    (define (count-digits-iter\
    \ file_name count)\n      (cond [(empty? file_name) count]\n            [(char-numeric?\
    \ (first file_name))\n             (count-digits-iter (rest file_name) (+ count\
    \ 1))]\n            [else (count-digits-iter (rest file_name) count)]))\n    (count-digits-iter\
    \ file_name 0))\n  (define (count-dots file_name)\n    (define (count-dots-iter\
    \ file_name count)\n      (cond [(empty? file_name) count]\n            [(char=?\
    \ (first file_name) #\\.)\n             (count-dots-iter (rest file_name) (+ count\
    \ 1))]\n            [else (count-dots-iter (rest file_name) count)]))\n    (count-dots-iter\
    \ file_name 0))\n  (define (substring-before-dot file_name)\n    (define (substring-before-dot-iter\
    \ file_name)\n      (cond [(empty? file_name) empty]\n            [(char=? (first\
    \ file_name) #\\.) empty]\n            [else (cons (first file_name)\n       \
    \                 (substring-before-dot-iter (rest file_name)))]))\n    (substring-before-dot-iter\
    \ file_name))\n  (define (substring-after-dot file_name)\n    (define (substring-after-dot-iter\
    \ file_name)\n      (cond [(empty? file_name) empty]\n            [(char=? (first\
    \ file_name) #\\.)\n             (substring-after-dot-iter (rest file_name))]\n\
    \            [else (substring-after-dot-iter (rest file_name))]))\n    (substring-after-dot-iter\
    \ file_name))\n  (define (valid-substring-after-dot file_name)\n    (cond [(string=?\
    \ (substring-after-dot file_name) \"txt\") #t]\n          [(string=? (substring-after-dot\
    \ file_name) \"exe\") #t]\n          [(string", "  (define (count-digits str)\n\
    \    (cond\n      [(empty? str) 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits\
    \ (rest str)))]\n      [else (count-digits (rest str))]))\n  (define (count-dots\
    \ str)\n    (cond\n      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+\
    \ 1 (count-dots (rest str)))]\n      [else (count-dots (rest str))]))\n  (define\
    \ (valid-extension? str)\n    (cond\n      [(string=? str \"txt\") #t]\n     \
    \ [(string=? str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else\
    \ #f]))\n  (define (valid-name? str)\n    (cond\n      [(empty? str) #f]\n   \
    \   [(char-alphabetic? (first str)) #t]\n      [else #f]))\n  (define (valid-file-name?\
    \ str)\n    (cond\n      [(and (= (count-digits str) 3) (= (count-dots str) 1)\
    \ (valid-name? (substring str 0 (string-index str #\\.))) (valid-extension? (substring\
    \ str (+ (string-index str #\\.) 1) (string-length str)))) #t]\n      [else #f]))\n\
    \  (cond\n    [(valid-file-name? file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (count-digits file_name)\n    (cond [(empty? file_name) 0]\n        \
    \  [(char-numeric? (first file_name))\n           (+ 1 (count-digits (rest file_name)))]\n\
    \          [else (count-digits (rest file_name))]))\n  (define (count-dots file_name)\n\
    \    (cond [(empty? file_name) 0]\n          [(char=? (first file_name) #\\.)\n\
    \           (+ 1 (count-dots (rest file_name)))]\n          [else (count-dots\
    \ (rest file_name))]))\n  (define (check-extension file_name)\n    (cond [(empty?\
    \ file_name) #f]\n          [(char=? (first file_name) #\\.)\n           (cond\
    \ [(string=? (rest file_name) \"txt\") #t]\n                 [(string=? (rest\
    \ file_name) \"exe\") #t]\n                 [(string=? (rest file_name) \"dll\"\
    ) #t]\n                 [else #f])]\n          [else (check-extension (rest file_name))]))\n\
    \  (define (check-name file_name)\n    (cond [(empty? file_name) #f]\n       \
    \   [(char=? (first file_name) #\\.)\n           (cond [(empty? (rest file_name))\
    \ #f]\n                 [(char-alphabetic? (first (rest file_name))) #t]\n   \
    \              [else #f])]\n          [else (check-name (rest file_name))]))\n\
    \  (cond [(or (> (count-digits file_name) 3)\n             (= (count-dots file_name)\
    \ 0)\n             (not (check-name file_name))\n             (not (check-extension\
    \ file_name)))]\n        [else \"Yes\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n```\n\
    \n```racket\n#lang racket\n", "  (define (is_valid_extension ext)\n    (member\
    \ ext '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name name)\n    (and (regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name)\n         (not (regexp-match #rx\"[0-9]{4}\"\
    \ name))))\n  (define (is_valid_file_name file_name)\n    (let ([parts (string-split\
    \ file_name \"\\\\.\")])\n      (and (= (length parts) 2)\n           (is_valid_name\
    \ (first parts))\n           (is_valid_extension (second parts)))))\n  (if (is_valid_file_name\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (count-digits file_name)\n\
    \    (cond\n      [(empty? file_name) 0]\n      [(char-numeric? (first file_name))\n\
    \       (+ 1 (count-digits (rest file_name)))]\n      [else (count-digits (rest\
    \ file_name))]))\n  (define (count-dots file_name)\n    (cond\n      [(empty?\
    \ file_name) 0]\n      [(char=? (first file_name) #\\.)\n       (+ 1 (count-dots\
    \ (rest file_name)))]\n      [else (count-dots (rest file_name))]))\n  (define\
    \ (valid-extension? file_name)\n    (member (substring file_name (string-index\
    \ file_name #\\.))\n            '(\"txt\" \"exe\" \"dll\")))\n  (define (valid-prefix?\
    \ file_name)\n    (and (not (empty? (substring file_name 0 (string-index file_name\
    \ #\\.))))\n         (char-alphabetic? (string-ref file_name 0))))\n  (cond\n\
    \    [(and (= (count-digits file_name) 3)\n          (= (count-dots file_name)\
    \ 1)\n          (valid-extension? file_name)\n          (valid-prefix? file_name))\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n    (if (string-empty?\
    \ str)\n        0\n        (if (char-numeric? (string-ref str 0))\n          \
    \  (+ 1 (count-digits (string-drop str 1)))\n            (count-digits (string-drop\
    \ str 1)))))\n  (define (count-dots str)\n    (if (string-empty? str)\n      \
    \  0\n        (if (char=? (string-ref str 0) #\\.)\n            (+ 1 (count-dots\
    \ (string-drop str 1)))\n            (count-dots (string-drop str 1)))))\n  (define\
    \ (is-valid-extension str)\n    (cond\n      [(string=? str \"txt\") #t]\n   \
    \   [(string=? str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else\
    \ #f]))\n  (define (is-valid-name str)\n    (and (char-alphabetic? (string-ref\
    \ str 0))\n         (not (string-empty? str))))\n  (define (is-valid-file-name\
    \ str)\n    (let* ([dot-index (string-index str #\\.)]\n           [name (substring\
    \ str 0 dot-index)]\n           [extension (substring str (+ dot-index 1))])\n\
    \      (and (= (count-digits str) 0)\n           (= (count-dots str) 1)\n    \
    \       (is-valid-name name)\n           (is-valid-extension extension))))\n \
    \ (if (is-valid-file-name file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define\
    \ (is_valid_file_name? file_name)\n    (define (is_valid_extension? extension)\n\
    \      (member extension '(\"txt\" \"exe\" \"dll\")))\n    (define (is_valid_name?\
    \ name)\n      (and (not (empty? name))\n           (regexp-match? #rx\"^[a-zA-Z]\"\
    \ name)))\n    (define (is_valid_digits? digits)\n      (and (not (empty? digits))\n\
    \           (<= (string-length digits) 3)))\n    (define (is_valid_file_name_parts?\
    \ name extension)\n      (and (is_valid_name? name)\n           (is_valid_extension?\
    \ extension)))\n    (define (split-file-name file_name)\n      (regexp-match #rx\"\
    (.*)\\.(.*)\" file_name))\n    (define (get-file-name-parts file_name)\n     \
    \ (match (split-file-name file_name)\n        [(list _ name extension)\n     \
    \    (list name extension)]))\n    (define (get-file-name-digits file_name)\n\
    \      (regexp-match #rx\"[0-9]+\" file_name))\n    (and (is_valid_file_name_parts?\
    \ (first (get-file-name-parts file_name))\n                                  \
    \  (second (get-file-name-parts file_name)))\n         (is_valid_digits? (get-file-name-digits\
    \ file_name))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"\
    No\"))\n", "  (define (count-digits str)\n    (cond\n      [(empty? str) 0]\n\
    \      [(char-numeric? (first str)) (+ 1 (count-digits (rest str)))]\n      [else\
    \ (count-digits (rest str))]))\n  (define (count-dots str)\n    (cond\n      [(empty?\
    \ str) 0]\n      [(char=? (first str) #\\.) (+ 1 (count-dots (rest str)))]\n \
    \     [else (count-dots (rest str))]))\n  (define (starts-with-letter? str)\n\
    \    (cond\n      [(empty? str) false]\n      [(char-alphabetic? (first str))\
    \ true]\n      [else false]))\n  (define (is-valid-extension? str)\n    (cond\n\
    \      [(empty? str) false]\n      [(string=? str \"txt\") true]\n      [(string=?\
    \ str \"exe\") true]\n      [(string=? str \"dll\") true]\n      [else false]))\n\
    \  (define (get-extension str)\n    (cond\n      [(empty? str) \"\"]\n      [(char=?\
    \ (first str) #\\.) (string (first str))]\n      [else (string-append (get-extension\
    \ (rest str)) (string (first str)))]))\n  (define (get-name str)\n    (cond\n\
    \      [(empty? str) \"\"]\n      [(char=? (first str) #\\.) \"\"]\n      [else\
    \ (string-append (get-name (rest str)) (string (first str)))]))\n  (cond\n   \
    \ [(> (count-digits file_name) 3) \"No\"]\n    [(not (= (count-dots file_name)\
    \ 1)) \"No\"]\n    [(not (starts-with-letter? (get-name file_name))) \"No\"]\n\
    \    [(not (is-valid-extension? (get-extension file_name))) \"No\"]\n    [else\
    \ \"Yes\"]))\n", "  (define (check-digits file_name)\n    (define (helper file_name\
    \ count)\n      (cond\n        [(empty? file_name) (= count 3)]\n        [(char-numeric?\
    \ (first file_name)) (helper (rest file_name) (+ count 1))]\n        [else (helper\
    \ (rest file_name) count)]))\n    (helper file_name 0))\n  (define (check-dot\
    \ file_name)\n    (define (helper file_name count)\n      (cond\n        [(empty?\
    \ file_name) (= count 1)]\n        [(char=? (first file_name) #\\.) (helper (rest\
    \ file_name) (+ count 1))]\n        [else (helper (rest file_name) count)]))\n\
    \    (helper file_name 0))\n  (define (check-substring-before-dot file_name)\n\
    \    (define (helper file_name)\n      (cond\n        [(empty? file_name) #f]\n\
    \        [(char=? (first file_name) #\\.) #t]\n        [(char-alphabetic? (first\
    \ file_name)) (helper (rest file_name))]\n        [else #f]))\n    (helper file_name))\n\
    \  (define (check-substring-after-dot file_name)\n    (define (helper file_name)\n\
    \      (cond\n        [(empty? file_name) #f]\n        [(char=? (first file_name)\
    \ #\\.) (member (string->symbol (string-append (list-ref file_name 1) (list-ref\
    \ file_name 2) (list-ref file_name 3))) '(\"txt\" \"exe\" \"dll\"))]\n       \
    \ [else (helper (rest file_name))]))\n    (helper file_name))\n  (cond\n    [(and\
    \ (check-digits file_name) (check-dot file_name) (check-substring-before-dot file_name)\
    \ (check-substring-after-dot file_name)) \"Yes\"]\n    [else \"No\"]))\n", " \
    \ (define (is_valid_extension? ext)\n    (member ext '(\"txt\" \"exe\" \"dll\"\
    )))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n         (regexp-match?\
    \ #rx\"^[a-zA-Z]\" name)))\n  (define (is_valid_file_name? file_name)\n    (let*\
    \ ([parts (string-split file_name #\\.)]\n           [name (first parts)]\n  \
    \         [ext (second parts)])\n      (and (is_valid_name? name)\n          \
    \ (is_valid_extension? ext)\n           (not (> (count (regexp-match #rx\"[0-9]\"\
    \ name)) 3)))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"\
    No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n    (define\
    \ (helper str count)\n      (cond [(empty? str) count]\n            [(char-numeric?\
    \ (first str)) (helper (rest str) (+ count 1))]\n            [else (helper (rest\
    \ str) count)]))\n    (helper str 0))\n  (define (check-extension str)\n    (cond\
    \ [(string=? str \"txt\") #t]\n          [(string=? str \"exe\") #t]\n       \
    \   [(string=? str \"dll\") #t]\n          [else #f]))\n  (define (check-file-name\
    \ str)\n    (define (helper str)\n      (cond [(empty? str) #f]\n            [(char-numeric?\
    \ (first str)) #t]\n            [else (helper (rest str))]))\n    (helper str))\n\
    \  (define (check-substr str)\n    (define (helper str)\n      (cond [(empty?\
    \ str) #f]\n            [(char-alphabetic? (first str)) #t]\n            [else\
    \ (helper (rest str))]))\n    (helper str))\n  (define (check-dot str)\n    (define\
    \ (helper str count)\n      (cond [(empty? str) count]\n            [(char=? (first\
    \ str) #\\.) (+ count 1)]\n            [else (helper (rest str) count)]))\n  \
    \  (helper str 0))\n  (define (split-file-name str)\n    (define (helper str1\
    \ str2)\n      (cond [(empty? str1) (list str2 (reverse str2))]\n            [(char=?\
    \ (first str1) #\\.) (list (reverse str2) (rest str1))]\n            [else (helper\
    \ (rest str1) (cons (first str1) str2))]))\n    (helper str '()))\n  (define (check-file-name-validity\
    \ str)\n    (define (helper str)\n      (cond [(empty? str) #t]\n            [(char-alphabetic?\
    \ (first str)) (helper (rest str))]\n            [(char-numeric? (", "  (cond\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n\
    \    [else \"No\"]))\n", "  (define (is_valid_extension ext)\n    (or (string=?\
    \ ext \"txt\")\n        (string=? ext \"exe\")\n        (string=? ext \"dll\"\
    )))\n  (define (is_valid_name name)\n    (and (not (string-empty? name))\n   \
    \      (char-alphabetic? (string-ref name 0))))\n  (define (is_valid_file_name\
    \ file_name)\n    (let ([name (string-before file_name \".\")])\n      (and (is_valid_name\
    \ name)\n           (is_valid_extension (string-after file_name \".\"))\n    \
    \       (not (> (string-count name #rx\"[0-9]\") 3)))))\n  (if (is_valid_file_name\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (count-digits str)\n\
    \    (if (empty? str)\n        0\n        (if (char-numeric? (first str))\n  \
    \          (+ 1 (count-digits (rest str)))\n            (count-digits (rest str)))))\n\
    \  (define (count-dots str)\n    (if (empty? str)\n        0\n        (if (char=?\
    \ (first str) #\\.)\n            (+ 1 (count-dots (rest str)))\n            (count-dots\
    \ (rest str)))))\n  (define (check-extension str)\n    (if (empty? str)\n    \
    \    #f\n        (if (or (string=? str \"txt\") (string=? str \"exe\") (string=?\
    \ str \"dll\"))\n            #t\n            #f)))\n  (define (check-first-char\
    \ str)\n    (if (empty? str)\n        #f\n        (if (or (char-alphabetic? (first\
    \ str)) (char=? (first str) #\\_))\n            #t\n            #f)))\n  (if (and\
    \ (= (count-digits file_name) 3) (= (count-dots file_name) 1) (check-extension\
    \ (cadr (string-split file_name #\\.))) (check-first-char (car (string-split file_name\
    \ #\\.))))\n      \"Yes\"\n      \"No\"))\n", "  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_extension? extension)\n      (cond ((string=?\
    \ extension \"txt\") #t)\n            ((string=? extension \"exe\") #t)\n    \
    \        ((string=? extension \"dll\") #t)\n            (else #f)))\n    (define\
    \ (is_valid_name? name)\n      (define (is_valid_char? c)\n        (and (char-alphabetic?\
    \ c) (not (char-numeric? c))))\n      (define (is_valid_name-helper? name)\n \
    \       (cond ((string-empty? name) #t)\n              ((is_valid_char? (string-ref\
    \ name 0))\n               (is_valid_name-helper? (substring name 1)))\n     \
    \         (else #f)))\n      (and (not (string-empty? name)) (is_valid_name-helper?\
    \ name)))\n    (define (is_valid_number-of-digits? file_name)\n      (define (is_valid-number-of-digits-helper?\
    \ file_name counter)\n        (cond ((string-empty? file_name)\n             \
    \  (if (= counter 3) #f #t))\n              ((char-numeric? (string-ref file_name\
    \ 0))\n               (is_valid-number-of-digits-helper? (substring file_name\
    \ 1)\n                                                  (+ counter 1)))\n    \
    \          (else (is_valid-number-of-digits-helper? (substring file_name 1)\n\
    \                                                       counter))))\n      (is_valid-number-of-digits-helper?\
    \ file_name 0))\n    (define (is_valid_number-of-dots? file_name)\n      (define\
    \ (is_valid-number-of-dots-helper? file_name counter)\n        (cond ((string-empty?\
    \ file_name)\n               (if (= counter 1) #t #f))\n              ((char=?\
    \ (string-ref file_name 0) #\\.)\n               (is_valid-number-of-dots-helper?\
    \ (substring file_name 1)\n", "  (define (check-digit-count file_name)\n    (define\
    \ (count-digits file_name)\n      (if (empty? file_name)\n          0\n      \
    \    (if (char-numeric? (first file_name))\n              (+ 1 (count-digits (rest\
    \ file_name)))\n              (count-digits (rest file_name)))))\n    (if (> (count-digits\
    \ file_name) 3)\n        \"No\"\n        \"Yes\"))\n  (define (check-dot-count\
    \ file_name)\n    (define (count-dots file_name)\n      (if (empty? file_name)\n\
    \          0\n          (if (char=? (first file_name) #\\.)\n              (+\
    \ 1 (count-dots (rest file_name)))\n              (count-dots (rest file_name)))))\n\
    \    (if (= (count-dots file_name) 1)\n        \"Yes\"\n        \"No\"))\n  (define\
    \ (check-substring-before-dot file_name)\n    (define (substring-before-dot file_name)\n\
    \      (if (empty? file_name)\n          \"\"\n          (if (char=? (first file_name)\
    \ #\\.)\n              \"\"\n              (string-append (substring-before-dot\
    \ (rest file_name)) (string (first file_name))))))\n    (if (empty? (substring-before-dot\
    \ file_name))\n        \"No\"\n        (if (char-alphabetic? (string-ref (substring-before-dot\
    \ file_name) 0))\n            \"Yes\"\n            \"No\")))\n  (define (check-substring-after-dot\
    \ file_name)\n    (define (substring-after-dot file_name)\n      (if (empty? file_name)\n\
    \          \"\"\n          (if (char=? (first file_name) #\\.)\n             \
    \ (rest file_name)\n              (substring-after-dot (rest file_name)))))\n\
    \    (if (or (string=? (substring-after-dot file_name) \"txt\")\n            (string=?\
    \ (substring-after-dot file_name) \"exe\")\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (is_valid_file_name file_name)\n    (define (is_valid_substring_before_dot\
    \ sub_str)\n      (and (not (empty? sub_str))\n           (regexp-match? #rx\"\
    ^[a-zA-Z]\" sub_str)))\n    (define (is_valid_substring_after_dot sub_str)\n \
    \     (member sub_str '(\"txt\" \"exe\" \"dll\")))\n    (define (is_valid_number_of_digits\
    \ sub_str)\n      (define (count_digits sub_str)\n        (if (empty? sub_str)\n\
    \            0\n            (if (regexp-match? #rx\"^[0-9]\" sub_str)\n      \
    \          (+ 1 (count_digits (substring sub_str 1)))\n                (count_digits\
    \ (substring sub_str 1)))))\n      (if (<= (count_digits sub_str) 3)\n       \
    \   #t\n          #f))\n    (define (is_valid_number_of_dots sub_str)\n      (define\
    \ (count_dots sub_str)\n        (if (empty? sub_str)\n            0\n        \
    \    (if (regexp-match? #rx\"^\\.\" sub_str)\n                (+ 1 (count_dots\
    \ (substring sub_str 1)))\n                (count_dots (substring sub_str 1)))))\n\
    \      (if (= (count_dots sub_str) 1)\n          #t\n          #f))\n    (define\
    \ (split_file_name file_name)\n      (define (split_file_name_helper file_name)\n\
    \        (if (empty? file_name)\n            '()\n            (if (regexp-match?\
    \ #rx\"^\\.\" file_name)\n                (cons (substring file_name 0 (regexp-match-end\
    \ 0)) (split_file_name_helper (substring file_name (regexp-match-end 0))))\n \
    \               (cons (substring file_name 0 (regexp-match-end 0)) (split_file_name_helper\
    \ (substring file_", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits\
    \ str)\n    (cond [(empty? str) 0]\n          [(char-numeric? (first str)) (+\
    \ 1 (count-digits (rest str)))]\n          [else (count-digits (rest str))]))\n\
    \  (define (count-dots str)\n    (cond [(empty? str) 0]\n          [(char=? (first\
    \ str) #\\.) (+ 1 (count-dots (rest str)))]\n          [else (count-dots (rest\
    \ str))]))\n  (define (is-valid-extension? str)\n    (cond [(string=? str \"txt\"\
    ) #t]\n          [(string=? str \"exe\") #t]\n          [(string=? str \"dll\"\
    ) #t]\n          [else #f]))\n  (define (is-valid-substr? str)\n    (and (not\
    \ (empty? str))\n         (char-alphabetic? (first str))))\n  (define (split-file-name\
    \ str)\n    (define (split-file-name-helper str acc)\n      (cond [(empty? str)\
    \ (reverse acc)]\n            [(char=? (first str) #\\.) (split-file-name-helper\
    \ (rest str) (cons (list (reverse (first acc))) (rest acc)))]\n            [else\
    \ (split-file-name-helper (rest str) (cons (cons (first str) (first acc)) (rest\
    \ acc)))]))\n    (split-file-name-helper str (list (list))))\n  (define (is-valid-file-name?\
    \ str)\n    (let ([file-name-parts (split-file-name str)])\n      (and (= (count-digits\
    \ str) 3)\n           (= (count-dots str) 1)\n           (is-valid-substr? (first\
    \ file-name-parts))\n           (is-valid-extension? (second file-name-parts)))))\n\
    \  (cond [(is-valid-file-name? file-name) \"Yes\"]\n        [else \"No\"]))\n",
  "  (define (check-digits file_name)\n    (cond\n      [(empty? file_name) #t]\n\
    \      [(char-numeric? (first file_name))\n       (check-digits (rest file_name))]\n\
    \      [else #f]))\n  (define (check-dot file_name)\n    (cond\n      [(empty?\
    \ file_name) #f]\n      [(char=? (first file_name) #\\.) #t]\n      [else (check-dot\
    \ (rest file_name))]))\n  (define (check-extension file_name)\n    (cond\n   \
    \   [(empty? file_name) #f]\n      [(string=? (string-downcase (string-trim-both\
    \ file_name)) \"txt\") #t]\n      [(string=? (string-downcase (string-trim-both\
    \ file_name)) \"exe\") #t]\n      [(string=? (string-downcase (string-trim-both\
    \ file_name)) \"dll\") #t]\n      [else #f]))\n  (define (check-name file_name)\n\
    \    (cond\n      [(empty? file_name) #f]\n      [(char-alphabetic? (first file_name))\
    \ #t]\n      [else #f]))\n  (cond\n    [(check-digits file_name) #f]\n    [(check-dot\
    \ file_name) #f]\n    [(check-extension file_name) #f]\n    [(check-name file_name)\
    \ #f]\n    [else #t]))\n", "  (define (check_digit_count file_name)\n    (define\
    \ (check_digit_count_iter file_name count)\n      (cond\n        [(empty? file_name)\
    \ (if (> count 3) \"No\" \"Yes\")]\n        [(char-numeric? (first file_name))\
    \ (check_digit_count_iter (rest file_name) (+ count 1))]\n        [else (check_digit_count_iter\
    \ (rest file_name) count)]))\n    (check_digit_count_iter file_name 0))\n  (define\
    \ (check_dot_count file_name)\n    (define (check_dot_count_iter file_name count)\n\
    \      (cond\n        [(empty? file_name) (if (= count 1) \"Yes\" \"No\")]\n \
    \       [(char=? (first file_name) #\\.) (check_dot_count_iter (rest file_name)\
    \ (+ count 1))]\n        [else (check_dot_count_iter (rest file_name) count)]))\n\
    \    (check_dot_count_iter file_name 0))\n  (define (check_substring_before_dot\
    \ file_name)\n    (define (check_substring_before_dot_iter file_name)\n      (cond\n\
    \        [(empty? file_name) \"No\"]\n        [(char-numeric? (first file_name))\
    \ \"No\"]\n        [(char=? (first file_name) #\\.) \"Yes\"]\n        [else (check_substring_before_dot_iter\
    \ (rest file_name))]))\n    (check_substring_before_dot_iter file_name))\n  (define\
    \ (check_substring_after_dot file_name)\n    (define (check_substring_after_dot_iter\
    \ file_name)\n      (cond\n        [(empty? file_name) \"No\"]\n        [(char=?\
    \ (first file_name) #\\.) (check_substring_after_dot_iter (rest file_name))]\n\
    \        [else \"No\"]))\n    (check_substring_after_dot_iter file_name))\n  (cond\n\
    \    [(string=? (check_digit_count file_name) \"No", "  (define (count-digits\
    \ str)\n    (let loop ((i 0) (count 0))\n      (if (= i (string-length str))\n\
    \          count\n          (if (char-numeric? (string-ref str i))\n         \
    \     (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (define\
    \ (count-dots str)\n    (let loop ((i 0) (count 0))\n      (if (= i (string-length\
    \ str))\n          count\n          (if (char=? (string-ref str i) #\\.)\n   \
    \           (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n\
    \  (define (count-letters str)\n    (let loop ((i 0) (count 0))\n      (if (=\
    \ i (string-length str))\n          count\n          (if (char-alphabetic? (string-ref\
    \ str i))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i\
    \ 1) count)))))\n  (define (substring-before-dot str)\n    (substring str 0 (string-index\
    \ str #\\.)))\n  (define (substring-after-dot str)\n    (substring str (+ (string-index\
    \ str #\\.) 1) (string-length str)))\n  (define (is-valid-extension? str)\n  \
    \  (or (string=? str \"txt\")\n        (string=? str \"exe\")\n        (string=?\
    \ str \"dll\")))\n  (if (and (= (count-digits file_name) 3)\n           (= (count-dots\
    \ file_name) 1)\n           (= (count-letters (substring-before-dot file_name))\
    \ 1)\n           (is-valid-extension? (substring-after-dot file_name)))\n    \
    \  \"Yes\"\n      \"No\"))\n", "  (define (count-digits file_name)\n    (cond\n\
    \      [(empty? file_name) 0]\n      [(char-numeric? (first file_name)) (+ 1 (count-digits\
    \ (rest file_name)))]\n      [else (count-digits (rest file_name))]))\n  (define\
    \ (count-dots file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char=?\
    \ (first file_name) #\\.) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots\
    \ (rest file_name))]))\n  (define (is-valid-extension? file_name)\n    (cond\n\
    \      [(string=? (substring file_name (- (string-length file_name) 3) (string-length\
    \ file_name)) \"txt\") #t]\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3) (string-length file_name)) \"exe\") #t]\n      [(string=? (substring\
    \ file_name (- (string-length file_name) 3) (string-length file_name)) \"dll\"\
    ) #t]\n      [else #f]))\n  (define (is-valid-prefix? file_name)\n    (cond\n\
    \      [(char-alphabetic? (string-ref file_name 0)) #t]\n      [else #f]))\n \
    \ (cond\n    [(> (count-digits file_name) 3) \"No\"]\n    [(= (count-dots file_name)\
    \ 1)\n     (cond\n       [(is-valid-extension? file_name)\n        (cond\n   \
    \       [(is-valid-prefix? file_name) \"Yes\"]\n          [else \"No\"])]\n  \
    \     [else \"No\"])]\n    [else \"No\"]))\n", "  (define (is_valid_extension\
    \ ext)\n    (or (string=? ext \"txt\")\n        (string=? ext \"exe\")\n     \
    \   (string=? ext \"dll\")))\n  (define (is_valid_name name)\n    (and (not (empty?\
    \ name))\n         (or (char-alphabetic? (string-ref name 0))\n             (char-numeric?\
    \ (string-ref name 0)))))\n  (define (is_valid_file_name file_name)\n    (let\
    \ ([name (string-split file_name \".\")])\n      (and (= (length name) 2)\n  \
    \         (is_valid_name (first name))\n           (is_valid_extension (second\
    \ name)))))\n  (if (is_valid_file_name file_name)\n      \"Yes\"\n      \"No\"\
    ))\n", "  (define (is_valid_file_name? file_name)\n    (define (is_valid_substring?\
    \ substring)\n      (define (is_valid_substring_char? char)\n        (or (char-alphabetic?\
    \ char) (char-numeric? char)))\n      (and (not (empty? substring))\n        \
    \   (is_valid_substring_char? (string-ref substring 0))\n           (for/and ([char\
    \ (in-string substring)])\n             (is_valid_substring_char? char))))\n \
    \   (define (is_valid_extension? extension)\n      (member extension '(\"txt\"\
    \ \"exe\" \"dll\")))\n    (define (is_valid_dot_count? file_name)\n      (define\
    \ (count_dots file_name)\n        (define (count_dots_helper file_name count)\n\
    \          (if (empty? file_name)\n              count\n              (if (char=?\
    \ (string-ref file_name 0) #\\.)\n                  (count_dots_helper (substring\
    \ file_name 1) (+ count 1))\n                  (count_dots_helper (substring file_name\
    \ 1) count))))\n      (equal? (count_dots file_name) 1))\n    (define (is_valid_digit_count?\
    \ file_name)\n      (define (count_digits file_name)\n        (define (count_digits_helper\
    \ file_name count)\n          (if (empty? file_name)\n              count\n  \
    \            (if (char-numeric? (string-ref file_name 0))\n                  (count_digits_helper\
    \ (substring file_name 1) (+ count 1))\n                  (count_digits_helper\
    \ (substring file_name 1) count))))\n      (and (not (empty? file_name))\n   \
    \        (<= (count_digits file_name) 3)))\n    (define (split_file_name file_name)\n\
    \      (define (split_file_name_helper file_name)\n        (if (empty? file_name)\n\
    \            '()\n            (if (char=? (string-ref file_name 0)", "  (define\
    \ (check-digits file_name)\n    (if (regexp-match #rx\"^[a-zA-Z]+[0-9]{1,3}\\\\\
    .[a-zA-Z]{3}$\" file_name)\n        \"Yes\"\n        \"No\"))\n  (check-digits\
    \ file_name))\n", "  (define (count-digits str)\n    (define (helper str acc)\n\
    \      (cond\n        [(empty? str) acc]\n        [(char-numeric? (first str))\
    \ (helper (rest str) (+ acc 1))]\n        [else (helper (rest str) acc)]))\n \
    \   (helper str 0))\n  (define (count-dots str)\n    (define (helper str acc)\n\
    \      (cond\n        [(empty? str) acc]\n        [(char=? (first str) #\\.) (helper\
    \ (rest str) (+ acc 1))]\n        [else (helper (rest str) acc)]))\n    (helper\
    \ str 0))\n  (define (valid-extension str)\n    (cond\n      [(string=? str \"\
    txt\") #t]\n      [(string=? str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n\
    \      [else #f]))\n  (define (valid-name str)\n    (and (char-alphabetic? (first\
    \ str))\n         (not (empty? str))))\n  (define (valid-file-name str)\n    (and\
    \ (valid-name (substring str 0 (string-index str #\\.)))\n         (valid-extension\
    \ (substring str (+ 1 (string-index str #\\.))))\n         (= (count-dots str)\
    \ 1)\n         (<= (count-digits str) 3)))\n  (cond\n    [(valid-file-name file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n    (cond\n\
    \      [(empty? str) 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits\
    \ (rest str)))]\n      [else (count-digits (rest str))]))\n  (define (count-dots\
    \ str)\n    (cond\n      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+\
    \ 1 (count-dots (rest str)))]\n      [else (count-dots (rest str))]))\n  (define\
    \ (is-valid-extension? str)\n    (cond\n      [(string=? str \"txt\") #t]\n  \
    \    [(string=? str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else\
    \ #f]))\n  (define (is-valid-name? str)\n    (cond\n      [(empty? str) #f]\n\
    \      [(char-alphabetic? (first str)) #t]\n      [else #f]))\n  (define (is-valid-file-name?\
    \ str)\n    (and\n      (<= (count-digits str) 3)\n      (= (count-dots str) 1)\n\
    \      (is-valid-name? (substring str 0 (string-index str #\\.)))\n      (is-valid-extension?\
    \ (substring str (+ 1 (string-index str #\\.))))))\n  (cond\n    [(is-valid-file-name?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond [(string-contains file_name\
    \ #\\.)\n         (cond [(string-contains file_name #\\.)\n                (cond\
    \ [(string-contains file_name #\\.)\n                       (cond [(string-contains\
    \ file_name #\\.)\n                              (cond [(string-contains file_name\
    \ #\\.)\n                                     (cond [(string-contains file_name\
    \ #\\.)\n                                            (cond [(string-contains file_name\
    \ #\\.)\n                                                   (cond [(string-contains\
    \ file_name #\\.)\n                                                          (cond\
    \ [(string-contains file_name #\\.)\n                                        \
    \                         (cond [(string-contains file_name #\\.)\n          \
    \                                                              (cond [(string-contains\
    \ file_name #\\.)\n                                                          \
    \                     (cond [(string-contains file_name #\\.)\n              \
    \                                                                        (cond\
    \ [(string-contains file_name #\\.)\n                                        \
    \                                                     (cond [(string-contains\
    \ file_name #\\.)\n                                                          \
    \                                          (cond [(string-contains file_name #\\\
    .)\n                                                                         \
    \                                  (cond [(string-contains file_name #\\.)\n \
    \                                                                            \
    \                                     (cond [(string-contains file_name #\\.)\n\
    \                                                                            \
    \                                             (cond [(string-contains file_name\
    \ #\\.)\n                                                                    \
    \                                                            (cond [(string-contains\
    \ file_name #\\.)\n                                                          \
    \                                                                            \
    \ (cond [(string-contains file_name #\\.)\n                                  \
    \                                                                            \
    \                                (cond [(string-contains file_name #\\.)\n   \
    \                                                                            \
    \                                                                      (cond [(string-contains\
    \ file_name #\\.)\n                                                          \
    \                                                                            \
    \                      (cond [(string-contains file_name #\\.)\n             \
    \                                                                            \
    \                                                                          (cond\
    \ [(string-contains file_name #\\.)\n                                        \
    \                                                                            \
    \                                                      (cond [(string-contains\
    \ file_name #\\.)\n                                                          \
    \                                                                            \
    \                                           (cond [(string-contains file_name\
    \ #\\.)\n                                ", "  (define (is_valid_extension? extension)\n\
    \    (cond ((equal? extension \"txt\") #t)\n          ((equal? extension \"exe\"\
    ) #t)\n          ((equal? extension \"dll\") #t)\n          (else #f)))\n  (define\
    \ (is_valid_name? name)\n    (and (not (empty? name))\n         (regexp-match?\
    \ #rx\"[a-zA-Z]\" name)))\n  (define (is_valid_file_name? file_name)\n    (define\
    \ (count-digits file_name)\n      (regexp-match? #rx\"[0-9]\" file_name))\n  \
    \  (define (count-dots file_name)\n      (regexp-match? #rx\"\\.\" file_name))\n\
    \    (and (<= (count-digits file_name) 3)\n         (= (count-dots file_name)\
    \ 1)\n         (is_valid_name? (substring file_name 0 (string-index file_name\
    \ \".\")))\n         (is_valid_extension? (substring file_name (+ (string-index\
    \ file_name \".\") 1)))))\n  (cond ((is_valid_file_name? file_name) \"Yes\")\n\
    \        (else \"No\")))\n", "  (define (count-digits str)\n    (cond\n      [(empty?\
    \ str) 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits (rest str)))]\n\
    \      [else (count-digits (rest str))]))\n  (define (count-dots str)\n    (cond\n\
    \      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+ 1 (count-dots (rest\
    \ str)))]\n      [else (count-dots (rest str))]))\n  (define (check-extension\
    \ str)\n    (cond\n      [(string=? (substring str (+ 1 (string-index str #\\\
    .))) \"txt\") #t]\n      [(string=? (substring str (+ 1 (string-index str #\\\
    .))) \"exe\") #t]\n      [(string=? (substring str (+ 1 (string-index str #\\\
    .))) \"dll\") #t]\n      [else #f]))\n  (cond\n    [(and (not (empty? file_name))\n\
    \          (char-alphabetic? (first file_name))\n          (= 1 (count-dots file_name))\n\
    \          (<= (count-digits file_name) 3)\n          (check-extension file_name))\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (check-digits file_name)\n    (let\
    \ ((digits (string-&gt;list (regexp-replace* #rx\"[^0-9]\" file_name \"\"))))\n\
    \      (if (&gt; (length digits) 3)\n          \"No\"\n          \"Yes\")))\n\
    \  (define (check-dot file_name)\n    (let ((dot (regexp-replace* #rx\"[^.]\"\
    \ file_name \"\")))\n      (if (= (length dot) 1)\n          \"Yes\"\n       \
    \   \"No\")))\n  (define (check-substring file_name)\n    (let ((substring (regexp-replace*\
    \ #rx\"\\.[a-zA-Z]+\" file_name \"\")))\n      (if (and (not (empty? substring))\n\
    \               (regexp-match? #rx\"[a-zA-Z]\" substring))\n          \"Yes\"\n\
    \          \"No\")))\n  (define (check-extension file_name)\n    (let ((extension\
    \ (regexp-replace* #rx\"[a-zA-Z]+\\.\" file_name \"\")))\n      (if (member extension\
    \ '(\"txt\" \"exe\" \"dll\"))\n          \"Yes\"\n          \"No\")))\n  (if (and\
    \ (check-digits file_name)\n           (check-dot file_name)\n           (check-substring\
    \ file_name)\n           (check-extension file_name))\n      \"Yes\"\n      \"\
    No\"))\n</code>\n", "  (define (is_valid_extension? ext)\n    (member ext '(\"\
    txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (not (empty?\
    \ name))\n         (char-alphabetic? (string-ref name 0))\n         (not (> (count\
    \ (lambda (c) (char-numeric? c)) name) 3))))\n  (define (is_valid_file_name? file_name)\n\
    \    (let ([name (string-before file_name \".\")]\n          [ext (string-after\
    \ file_name \".\")])\n      (and (is_valid_name? name)\n           (is_valid_extension?\
    \ ext))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"\
    ))\n", "  (define (count-digits file_name)\n    (if (empty? file_name)\n     \
    \   0\n        (if (char-numeric? (first file_name))\n            (+ 1 (count-digits\
    \ (rest file_name)))\n            (count-digits (rest file_name)))))\n  (define\
    \ (count-dots file_name)\n    (if (empty? file_name)\n        0\n        (if (char=?\
    \ (first file_name) #\\.)\n            (+ 1 (count-dots (rest file_name)))\n \
    \           (count-dots (rest file_name)))))\n  (define (substring-before-dot\
    \ file_name)\n    (if (empty? file_name)\n        \"\"\n        (if (char=? (first\
    \ file_name) #\\.)\n            \"\"\n            (string-append (substring-before-dot\
    \ (rest file_name)) (string (first file_name))))))\n  (define (substring-after-dot\
    \ file_name)\n    (if (empty? file_name)\n        \"\"\n        (if (char=? (first\
    \ file_name) #\\.)\n            (rest file_name)\n            (substring-after-dot\
    \ (rest file_name)))))\n  (define (is-valid-extension? extension)\n    (cond [(string=?\
    \ extension \"txt\") #t]\n          [(string=? extension \"exe\") #t]\n      \
    \    [(string=? extension \"dll\") #t]\n          [else #f]))\n  (define (is-valid-substring-before-dot?\
    \ substring)\n    (if (empty? substring)\n        #f\n        (if (char-alphabetic?\
    \ (first substring))\n            #t\n            #f)))\n  (if (and (= (count-digits\
    \ file_name) 3)\n           (= (count-dots file_name) 1)\n           (is-valid-substring-before-dot?\
    \ (substring-before-dot file_name))\n           (is-valid-extension? (substring-after-dot\
    \ file_name)))\n      \"Yes\"\n      \"No\"))\n", "  (define (count-digits str)\n\
    \    (if (empty? str)\n        0\n        (if (char-numeric? (first str))\n  \
    \          (+ 1 (count-digits (rest str)))\n            (count-digits (rest str)))))\n\
    \  (define (count-dots str)\n    (if (empty? str)\n        0\n        (if (char=?\
    \ (first str) #\\.)\n            (+ 1 (count-dots (rest str)))\n            (count-dots\
    \ (rest str)))))\n  (define (valid-substring-before-dot str)\n    (if (empty?\
    \ str)\n        #f\n        (if (char-alphabetic? (first str))\n            #t\n\
    \            (valid-substring-before-dot (rest str)))))\n  (define (valid-substring-after-dot\
    \ str)\n    (if (empty? str)\n        #f\n        (if (char=? (first str) #\\\
    .)\n            (if (string=? (substring str 1 4) \"txt\")\n                #t\n\
    \                (if (string=? (substring str 1 4) \"exe\")\n                \
    \    #t\n                    (if (string=? (substring str 1 4) \"dll\")\n    \
    \                    #t\n                        #f)))\n            (valid-substring-after-dot\
    \ (rest str)))))\n  (if (and (= (count-digits file_name) 3)\n           (= (count-dots\
    \ file_name) 1)\n           (valid-substring-before-dot file_name)\n         \
    \  (valid-substring-after-dot file_name))\n      \"Yes\"\n      \"No\"))\n", " \
    \ (define (count-digits file_name)\n    (if (empty? file_name)\n        0\n  \
    \      (if (char-numeric? (first file_name))\n            (+ 1 (count-digits (rest\
    \ file_name)))\n            (count-digits (rest file_name)))))\n  (define (count-dots\
    \ file_name)\n    (if (empty? file_name)\n        0\n        (if (char=? (first\
    \ file_name) #\\.)\n            (+ 1 (count-dots (rest file_name)))\n        \
    \    (count-dots (rest file_name)))))\n  (define (check-extension file_name)\n\
    \    (if (empty? file_name)\n        #f\n        (if (char=? (first file_name)\
    \ #\\.)\n            (if (member (string-append (string (first (rest file_name)))\
    \ (string (first (rest (rest file_name))))) '(\"txt\" \"exe\" \"dll\"))\n    \
    \            #t\n                #f)\n            (check-extension (rest file_name)))))\n\
    \  (define (check-first-letter file_name)\n    (if (empty? file_name)\n      \
    \  #f\n        (if (char=? (first file_name) #\\.)\n            #f\n         \
    \   (if (char-alphabetic? (first file_name))\n                #t\n           \
    \     (check-first-letter (rest file_name))))))\n  (if (and (not (> (count-digits\
    \ file_name) 3))\n           (= (count-dots file_name) 1)\n           (check-extension\
    \ file_name)\n           (check-first-letter file_name))\n      \"Yes\"\n    \
    \  \"No\"))\n```\n\n## Problem 2\n\n```racket\n#lang racket\n", "  (cond\n   \
    \ [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"\
    ]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits file_name)\n    (cond\n\
    \      [(empty? file_name) 0]\n      [(char-numeric? (first file_name)) (+ 1 (count-digits\
    \ (rest file_name)))]\n      [else (count-digits (rest file_name))]))\n  (define\
    \ (count-dots file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char=?\
    \ (first file_name) #\\.) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots\
    \ (rest file_name))]))\n  (define (check-extension file_name)\n    (cond\n   \
    \   [(empty? file_name) #f]\n      [(string=? (substring file_name 0 3) \"txt\"\
    ) #t]\n      [(string=? (substring file_name 0 3) \"exe\") #t]\n      [(string=?\
    \ (substring file_name 0 3) \"dll\") #t]\n      [else #f]))\n  (define (check-prefix\
    \ file_name)\n    (cond\n      [(empty? file_name) #f]\n      [(char-alphabetic?\
    \ (first file_name)) #t]\n      [else #f]))\n  (cond\n    [(and (= (count-digits\
    \ file_name) 3) (= (count-dots file_name) 1) (check-extension file_name) (check-prefix\
    \ file_name)) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n\
    \    (let loop ((i 0) (count 0))\n      (if (= i (string-length str))\n      \
    \    count\n          (if (char-numeric? (string-ref str i))\n              (loop\
    \ (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (define (count-dots\
    \ str)\n    (let loop ((i 0) (count 0))\n      (if (= i (string-length str))\n\
    \          count\n          (if (char=? (string-ref str i) #\\.)\n           \
    \   (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (define\
    \ (valid-extension str)\n    (or (string=? (substring str (- (string-length str)\
    \ 3)) \"txt\")\n        (string=? (substring str (- (string-length str) 3)) \"\
    exe\")\n        (string=? (substring str (- (string-length str) 3)) \"dll\")))\n\
    \  (define (valid-substring str)\n    (and (not (string=? (substring str 0 1)\
    \ \"\"))\n         (char-alphabetic? (string-ref str 0))))\n  (cond ((and (<=\
    \ (count-digits file_name) 3)\n              (= (count-dots file_name) 1)\n  \
    \            (valid-extension file_name)\n              (valid-substring file_name))\n\
    \         \"Yes\")\n        (else \"No\")))\n", "  (define (check_digits file_name)\n\
    \    (cond\n      [(empty? file_name) #t]\n      [(char-numeric? (first file_name))\n\
    \       (check_digits (rest file_name))]\n      [else #f]))\n  (define (check_dot\
    \ file_name)\n    (cond\n      [(empty? file_name) #f]\n      [(char=? (first\
    \ file_name) #\\.) #t]\n      [else (check_dot (rest file_name))]))\n  (define\
    \ (check_extension file_name)\n    (cond\n      [(empty? file_name) #f]\n    \
    \  [(string=? (string-upcase (string-append (list (first file_name)) (list (second\
    \ file_name)) (list (third file_name)))) \"TXT\") #t]\n      [(string=? (string-upcase\
    \ (string-append (list (first file_name)) (list (second file_name)) (list (third\
    \ file_name)))) \"EXE\") #t]\n      [(string=? (string-upcase (string-append (list\
    \ (first file_name)) (list (second file_name)) (list (third file_name)))) \"DLL\"\
    ) #t]\n      [else #f]))\n  (define (check_first_letter file_name)\n    (cond\n\
    \      [(empty? file_name) #f]\n      [(char-alphabetic? (first file_name)) #t]\n\
    \      [else #f]))\n  (cond\n    [(empty? file_name) \"No\"]\n    [(check_digits\
    \ file_name) \"No\"]\n    [(check_dot file_name) \"No\"]\n    [(check_extension\
    \ file_name) \"No\"]\n    [(check_first_letter file_name) \"No\"]\n    [else \"\
    Yes\"]))\n", "  (define (count-digits file_name)\n    (cond\n      [(empty? file_name)\
    \ 0]\n      [(char-numeric? (first file_name))\n       (+ 1 (count-digits (rest\
    \ file_name)))]\n      [else (count-digits (rest file_name))]))\n  (define (count-dots\
    \ file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char=? (first file_name)\
    \ #\\.)\n       (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots\
    \ (rest file_name))]))\n  (define (char-numeric? c)\n    (and (char? c)\n    \
    \     (or (char=? c #\\0)\n             (char=? c #\\1)\n             (char=?\
    \ c #\\2)\n             (char=? c #\\3)\n             (char=? c #\\4)\n      \
    \       (char=? c #\\5)\n             (char=? c #\\6)\n             (char=? c\
    \ #\\7)\n             (char=? c #\\8)\n             (char=? c #\\9))))\n  (define\
    \ (char-alpha? c)\n    (and (char? c)\n         (or (char-lower-case? c)\n   \
    \          (char-upper-case? c))))\n  (define (valid-extension? extension)\n \
    \   (or (string=? extension \"txt\")\n        (string=? extension \"exe\")\n \
    \       (string=? extension \"dll\")))\n  (define (valid-name? name)\n    (and\
    \ (not (empty? name))\n         (char-alpha? (first name))))\n  (define (valid-file-name?\
    \ file_name)\n    (and (= 1 (count-dots file_name))\n         (<= (count-digits\
    \ file_name) 3)\n         (valid-name? (substring file_name 0 (string-index file_name\
    \ #\\.)))\n         (valid-extension? (substring file_name (+ 1 (string-index\
    \ file_name #\\.))))))\n  (if (valid-file", "  (define (is_valid_file_name? file_name)\n\
    \    (define (is_valid_ext? ext)\n      (member ext '(\"txt\" \"exe\" \"dll\"\
    )))\n    (define (is_valid_name? name)\n      (and (not (empty? name))\n     \
    \      (regexp-match? #rx\"[a-zA-Z]+\" name)))\n    (define (is_valid_digits?\
    \ digits)\n      (and (not (empty? digits))\n           (<= (string-length digits)\
    \ 3)))\n    (define (is_valid_file_name_parts? parts)\n      (and (is_valid_name?\
    \ (first parts))\n           (is_valid_ext? (second parts))\n           (is_valid_digits?\
    \ (third parts))))\n    (define (is_valid_file_name_parts_count? parts)\n    \
    \  (and (not (empty? parts))\n           (= (length parts) 3)))\n    (define (is_valid_file_name_parts_count?\
    \ parts)\n      (and (not (empty? parts))\n           (= (length parts) 3)))\n\
    \    (define (is_valid_file_name_parts_count? parts)\n      (and (not (empty?\
    \ parts))\n           (= (length parts) 3)))\n    (define (is_valid_file_name_parts_count?\
    \ parts)\n      (and (not (empty? parts))\n           (= (length parts) 3)))\n\
    \    (define (is_valid_file_name_parts_count? parts)\n      (and (not (empty?\
    \ parts))\n           (= (length parts) 3)))\n    (define (is_valid_file_name_parts_count?\
    \ parts)\n      (and (not (empty? parts))\n           (= (length parts) 3)))\n\
    \    (define (is_valid_file_name_parts_count? parts)\n      (and (not (empty?\
    \ parts))\n           (= (length parts) 3)))\n    (define (is_valid_file_name_parts_count?\
    \ parts)\n      (and (not (empty? parts))\n           (= (length parts) 3)))\n\
    \    (define (is_valid_file_name", "  (define (count-digits str)\n    (cond\n\
    \      [(empty? str) 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits\
    \ (rest str)))]\n      [else (count-digits (rest str))]))\n  (define (count-dots\
    \ str)\n    (cond\n      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+\
    \ 1 (count-dots (rest str)))]\n      [else (count-dots (rest str))]))\n  (define\
    \ (is-valid-extension str)\n    (cond\n      [(string=? str \"txt\") #t]\n   \
    \   [(string=? str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else\
    \ #f]))\n  (define (is-valid-name str)\n    (cond\n      [(empty? str) #f]\n \
    \     [(char-alphabetic? (first str)) #t]\n      [else #f]))\n  (define (get-extension\
    \ str)\n    (cond\n      [(empty? str) \"\"]\n      [(char=? (first str) #\\.)\
    \ (string (first str))]\n      [else (string-append (get-extension (rest str))\
    \ (string (first str)))]))\n  (define (get-name str)\n    (cond\n      [(empty?\
    \ str) \"\"]\n      [(char=? (first str) #\\.) \"\"]\n      [else (string-append\
    \ (get-name (rest str)) (string (first str)))]))\n  (cond\n    [(> (count-digits\
    \ file_name) 3) \"No\"]\n    [(not (= (count-dots file_name) 1)) \"No\"]\n   \
    \ [(not (is-valid-name (get-name file_name))) \"No\"]\n    [(not (is-valid-extension\
    \ (get-extension file_name))) \"No\"]\n    [else \"Yes\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (member extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (not (empty? name))\n         (char-alphabetic? (string-ref\
    \ name 0))\n         (not (> (count (lambda (c) (char-numeric? c)) name) 3))))\n\
    \  (define (is_valid_file_name? file_name)\n    (let ((name (string-before file_name\
    \ \".\"))\n          (extension (string-after file_name \".\")))\n      (and (is_valid_name?\
    \ name)\n           (is_valid_extension? extension))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (count-digits str)\n\
    \    (cond [(empty? str) 0]\n          [(char-numeric? (first str)) (+ 1 (count-digits\
    \ (rest str)))]\n          [else (count-digits (rest str))]))\n  (define (count-dots\
    \ str)\n    (cond [(empty? str) 0]\n          [(char=? (first str) #\\.) (+ 1\
    \ (count-dots (rest str)))]\n          [else (count-dots (rest str))]))\n  (define\
    \ (is-valid-extension str)\n    (cond [(string=? str \"txt\") #t]\n          [(string=?\
    \ str \"exe\") #t]\n          [(string=? str \"dll\") #t]\n          [else #f]))\n\
    \  (define (is-valid-prefix str)\n    (cond [(empty? str) #f]\n          [(char-alphabetic?\
    \ (first str)) #t]\n          [else #f]))\n  (define (split-file-name str)\n \
    \   (cond [(empty? str) '()]\n          [(char=? (first str) #\\.) (cons (substring\
    \ str 0 (first-index str #\\.)) (cons (substring str (+ 1 (first-index str #\\\
    .))) '()))]\n          [else (split-file-name (rest str))]))\n  (cond [(> (count-digits\
    \ file_name) 3) \"No\"]\n        [(= (count-dots file_name) 1) (cond [(is-valid-extension\
    \ (second (split-file-name file_name))) (cond [(is-valid-prefix (first (split-file-name\
    \ file_name))) \"Yes\"]\n                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    ", "  (define (count-digits str)\n    (cond\
    \ [(empty? str) 0]\n          [(char-numeric? (first str)) (+ 1 (count-digits\
    \ (rest str)))]\n          [else (count-digits (rest str))]))\n  (define (count-dots\
    \ str)\n    (cond [(empty? str) 0]\n          [(char=? (first str) #\\.) (+ 1\
    \ (count-dots (rest str)))]\n          [else (count-dots (rest str))]))\n  (define\
    \ (is-valid-extension str)\n    (cond [(string=? str \"txt\") #t]\n          [(string=?\
    \ str \"exe\") #t]\n          [(string=? str \"dll\") #t]\n          [else #f]))\n\
    \  (define (is-valid-name str)\n    (cond [(empty? str) #f]\n          [(char-alphabetic?\
    \ (first str)) #t]\n          [else #f]))\n  (cond [(empty? file_name) \"No\"\
    ]\n        [(> (count-digits file_name) 3) \"No\"]\n        [(not (= (count-dots\
    \ file_name) 1)) \"No\"]\n        [(not (is-valid-name (substring file_name 0\
    \ (string-index file_name #\\.)))) \"No\"]\n        [(not (is-valid-extension\
    \ (substring file_name (+ 1 (string-index file_name #\\.))))) \"No\"]\n      \
    \  [else \"Yes\"]))\n", "  (define (count-digits str)\n    (cond\n      [(empty?\
    \ str) 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits (rest str)))]\n\
    \      [else (count-digits (rest str))]))\n  (define (count-dots str)\n    (cond\n\
    \      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+ 1 (count-dots (rest\
    \ str)))]\n      [else (count-dots (rest str))]))\n  (define (valid-extension?\
    \ str)\n    (cond\n      [(string=? str \"txt\") #t]\n      [(string=? str \"\
    exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else #f]))\n  (define (valid-name?\
    \ str)\n    (cond\n      [(empty? str) #f]\n      [(char-alphabetic? (first str))\
    \ #t]\n      [else #f]))\n  (define (valid-file-name? str)\n    (cond\n      [(and\
    \ (= (count-digits str) 3) (= (count-dots str) 1) (valid-name? (substring str\
    \ 0 (string-index str #\\.))) (valid-extension? (substring str (+ (string-index\
    \ str #\\.) 1) (string-length str)))) #t]\n      [else #f]))\n  (cond\n    [(valid-file-name?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n\
    \    (cond\n      [(empty? str) 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits\
    \ (rest str)))]\n      [else (count-digits (rest str))]))\n  (define (count-dots\
    \ str)\n    (cond\n      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+\
    \ 1 (count-dots (rest str)))]\n      [else (count-dots (rest str))]))\n  (define\
    \ (valid-extension? str)\n    (cond\n      [(string=? str \"txt\") #t]\n     \
    \ [(string=? str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else\
    \ #f]))\n  (define (valid-name? str)\n    (cond\n      [(empty? str) #f]\n   \
    \   [(char-alphabetic? (first str)) #t]\n      [else #f]))\n  (define (valid-file-name?\
    \ str)\n    (and\n      (= 1 (count-dots str))\n      (<= (count-digits str) 3)\n\
    \      (valid-name? (substring str 0 (string-index str #\\.)))\n      (valid-extension?\
    \ (substring str (+ 1 (string-index str #\\.))))))\n  (cond\n    [(valid-file-name?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_extension? extension)\n      (or (string=?\
    \ extension \"txt\")\n          (string=? extension \"exe\")\n          (string=?\
    \ extension \"dll\")))\n    (define (is_valid_name? name)\n      (and (not (string-empty?\
    \ name))\n           (regexp-match #rx\"[a-zA-Z]\" name)))\n    (define (is_valid_digits?\
    \ digits)\n      (and (not (string-empty? digits))\n           (<= (string-length\
    \ digits) 3)))\n    (define (is_valid_file_name-helper file_name)\n      (define\
    \ (is_valid_file_name-helper-helper file_name)\n        (define (is_valid_file_name-helper-helper-helper\
    \ file_name)\n          (define (is_valid_file_name-helper-helper-helper-helper\
    \ file_name)\n            (define (is_valid_file_name-helper-helper-helper-helper-helper\
    \ file_name)\n              (define (is_valid_file_name-helper-helper-helper-helper-helper-helper\
    \ file_name)\n                (define (is_valid_file_name-helper-helper-helper-helper-helper-helper-helper\
    \ file_name)\n                  (define (is_valid_file_name-helper-helper-helper-helper-helper-helper-helper-helper\
    \ file_name)\n                    (define (is_valid_file_name-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ file_name)\n                      (define (is_valid_file_name-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ file_name)\n                        (define (is_valid_file_name-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (count-digits str)\n    (define (count-digits-iter str count)\n     \
    \ (cond ((null? str) count)\n            ((char-numeric? (car str)) (count-digits-iter\
    \ (cdr str) (+ count 1)))\n            (else (count-digits-iter (cdr str) count))))\n\
    \    (count-digits-iter str 0))\n  (define (count-dots str)\n    (define (count-dots-iter\
    \ str count)\n      (cond ((null? str) count)\n            ((char=? (car str)\
    \ #\\.) (count-dots-iter (cdr str) (+ count 1)))\n            (else (count-dots-iter\
    \ (cdr str) count))))\n    (count-dots-iter str 0))\n  (define (valid-extension?\
    \ str)\n    (cond ((string=? str \"txt\") #t)\n          ((string=? str \"exe\"\
    ) #t)\n          ((string=? str \"dll\") #t)\n          (else #f)))\n  (define\
    \ (valid-name? str)\n    (cond ((null? str) #f)\n          ((char-alphabetic?\
    \ (car str)) #t)\n          (else #f)))\n  (define (valid-file-name? str)\n  \
    \  (let ((name (car (string-split str #\\.)))\n          (extension (cadr (string-split\
    \ str #\\.))))\n      (and (valid-name? name)\n           (valid-extension? extension)\n\
    \           (= (count-dots str) 1)\n           (<= (count-digits name) 3))))\n\
    \  (cond ((valid-file-name? file_name) \"Yes\")\n        (else \"No\")))\n", " \
    \ (define (count-digits str)\n    (if (empty? str)\n        0\n        (if (char-numeric?\
    \ (first str))\n            (+ 1 (count-digits (rest str)))\n            (count-digits\
    \ (rest str)))))\n  (define (count-dots str)\n    (if (empty? str)\n        0\n\
    \        (if (char=? (first str) #\\.)\n            (+ 1 (count-dots (rest str)))\n\
    \            (count-dots (rest str)))))\n  (define (is-valid-extension str)\n\
    \    (if (empty? str)\n        #f\n        (if (or (string=? str \"txt\")\n  \
    \              (string=? str \"exe\")\n                (string=? str \"dll\"))\n\
    \            #t\n            #f)))\n  (define (is-valid-name str)\n    (if (empty?\
    \ str)\n        #f\n        (if (or (char-alphabetic? (first str))\n         \
    \       (char=? (first str) #\\_))\n            #t\n            #f)))\n  (define\
    \ (get-extension str)\n    (if (empty? str)\n        \"\"\n        (if (char=?\
    \ (first str) #\\.)\n            (string (rest str))\n            (get-extension\
    \ (rest str)))))\n  (define (get-name str)\n    (if (empty? str)\n        \"\"\
    \n        (if (char=? (first str) #\\.)\n            \"\"\n            (string-append\
    \ (string (first str)) (get-name (rest str))))))\n  (if (and (= 1 (count-dots\
    \ file_name))\n           (= 0 (count-digits (get-name file_name)))\n        \
    \   (is-valid-extension (get-extension file_name))\n           (is-valid-name\
    \ (get-name file_name)))\n      \"Yes\"\n      \"No\"))\n", "  (define (is_valid_extension?\
    \ extension)\n    (member extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (regexp-match? #rx\"^[a-zA-Z]+$\" name)\n         (not (regexp-match?\
    \ #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name? file_name)\n    (let\
    \ ([name (car (string-split file_name \"\\\\.\"))]\n          [extension (cadr\
    \ (string-split file_name \"\\\\.\"))])\n      (and (is_valid_name? name)\n  \
    \         (is_valid_extension? extension))))\n  (if (is_valid_file_name? file_name)\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (count-digits file_name)\n    (if\
    \ (empty? file_name)\n        0\n        (if (char-numeric? (first file_name))\n\
    \            (+ 1 (count-digits (rest file_name)))\n            (count-digits\
    \ (rest file_name)))))\n  (define (count-dots file_name)\n    (if (empty? file_name)\n\
    \        0\n        (if (char=? (first file_name) #\\.)\n            (+ 1 (count-dots\
    \ (rest file_name)))\n            (count-dots (rest file_name)))))\n  (define\
    \ (is-valid-extension? file_name)\n    (define (extension file_name)\n      (if\
    \ (empty? file_name)\n          \"\"\n          (if (char=? (first file_name)\
    \ #\\.)\n              (rest file_name)\n              (extension (rest file_name)))))\n\
    \    (define (is-valid-extension? extension)\n      (if (empty? extension)\n \
    \         #f\n          (if (or (string=? extension \"txt\")\n               \
    \   (string=? extension \"exe\")\n                  (string=? extension \"dll\"\
    ))\n              #t\n              #f)))\n    (is-valid-extension? (extension\
    \ file_name)))\n  (define (is-valid-prefix? file_name)\n    (define (prefix file_name)\n\
    \      (if (empty? file_name)\n          \"\"\n          (if (char=? (first file_name)\
    \ #\\.)\n              \"\"\n              (cons (first file_name) (prefix (rest\
    \ file_name))))))\n    (define (is-valid-prefix? prefix)\n      (if (empty? prefix)\n\
    \          #f\n          (if (or (char-alphabetic? (first prefix))\n         \
    \         (char-numeric? (first prefix)))\n              (is-valid-prefix? (rest\
    \ prefix))\n              #f)))\n    (is-valid-prefix? (prefix file_name)))\n\
    \  (if (and (= (count-digits file_name) 3)\n           (= (count-dots file_name)\
    \ 1)\n           (is-", "  (define (check_digits file_name)\n    (define (check_digit\
    \ file_name)\n      (if (string-contains file_name (string-&gt;list \"0123456789\"\
    ))\n          (check_digit (string-drop file_name 1))\n          #t))\n    (if\
    \ (check_digit file_name)\n        #t\n        #f))\n  (define (check_dot file_name)\n\
    \    (if (string-contains file_name (string-&gt;list \".\"))\n        #t\n   \
    \     #f))\n  (define (check_substring_before_dot file_name)\n    (define (check_substring_before_dot_helper\
    \ file_name)\n      (if (string-contains file_name (string-&gt;list \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ))\n          #t\n          #f))\n    (if (check_substring_before_dot_helper file_name)\n\
    \        #t\n        #f))\n  (define (check_substring_after_dot file_name)\n \
    \   (if (string-contains file_name (string-&gt;list \"txt\"))\n        #t\n  \
    \      (if (string-contains file_name (string-&gt;list \"exe\"))\n           \
    \ #t\n            (if (string-contains file_name (string-&gt;list \"dll\"))\n\
    \                #t\n                #f))))\n  (if (check_digits file_name)\n\
    \      (if (check_dot file_name)\n          (if (check_substring_before_dot file_name)\n\
    \              (if (check_substring_after_dot file_name)\n                  \"\
    Yes\"\n                  \"No\")\n              \"No\")\n          \"No\")\n \
    \     \"No\"))\n</code>\n", "  (define (count-digits str)\n    (define (count-digits-iter\
    \ str count)\n      (cond ((string-empty? str) count)\n            ((char-numeric?\
    \ (string-ref str 0))\n             (count-digits-iter (substring str 1) (+ count\
    \ 1)))\n            (else (count-digits-iter (substring str 1) count))))\n   \
    \ (count-digits-iter str 0))\n  (define (count-dots str)\n    (define (count-dots-iter\
    \ str count)\n      (cond ((string-empty? str) count)\n            ((char=? (string-ref\
    \ str 0) #\\.)\n             (count-dots-iter (substring str 1) (+ count 1)))\n\
    \            (else (count-dots-iter (substring str 1) count))))\n    (count-dots-iter\
    \ str 0))\n  (define (valid-extension? str)\n    (cond ((string=? str \"txt\"\
    ) #t)\n          ((string=? str \"exe\") #t)\n          ((string=? str \"dll\"\
    ) #t)\n          (else #f)))\n  (define (valid-name? str)\n    (cond ((string-empty?\
    \ str) #f)\n          ((char-alphabetic? (string-ref str 0)) #t)\n          (else\
    \ #f)))\n  (define (split-file-name str)\n    (define (split-file-name-iter str)\n\
    \      (cond ((string-empty? str) '())\n            ((char=? (string-ref str 0)\
    \ #\\.)\n             (cons (substring str 1) (split-file-name-iter (substring\
    \ str 1))))\n            (else (cons (substring str 0 1) (split-file-name-iter\
    \ (substring str 1))))))\n    (split-file-name-iter str))\n  (define (check-file-name\
    \ str)\n    (cond ((< (count-digits str) 4) #t)\n          ((= (count-dots str)\
    \ 1) #t)\n          ((valid-name? (car (split-file-name str))) #t)\n         \
    \ ((valid-extension? (c", "  (define (count-digits file_name)\n    (define (count-digits-iter\
    \ file_name count)\n      (cond [(empty? file_name) count]\n            [(char-numeric?\
    \ (first file_name)) (count-digits-iter (rest file_name) (+ count 1))]\n     \
    \       [else (count-digits-iter (rest file_name) count)]))\n    (count-digits-iter\
    \ file_name 0))\n  (define (count-dots file_name)\n    (define (count-dots-iter\
    \ file_name count)\n      (cond [(empty? file_name) count]\n            [(char=?\
    \ (first file_name) #\\.) (count-dots-iter (rest file_name) (+ count 1))]\n  \
    \          [else (count-dots-iter (rest file_name) count)]))\n    (count-dots-iter\
    \ file_name 0))\n  (define (valid-substring-before-dot file_name)\n    (define\
    \ (valid-substring-before-dot-iter file_name)\n      (cond [(empty? file_name)\
    \ #f]\n            [(char=? (first file_name) #\\.) #t]\n            [(char-alphabetic?\
    \ (first file_name)) (valid-substring-before-dot-iter (rest file_name))]\n   \
    \         [else #f]))\n    (valid-substring-before-dot-iter file_name))\n  (define\
    \ (valid-substring-after-dot file_name)\n    (define (valid-substring-after-dot-iter\
    \ file_name)\n      (cond [(empty? file_name) #f]\n            [(char=? (first\
    \ file_name) #\\.) (string=? (substring file_name 1 4) \"txt\")\n            \
    \                              (or (string=? (substring file_name 1 4) \"exe\"\
    )\n                                              (string=? (substring file_name\
    \ 1 4) \"dll\"))]\n            [else (valid-substring-after-dot-iter (rest file_name))]))\n\
    \    (valid-substring-after-dot-iter file_name))\n  (cond [(and", "  (define (count-digits\
    \ file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char-numeric? (first\
    \ file_name)) (+ 1 (count-digits (rest file_name)))]\n      [else (count-digits\
    \ (rest file_name))]))\n  (define (count-dots file_name)\n    (cond\n      [(empty?\
    \ file_name) 0]\n      [(char=? (first file_name) #\\.) (+ 1 (count-dots (rest\
    \ file_name)))]\n      [else (count-dots (rest file_name))]))\n  (define (substring-before-dot\
    \ file_name)\n    (cond\n      [(empty? file_name) empty]\n      [(char=? (first\
    \ file_name) #\\.) empty]\n      [else (cons (first file_name) (substring-before-dot\
    \ (rest file_name)))]))\n  (define (substring-after-dot file_name)\n    (cond\n\
    \      [(empty? file_name) empty]\n      [(char=? (first file_name) #\\.) (rest\
    \ file_name)]\n      [else (substring-after-dot (rest file_name))]))\n  (define\
    \ (is-valid-substring-before-dot substring)\n    (and (not (empty? substring))\n\
    \         (or (char-lower-case? (first substring))\n             (char-upper-case?\
    \ (first substring)))))\n  (define (is-valid-substring-after-dot substring)\n\
    \    (and (not (empty? substring))\n         (or (string=? substring \"txt\")\n\
    \             (string=? substring \"exe\")\n             (string=? substring \"\
    dll\"))))\n  (cond\n    [(or (> (count-digits file_name) 3)\n         (> (count-dots\
    \ file_name) 1)\n         (not (is-valid-substring-before-dot (substring-before-dot\
    \ file_name)))\n         (not (is-valid-substring-after-dot (substring-after-dot\
    \ file_name)))]\n     \"No\")\n   ", "  (define (count-digits str)\n    (define\
    \ (count-digits-iter str count)\n      (cond [(empty? str) count]\n          \
    \  [(char-numeric? (first str)) (count-digits-iter (rest str) (+ count 1))]\n\
    \            [else (count-digits-iter (rest str) count)]))\n    (count-digits-iter\
    \ str 0))\n  (define (count-dots str)\n    (define (count-dots-iter str count)\n\
    \      (cond [(empty? str) count]\n            [(char=? (first str) #\\.) (count-dots-iter\
    \ (rest str) (+ count 1))]\n            [else (count-dots-iter (rest str) count)]))\n\
    \    (count-dots-iter str 0))\n  (define (is-valid-extension? str)\n    (cond\
    \ [(string=? str \"txt\") #t]\n          [(string=? str \"exe\") #t]\n       \
    \   [(string=? str \"dll\") #t]\n          [else #f]))\n  (define (is-valid-substring?\
    \ str)\n    (cond [(empty? str) #f]\n          [(char-alphabetic? (first str))\
    \ #t]\n          [else #f]))\n  (define (is-valid-file-name? str)\n    (define\
    \ (is-valid-file-name-iter str)\n      (cond [(empty? str) #t]\n            [(char-alphabetic?\
    \ (first str)) (is-valid-file-name-iter (rest str))]\n            [(char-numeric?\
    \ (first str)) (is-valid-file-name-iter (rest str))]\n            [(char=? (first\
    \ str) #\\.) (is-valid-file-name-iter (rest str))]\n            [else #f]))\n\
    \    (is-valid-file-name-iter str))\n  (cond [(not (is-valid-file-name? file_name))\
    \ \"No\"]\n        [(> (count-digits file_name) 3) \"No\"]\n        [(not (= (count-dots\
    \ file_name) 1)) \"No\"]\n        [(not (", "  (define (count-digits str)\n  \
    \  (cond\n      [(empty? str) 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits\
    \ (rest str)))]\n      [else (count-digits (rest str))]))\n  (define (count-dots\
    \ str)\n    (cond\n      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+\
    \ 1 (count-dots (rest str)))]\n      [else (count-dots (rest str))]))\n  (define\
    \ (check-extension str)\n    (cond\n      [(string=? str \"txt\") #t]\n      [(string=?\
    \ str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else #f]))\n  (define\
    \ (check-prefix str)\n    (cond\n      [(empty? str) #f]\n      [(char-alphabetic?\
    \ (first str)) #t]\n      [else #f]))\n  (define (split-file-name str)\n    (define\
    \ (split-file-name-helper str acc)\n      (cond\n        [(empty? str) (reverse\
    \ acc)]\n        [(char=? (first str) #\\.) (split-file-name-helper (rest str)\
    \ (cons (list (first str)) acc))]\n        [else (split-file-name-helper (rest\
    \ str) (cons (cons (first str) (first acc)) (rest acc)))]))\n    (split-file-name-helper\
    \ str (list (list))))\n  (define (check-file-name str)\n    (let ([parts (split-file-name\
    \ str)])\n      (cond\n        [(= (count-digits (first parts)) 3) #f]\n     \
    \   [(= (count-dots str) 1) #t]\n        [(check-prefix (first parts)) #t]\n \
    \       [(check-extension (second parts)) #t]\n        [else #f])))\n  (cond\n\
    \    [(check-file-name file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define\
    \ (count-digits s)\n    (if (empty? s)\n        0\n        (if (char-numeric?\
    \ (first s))\n            (+ 1 (count-digits (rest s)))\n            (count-digits\
    \ (rest s)))))\n  (define (count-dots s)\n    (if (empty? s)\n        0\n    \
    \    (if (char=? (first s) #\\.)\n            (+ 1 (count-dots (rest s)))\n  \
    \          (count-dots (rest s)))))\n  (define (valid-extension? s)\n    (cond\
    \ [(string=? s \"txt\") #t]\n          [(string=? s \"exe\") #t]\n          [(string=?\
    \ s \"dll\") #t]\n          [else #f]))\n  (define (valid-name? s)\n    (and (not\
    \ (empty? s))\n         (char-alphabetic? (first s))\n         (not (char=? (first\
    \ s) #\\.))))\n  (define (valid-file-name? s)\n    (let ([name (substring s 0\
    \ (string-index s #\\.))]\n          [extension (substring s (+ 1 (string-index\
    \ s #\\.)))])\n      (and (= (count-digits s) 3)\n           (= (count-dots s)\
    \ 1)\n           (valid-name? name)\n           (valid-extension? extension))))\n\
    \  (if (valid-file-name? file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define\
    \ (count-digits str)\n    (let loop ((i 0) (count 0))\n      (if (&lt; i (string-length\
    \ str))\n          (if (char-numeric? (string-ref str i))\n              (loop\
    \ (+ i 1) (+ count 1))\n              (loop (+ i 1) count))\n          count)))\n\
    \  (define (count-dots str)\n    (let loop ((i 0) (count 0))\n      (if (&lt;\
    \ i (string-length str))\n          (if (char=? (string-ref str i) #\\.)\n   \
    \           (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))\n\
    \          count)))\n  (define (is-valid-extension str)\n    (cond ((string=?\
    \ str \"txt\") #t)\n          ((string=? str \"exe\") #t)\n          ((string=?\
    \ str \"dll\") #t)\n          (else #f)))\n  (define (is-valid-name str)\n   \
    \ (cond ((char-alphabetic? (string-ref str 0)) #t)\n          (else #f)))\n  (cond\
    \ ((&gt; (count-digits file_name) 3) \"No\")\n        ((&gt; (count-dots file_name)\
    \ 1) \"No\")\n        ((not (is-valid-extension (substring file_name (+ (string-index\
    \ file_name #\\.) 1)))) \"No\")\n        ((not (is-valid-name (substring file_name\
    \ 0 (string-index file_name #\\.)))) \"No\")\n        (else \"Yes\")))\n</code>\n",
  "  (define (count-digits file_name)\n    (cond ((string=? file_name \"\") 0)\n \
    \         ((char-numeric? (string-ref file_name 0))\n           (+ 1 (count-digits\
    \ (substring file_name 1))))\n          (else (count-digits (substring file_name\
    \ 1)))))\n  (define (count-dots file_name)\n    (cond ((string=? file_name \"\"\
    ) 0)\n          ((char=? (string-ref file_name 0) #\\.)\n           (+ 1 (count-dots\
    \ (substring file_name 1))))\n          (else (count-dots (substring file_name\
    \ 1)))))\n  (define (valid-extension file_name)\n    (cond ((string=? (substring\
    \ file_name (- (string-length file_name) 3)) \"txt\") #t)\n          ((string=?\
    \ (substring file_name (- (string-length file_name) 3)) \"exe\") #t)\n       \
    \   ((string=? (substring file_name (- (string-length file_name) 3)) \"dll\")\
    \ #t)\n          (else #f)))\n  (define (valid-prefix file_name)\n    (cond ((string=?\
    \ (substring file_name 0 1) \"a\") #t)\n          ((string=? (substring file_name\
    \ 0 1) \"b\") #t)\n          ((string=? (substring file_name 0 1) \"c\") #t)\n\
    \          ((string=? (substring file_name 0 1) \"d\") #t)\n          ((string=?\
    \ (substring file_name 0 1) \"e\") #t)\n          ((string=? (substring file_name\
    \ 0 1) \"f\") #t)\n          ((string=? (substring file_name 0 1) \"g\") #t)\n\
    \          ((string=? (substring file_name 0 1) \"h\") #t)\n          ((string=?\
    \ (substring file_name 0 1) \"i\") #t)\n          ((string=? (substring file_name\
    \ 0 1) \"j\") #t)\n          ((string=? (substring file_name 0 1) \"k\")", " \
    \ (define (count-digits file_name)\n    (cond\n      [(empty? file_name) 0]\n\
    \      [(char-numeric? (first file_name)) (+ 1 (count-digits (rest file_name)))]\n\
    \      [else (count-digits (rest file_name))]))\n  (define (count-dots file_name)\n\
    \    (cond\n      [(empty? file_name) 0]\n      [(char=? (first file_name) #\\\
    .) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots (rest file_name))]))\n\
    \  (define (is-valid-extension? extension)\n    (cond\n      [(string=? extension\
    \ \"txt\") #t]\n      [(string=? extension \"exe\") #t]\n      [(string=? extension\
    \ \"dll\") #t]\n      [else #f]))\n  (define (is-valid-name? name)\n    (cond\n\
    \      [(empty? name) #f]\n      [(char-alphabetic? (first name)) #t]\n      [else\
    \ #f]))\n  (define (split-file-name file_name)\n    (define (split-file-name-helper\
    \ file_name name extension)\n      (cond\n        [(empty? file_name) (list name\
    \ extension)]\n        [(char=? (first file_name) #\\.) (split-file-name-helper\
    \ (rest file_name) name (string (first file_name))) ]\n        [else (split-file-name-helper\
    \ (rest file_name) (string-append name (string (first file_name))) extension)]))\n\
    \    (split-file-name-helper file_name \"\" \"\"))\n  (define (is-valid-file-name?\
    \ file_name)\n    (let ([name (first (split-file-name file_name))]\n         \
    \ [extension (second (split-file-name file_name))])\n      (and (is-valid-name?\
    \ name)\n           (is-valid-extension? extension)\n           (<= (count-digits\
    \ file_name) 3)\n           (= (count-dots file_name) 1", "  (define (check-digits\
    \ file_name)\n    (let ((count 0))\n      (for ((i (in-range (string-length file_name))))\n\
    \        (if (char-numeric? (string-ref file_name i))\n            (set! count\
    \ (+ count 1))))\n      (if (> count 3)\n          \"No\"\n          \"Yes\")))\n\
    \  (define (check-dot file_name)\n    (let ((count 0))\n      (for ((i (in-range\
    \ (string-length file_name))))\n        (if (char=? (string-ref file_name i) #\\\
    .)\n            (set! count (+ count 1))))\n      (if (= count 1)\n          \"\
    Yes\"\n          \"No\")))\n  (define (check-substring file_name)\n    (let ((substring-before-dot\
    \ (substring file_name 0 (string-index file_name #\\.)))\n          (substring-after-dot\
    \ (substring file_name (+ (string-index file_name #\\.) 1) (string-length file_name))))\n\
    \      (if (and (not (string=? substring-before-dot \"\"))\n               (char-alphabetic?\
    \ (string-ref substring-before-dot 0)))\n          (if (or (string=? substring-after-dot\
    \ \"txt\")\n                  (string=? substring-after-dot \"exe\")\n       \
    \           (string=? substring-after-dot \"dll\"))\n              \"Yes\"\n \
    \             \"No\")\n          \"No\")))\n  (if (and (string=? (check-digits\
    \ file_name) \"Yes\")\n           (string=? (check-dot file_name) \"Yes\")\n \
    \          (string=? (check-substring file_name) \"Yes\"))\n      \"Yes\"\n  \
    \    \"No\"))\n", "  (define (count-digits str)\n    (define (count-digits-iter\
    \ str count)\n      (cond [(empty? str) count]\n            [(char-numeric? (first\
    \ str)) (count-digits-iter (rest str) (+ count 1))]\n            [else (count-digits-iter\
    \ (rest str) count)]))\n    (count-digits-iter str 0))\n  (define (count-dots\
    \ str)\n    (define (count-dots-iter str count)\n      (cond [(empty? str) count]\n\
    \            [(char=? (first str) #\\.) (count-dots-iter (rest str) (+ count 1))]\n\
    \            [else (count-dots-iter (rest str) count)]))\n    (count-dots-iter\
    \ str 0))\n  (define (is-valid-extension str)\n    (cond [(string=? str \"txt\"\
    ) #t]\n          [(string=? str \"exe\") #t]\n          [(string=? str \"dll\"\
    ) #t]\n          [else #f]))\n  (define (is-valid-name str)\n    (cond [(empty?\
    \ str) #f]\n          [(char-alphabetic? (first str)) #t]\n          [else #f]))\n\
    \  (define (is-valid-file-name str)\n    (let ([name (string-before str #\\.)]\n\
    \          [extension (string-after str #\\.)])\n      (and (is-valid-name name)\n\
    \           (is-valid-extension extension)\n           (= (count-digits name)\
    \ 0)\n           (= (count-dots str) 1))))\n  (cond [(is-valid-file-name file_name)\
    \ \"Yes\"]\n        [else \"No\"]))\n", "  (define (count-digits file_name)\n\
    \    (define (count-digits-iter file_name count)\n      (cond\n        [(empty?\
    \ file_name) count]\n        [(char-numeric? (first file_name)) (count-digits-iter\
    \ (rest file_name) (+ count 1))]\n        [else (count-digits-iter (rest file_name)\
    \ count)]))\n    (count-digits-iter file_name 0))\n  (define (count-dots file_name)\n\
    \    (define (count-dots-iter file_name count)\n      (cond\n        [(empty?\
    \ file_name) count]\n        [(char=? (first file_name) #\\.) (count-dots-iter\
    \ (rest file_name) (+ count 1))]\n        [else (count-dots-iter (rest file_name)\
    \ count)]))\n    (count-dots-iter file_name 0))\n  (define (substring-before-dot\
    \ file_name)\n    (define (substring-before-dot-iter file_name)\n      (cond\n\
    \        [(empty? file_name) \"\"]\n        [(char=? (first file_name) #\\.) (rest\
    \ file_name)]\n        [else (cons (first file_name) (substring-before-dot-iter\
    \ (rest file_name)))]))\n    (substring-before-dot-iter file_name))\n  (define\
    \ (substring-after-dot file_name)\n    (define (substring-after-dot-iter file_name)\n\
    \      (cond\n        [(empty? file_name) \"\"]\n        [(char=? (first file_name)\
    \ #\\.) (substring-after-dot-iter (rest file_name))]\n        [else (substring-after-dot-iter\
    \ (rest file_name))]))\n    (substring-after-dot-iter file_name))\n  (define (valid-substring-after-dot\
    \ file_name)\n    (cond\n      [(string=? (substring-after-dot file_name) \"txt\"\
    ) #t]\n      [(string=? (substring-after-dot file_name) \"exe\") #", "  (cond\n\
    \    [(and (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\n  \
    \        (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\n    \
    \      (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n     \"\
    Yes\"]\n    [else \"No\"]))\n", "  (define (valid-extension? extension)\n    (member\
    \ extension '(\"txt\" \"exe\" \"dll\")))\n  (define (valid-name? name)\n    (and\
    \ (not (empty? name))\n         (char-alphabetic? (string-ref name 0))\n     \
    \    (not (> (count (lambda (c) (char-numeric? c)) name) 3))))\n  (define (valid-file-name?\
    \ file-name)\n    (let ((parts (string-split file-name \"\\\\.\")))\n      (and\
    \ (= (length parts) 2)\n           (valid-name? (first parts))\n           (valid-extension?\
    \ (second parts)))))\n  (if (valid-file-name? file_name)\n      \"Yes\"\n    \
    \  \"No\"))\n", "  (define (is_valid_extension? extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name)\n         (not (regexp-match? #rx\"[0-9]{4,}\"\
    \ name))))\n  (define (is_valid_file_name? file_name)\n    (let ((file_name_parts\
    \ (regexp-split #rx\"\\.\" file_name)))\n      (and (= (length file_name_parts)\
    \ 2)\n           (is_valid_name? (first file_name_parts))\n           (is_valid_extension?\
    \ (second file_name_parts)))))\n  (if (is_valid_file_name? file_name)\n      \"\
    Yes\"\n      \"No\"))\n", "  (let ([file_name_parts (string-split file_name \"\
    \\\\.\")])\n    (cond\n      [(and (= (length file_name_parts) 2)\n          \
    \  (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}$\" (car file_name_parts))\n \
    \           (member (cadr file_name_parts) '(\"txt\" \"exe\" \"dll\")))\n    \
    \   \"Yes\"]\n      [else \"No\"])))\n", "  (define (is_valid_extension? ext)\n\
    \    (member ext '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n\
    \    (and (not (empty? name))\n         (regexp-match #rx\"^[a-zA-Z]\" name)))\n\
    \  (define (is_valid_file_name? file_name)\n    (define (count-digits str)\n \
    \     (define (count-digits-iter str count)\n        (cond\n          [(empty?\
    \ str) count]\n          [(regexp-match #rx\"^[0-9]\" str) (count-digits-iter\
    \ (rest str) (+ count 1))]\n          [else (count-digits-iter (rest str) count)]))\n\
    \      (count-digits-iter str 0))\n    (define (count-dots str)\n      (define\
    \ (count-dots-iter str count)\n        (cond\n          [(empty? str) count]\n\
    \          [(regexp-match #rx\"^\\.\" str) (count-dots-iter (rest str) (+ count\
    \ 1))]\n          [else (count-dots-iter (rest str) count)]))\n      (count-dots-iter\
    \ str 0))\n    (and (is_valid_name? (substring file_name 0 (regexp-match #rx\"\
    \\.\" file_name)))\n         (is_valid_extension? (substring file_name (+ 1 (regexp-match\
    \ #rx\"\\.\" file_name))))\n         (= (count-digits file_name) 3)\n        \
    \ (= (count-dots file_name) 1)))\n  (cond\n    [(is_valid_file_name? file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits file_name)\n    (cond\n\
    \      [(empty? file_name) 0]\n      [(char-numeric? (first file_name))\n    \
    \   (+ 1 (count-digits (rest file_name)))]\n      [else (count-digits (rest file_name))]))\n\
    \  (define (count-dots file_name)\n    (cond\n      [(empty? file_name) 0]\n \
    \     [(char=? (first file_name) #\\.)\n       (+ 1 (count-dots (rest file_name)))]\n\
    \      [else (count-dots (rest file_name))]))\n  (define (is-valid-extension?\
    \ file_name)\n    (cond\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"txt\") #t]\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"exe\") #t]\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"dll\") #t]\n      [else #f]))\n  (define (is-valid-name? file_name)\n\
    \    (cond\n      [(empty? file_name) #f]\n      [(char-alphabetic? (first file_name))\
    \ #t]\n      [else #f]))\n  (cond\n    [(and (= (count-digits file_name) 3) (=\
    \ (count-dots file_name) 1)\n          (is-valid-extension? file_name) (is-valid-name?\
    \ file_name))\n     \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_digit c)\n\
    \    (and (char=? c #\\0) (char=? c #\\9)))\n  (define (is_letter c)\n    (or\
    \ (and (char=? c #\\a) (char=? c #\\z))\n        (and (char=? c #\\A) (char=?\
    \ c #\\Z))))\n  (define (is_valid_extension ext)\n    (or (string=? ext \"txt\"\
    )\n        (string=? ext \"exe\")\n        (string=? ext \"dll\")))\n  (define\
    \ (count_digits str)\n    (define (count_digits_iter str acc)\n      (if (string-empty?\
    \ str)\n          acc\n          (if (is_digit (string-ref str 0))\n         \
    \     (count_digits_iter (substring str 1) (+ acc 1))\n              (count_digits_iter\
    \ (substring str 1) acc))))\n    (count_digits_iter str 0))\n  (define (count_dots\
    \ str)\n    (define (count_dots_iter str acc)\n      (if (string-empty? str)\n\
    \          acc\n          (if (char=? (string-ref str 0) #\\.)\n             \
    \ (count_dots_iter (substring str 1) (+ acc 1))\n              (count_dots_iter\
    \ (substring str 1) acc))))\n    (count_dots_iter str 0))\n  (define (is_valid_name\
    \ str)\n    (and (not (string-empty? str))\n         (is_letter (string-ref str\
    \ 0))))\n  (define (is_valid_file_name str)\n    (let ((dot_index (string-index\
    \ str #\\.))\n          (extension (substring str (+ dot_index 1))))\n      (and\
    \ (= (count_digits str) 3)\n           (= (count_dots str) 1)\n           (is_valid_name\
    \ (substring str 0 dot_index))\n           (is_valid_extension extension))))\n\
    \  (if (is_valid_file_name file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define\
    \ (check-digits file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char-numeric?\
    \ (first file_name))\n       (+ 1 (check-digits (rest file_name)))]\n      [else\
    \ (check-digits (rest file_name))]))\n  (define (check-dot file_name)\n    (cond\n\
    \      [(empty? file_name) #f]\n      [(char=? (first file-name) #\\.) #t]\n \
    \     [else (check-dot (rest file_name))]))\n  (define (check-extension file_name)\n\
    \    (cond\n      [(empty? file_name) #f]\n      [(char=? (first file_name) #\\\
    .)\n       (member (string-&gt;symbol (substring file_name 1)) '(\"txt\" \"exe\"\
    \ \"dll\"))]\n      [else (check-extension (rest file_name))]))\n  (define (check-prefix\
    \ file_name)\n    (cond\n      [(empty? file_name) #f]\n      [(char=? (first\
    \ file_name) #\\.) #t]\n      [(char-alphabetic? (first file_name))\n       (check-prefix\
    \ (rest file_name))]\n      [else #f]))\n  (cond\n    [(or (&gt; (check-digits\
    \ file_name) 3)\n         (not (check-dot file_name))\n         (not (check-extension\
    \ file_name))\n         (not (check-prefix file_name)))\n     \"No\"]\n    [else\
    \ \"Yes\"]))\n</code>\n", "  (define (is_valid_file_name? file_name)\n    (define\
    \ (is_valid_extension? extension)\n      (member extension '(\"txt\" \"exe\" \"\
    dll\")))\n    (define (is_valid_name? name)\n      (and (not (empty? name))\n\
    \           (regexp-match? #rx\"^[a-zA-Z]+$\" name)))\n    (define (is_valid_digits?\
    \ digits)\n      (and (not (empty? digits))\n           (<= (string-length digits)\
    \ 3)))\n    (define (is_valid_file_name_parts? file_name_parts)\n      (and (is_valid_name?\
    \ (car file_name_parts))\n           (is_valid_extension? (cadr file_name_parts))\n\
    \           (is_valid_digits? (caddr file_name_parts))))\n    (define (split_file_name\
    \ file_name)\n      (regexp-match #rx\"^([a-zA-Z]+)([0-9]*)([^.]+)\\.(txt|exe|dll)$\"\
    \ file_name))\n    (and (is_valid_file_name_parts? (split_file_name file_name))\n\
    \         (not (empty? (split_file_name file_name)))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (check-extension ext)\n\
    \    (cond\n      [(string=? ext \"txt\") #t]\n      [(string=? ext \"exe\") #t]\n\
    \      [(string=? ext \"dll\") #t]\n      [else #f]))\n  (define (check-name name)\n\
    \    (define (check-name-helper name)\n      (cond\n        [(empty? name) #t]\n\
    \        [(char-alphabetic? (car name)) (check-name-helper (cdr name))]\n    \
    \    [(char-numeric? (car name)) (check-name-helper (cdr name))]\n        [else\
    \ #f]))\n    (and (not (empty? name)) (check-name-helper name)))\n  (define (count-digits\
    \ name)\n    (cond\n      [(empty? name) 0]\n      [(char-numeric? (car name))\
    \ (+ 1 (count-digits (cdr name)))]\n      [else (count-digits (cdr name))]))\n\
    \  (define (count-dots name)\n    (cond\n      [(empty? name) 0]\n      [(char=?\
    \ (car name) #\\.) (+ 1 (count-dots (cdr name)))]\n      [else (count-dots (cdr\
    \ name))]))\n  (define (split-name name)\n    (define (split-name-helper name)\n\
    \      (cond\n        [(empty? name) (list (list) (list))]\n        [(char=? (car\
    \ name) #\\.) (list (cdr name) (list))]\n        [else (let ([splitted (split-name-helper\
    \ (cdr name))])\n                (list (cons (car name) (car splitted)) (cdr splitted)))]))\n\
    \    (split-name-helper name))\n  (let ([splitted (split-name file_name)])\n \
    \   (cond\n      [(or (> (count-digits (car splitted)) 3)\n           (not (=\
    \ (count-dots file_name) 1))\n           (not (check-name (car splitted)))\n \
    \          (not (check-extension (car (cdr spl", "  (define (count-digits file_name)\n\
    \    (cond\n      [(empty? file_name) 0]\n      [(char-numeric? (first file_name))\
    \ (+ 1 (count-digits (rest file_name)))]\n      [else (count-digits (rest file_name))]))\n\
    \  (define (count-dots file_name)\n    (cond\n      [(empty? file_name) 0]\n \
    \     [(char=? (first file_name) #\\.) (+ 1 (count-dots (rest file_name)))]\n\
    \      [else (count-dots (rest file_name))]))\n  (define (valid-extension? file_name)\n\
    \    (cond\n      [(string=? (substring file_name (string-index file_name #\\\
    .)) \".txt\") #t]\n      [(string=? (substring file_name (string-index file_name\
    \ #\\.)) \".exe\") #t]\n      [(string=? (substring file_name (string-index file_name\
    \ #\\.)) \".dll\") #t]\n      [else #f]))\n  (define (valid-name? file_name)\n\
    \    (cond\n      [(empty? file_name) #f]\n      [(char-alphabetic? (first file_name))\
    \ #t]\n      [else #f]))\n  (cond\n    [(and (= (count-digits file_name) 3) (=\
    \ (count-dots file_name) 1) (valid-extension? file_name) (valid-name? file_name))\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits file_name)\n    (cond\
    \ ((empty? file_name) 0)\n          ((char-numeric? (first file_name))\n     \
    \      (+ 1 (count-digits (rest file_name))))\n          (else (count-digits (rest\
    \ file_name)))))\n  (define (count-dots file_name)\n    (cond ((empty? file_name)\
    \ 0)\n          ((char=? (first file_name) #\\.)\n           (+ 1 (count-dots\
    \ (rest file_name))))\n          (else (count-dots (rest file_name)))))\n  (define\
    \ (char-numeric? c)\n    (and (char? c) (char&lt;=? #\\0 c) (char&lt;=? c #\\\
    9)))\n  (define (char-alpha? c)\n    (and (char? c) (char&lt;=? #\\a c) (char&lt;=?\
    \ c #\\z)))\n  (define (char-alphanumeric? c)\n    (or (char-numeric? c) (char-alpha?\
    \ c)))\n  (define (get-extension file_name)\n    (cond ((empty? file_name) \"\"\
    )\n          ((char=? (first file_name) #\\.)\n           (rest file_name))\n\
    \          (else (get-extension (rest file_name)))))\n  (define (get-name file_name)\n\
    \    (cond ((empty? file_name) \"\")\n          ((char=? (first file_name) #\\\
    .)\n           (first file_name))\n          (else (string-append (first file_name)\
    \ (get-name (rest file_name))))))\n  (define (valid-extension? extension)\n  \
    \  (cond ((empty? extension) #f)\n          ((or (string=? extension \"txt\")\n\
    \               (string=? extension \"exe\")\n               (string=? extension\
    \ \"dll\"))\n           #t)\n          (else #f)))\n  (define (valid-name? name)\n\
    \    (cond ((empty? name) #f)\n          ((char-alpha? (first name))\n       \
    \    (and (valid-name", "  (define (count-digits file_name)\n    (cond [(empty?\
    \ file_name) 0]\n          [(char-numeric? (first file_name)) (+ 1 (count-digits\
    \ (rest file_name)))]\n          [else (count-digits (rest file_name))]))\n  (define\
    \ (count-dots file_name)\n    (cond [(empty? file_name) 0]\n          [(char=?\
    \ (first file_name) #\\.) (+ 1 (count-dots (rest file_name)))]\n          [else\
    \ (count-dots (rest file_name))]))\n  (define (valid-extension? file_name)\n \
    \   (cond [(empty? file_name) #f]\n          [(string=? (substring file_name (string-length\
    \ file_name) (- (string-length file_name) 3)) \"txt\") #t]\n          [(string=?\
    \ (substring file_name (string-length file_name) (- (string-length file_name)\
    \ 3)) \"exe\") #t]\n          [(string=? (substring file_name (string-length file_name)\
    \ (- (string-length file_name) 3)) \"dll\") #t]\n          [else #f]))\n  (define\
    \ (valid-name? file_name)\n    (cond [(empty? file_name) #f]\n          [(char-alphabetic?\
    \ (first file_name)) #t]\n          [else #f]))\n  (cond [(and (= (count-digits\
    \ file_name) 3) (= (count-dots file_name) 1) (valid-extension? file_name) (valid-name?\
    \ file_name)) \"Yes\"]\n        [else \"No\"]))\n", "  (define (count-digits file_name)\n\
    \    (define (count-digits-iter file_name count)\n      (cond\n        [(empty?\
    \ file_name) count]\n        [(char-numeric? (first file_name)) (count-digits-iter\
    \ (rest file_name) (+ count 1))]\n        [else (count-digits-iter (rest file_name)\
    \ count)]))\n    (count-digits-iter file_name 0))\n  (define (count-dots file_name)\n\
    \    (define (count-dots-iter file_name count)\n      (cond\n        [(empty?\
    \ file_name) count]\n        [(char=? (first file_name) #\\.) (count-dots-iter\
    \ (rest file_name) (+ count 1))]\n        [else (count-dots-iter (rest file_name)\
    \ count)]))\n    (count-dots-iter file_name 0))\n  (define (valid-extension? file_name)\n\
    \    (define (valid-extension-iter file_name)\n      (cond\n        [(empty? file_name)\
    \ #f]\n        [(char=? (first file_name) #\\.) (valid-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\t) (valid-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\x) (valid-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\e) (valid-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\d) (valid-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\l) (valid-extension-iter (rest file_name))]\n\
    \        [else #f]))\n    (valid-extension-iter file_name))\n  (define (valid-name?\
    \ file_name)\n    (define (valid-name-iter file_name)\n      (cond\n        [(empty?\
    \ file_name) #f]\n        [(", "  (define (count-digits file_name)\n    (cond\
    \ [(empty? file_name) 0]\n          [(char-numeric? (first file_name)) (+ 1 (count-digits\
    \ (rest file_name)))]\n          [else (count-digits (rest file_name))]))\n  (define\
    \ (count-dots file_name)\n    (cond [(empty? file_name) 0]\n          [(char=?\
    \ (first file_name) #\\.) (+ 1 (count-dots (rest file_name)))]\n          [else\
    \ (count-dots (rest file_name))]))\n  (define (valid-extension? file_name)\n \
    \   (cond [(string=? file_name \"txt\") #t]\n          [(string=? file_name \"\
    exe\") #t]\n          [(string=? file_name \"dll\") #t]\n          [else #f]))\n\
    \  (define (valid-name? file_name)\n    (cond [(empty? file_name) #f]\n      \
    \    [(char-alphabetic? (first file_name)) #t]\n          [else #f]))\n  (define\
    \ (valid-file-name? file_name)\n    (cond [(and (= (count-digits file_name) 3)\
    \ (= (count-dots file_name) 1)\n               (valid-extension? (substring file_name\
    \ (+ (string-index file_name #\\.) 1) (string-length file_name)))\n          \
    \     (valid-name? (substring file_name 0 (string-index file_name #\\.))))\n \
    \          \"Yes\"]\n          [else \"No\"]))\n  (valid-file-name? file_name))\n",
  "  (define (is_valid_file_name? file_name)\n    (define (is_valid_extension? extension)\n\
    \      (member extension '(\"txt\" \"exe\" \"dll\")))\n    (define (is_valid_name?\
    \ name)\n      (and (not (empty? name))\n           (regexp-match? #rx\"^[a-zA-Z]\"\
    \ name)))\n    (define (is_valid_digits? digits)\n      (and (not (empty? digits))\n\
    \           (<= (string-length digits) 3)))\n    (define (is_valid_file_name_parts?\
    \ name extension)\n      (and (is_valid_name? name)\n           (is_valid_extension?\
    \ extension)))\n    (define (get_file_name_parts file_name)\n      (define (get_file_name_parts_helper\
    \ file_name name extension)\n        (cond [(empty? file_name) (values name extension)]\n\
    \              [(char=? (string-ref file_name 0) #\\.)\n               (get_file_name_parts_helper\
    \ (substring file_name 1) name (string-append extension (string (string-ref file_name\
    \ 0))))]\n              [(char-numeric? (string-ref file_name 0))\n          \
    \     (get_file_name_parts_helper (substring file_name 1) name (string-append\
    \ extension (string (string-ref file_name 0))))]\n              [else (get_file_name_parts_helper\
    \ (substring file_name 1) (string-append name (string (string-ref file_name 0)))\
    \ extension)]))\n      (get_file_name_parts_helper file_name \"\" \"\"))\n   \
    \ (define (is_valid_file_name_parts_with_digits? name extension digits)\n    \
    \  (and (is_valid_file_name_parts? name extension)\n           (is_valid_digits?\
    \ digits)))\n    (define (get_file_name_parts_with_digits file_name)\n      (define\
    \ (get_file_name_parts_with_digits_helper file_name name extension digits)\n \
    \       (cond [(empty? file_", "  (define (count-digits file_name)\n    (cond\n\
    \      [(empty? file_name) 0]\n      [(char-numeric? (first file_name)) (+ 1 (count-digits\
    \ (rest file_name)))]\n      [else (count-digits (rest file_name))]))\n  (define\
    \ (count-dots file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char=?\
    \ (first file_name) #\\.) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots\
    \ (rest file_name))]))\n  (define (valid-extension? file_name)\n    (cond\n  \
    \    [(string=? (substring file_name (string-index file_name #\\.)) \".txt\")\
    \ #t]\n      [(string=? (substring file_name (string-index file_name #\\.)) \"\
    .exe\") #t]\n      [(string=? (substring file_name (string-index file_name #\\\
    .)) \".dll\") #t]\n      [else #f]))\n  (define (valid-prefix? file_name)\n  \
    \  (cond\n      [(char-alphabetic? (first file_name)) #t]\n      [else #f]))\n\
    \  (cond\n    [(and (= (count-digits file_name) 3) (= (count-dots file_name) 1)\
    \ (valid-extension? file_name) (valid-prefix? file_name)) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (count-digits str)\n    (cond\n      [(empty? str)\
    \ 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits (rest str)))]\n  \
    \    [else (count-digits (rest str))]))\n  (define (count-dots str)\n    (cond\n\
    \      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+ 1 (count-dots (rest\
    \ str)))]\n      [else (count-dots (rest str))]))\n  (define (valid-extension\
    \ str)\n    (cond\n      [(string=? str \"txt\") #t]\n      [(string=? str \"\
    exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else #f]))\n  (define (valid-name\
    \ str)\n    (cond\n      [(empty? str) #f]\n      [(char-alphabetic? (first str))\
    \ #t]\n      [else #f]))\n  (define (valid-file-name str)\n    (and\n      (not\
    \ (> (count-digits str) 3))\n      (= (count-dots str) 1)\n      (valid-name (substring\
    \ str 0 (string-index str #\\.)))\n      (valid-extension (substring str (+ 1\
    \ (string-index str #\\.))))))\n  (cond\n    [(valid-file-name file_name) \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (define (count-digits file_name)\n    (define (count-digits-iter\
    \ file_name count)\n      (cond ((null? file_name) count)\n            ((char-numeric?\
    \ (car file_name)) (count-digits-iter (cdr file_name) (+ count 1)))\n        \
    \    (else (count-digits-iter (cdr file_name) count))))\n    (count-digits-iter\
    \ file_name 0))\n  (define (check-dot file_name)\n    (define (check-dot-iter\
    \ file_name count)\n      (cond ((null? file_name) count)\n            ((char=?\
    \ (car file_name) #\\.) (check-dot-iter (cdr file_name) (+ count 1)))\n      \
    \      (else (check-dot-iter (cdr file_name) count))))\n    (check-dot-iter file_name\
    \ 0))\n  (define (check-substring-before-dot file_name)\n    (define (check-substring-before-dot-iter\
    \ file_name)\n      (cond ((null? file_name) #f)\n            ((char=? (car file_name)\
    \ #\\.) #t)\n            ((char-alphabetic? (car file_name)) (check-substring-before-dot-iter\
    \ (cdr file_name)))\n            (else #f)))\n    (check-substring-before-dot-iter\
    \ file_name))\n  (define (check-substring-after-dot file_name)\n    (define (check-substring-after-dot-iter\
    \ file_name)\n      (cond ((null? file_name) #f)\n            ((char=? (car file_name)\
    \ #\\.) (string=? (substring file_name 1 4) \"txt\")\n                       \
    \                  (string=? (substring file_name 1 4) \"exe\")\n            \
    \                             (string=? (substring file_name 1 4) \"dll\"))\n\
    \            (else (check-substring-after-dot-iter (cdr file_name)))))\n    (check-substring-after-dot-iter\
    \ file_name))\n  (cond ((> (count-digits file_name) 3)", "  (define (count-digits\
    \ str)\n    (let loop ((i 0) (count 0))\n      (if (= i (string-length str))\n\
    \          count\n          (if (char-numeric? (string-ref str i))\n         \
    \     (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (define\
    \ (count-dots str)\n    (let loop ((i 0) (count 0))\n      (if (= i (string-length\
    \ str))\n          count\n          (if (char=? (string-ref str i) #\\.)\n   \
    \           (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n\
    \  (define (before-dot str)\n    (let loop ((i 0))\n      (if (char=? (string-ref\
    \ str i) #\\.)\n          (substring str 0 i)\n          (loop (+ i 1)))))\n \
    \ (define (after-dot str)\n    (let loop ((i 0))\n      (if (char=? (string-ref\
    \ str i) #\\.)\n          (substring str (+ i 1) (string-length str))\n      \
    \    (loop (+ i 1)))))\n  (define (valid-extension str)\n    (or (string=? str\
    \ \"txt\")\n        (string=? str \"exe\")\n        (string=? str \"dll\")))\n\
    \  (if (and (= (count-digits file_name) 3)\n           (= (count-dots file_name)\
    \ 1)\n           (char-alphabetic? (string-ref (before-dot file_name) 0))\n  \
    \         (valid-extension (after-dot file_name)))\n      \"Yes\"\n      \"No\"\
    ))\n", "  (define (count-digits file_name)\n    (define (count-digits-iter file_name\
    \ counter)\n      (cond\n        [(empty? file_name) counter]\n        [(char-numeric?\
    \ (first file_name))\n         (count-digits-iter (rest file_name) (+ counter\
    \ 1))]\n        [else (count-digits-iter (rest file_name) counter)]))\n    (count-digits-iter\
    \ file_name 0))\n  (define (check-dot file_name)\n    (define (check-dot-iter\
    \ file_name counter)\n      (cond\n        [(empty? file_name) counter]\n    \
    \    [(char=? (first file_name) #\\.)\n         (check-dot-iter (rest file_name)\
    \ (+ counter 1))]\n        [else (check-dot-iter (rest file_name) counter)]))\n\
    \    (check-dot-iter file_name 0))\n  (define (check-first-char file_name)\n \
    \   (char-alphabetic? (first file_name)))\n  (define (check-extension file_name)\n\
    \    (define (check-extension-iter file_name)\n      (cond\n        [(empty? file_name)\
    \ #f]\n        [(char=? (first file_name) #\\.)\n         (cond\n           [(string=?\
    \ (rest file_name) \"txt\") #t]\n           [(string=? (rest file_name) \"exe\"\
    ) #t]\n           [(string=? (rest file_name) \"dll\") #t]\n           [else #f])]\n\
    \        [else (check-extension-iter (rest file_name))]))\n    (check-extension-iter\
    \ file_name))\n  (cond\n    [(> (count-digits file_name) 3) \"No\"]\n    [(< (check-dot\
    \ file_name) 1) \"No\"]\n    [(not (check-first-char file_name)) \"No\"]\n   \
    \ [(not (check-extension file_name)) \"No\"]\n    [else \"Yes\"]))\n", "  (define\
    \ (count-digits file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char-numeric?\
    \ (first file_name)) (+ 1 (count-digits (rest file_name)))]\n      [else (count-digits\
    \ (rest file_name))]))\n  (define (count-dots file_name)\n    (cond\n      [(empty?\
    \ file_name) 0]\n      [(char=? (first file_name) #\\.) (+ 1 (count-dots (rest\
    \ file_name)))]\n      [else (count-dots (rest file_name))]))\n  (define (valid-extension?\
    \ file_name)\n    (cond\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"txt\") #t]\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"exe\") #t]\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"dll\") #t]\n      [else #f]))\n  (define (valid-name? file_name)\n\
    \    (cond\n      [(empty? file_name) #f]\n      [(char-alphabetic? (first file_name))\
    \ #t]\n      [else #f]))\n  (cond\n    [(and (= (count-digits file_name) 3) (=\
    \ (count-dots file_name) 1) (valid-extension? file_name) (valid-name? file_name))\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension? ext)\n   \
    \ (member ext '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n\
    \    (define (is_valid_char? c)\n      (or (char-alphabetic? c) (char-numeric?\
    \ c)))\n    (and (not (empty? name))\n         (every is_valid_char? name)))\n\
    \  (define (is_valid_number? number)\n    (and (not (empty? number))\n       \
    \  (<= (string-length number) 3)\n         (every char-numeric? number)))\n  (define\
    \ (is_valid_file_name? file_name)\n    (let ([name (string-before file_name \"\
    .\")])\n      (and (is_valid_name? name)\n           (is_valid_extension? (string-after\
    \ file_name \".\")))))\n  (cond [(is_valid_file_name? file_name) \"Yes\"]\n  \
    \      [else \"No\"]))\n", "  (let ([digits (regexp-match #rx\"[0-9]\" file_name)]\n\
    \        [dot (regexp-match #rx\"\\.\" file_name)]\n        [before-dot (regexp-match\
    \ #rx\"[a-zA-Z]\" file_name)]\n        [after-dot (regexp-match #rx\"\\.(txt|exe|dll)\"\
    \ file_name)])\n    (cond [(and (= (length digits) 3) (= (length dot) 1) (= (length\
    \ before-dot) 1) (= (length after-dot) 1)) \"Yes\"]\n          [else \"No\"])))\n",
  "  (define (count-digits file_name)\n    (cond\n      [(empty? file_name) 0]\n \
    \     [(char-numeric? (first file_name)) (+ 1 (count-digits (rest file_name)))]\n\
    \      [else (count-digits (rest file_name))]))\n  (define (count-dots file_name)\n\
    \    (cond\n      [(empty? file_name) 0]\n      [(char=? (first file_name) #\\\
    .) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots (rest file_name))]))\n\
    \  (define (count-letters file_name)\n    (cond\n      [(empty? file_name) 0]\n\
    \      [(char-alphabetic? (first file_name)) (+ 1 (count-letters (rest file_name)))]\n\
    \      [else (count-letters (rest file_name))]))\n  (define (get-extension file_name)\n\
    \    (cond\n      [(empty? file_name) \"\"]\n      [(char=? (first file_name)\
    \ #\\.) (rest file_name)]\n      [else (get-extension (rest file_name))]))\n \
    \ (define (is-valid-extension? extension)\n    (cond\n      [(string=? extension\
    \ \"txt\") #t]\n      [(string=? extension \"exe\") #t]\n      [(string=? extension\
    \ \"dll\") #t]\n      [else #f]))\n  (define (is-valid-file-name? file_name)\n\
    \    (and\n      (<= (count-digits file_name) 3)\n      (= (count-dots file_name)\
    \ 1)\n      (> (count-letters file_name) 0)\n      (is-valid-extension? (get-extension\
    \ file_name))))\n  (cond\n    [(is-valid-file-name? file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (is_digit? c)\n    (and (char-numeric? c)\n       \
    \  (not (char=? c #\\0))))\n  (define (is_letter? c)\n    (or (char-alphabetic?\
    \ c)\n        (char=? c #\\_)))\n  (define (is_valid_extension? str)\n    (or\
    \ (string=? str \"txt\")\n        (string=? str \"exe\")\n        (string=? str\
    \ \"dll\")))\n  (define (count-digits str)\n    (define (count-digits-iter str\
    \ i)\n      (if (string-empty? str)\n          i\n          (if (is_digit? (string-ref\
    \ str 0))\n              (count-digits-iter (substring str 1) (+ i 1))\n     \
    \         (count-digits-iter (substring str 1) i))))\n    (count-digits-iter str\
    \ 0))\n  (define (count-dots str)\n    (define (count-dots-iter str i)\n     \
    \ (if (string-empty? str)\n          i\n          (if (char=? (string-ref str\
    \ 0) #\\.)\n              (count-dots-iter (substring str 1) (+ i 1))\n      \
    \        (count-dots-iter (substring str 1) i))))\n    (count-dots-iter str 0))\n\
    \  (define (is_valid_name? str)\n    (and (not (string-empty? str))\n        \
    \ (is_letter? (string-ref str 0))))\n  (define (is_valid_file_name? str)\n   \
    \ (and (is_valid_name? (substring str 0 (string-index str #\\.)))\n         (is_valid_extension?\
    \ (substring str (+ 1 (string-index str #\\.))))\n         (<= (count-digits str)\
    \ 3)\n         (= (count-dots str) 1)))\n  (if (is_valid_file_name? file_name)\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (count-digits str)\n    (cond ((string=?\
    \ str \"\") 0)\n          ((char-numeric? (string-ref str 0)) (+ 1 (count-digits\
    \ (substring str 1))))\n          (else (count-digits (substring str 1)))))\n\
    \  (define (count-dots str)\n    (cond ((string=? str \"\") 0)\n          ((char=?\
    \ (string-ref str 0) #\\.) (+ 1 (count-dots (substring str 1))))\n          (else\
    \ (count-dots (substring str 1)))))\n  (define (is-valid-extension? str)\n   \
    \ (cond ((string=? str \"txt\") #t)\n          ((string=? str \"exe\") #t)\n \
    \         ((string=? str \"dll\") #t)\n          (else #f)))\n  (define (is-valid-name?\
    \ str)\n    (and (char-alphabetic? (string-ref str 0))\n         (not (string=?\
    \ str \"\"))))\n  (define (is-valid-file-name? str)\n    (let ((dot-index (string-index\
    \ str #\\.))\n          (extension (substring str (+ dot-index 1))))\n      (and\
    \ (is-valid-name? (substring str 0 dot-index))\n           (is-valid-extension?\
    \ extension)\n           (not (> (count-digits str) 3))\n           (= (count-dots\
    \ str) 1))))\n  (if (is-valid-file-name? file_name)\n      \"Yes\"\n      \"No\"\
    ))\n", "  (define (valid-extension? file-name)\n    (define (extension-match?\
    \ ext)\n      (string-contains file-name ext))\n    (or (extension-match? \".txt\"\
    )\n        (extension-match? \".exe\")\n        (extension-match? \".dll\")))\n\
    \  (define (valid-name? file-name)\n    (define (name-match? name)\n      (string-contains\
    \ file-name name))\n    (and (not (name-match? \"..\"))\n         (not (name-match?\
    \ \".txt.\"))\n         (not (name-match? \".exe.\"))\n         (not (name-match?\
    \ \".dll.\"))))\n  (define (valid-dot? file-name)\n    (define (dot-match? dot)\n\
    \      (string-contains file-name dot))\n    (and (dot-match? \".\")\n       \
    \  (not (dot-match? \"..\"))\n         (not (dot-match? \".txt.\"))\n        \
    \ (not (dot-match? \".exe.\"))\n         (not (dot-match? \".dll.\"))))\n  (define\
    \ (valid-digits? file-name)\n    (define (digit-match? digit)\n      (string-contains\
    \ file-name digit))\n    (and (not (digit-match? \"0\"))\n         (not (digit-match?\
    \ \"1\"))\n         (not (digit-match? \"2\"))\n         (not (digit-match? \"\
    3\"))\n         (not (digit-match? \"4\"))\n         (not (digit-match? \"5\"\
    ))\n         (not (digit-match? \"6\"))\n         (not (digit-match? \"7\"))\n\
    \         (not (digit-match? \"8\"))\n         (not (digit-match? \"9\"))\n  \
    \       (not (digit-match? \"00\"))\n         (not (digit-match? \"11\"))\n  \
    \       (not (digit-match? \"22\"))\n         (not (digit-match? \"33\"))\n  \
    \       (not (digit-match? \"44\"))\n         (not (digit-match? \"55\"))\n  \
    \       (not (digit-match? \"66\"))\n         (not (digit-match", "  (define (count-digits\
    \ file_name)\n    (define (count-digits-helper file_name acc)\n      (cond\n \
    \       [(empty? file_name) acc]\n        [(char-numeric? (first file_name)) (count-digits-helper\
    \ (rest file_name) (+ acc 1))]\n        [else (count-digits-helper (rest file_name)\
    \ acc)]))\n    (count-digits-helper file_name 0))\n  (define (count-dots file_name)\n\
    \    (define (count-dots-helper file_name acc)\n      (cond\n        [(empty?\
    \ file_name) acc]\n        [(char=? (first file_name) #\\.) (count-dots-helper\
    \ (rest file_name) (+ acc 1))]\n        [else (count-dots-helper (rest file_name)\
    \ acc)]))\n    (count-dots-helper file_name 0))\n  (define (substring-before-dot\
    \ file_name)\n    (define (substring-before-dot-helper file_name acc)\n      (cond\n\
    \        [(empty? file_name) (list->string (reverse acc))]\n        [(char=? (first\
    \ file_name) #\\.) (list->string (reverse acc))]\n        [else (substring-before-dot-helper\
    \ (rest file_name) (cons (first file_name) acc))]))\n    (substring-before-dot-helper\
    \ file_name '()))\n  (define (substring-after-dot file_name)\n    (define (substring-after-dot-helper\
    \ file_name acc)\n      (cond\n        [(empty? file_name) (list->string (reverse\
    \ acc))]\n        [(char=? (first file_name) #\\.) (substring-after-dot-helper\
    \ (rest file_name) (cons (first file_name) acc))]\n        [else (substring-after-dot-helper\
    \ (rest file_name) acc)]))\n    (substring-after-dot-helper file_name '()))\n\
    \  (define (valid-substring-after-dot?", "  (define (count-digits file_name)\n\
    \    (define (count-digits-iter file_name count)\n      (cond\n        [(empty?\
    \ file_name) count]\n        [(char-numeric? (first file_name)) (count-digits-iter\
    \ (rest file_name) (+ count 1))]\n        [else (count-digits-iter (rest file_name)\
    \ count)]))\n    (count-digits-iter file_name 0))\n  (define (count-dots file_name)\n\
    \    (define (count-dots-iter file_name count)\n      (cond\n        [(empty?\
    \ file_name) count]\n        [(char=? (first file_name) #\\.) (count-dots-iter\
    \ (rest file_name) (+ count 1))]\n        [else (count-dots-iter (rest file_name)\
    \ count)]))\n    (count-dots-iter file_name 0))\n  (define (check-extension file_name)\n\
    \    (define (check-extension-iter file_name)\n      (cond\n        [(empty? file_name)\
    \ #f]\n        [(char=? (first file_name) #\\.) (check-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\t) (check-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\x) (check-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\e) (check-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\d) (check-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\l) (check-extension-iter (rest file_name))]\n\
    \        [else #f]))\n    (check-extension-iter file_name))\n  (define (check-name\
    \ file_name)\n    (define (check-name-iter file_name)\n      (cond\n        [(empty?\
    \ file_name) #f]\n        [(char-", "  (define (count-digits file_name)\n    (cond\n\
    \      [(empty? file_name) 0]\n      [(char-numeric? (first file_name)) (+ 1 (count-digits\
    \ (rest file_name)))]\n      [else (count-digits (rest file_name))]))\n  (define\
    \ (count-dots file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char=?\
    \ (first file_name) #\\.) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots\
    \ (rest file_name))]))\n  (define (valid-extension? file_name)\n    (cond\n  \
    \    [(string=? (substring file_name (add1 (string-index file_name #\\.)) (string-length\
    \ file_name)) \"txt\") #t]\n      [(string=? (substring file_name (add1 (string-index\
    \ file_name #\\.)) (string-length file_name)) \"exe\") #t]\n      [(string=? (substring\
    \ file_name (add1 (string-index file_name #\\.)) (string-length file_name)) \"\
    dll\") #t]\n      [else #f]))\n  (define (valid-name? file_name)\n    (cond\n\
    \      [(empty? file_name) #f]\n      [(char-alphabetic? (first file_name)) #t]\n\
    \      [else #f]))\n  (cond\n    [(and (= (count-digits file_name) 3) (= (count-dots\
    \ file_name) 1) (valid-extension? file_name) (valid-name? (substring file_name\
    \ 0 (string-index file_name #\\.)))) \"Yes\"]\n    [else \"No\"]))\n", "  (define\
    \ (count-digits file_name)\n    (cond [(empty? file_name) 0]\n          [(char-numeric?\
    \ (first file_name)) (+ 1 (count-digits (rest file_name)))]\n          [else (count-digits\
    \ (rest file_name))]))\n  (define (count-dots file_name)\n    (cond [(empty? file_name)\
    \ 0]\n          [(char=? (first file_name) #\\.) (+ 1 (count-dots (rest file_name)))]\n\
    \          [else (count-dots (rest file_name))]))\n  (define (valid-extension?\
    \ file_name)\n    (cond [(empty? file_name) #f]\n          [(string=? (substring\
    \ file_name (add1 (string-index file_name #\\.)) (string-length file_name)) \"\
    txt\") #t]\n          [(string=? (substring file_name (add1 (string-index file_name\
    \ #\\.)) (string-length file_name)) \"exe\") #t]\n          [(string=? (substring\
    \ file_name (add1 (string-index file_name #\\.)) (string-length file_name)) \"\
    dll\") #t]\n          [else #f]))\n  (define (valid-name? file_name)\n    (cond\
    \ [(empty? file_name) #f]\n          [(char-alphabetic? (first file_name)) #t]\n\
    \          [else #f]))\n  (cond [(and (= (count-digits file_name) 3) (= (count-dots\
    \ file_name) 1) (valid-extension? file_name) (valid-name? file_name)) \"Yes\"\
    ]\n        [else \"No\"]))\n", "  (define (check-digits file_name)\n    (define\
    \ (count-digits file_name)\n      (if (empty? file_name)\n          0\n      \
    \    (if (char-numeric? (first file_name))\n              (+ 1 (count-digits (rest\
    \ file_name)))\n              (count-digits (rest file_name)))))\n    (if (> (count-digits\
    \ file_name) 3)\n        #f\n        #t))\n  (define (check-dot file_name)\n \
    \   (define (count-dot file_name)\n      (if (empty? file_name)\n          0\n\
    \          (if (char=? (first file_name) #\\.)\n              (+ 1 (count-dot\
    \ (rest file_name)))\n              (count-dot (rest file_name)))))\n    (if (=\
    \ (count-dot file_name) 1)\n        #t\n        #f))\n  (define (check-substring\
    \ file_name)\n    (define (check-substring-before-dot file_name)\n      (if (empty?\
    \ file_name)\n          #f\n          (if (char=? (first file_name) #\\.)\n  \
    \            #t\n              (if (char-alphabetic? (first file_name))\n    \
    \              (check-substring-before-dot (rest file_name))\n               \
    \   #f))))\n    (define (check-substring-after-dot file_name)\n      (if (empty?\
    \ file_name)\n          #f\n          (if (char=? (first file_name) #\\.)\n  \
    \            (if (or (string=? (substring file_name 1 4) \"txt\")\n          \
    \            (string=? (substring file_name 1 4) \"exe\")\n                  \
    \    (string=? (substring file_name 1 4) \"dll\"))\n                  #t\n   \
    \               #f)\n              (check-substring-after-dot (rest file_name)))))\n\
    \    (and (check-substring-before-dot file_name)\n         (check-substring-after-dot\
    \ file_name)))\n  (if (and (check-digits file_name)\n           (check-dot file_name)\n",
  "  (define (count-digits file_name)\n    (define (count-digits-iter file_name count)\n\
    \      (cond\n        [(empty? file_name) count]\n        [(char-numeric? (first\
    \ file_name)) (count-digits-iter (rest file_name) (+ count 1))]\n        [else\
    \ (count-digits-iter (rest file_name) count)]))\n    (count-digits-iter file_name\
    \ 0))\n  (define (count-dots file_name)\n    (define (count-dots-iter file_name\
    \ count)\n      (cond\n        [(empty? file_name) count]\n        [(char=? (first\
    \ file_name) #\\.) (count-dots-iter (rest file_name) (+ count 1))]\n        [else\
    \ (count-dots-iter (rest file_name) count)]))\n    (count-dots-iter file_name\
    \ 0))\n  (define (is-valid-extension file_name)\n    (define (is-valid-extension-iter\
    \ file_name)\n      (cond\n        [(empty? file_name) #f]\n        [(char=? (first\
    \ file_name) #\\.) (is-valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\t) (is-valid-extension-iter (rest file_name))]\n      \
    \  [(char=? (first file_name) #\\x) (is-valid-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\e) (is-valid-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\d) (is-valid-extension-iter (rest file_name))]\n\
    \        [(char=? (first file_name) #\\l) (is-valid-extension-iter (rest file_name))]\n\
    \        [else #f]))\n    (is-valid-extension-iter file_name))\n  (define (is-valid-prefix\
    \ file_name)\n    (define (is-valid-prefix-iter file_name", "  (define (check-digits\
    \ file_name)\n    (if (empty? file_name)\n        #t\n        (if (char-numeric?\
    \ (first file_name))\n            (check-digits (rest file_name))\n          \
    \  #t)))\n  (define (check-dot file_name)\n    (if (empty? file_name)\n      \
    \  #f\n        (if (char=? (first file_name) #\\.)\n            #t\n         \
    \   (check-dot (rest file_name)))))\n  (define (check-substring-before-dot file_name)\n\
    \    (if (empty? file_name)\n        #f\n        (if (char-alphabetic? (first\
    \ file_name))\n            #t\n            #f)))\n  (define (check-substring-after-dot\
    \ file_name)\n    (if (empty? file_name)\n        #f\n        (if (char=? (first\
    \ file_name) #\\.)\n            (if (string=? (substring file_name 1 4) \"txt\"\
    )\n                #t\n                (if (string=? (substring file_name 1 4)\
    \ \"exe\")\n                    #t\n                    (if (string=? (substring\
    \ file_name 1 4) \"dll\")\n                        #t\n                      \
    \  #f)))\n            (check-substring-after-dot (rest file_name)))))\n  (if (and\
    \ (check-digits file_name)\n           (check-dot file_name)\n           (check-substring-before-dot\
    \ file_name)\n           (check-substring-after-dot file_name))\n      \"Yes\"\
    \n      \"No\"))\n", "  (define (is_valid_extension extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name name)\n    (and (not\
    \ (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]+$\" name)))\n  (define\
    \ (is_valid_file_name file_name)\n    (let ([parts (regexp-split #rx\"\\.\" file_name)])\n\
    \      (and (= (length parts) 2)\n           (is_valid_name (first parts))\n \
    \          (is_valid_extension (second parts)))))\n  (cond\n    [(is_valid_file_name\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(string-contains\
    \ file_name #\\.)\n     (let* ([before-dot (substring file_name 0 (string-index\
    \ file_name #\\.))]\n            [after-dot (substring file_name (+ (string-index\
    \ file_name #\\.) 1))])\n       (cond\n         [(and (not (empty? before-dot))\n\
    \               (regexp-match #rx\"^[a-zA-Z]\" before-dot)\n               (regexp-match\
    \ #rx\"[0-9]{1,3}\" before-dot)\n               (member after-dot '(\"txt\" \"\
    exe\" \"dll\")))\n          \"Yes\"]\n         [else \"No\"]))]\n    [else \"\
    No\"]))\n", "  (define (check-digits file_name)\n    (if (string-contains file_name\
    \ #\\0)\n        (if (string-contains file_name #\\1)\n            (if (string-contains\
    \ file_name #\\2)\n                (if (string-contains file_name #\\3)\n    \
    \                (if (string-contains file_name #\\4)\n                      \
    \  (if (string-contains file_name #\\5)\n                            (if (string-contains\
    \ file_name #\\6)\n                                (if (string-contains file_name\
    \ #\\7)\n                                    (if (string-contains file_name #\\\
    8)\n                                        (if (string-contains file_name #\\\
    9)\n                                            #f\n                         \
    \                   #t)\n                                        #t)\n       \
    \                             #t)\n                                #t)\n     \
    \                       #t)\n                        #t)\n                   \
    \ #t)\n                #t)\n            #t)\n        #t))\n  (define (check-dot\
    \ file_name)\n    (if (string-contains file_name #\\.)\n        (if (string-contains\
    \ file_name #\\.)\n            #f\n            #t)\n        #f))\n  (define (check-before-dot\
    \ file_name)\n    (if (string-contains file_name #\\.)\n        (if (string-contains\
    \ (substring file_name 0 (string-index file_name #\\.)) #\\a)\n            (if\
    \ (string-contains (substring file_name 0 (string-index file_name #\\.)) #\\b)\n\
    \                (if (string-contains (substring file_name 0 (string-index file_name\
    \ #\\.)) #\\c)\n                    (if (string-contains (substring file_name\
    \ 0 (string-index file_name #\\.)) #\\d)\n                        (if (string-contains\
    \ (substring file_name 0 (string-index file_name #\\.)) #\\e)\n              \
    \              (if (string-contains (substring file_name 0 (string-index file_name\
    \ #\\.)) #\\f)\n", "  (define (count-digits str)\n    (define (count-digits-iter\
    \ str count)\n      (cond [(empty? str) count]\n            [(char-numeric? (first\
    \ str)) (count-digits-iter (rest str) (+ count 1))]\n            [else (count-digits-iter\
    \ (rest str) count)]))\n    (count-digits-iter str 0))\n  (define (char-numeric?\
    \ c)\n    (and (char-alphabetic? c)\n         (or (char=? c #\\0)\n          \
    \   (char=? c #\\1)\n             (char=? c #\\2)\n             (char=? c #\\\
    3)\n             (char=? c #\\4)\n             (char=? c #\\5)\n             (char=?\
    \ c #\\6)\n             (char=? c #\\7)\n             (char=? c #\\8)\n      \
    \       (char=? c #\\9))))\n  (define (dot-count str)\n    (define (dot-count-iter\
    \ str count)\n      (cond [(empty? str) count]\n            [(char=? (first str)\
    \ #\\.) (dot-count-iter (rest str) (+ count 1))]\n            [else (dot-count-iter\
    \ (rest str) count)]))\n    (dot-count-iter str 0))\n  (define (substring-before-dot\
    \ str)\n    (define (substring-before-dot-iter str)\n      (cond [(empty? str)\
    \ \"\"]\n            [(char=? (first str) #\\.) (rest str)]\n            [else\
    \ (cons (first str) (substring-before-dot-iter (rest str)))]))\n    (substring-before-dot-iter\
    \ str))\n  (define (substring-after-dot str)\n    (define (substring-after-dot-iter\
    \ str)\n      (cond [(empty? str) \"\"]\n            [(char=? (first str) #\\\
    .) (substring-after-dot-iter (rest str))]\n            [else (cons (first str)\
    \ (substring-after-dot-iter (rest str)))]))\n    (substring-after", "  (define\
    \ (is_valid_file_name? file_name)\n    (define (is_valid_extension? extension)\n\
    \      (member extension '(\"txt\" \"exe\" \"dll\")))\n    (define (is_valid_name?\
    \ name)\n      (and (not (empty? name))\n           (regexp-match? #rx\"^[a-zA-Z]\"\
    \ name)))\n    (define (is_valid_number? number)\n      (and (not (empty? number))\n\
    \           (not (> (string-length number) 3))\n           (regexp-match? #rx\"\
    ^[0-9]+$\" number)))\n    (define (is_valid_file_name_parts? name number extension)\n\
    \      (and (is_valid_name? name)\n           (is_valid_number? number)\n    \
    \       (is_valid_extension? extension)))\n    (define (split-file-name file_name)\n\
    \      (regexp-match #rx\"([a-zA-Z]+)([0-9]*)\\.([a-zA-Z]{3})\" file_name))\n\
    \    (define (get-file-name-parts file_name)\n      (let ([parts (split-file-name\
    \ file_name)])\n        (if (not (empty? parts))\n            (list (list-ref\
    \ parts 1)\n                  (list-ref parts 2)\n                  (list-ref\
    \ parts 3))\n            '())))\n    (define (is_valid_file_name? file_name)\n\
    \      (let ([parts (get-file-name-parts file_name)])\n        (if (not (empty?\
    \ parts))\n            (is_valid_file_name_parts? (list-ref parts 0)\n       \
    \                                (list-ref parts 1)\n                        \
    \               (list-ref parts 2))\n            #f)))\n    (if (is_valid_file_name?\
    \ file_name)\n        \"Yes\"\n        \"No\"))\n  (is_valid_file_name? file_name))\n",
  "  (define (check-extension extension)\n    (cond\n      [(string=? extension \"\
    txt\") #t]\n      [(string=? extension \"exe\") #t]\n      [(string=? extension\
    \ \"dll\") #t]\n      [else #f]))\n  (define (check-name name)\n    (cond\n  \
    \    [(regexp-match #rx\"[a-zA-Z][a-zA-Z0-9]*\" name) #t]\n      [else #f]))\n\
    \  (define (check-digits digits)\n    (cond\n      [(> (string-length digits)\
    \ 3) #f]\n      [else #t]))\n  (define (check-file-name file_name)\n    (let*\
    \ ([split-file-name (string-split file_name \"\\\\.\")]\n           [name (first\
    \ split-file-name)]\n           [extension (second split-file-name)])\n      (cond\n\
    \        [(and (check-extension extension)\n              (check-name name)\n\
    \              (check-digits name)) #t]\n        [else #f])))\n  (cond\n    [(check-file-name\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n\
    \    (define (helper str count)\n      (cond\n        [(empty? str) count]\n \
    \       [(char-numeric? (first str)) (helper (rest str) (+ count 1))]\n      \
    \  [else (helper (rest str) count)]))\n    (helper str 0))\n  (define (count-dots\
    \ str)\n    (define (helper str count)\n      (cond\n        [(empty? str) count]\n\
    \        [(char=? (first str) #\\.) (helper (rest str) (+ count 1))]\n       \
    \ [else (helper (rest str) count)]))\n    (helper str 0))\n  (define (is-valid-extension\
    \ str)\n    (cond\n      [(string=? str \"txt\") #t]\n      [(string=? str \"\
    exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else #f]))\n  (define (is-valid-name\
    \ str)\n    (cond\n      [(empty? str) #f]\n      [(char-alphabetic? (first str))\
    \ #t]\n      [else #f]))\n  (define (is-valid-file-name str)\n    (define (helper\
    \ str)\n      (cond\n        [(empty? str) #f]\n        [(char=? (first str) #\\\
    .) #t]\n        [else (helper (rest str))]))\n    (define (get-extension str)\n\
    \      (define (helper str)\n        (cond\n          [(empty? str) \"\"]\n  \
    \        [(char=? (first str) #\\.) (rest str)]\n          [else (helper (rest\
    \ str))]))\n      (helper str))\n    (define (get-name str)\n      (define (helper\
    \ str)\n        (cond\n          [(empty? str) \"\"]\n          [(char=? (first\
    \ str) #\\.) (reverse (rest (reverse str)))]\n          [else (helper (rest str))]))\n\
    \      (helper str))\n    (and (not (> (count-digits str) 3))\n         (= (count-dots\
    \ str) 1)", "  (define (check-extension extension)\n    (member extension '(\"\
    txt\" \"exe\" \"dll\")))\n  (define (check-name name)\n    (and (not (empty? name))\n\
    \         (regexp-match? #rx\"[a-zA-Z]\" name)\n         (not (regexp-match? #rx\"\
    [0-9]{4,}\" name))))\n  (define (check-dot file-name)\n    (and (regexp-match?\
    \ #rx\"\\.\" file-name)\n         (regexp-match? #rx\"^[^\\.]+\\.[^\\.]+$\" file-name)))\n\
    \  (define (split-file-name file-name)\n    (regexp-split #rx\"\\.\" file-name))\n\
    \  (cond\n    [(check-dot file-name)\n     (let* ([file-name-parts (split-file-name\
    \ file-name)]\n            [name (first file-name-parts)]\n            [extension\
    \ (second file-name-parts)])\n       (cond\n         [(and (check-name name) (check-extension\
    \ extension)) \"Yes\"]\n         [else \"No\"]))]\n    [else \"No\"]))\n", " \
    \ (define (digit? c)\n    (and (char-numeric? c) (char&lt;=? #\\0 c) (char&lt;=?\
    \ c #\\9)))\n  (define (digit-count str)\n    (let loop ((str str) (count 0))\n\
    \      (cond ((null? str) count)\n            ((digit? (car str)) (loop (cdr str)\
    \ (+ count 1)))\n            (else (loop (cdr str) count)))))\n  (define (valid-extension?\
    \ str)\n    (or (string=? str \"txt\")\n        (string=? str \"exe\")\n     \
    \   (string=? str \"dll\")))\n  (define (valid-name? str)\n    (and (not (null?\
    \ str))\n         (char-alphabetic? (car str))\n         (not (digit? (car str)))))\n\
    \  (let* ((parts (string-split file_name #\\.))\n         (name (car parts))\n\
    \         (extension (cadr parts)))\n    (cond ((not (valid-name? name)) \"No\"\
    )\n          ((not (valid-extension? extension)) \"No\")\n          ((&gt; (digit-count\
    \ name) 3) \"No\")\n          (else \"Yes\"))))\n</code>\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n    (define (count-digits-iter\
    \ str count)\n      (cond ((string-empty? str) count)\n            ((char-numeric?\
    \ (string-ref str 0)) (count-digits-iter (substring str 1) (+ count 1)))\n   \
    \         (else (count-digits-iter (substring str 1) count))))\n    (count-digits-iter\
    \ str 0))\n  (define (check-extension str)\n    (cond ((string=? str \"txt\")\
    \ #t)\n          ((string=? str \"exe\") #t)\n          ((string=? str \"dll\"\
    ) #t)\n          (else #f)))\n  (define (check-name str)\n    (cond ((string-empty?\
    \ str) #f)\n          ((char-alphabetic? (string-ref str 0)) #t)\n          (else\
    \ #f)))\n  (define (check-dot str)\n    (cond ((string-empty? str) #f)\n     \
    \     ((string=? (string-ref str 0) #\\.) #t)\n          (else #f)))\n  (cond\
    \ ((or (> (count-digits file_name) 3)\n             (not (check-extension (substring\
    \ file_name (+ (string-index file_name #\\.) 1))))\n             (not (check-name\
    \ (substring file_name 0 (string-index file_name #\\.))))\n             (not (check-dot\
    \ file_name)))\n         \"No\")\n        (else \"Yes\")))\n", "  (define (count-digits\
    \ str)\n    (cond [(empty? str) 0]\n          [(char-numeric? (first str)) (+\
    \ 1 (count-digits (rest str)))]\n          [else (count-digits (rest str))]))\n\
    \  (define (count-dots str)\n    (cond [(empty? str) 0]\n          [(char=? (first\
    \ str) #\\.) (+ 1 (count-dots (rest str)))]\n          [else (count-dots (rest\
    \ str))]))\n  (define (extension? str)\n    (cond [(string=? str \"txt\") #t]\n\
    \          [(string=? str \"exe\") #t]\n          [(string=? str \"dll\") #t]\n\
    \          [else #f]))\n  (define (valid-name? str)\n    (cond [(empty? str) #f]\n\
    \          [(char-alphabetic? (first str)) #t]\n          [else #f]))\n  (define\
    \ (valid-file-name? str)\n    (cond [(< (count-digits str) 4) #t]\n          [(=\
    \ (count-dots str) 1) #t]\n          [(valid-name? (substring str 0 (string-index\
    \ str #\\.))) #t]\n          [(extension? (substring str (+ 1 (string-index str\
    \ #\\.)))) #t]\n          [else #f]))\n  (cond [(valid-file-name? file_name) \"\
    Yes\"]\n        [else \"No\"]))\n", "  (define (count-digits file_name)\n    (define\
    \ (count-digits-iter file_name count)\n      (cond ((empty? file_name) count)\n\
    \            ((char-numeric? (first file_name))\n             (count-digits-iter\
    \ (rest file_name) (+ count 1)))\n            (else (count-digits-iter (rest file_name)\
    \ count))))\n    (count-digits-iter file_name 0))\n  (define (count-dots file_name)\n\
    \    (define (count-dots-iter file_name count)\n      (cond ((empty? file_name)\
    \ count)\n            ((char=? (first file_name) #\\.)\n             (count-dots-iter\
    \ (rest file_name) (+ count 1)))\n            (else (count-dots-iter (rest file_name)\
    \ count))))\n    (count-dots-iter file_name 0))\n  (define (substring-before-dot\
    \ file_name)\n    (define (substring-before-dot-iter file_name)\n      (cond ((empty?\
    \ file_name) \"\")\n            ((char=? (first file_name) #\\.)\n           \
    \  (rest file_name))\n            (else (cons (first file_name)\n            \
    \            (substring-before-dot-iter (rest file_name))))))\n    (substring-before-dot-iter\
    \ file_name))\n  (define (substring-after-dot file_name)\n    (define (substring-after-dot-iter\
    \ file_name)\n      (cond ((empty? file_name) \"\")\n            ((char=? (first\
    \ file_name) #\\.)\n             (substring-after-dot-iter (rest file_name)))\n\
    \            (else (cons (first file_name)\n                        (substring-after-dot-iter\
    \ (rest file_name))))))\n    (substring-after-dot-iter file_name))\n  (define\
    \ (valid-extension? file_name)\n    (cond ((string=? file_name \"txt\") #t)\n\
    \          ((string=? file_name \"exe\") #t)\n          ((string=? file_name \"\
    dll\") #t", "  (define (count-digits str)\n    (define (count-digits-iter str\
    \ count)\n      (cond\n        [(empty? str) count]\n        [(char-numeric? (first\
    \ str)) (count-digits-iter (rest str) (+ count 1))]\n        [else (count-digits-iter\
    \ (rest str) count)]))\n    (count-digits-iter str 0))\n  (define (count-dots\
    \ str)\n    (define (count-dots-iter str count)\n      (cond\n        [(empty?\
    \ str) count]\n        [(char=? (first str) #\\.) (count-dots-iter (rest str)\
    \ (+ count 1))]\n        [else (count-dots-iter (rest str) count)]))\n    (count-dots-iter\
    \ str 0))\n  (define (valid-extension? str)\n    (cond\n      [(string=? str \"\
    txt\") #t]\n      [(string=? str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n\
    \      [else #f]))\n  (define (valid-name? str)\n    (cond\n      [(empty? str)\
    \ #f]\n      [(char-alphabetic? (first str)) #t]\n      [else #f]))\n  (define\
    \ (valid-file-name? str)\n    (cond\n      [(< (count-digits str) 4) #t]\n   \
    \   [(= (count-dots str) 1) #t]\n      [(valid-name? (substring str 0 (string-index\
    \ str #\\.))) #t]\n      [(valid-extension? (substring str (+ (string-index str\
    \ #\\.) 1) (string-length str))) #t]\n      [else #f]))\n  (cond\n    [(valid-file-name?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (member extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (not (empty? name))\n         (char-alphabetic? (string-ref\
    \ name 0))\n         (not (regexp-match #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let ([parts (string-split file_name #\\.)])\n      (and (=\
    \ (length parts) 2)\n           (is_valid_name? (first parts))\n           (is_valid_extension?\
    \ (second parts)))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n \
    \     \"No\"))\n", "  (define (is_valid_extension? extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (char-alphabetic? (string-ref name 0))\n         (not\
    \ (> (count (char-set-member? char-set:digit) name) 3))))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let ([name (string-before file_name \".\")]\n          [extension\
    \ (string-after file_name \".\")])\n      (and (is_valid_name? name)\n       \
    \    (is_valid_extension? extension))))\n  (if (is_valid_file_name? file_name)\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (check_digits file_name)\n    (let\
    \ loop ([file_name file_name] [count 0])\n      (cond [(empty? file_name) (if\
    \ (> count 3) \"No\" \"Yes\")]\n            [(char-numeric? (car file_name)) (loop\
    \ (cdr file_name) (+ count 1))]\n            [else (loop (cdr file_name) count)])))\n\
    \  (define (check_dot file_name)\n    (let loop ([file_name file_name] [count\
    \ 0])\n      (cond [(empty? file_name) (if (= count 1) \"Yes\" \"No\")]\n    \
    \        [(char=? (car file_name) #\\.) (loop (cdr file_name) (+ count 1))]\n\
    \            [else (loop (cdr file_name) count)])))\n  (define (check_substring\
    \ file_name)\n    (let loop ([file_name file_name] [count 0])\n      (cond [(empty?\
    \ file_name) (if (= count 1) \"Yes\" \"No\")]\n            [(char-alphabetic?\
    \ (car file_name)) (loop (cdr file_name) (+ count 1))]\n            [else (loop\
    \ (cdr file_name) count)])))\n  (define (check_extension file_name)\n    (let\
    \ loop ([file_name file_name] [count 0])\n      (cond [(empty? file_name) (if\
    \ (= count 3) \"Yes\" \"No\")]\n            [(char=? (car file_name) #\\.) (loop\
    \ (cdr file_name) (+ count 1))]\n            [else (loop (cdr file_name) count)])))\n\
    \  (cond [(string=? (check_digits file_name) \"No\") \"No\"]\n        [(string=?\
    \ (check_dot file_name) \"No\") \"No\"]\n        [(string=? (check_substring file_name)\
    \ \"No\") \"No\"]\n        [(string=? (check_extension file_name) \"No\") \"No\"\
    ]\n        [else \"Yes\"]))\n", "  (define (count-digits str)\n    (if (empty?\
    \ str)\n        0\n        (if (char-numeric? (first str))\n            (+ 1 (count-digits\
    \ (rest str)))\n            (count-digits (rest str)))))\n  (define (count-dots\
    \ str)\n    (if (empty? str)\n        0\n        (if (char=? (first str) #\\.)\n\
    \            (+ 1 (count-dots (rest str)))\n            (count-dots (rest str)))))\n\
    \  (define (check-extension str)\n    (if (empty? str)\n        #f\n        (if\
    \ (or (string=? str \"txt\") (string=? str \"exe\") (string=? str \"dll\"))\n\
    \            #t\n            #f)))\n  (define (check-first-char str)\n    (if\
    \ (empty? str)\n        #f\n        (if (or (char-alphabetic? (first str)) (char=?\
    \ (first str) #\\_))\n            #t\n            #f)))\n  (if (and (= (count-digits\
    \ file_name) 3) (= (count-dots file_name) 1) (check-extension (substring (string-index\
    \ file_name #\\.) (string-length file_name))) (check-first-char (substring (string-index\
    \ file_name #\\.) (string-length file_name))))\n      \"Yes\"\n      \"No\"))\n",
  "  (define (count-digits str)\n    (if (empty? str)\n        0\n        (if (char-numeric?\
    \ (first str))\n            (+ 1 (count-digits (rest str)))\n            (count-digits\
    \ (rest str)))))\n  (define (count-dots str)\n    (if (empty? str)\n        0\n\
    \        (if (char=? (first str) #\\.)\n            (+ 1 (count-dots (rest str)))\n\
    \            (count-dots (rest str)))))\n  (define (valid-extension? str)\n  \
    \  (or (string=? str \"txt\")\n        (string=? str \"exe\")\n        (string=?\
    \ str \"dll\")))\n  (define (valid-substring? str)\n    (and (not (empty? str))\n\
    \         (char-alphabetic? (first str))\n         (valid-extension? (string-upcase\
    \ str))))\n  (define (valid-file-name? str)\n    (and (not (> (count-digits str)\
    \ 3))\n         (= (count-dots str) 1)\n         (valid-substring? (substring\
    \ str 0 (string-index str #\\.)))\n         (valid-substring? (substring str (+\
    \ 1 (string-index str #\\.))))))\n  (if (valid-file-name? file_name)\n      \"\
    Yes\"\n      \"No\"))\n", "  (define (count-digits str)\n    (define (count-digits-iter\
    \ str count)\n      (cond ((string-empty? str) count)\n            ((char-numeric?\
    \ (string-ref str 0)) (count-digits-iter (substring str 1) (+ count 1)))\n   \
    \         (else (count-digits-iter (substring str 1) count))))\n    (count-digits-iter\
    \ str 0))\n  (define (valid-extension? str)\n    (cond ((string=? str \"txt\"\
    ) #t)\n          ((string=? str \"exe\") #t)\n          ((string=? str \"dll\"\
    ) #t)\n          (else #f)))\n  (define (valid-name? str)\n    (cond ((string-empty?\
    \ str) #f)\n          ((char-numeric? (string-ref str 0)) #f)\n          (else\
    \ #t)))\n  (define (valid-file-name? str)\n    (define (valid-file-name-iter str)\n\
    \      (cond ((string-empty? str) #t)\n            ((char-numeric? (string-ref\
    \ str 0)) (valid-file-name-iter (substring str 1)))\n            (else #t)))\n\
    \    (valid-file-name-iter str))\n  (define (valid-file-name-extension? str)\n\
    \    (define (valid-file-name-extension-iter str)\n      (cond ((string-empty?\
    \ str) #t)\n            ((char-numeric? (string-ref str 0)) (valid-file-name-extension-iter\
    \ (substring str 1)))\n            (else #t)))\n    (valid-file-name-extension-iter\
    \ str))\n  (define (valid-file-name-extension-iter str)\n    (cond ((string-empty?\
    \ str) #t)\n          ((char-numeric? (string-ref str 0)) (valid-file-name-extension-iter\
    \ (substring str 1)))\n          (else #t)))\n  (define (valid-file-name-extension?\
    \ str)\n    (valid-file-name-extension-iter str))\n  (define (valid-file-name",
  "  (cond\n    [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\n\
    \          (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\n   \
    \       (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n     \"\
    Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n    (if (string-empty?\
    \ str)\n        0\n        (if (char-numeric? (string-ref str 0))\n          \
    \  (+ 1 (count-digits (string-drop str 1)))\n            (count-digits (string-drop\
    \ str 1)))))\n  (define (is-valid-extension ext)\n    (or (string=? ext \"txt\"\
    )\n        (string=? ext \"exe\")\n        (string=? ext \"dll\")))\n  (define\
    \ (is-valid-name name)\n    (and (not (string-empty? name))\n         (char-alphabetic?\
    \ (string-ref name 0))))\n  (define (is-valid-file-name file_name)\n    (let*\
    \ ([parts (string-split file_name \".\")]\n           [name (first parts)]\n \
    \          [ext (second parts)])\n      (and (not (string-empty? ext))\n     \
    \      (is-valid-name name)\n           (is-valid-extension ext)\n           (<=\
    \ (count-digits name) 3))))\n  (if (is-valid-file-name file_name)\n      \"Yes\"\
    \n      \"No\"))\n", "  (define (count-digits file_name)\n    (cond\n      [(empty?\
    \ file_name) 0]\n      [(char-numeric? (first file_name)) (+ 1 (count-digits (rest\
    \ file_name)))]\n      [else (count-digits (rest file_name))]))\n  (define (count-dots\
    \ file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char=? (first file_name)\
    \ #\\.) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots (rest file_name))]))\n\
    \  (define (is-valid-extension? file_name)\n    (cond\n      [(string=? (substring\
    \ file_name (add1 (string-index file_name #\\.)) (string-length file_name)) \"\
    txt\") #t]\n      [(string=? (substring file_name (add1 (string-index file_name\
    \ #\\.)) (string-length file_name)) \"exe\") #t]\n      [(string=? (substring\
    \ file_name (add1 (string-index file_name #\\.)) (string-length file_name)) \"\
    dll\") #t]\n      [else #f]))\n  (define (is-valid-name? file_name)\n    (cond\n\
    \      [(empty? file_name) #f]\n      [(char-alphabetic? (first file_name)) #t]\n\
    \      [else #f]))\n  (cond\n    [(and (= (count-digits file_name) 3) (= (count-dots\
    \ file_name) 1) (is-valid-extension? file_name) (is-valid-name? file_name)) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits file_name)\n    (if (string-empty?\
    \ file_name)\n        0\n        (if (char-numeric? (string-ref file_name 0))\n\
    \            (+ 1 (count-digits (substring file_name 1)))\n            (count-digits\
    \ (substring file_name 1)))))\n  (define (count-dots file_name)\n    (if (string-empty?\
    \ file_name)\n        0\n        (if (char=? (string-ref file_name 0) #\\.)\n\
    \            (+ 1 (count-dots (substring file_name 1)))\n            (count-dots\
    \ (substring file_name 1)))))\n  (define (is-valid-extension? file_name)\n   \
    \ (if (string-empty? file_name)\n        #f\n        (if (string=? file_name \"\
    txt\")\n            #t\n            (if (string=? file_name \"exe\")\n       \
    \         #t\n                (if (string=? file_name \"dll\")\n             \
    \       #t\n                    #f)))))\n  (define (is-valid-name? file_name)\n\
    \    (if (string-empty? file_name)\n        #f\n        (if (char-alphabetic?\
    \ (string-ref file_name 0))\n            #t\n            #f)))\n  (define (get-extension\
    \ file_name)\n    (if (string-empty? file_name)\n        \"\"\n        (if (char=?\
    \ (string-ref file_name 0) #\\.)\n            (substring file_name 1)\n      \
    \      (get-extension (substring file_name 1)))))\n  (define (get-name file_name)\n\
    \    (if (string-empty? file_name)\n        \"\"\n        (if (char=? (string-ref\
    \ file_name 0) #\\.)\n            \"\"\n            (string-append (string (string-ref\
    \ file_name 0)) (get-name (substring file_name 1))))))\n  (if (and (= (count-digits\
    \ file_name) 3) (= (count-dots file_name) 1) (is-valid-extension? (get", "  (define\
    \ (count-digits str)\n    (define (count-digits-iter str count)\n      (cond [(empty?\
    \ str) count]\n            [(char-numeric? (first str)) (count-digits-iter (rest\
    \ str) (+ count 1))]\n            [else (count-digits-iter (rest str) count)]))\n\
    \    (count-digits-iter str 0))\n  (define (count-dots str)\n    (define (count-dots-iter\
    \ str count)\n      (cond [(empty? str) count]\n            [(char=? (first str)\
    \ #\\.) (count-dots-iter (rest str) (+ count 1))]\n            [else (count-dots-iter\
    \ (rest str) count)]))\n    (count-dots-iter str 0))\n  (define (valid-extension?\
    \ str)\n    (cond [(string=? str \"txt\") #t]\n          [(string=? str \"exe\"\
    ) #t]\n          [(string=? str \"dll\") #t]\n          [else #f]))\n  (define\
    \ (valid-name? str)\n    (cond [(empty? str) #f]\n          [(char-alphabetic?\
    \ (first str)) #t]\n          [else #f]))\n  (define (valid-file-name? str)\n\
    \    (let ([name (string-before str #\\.)]\n          [extension (string-after\
    \ str #\\.)])\n      (and (valid-name? name)\n           (valid-extension? extension)\n\
    \           (= (count-digits name) 0)\n           (= (count-dots str) 1))))\n\
    \  (cond [(valid-file-name? file_name) \"Yes\"]\n        [else \"No\"]))\n", " \
    \ (define (is_valid_extension? extension)\n    (member extension '(\"txt\" \"\
    exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n\
    \         (regexp-match #rx\"^[a-zA-Z]\" name)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (count-digits file_name)\n      (regexp-match* #rx\"\
    [0-9]\" file_name))\n    (define (count-dots file_name)\n      (regexp-match*\
    \ #rx\"\\.\" file_name))\n    (and (not (> (count-digits file_name) 3))\n    \
    \     (= (count-dots file_name) 1)))\n  (define (split-file-name file_name)\n\
    \    (regexp-match* #rx\"([^.]+)\\.([^.]+)\" file_name))\n  (define (get-name\
    \ file_name)\n    (list-ref (split-file-name file_name) 1))\n  (define (get-extension\
    \ file_name)\n    (list-ref (split-file-name file_name) 2))\n  (cond ((is_valid_file_name?\
    \ file_name)\n         (cond ((and (is_valid_name? (get-name file_name))\n   \
    \                  (is_valid_extension? (get-extension file_name)))\n        \
    \        \"Yes\")\n               (else \"No\")))\n        (else \"No\")))\n",
  "  (define (count-digits file_name)\n    (cond\n      [(empty? file_name) 0]\n \
    \     [(char-numeric? (first file_name)) (+ 1 (count-digits (rest file_name)))]\n\
    \      [else (count-digits (rest file_name))]))\n  (define (count-dots file_name)\n\
    \    (cond\n      [(empty? file_name) 0]\n      [(char=? (first file_name) #\\\
    .) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots (rest file_name))]))\n\
    \  (define (valid-extension? extension)\n    (cond\n      [(string=? extension\
    \ \"txt\") #t]\n      [(string=? extension \"exe\") #t]\n      [(string=? extension\
    \ \"dll\") #t]\n      [else #f]))\n  (define (valid-name? name)\n    (cond\n \
    \     [(empty? name) #f]\n      [(char-alphabetic? (first name)) #t]\n      [else\
    \ #f]))\n  (define (valid-file-name? file_name)\n    (let ([name (string-before\
    \ file_name \".\")]\n          [extension (string-after file_name \".\")])\n \
    \     (and (valid-name? name)\n           (valid-extension? extension)\n     \
    \      (= (count-digits file_name) 3)\n           (= (count-dots file_name) 1))))\n\
    \  (cond\n    [(valid-file-name? file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (count-digits file_name)\n    (define (count-digits-iter file_name count)\n\
    \      (cond ((null? file_name) count)\n            ((char-numeric? (car file_name))\
    \ (count-digits-iter (cdr file_name) (+ count 1)))\n            (else (count-digits-iter\
    \ (cdr file_name) count))))\n    (count-digits-iter file_name 0))\n  (define (count-dots\
    \ file_name)\n    (define (count-dots-iter file_name count)\n      (cond ((null?\
    \ file_name) count)\n            ((char=? (car file_name) #\\.) (count-dots-iter\
    \ (cdr file_name) (+ count 1)))\n            (else (count-dots-iter (cdr file_name)\
    \ count))))\n    (count-dots-iter file_name 0))\n  (define (substring-before-dot\
    \ file_name)\n    (define (substring-before-dot-iter file_name result)\n     \
    \ (cond ((null? file_name) result)\n            ((char=? (car file_name) #\\.)\
    \ result)\n            (else (substring-before-dot-iter (cdr file_name) (string-append\
    \ result (list (car file_name)))))))\n    (substring-before-dot-iter file_name\
    \ \"\"))\n  (define (substring-after-dot file_name)\n    (define (substring-after-dot-iter\
    \ file_name result)\n      (cond ((null? file_name) result)\n            ((char=?\
    \ (car file_name) #\\.) (substring-after-dot-iter (cdr file_name) \"\"))\n   \
    \         (else (substring-after-dot-iter (cdr file_name) (string-append result\
    \ (list (car file_name)))))))\n    (substring-after-dot-iter file_name \"\"))\n\
    \  (define (is-valid-substring-after-dot substring)\n    (cond ((string=? substring\
    \ \"txt\") #t)\n          ((string=? substring \"exe\") #t)\n          ((string=",
  "  (define (count-digits str)\n    (cond [(empty? str) 0]\n          [(char-numeric?\
    \ (first str)) (+ 1 (count-digits (rest str)))]\n          [else (count-digits\
    \ (rest str))]))\n  (define (count-dots str)\n    (cond [(empty? str) 0]\n   \
    \       [(char=? (first str) #\\.) (+ 1 (count-dots (rest str)))]\n          [else\
    \ (count-dots (rest str))]))\n  (define (check-extension str)\n    (cond [(empty?\
    \ str) #f]\n          [(string=? str \"txt\") #t]\n          [(string=? str \"\
    exe\") #t]\n          [(string=? str \"dll\") #t]\n          [else #f]))\n  (define\
    \ (check-name str)\n    (cond [(empty? str) #f]\n          [(char-alphabetic?\
    \ (first str)) #t]\n          [else #f]))\n  (define (check-file-name str)\n \
    \   (define (split-file-name str)\n      (define (split-file-name-helper str acc)\n\
    \        (cond [(empty? str) (reverse acc)]\n              [(char=? (first str)\
    \ #\\.) (split-file-name-helper (rest str) (cons (list (reverse (first acc)) (list))\
    \ acc))]\n              [else (split-file-name-helper (rest str) (cons (cons (first\
    \ str) (first acc)) (rest acc)))]))\n      (split-file-name-helper str (list (list))))\n\
    \    (define (check-file-name-helper str)\n      (cond [(empty? str) #f]\n   \
    \         [(and (check-name (string-&gt;list (first str))) (check-extension (string-&gt;list\
    \ (second str)))) #t]\n            [else #f]))\n    (check-file-name-helper (split-file-name\
    \ str)))\n  (cond [(and (= 1 (count-dots file_name)) (= 0 (count-digits file_name))\
    \ (check-file-name file", "  (define (count-digits str)\n    (cond\n      [(empty?\
    \ str) 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits (rest str)))]\n\
    \      [else (count-digits (rest str))]))\n  (define (count-dots str)\n    (cond\n\
    \      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+ 1 (count-dots (rest\
    \ str)))]\n      [else (count-dots (rest str))]))\n  (define (is-valid-extension\
    \ str)\n    (cond\n      [(string=? str \"txt\") #t]\n      [(string=? str \"\
    exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else #f]))\n  (define (is-valid-substring\
    \ str)\n    (cond\n      [(empty? str) #f]\n      [(char-alphabetic? (first str))\
    \ #t]\n      [else #f]))\n  (define (get-substring str)\n    (cond\n      [(empty?\
    \ str) \"\"]\n      [(char=? (first str) #\\.) \"\"]\n      [else (string-append\
    \ (string (first str)) (get-substring (rest str)))]))\n  (define (get-extension\
    \ str)\n    (cond\n      [(empty? str) \"\"]\n      [(char=? (first str) #\\.)\
    \ (get-substring (rest str))]\n      [else (get-extension (rest str))]))\n  (cond\n\
    \    [(or (> (count-digits file_name) 3)\n         (> (count-dots file_name) 1)\n\
    \         (not (is-valid-substring (get-substring file_name)))\n         (not\
    \ (is-valid-extension (get-extension file_name)))]\n     \"No\")\n    [else \"\
    Yes\"]))\n", "  (define (count-digits str)\n    (cond\n      [(empty? str) 0]\n\
    \      [(char-numeric? (first str)) (+ 1 (count-digits (rest str)))]\n      [else\
    \ (count-digits (rest str))]))\n  (define (count-dots str)\n    (cond\n      [(empty?\
    \ str) 0]\n      [(char=? (first str) #\\.) (+ 1 (count-dots (rest str)))]\n \
    \     [else (count-dots (rest str))]))\n  (define (check-extension str)\n    (cond\n\
    \      [(string=? str \"txt\") #t]\n      [(string=? str \"exe\") #t]\n      [(string=?\
    \ str \"dll\") #t]\n      [else #f]))\n  (define (check-prefix str)\n    (cond\n\
    \      [(empty? str) #f]\n      [(char-alphabetic? (first str)) #t]\n      [else\
    \ #f]))\n  (define (split-file-name str)\n    (define (split-file-name-helper\
    \ str acc)\n      (cond\n        [(empty? str) (reverse acc)]\n        [(char=?\
    \ (first str) #\\.) (split-file-name-helper (rest str) (cons (list (reverse (first\
    \ acc)) (list)) acc))]\n        [else (split-file-name-helper (rest str) (cons\
    \ (cons (first str) (first acc)) (rest acc)))]))\n    (split-file-name-helper\
    \ str (list (list))))\n  (define (list->string lst)\n    (cond\n      [(empty?\
    \ lst) \"\"]\n      [else (string-append (list->string (rest lst)) (string (first\
    \ lst)))]))\n  (define (check-file-name str)\n    (let ([split (split-file-name\
    \ str)])\n      (and (= (count-digits (list->string (first split))) 3)\n     \
    \      (= (count-dots str) 1)\n           (check-prefix (list->string (first split)))\n\
    \           (check-extension (list->string (second split))))", "  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_extension? extension)\n      (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n    (define (is_valid_name? name)\n      (define\
    \ (is_valid_char? c)\n        (or (char-alphabetic? c) (char-numeric? c)))\n \
    \     (and (not (empty? name))\n           (is_valid_char? (string-ref name 0))\n\
    \           (not (string-contains name #\\.))))\n    (define (is_valid_number?\
    \ file_name)\n      (let ([number (string-count file_name char-numeric?)])\n \
    \       (and (not (empty? file_name))\n             (not (> number 3)))))\n  \
    \  (define (is_valid_dot? file_name)\n      (let ([dot (string-count file_name\
    \ #\\.)])\n        (and (not (empty? file_name))\n             (not (> dot 1)))))\n\
    \    (and (is_valid_number? file_name)\n         (is_valid_dot? file_name)\n \
    \        (is_valid_name? (substring file_name 0 (string-index file_name #\\.)))\n\
    \         (is_valid_extension? (substring file_name (+ 1 (string-index file_name\
    \ #\\.))))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"\
    ))\n", "  (if (and (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*\\\\.[a-zA-Z0-9]{1,3}$\"\
    \ file_name)\n          (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*\\\\.(txt|exe|dll)$\"\
    \ file_name))\n      \"Yes\"\n      \"No\"))\n", "  (define (is_valid_extension?\
    \ extension)\n    (or (string=? extension \"txt\")\n        (string=? extension\
    \ \"exe\")\n        (string=? extension \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (not (empty? name))\n         (char-alphabetic? (string-ref\
    \ name 0))\n         (not (regexp-match #rx\"[0-9]{4}\" name))))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (get_extension file_name)\n      (string-split file_name\
    \ #\\.)\n      (cadr (string-split file_name #\\.)))\n    (define (get_name file_name)\n\
    \      (car (string-split file_name #\\.)))\n    (and (is_valid_name? (get_name\
    \ file_name))\n         (is_valid_extension? (get_extension file_name))))\n  (if\
    \ (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define\
    \ (count-digits file_name)\n    (if (empty? file_name)\n        0\n        (if\
    \ (char-numeric? (first file_name))\n            (+ 1 (count-digits (rest file_name)))\n\
    \            (count-digits (rest file_name)))))\n  (define (count-dots file_name)\n\
    \    (if (empty? file_name)\n        0\n        (if (char=? (first file_name)\
    \ #\\.)\n            (+ 1 (count-dots (rest file_name)))\n            (count-dots\
    \ (rest file_name)))))\n  (define (valid-extension? file_name)\n    (cond\n  \
    \    [(string=? (substring file_name (string-index file_name #\\.)) \".txt\")\
    \ #t]\n      [(string=? (substring file_name (string-index file_name #\\.)) \"\
    .exe\") #t]\n      [(string=? (substring file_name (string-index file_name #\\\
    .)) \".dll\") #t]\n      [else #f]))\n  (define (valid-name? file_name)\n    (cond\n\
    \      [(and (char-alphabetic? (first file_name)) (not (empty? (rest file_name))))\
    \ #t]\n      [else #f]))\n  (cond\n    [(and (= (count-digits file_name) 3) (=\
    \ (count-dots file_name) 1) (valid-extension? file_name) (valid-name? file_name))\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (check-digit-count file_name)\n\
    \    (let loop ([file_name file_name] [count 0])\n      (cond [(empty? file_name)\
    \ count]\n            [(char-numeric? (first file_name)) (loop (rest file_name)\
    \ (+ count 1))]\n            [else (loop (rest file_name) count)])))\n  (define\
    \ (check-dot-count file_name)\n    (let loop ([file_name file_name] [count 0])\n\
    \      (cond [(empty? file_name) count]\n            [(char=? (first file_name)\
    \ #\\.) (loop (rest file_name) (+ count 1))]\n            [else (loop (rest file_name)\
    \ count)])))\n  (define (check-extension file_name)\n    (let loop ([file_name\
    \ file_name] [extension '()])\n      (cond [(empty? file_name) (list->string (reverse\
    \ extension))]\n            [(char=? (first file_name) #\\.) (list->string (reverse\
    \ extension))]\n            [else (loop (rest file_name) (cons (first file_name)\
    \ extension))])))\n  (define (check-first-char file_name)\n    (char-alphabetic?\
    \ (first file_name)))\n  (cond [(or (> (check-digit-count file_name) 3)\n    \
    \         (= (check-dot-count file_name) 0)\n             (not (check-first-char\
    \ file_name))\n             (not (member (check-extension file_name) '(\"txt\"\
    \ \"exe\" \"dll\")))) \"No\"]\n        [else \"Yes\"]))\n", "  (cond\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (define (is_valid_extension? extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (string-match #rx\"[a-zA-Z]\" name)\n         (not\
    \ (string-match #rx\"[0-9]\" name))))\n  (define (is_valid_file_name? file_name)\n\
    \    (let ([name (string-split file_name \"\\\\.\")]\n          [extension (cdr\
    \ name)])\n      (and (not (empty? extension))\n           (is_valid_extension?\
    \ (car extension))\n           (is_valid_name? (car name)))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (count-digits str)\n    (define (count-digits-iter str count)\n     \
    \ (cond ((empty? str) count)\n            ((char-numeric? (first str)) (count-digits-iter\
    \ (rest str) (+ count 1)))\n            (else (count-digits-iter (rest str) count))))\n\
    \    (count-digits-iter str 0))\n  (define (valid-extension? str)\n    (cond ((string=?\
    \ str \"txt\") #t)\n          ((string=? str \"exe\") #t)\n          ((string=?\
    \ str \"dll\") #t)\n          (else #f)))\n  (define (valid-name? str)\n    (and\
    \ (not (empty? str))\n         (char-alphabetic? (first str))\n         (not (char-numeric?\
    \ (first str)))))\n  (define (valid-file-name? str)\n    (let ((dot-index (string-index\
    \ str \".\")))\n      (and (not (= dot-index #f))\n           (valid-name? (substring\
    \ str 0 dot-index))\n           (valid-extension? (substring str (+ dot-index\
    \ 1) (string-length str))))))\n  (cond ((valid-file-name? file_name) \"Yes\")\n\
    \        ((> (count-digits file_name) 3) \"No\")\n        (else \"No\")))\n",
  "  (define (count-digits str)\n    (define (count-digits-iter str acc)\n      (cond\n\
    \        [(empty? str) acc]\n        [(char-numeric? (first str)) (count-digits-iter\
    \ (rest str) (+ acc 1))]\n        [else (count-digits-iter (rest str) acc)]))\n\
    \    (count-digits-iter str 0))\n  (define (count-dots str)\n    (define (count-dots-iter\
    \ str acc)\n      (cond\n        [(empty? str) acc]\n        [(char=? (first str)\
    \ #\\.) (count-dots-iter (rest str) (+ acc 1))]\n        [else (count-dots-iter\
    \ (rest str) acc)]))\n    (count-dots-iter str 0))\n  (define (is-valid-extension\
    \ str)\n    (cond\n      [(string=? str \"txt\") #t]\n      [(string=? str \"\
    exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else #f]))\n  (define (is-valid-name\
    \ str)\n    (cond\n      [(empty? str) #f]\n      [(char-alphabetic? (first str))\
    \ #t]\n      [else #f]))\n  (define (is-valid-file-name str)\n    (let* ([dot-index\
    \ (string-index str #\\.)]\n           [name (substring str 0 dot-index)]\n  \
    \         [extension (substring str (+ dot-index 1))])\n      (and (is-valid-name\
    \ name)\n           (is-valid-extension extension)\n           (<= (count-digits\
    \ name) 3)\n           (= (count-dots str) 1))))\n  (cond\n    [(is-valid-file-name\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (member extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (regexp-match? #rx\"^[a-zA-Z]+$\" name)\n         (not (regexp-match?\
    \ #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name? file_name)\n    (let\
    \ ([parts (string-split file_name #\"\\.\")])\n      (and (= (length parts) 2)\n\
    \           (is_valid_name? (car parts))\n           (is_valid_extension? (cadr\
    \ parts)))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"\
    ))\n", "  (define (is_valid_extension? ext)\n    (member ext '(\"txt\" \"exe\"\
    \ \"dll\")))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n\
    \         (char-alphabetic? (string-ref name 0))\n         (not (> (count (lambda\
    \ (c) (char-numeric? c)) name) 3))))\n  (define (is_valid_file_name? file_name)\n\
    \    (and (is_valid_name? (substring file_name 0 (string-index file_name #\\.)))\n\
    \         (is_valid_extension? (substring file_name (+ 1 (string-index file_name\
    \ #\\.))))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"\
    ))\n", "  (define (check-extension file_name)\n    (cond ((string=? (substring\
    \ file_name (add1 (string-length file_name)) (string-length file_name)) \"txt\"\
    ) #t)\n          ((string=? (substring file_name (add1 (string-length file_name))\
    \ (string-length file_name)) \"exe\") #t)\n          ((string=? (substring file_name\
    \ (add1 (string-length file_name)) (string-length file_name)) \"dll\") #t)\n \
    \         (else #f)))\n  (define (check-name file_name)\n    (cond ((string=?\
    \ (substring file_name 0 1) \"0\") #f)\n          ((string=? (substring file_name\
    \ 0 1) \"1\") #f)\n          ((string=? (substring file_name 0 1) \"2\") #f)\n\
    \          ((string=? (substring file_name 0 1) \"3\") #f)\n          ((string=?\
    \ (substring file_name 0 1) \"4\") #f)\n          ((string=? (substring file_name\
    \ 0 1) \"5\") #f)\n          ((string=? (substring file_name 0 1) \"6\") #f)\n\
    \          ((string=? (substring file_name 0 1) \"7\") #f)\n          ((string=?\
    \ (substring file_name 0 1) \"8\") #f)\n          ((string=? (substring file_name\
    \ 0 1) \"9\") #f)\n          ((string=? (substring file_name 0 1) \"a\") #t)\n\
    \          ((string=? (substring file_name 0 1) \"b\") #t)\n          ((string=?\
    \ (substring file_name 0 1) \"c\") #t)\n          ((string=? (substring file_name\
    \ 0 1) \"d\") #t)\n          ((string=? (substring file_name 0 1) \"e\") #t)\n\
    \          ((string=? (substring file_name 0 1) \"f\") #t)\n          ((string=?\
    \ (substring file_name 0 1) \"g\") #t)\n          ((string=? (sub", "  (define\
    \ (count-digits str)\n    (cond\n      [(empty? str) 0]\n      [(char-numeric?\
    \ (first str)) (+ 1 (count-digits (rest str)))]\n      [else (count-digits (rest\
    \ str))]))\n  (define (check-extension ext)\n    (cond\n      [(equal? ext \"\
    txt\") #t]\n      [(equal? ext \"exe\") #t]\n      [(equal? ext \"dll\") #t]\n\
    \      [else #f]))\n  (define (check-name name)\n    (cond\n      [(empty? name)\
    \ #f]\n      [(char-alphabetic? (first name)) #t]\n      [else #f]))\n  (define\
    \ (check-dot str)\n    (cond\n      [(empty? str) #f]\n      [(equal? (first str)\
    \ #\\.) #t]\n      [else (check-dot (rest str))]))\n  (define (split-file-name\
    \ str)\n    (cond\n      [(empty? str) '()]\n      [(equal? (first str) #\\.)\
    \ (cons (list (substring str 0 (position (first str) str)))\n                \
    \                      (split-file-name (substring str (+ 1 (position (first str)\
    \ str)) (string-length str))))]\n      [else (split-file-name (rest str))]))\n\
    \  (define (check-file-name str)\n    (cond\n      [(< (count-digits str) 4) #t]\n\
    \      [(check-dot str) #t]\n      [(check-name (first (split-file-name str)))\
    \ #t]\n      [(check-extension (second (split-file-name str))) #t]\n      [else\
    \ #f]))\n  (cond\n    [(check-file-name file_name) \"Yes\"]\n    [else \"No\"\
    ]))\n", "  (define (is_valid_extension? extension)\n    (or (string=? extension\
    \ \"txt\")\n        (string=? extension \"exe\")\n        (string=? extension\
    \ \"dll\")))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n\
    \         (char-alphabetic? (string-ref name 0))\n         (not (string-contains\
    \ name #\\_))))\n  (define (is_valid_file_name? file_name)\n    (define (count-digits\
    \ file_name)\n      (define (count-digits-iter file_name count)\n        (cond\
    \ [(empty? file_name) count]\n              [(char-numeric? (string-ref file_name\
    \ 0))\n               (count-digits-iter (substring file_name 1) (+ count 1))]\n\
    \              [else (count-digits-iter (substring file_name 1) count)]))\n  \
    \    (count-digits-iter file_name 0))\n    (define (count-dots file_name)\n  \
    \    (define (count-dots-iter file_name count)\n        (cond [(empty? file_name)\
    \ count]\n              [(char=? (string-ref file_name 0) #\\.)\n            \
    \   (count-dots-iter (substring file_name 1) (+ count 1))]\n              [else\
    \ (count-dots-iter (substring file_name 1) count)]))\n      (count-dots-iter file_name\
    \ 0))\n    (define (split-file-name file_name)\n      (define (split-file-name-iter\
    \ file_name name extension)\n        (cond [(empty? file_name) (list name extension)]\n\
    \              [(char=? (string-ref file_name 0) #\\.)\n               (split-file-name-iter\
    \ (substring file_name 1) name (string-append extension (string (string-ref file_name\
    \ 0))))]\n              [else (split-file-name-iter (substring file_name 1) (string-append\
    \ name (string (string-ref file_name 0))) extension)]))\n      (split-file-name-iter\
    \ file_name \"\" \"\"))\n    (", "  (define (is_valid_substring? str)\n    (and\
    \ (not (empty? str))\n         (regexp-match? #rx\"^[a-zA-Z]\" str)))\n  (define\
    \ (is_valid_extension? str)\n    (member str '(\"txt\" \"exe\" \"dll\")))\n  (define\
    \ (is_valid_file_name? file_name)\n    (let ([substrings (string-split file_name\
    \ #\\.)])\n      (and (= (length substrings) 2)\n           (is_valid_substring?\
    \ (first substrings))\n           (is_valid_extension? (second substrings))\n\
    \           (<= (count (lambda (c) (char-numeric? c)) file_name) 3))))\n  (if\
    \ (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define\
    \ (is_valid_extension ext)\n    (member ext '(\"txt\" \"exe\" \"dll\")))\n  (define\
    \ (is_valid_name name)\n    (and (not (empty? name))\n         (regexp-match?\
    \ #rx\"^[a-zA-Z]\" name)\n         (not (> (count (regexp-match #rx\"[0-9]\" name))\
    \ 3))))\n  (define (is_valid_file_name file_name)\n    (let ((parts (string-split\
    \ file_name \"\\\\.\")))\n      (and (= (length parts) 2)\n           (is_valid_name\
    \ (first parts))\n           (is_valid_extension (second parts)))))\n  (if (is_valid_file_name\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (check-digits file_name)\n\
    \    (if (string-contains file_name #\\0)\n        (if (string-contains file_name\
    \ #\\1)\n            (if (string-contains file_name #\\2)\n                (if\
    \ (string-contains file_name #\\3)\n                    (if (string-contains file_name\
    \ #\\4)\n                        (if (string-contains file_name #\\5)\n      \
    \                      (if (string-contains file_name #\\6)\n                \
    \                (if (string-contains file_name #\\7)\n                      \
    \              (if (string-contains file_name #\\8)\n                        \
    \                (if (string-contains file_name #\\9)\n                      \
    \                      #f\n                                            #t)\n \
    \                                       #t)\n                                \
    \    #t)\n                                #t)\n                            #t)\n\
    \                        #t)\n                    #t)\n                #t)\n \
    \           #t)\n        #t))\n  (define (check-dot file_name)\n    (if (string-contains\
    \ file_name #\\.)\n        (if (string-contains file_name #\\.)\n            #f\n\
    \            #t)\n        #f))\n  (define (check-empty file_name)\n    (if (string-contains\
    \ file_name #\\.)\n        (if (string-contains file_name #\\.)\n            (if\
    \ (string-contains file_name #\\.)\n                (if (string-contains file_name\
    \ #\\.)\n                    (if (string-contains file_name #\\.)\n          \
    \              (if (string-contains file_name #\\.)\n                        \
    \    (if (string-contains file_name #\\.)\n                                (if\
    \ (string-contains file_name #\\.)\n                                    (if (string-contains\
    \ file_name #\\.)\n                                        (if (string-contains\
    \ file_name #\\.)\n                                            (if (string-contains\
    \ file_name #\\.)\n                                                (if (string-contains\
    \ file_name #\\.)\n                                                    (if (string-contains\
    \ file_name #\\.)", "  (define (count-digits file_name)\n    (cond\n      [(empty?\
    \ file_name) 0]\n      [(char-numeric? (first file_name)) (+ 1 (count-digits (rest\
    \ file_name)))]\n      [else (count-digits (rest file_name))]))\n  (define (count-dots\
    \ file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char=? (first file_name)\
    \ #\\.) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots (rest file_name))]))\n\
    \  (define (valid-extension? file_name)\n    (cond\n      [(string=? (substring\
    \ file_name (string-index file_name #\\.)) \".txt\") #t]\n      [(string=? (substring\
    \ file_name (string-index file_name #\\.)) \".exe\") #t]\n      [(string=? (substring\
    \ file_name (string-index file_name #\\.)) \".dll\") #t]\n      [else #f]))\n\
    \  (define (valid-name? file_name)\n    (cond\n      [(char-alphabetic? (first\
    \ file_name)) #t]\n      [else #f]))\n  (cond\n    [(and (= (count-digits file_name)\
    \ 3) (= (count-dots file_name) 1) (valid-extension? file_name) (valid-name? file_name))\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits file_name)\n    (define\
    \ (count-digits-iter file_name count)\n      (cond [(empty? file_name) count]\n\
    \            [(char-numeric? (first file_name)) (count-digits-iter (rest file_name)\
    \ (+ count 1))]\n            [else (count-digits-iter (rest file_name) count)]))\n\
    \    (count-digits-iter file_name 0))\n  (define (count-dots file_name)\n    (define\
    \ (count-dots-iter file_name count)\n      (cond [(empty? file_name) count]\n\
    \            [(char=? (first file_name) #\\.) (count-dots-iter (rest file_name)\
    \ (+ count 1))]\n            [else (count-dots-iter (rest file_name) count)]))\n\
    \    (count-dots-iter file_name 0))\n  (define (check-extension file_name)\n \
    \   (define (check-extension-iter file_name)\n      (cond [(empty? file_name)\
    \ #f]\n            [(char=? (first file_name) #\\.) (check-extension-iter (rest\
    \ file_name))]\n            [(char=? (first file_name) #\\t) (and (char=? (second\
    \ file_name) #\\x) (char=? (third file_name) #\\t))]\n            [(char=? (first\
    \ file_name) #\\e) (and (char=? (second file_name) #\\x) (char=? (third file_name)\
    \ #\\e))]\n            [(char=? (first file_name) #\\d) (and (char=? (second file_name)\
    \ #\\l) (char=? (third file_name) #\\l))]\n            [else #f]))\n    (check-extension-iter\
    \ file_name))\n  (define (check-prefix file_name)\n    (define (check-prefix-iter\
    \ file_name)\n      (cond [(empty? file_name) #f]\n            [(char-alphabetic?\
    \ (first file_name)) #t]\n            [else #", "  (define (check-digit-count\
    \ file_name)\n    (define (count-digits file_name)\n      (cond\n        [(empty?\
    \ file_name) 0]\n        [(char-numeric? (first file_name)) (+ 1 (count-digits\
    \ (rest file_name)))]\n        [else (count-digits (rest file_name))]))\n    (cond\n\
    \      [(> (count-digits file_name) 3) \"No\"]\n      [else \"Yes\"]))\n  (define\
    \ (check-dot-count file_name)\n    (define (count-dots file_name)\n      (cond\n\
    \        [(empty? file_name) 0]\n        [(char=? (first file_name) #\\.) (+ 1\
    \ (count-dots (rest file_name)))]\n        [else (count-dots (rest file_name))]))\n\
    \    (cond\n      [(= (count-dots file_name) 1) \"Yes\"]\n      [else \"No\"]))\n\
    \  (define (check-substring-before-dot file_name)\n    (define (count-letters\
    \ file_name)\n      (cond\n        [(empty? file_name) 0]\n        [(char-alphabetic?\
    \ (first file_name)) (+ 1 (count-letters (rest file_name)))]\n        [else (count-letters\
    \ (rest file_name))]))\n    (cond\n      [(= (count-letters file_name) 0) \"No\"\
    ]\n      [else \"Yes\"]))\n  (define (check-substring-after-dot file_name)\n \
    \   (define (get-substring-after-dot file_name)\n      (cond\n        [(empty?\
    \ file_name) \"\"]\n        [(char=? (first file_name) #\\.) (rest file_name)]\n\
    \        [else (get-substring-after-dot (rest file_name))]))\n    (cond\n    \
    \  [(member (get-substring-after-dot file_name) '(\"txt\" \"exe\" \"dll\")) \"\
    Yes\"]\n      [else \"No\"]))\n  (cond\n    [(and (check-digit-count file_name)\
    \ (check-dot-count file_name)", "  (define (is_valid_file_name? file_name)\n \
    \   (define (is_valid_extension? extension)\n      (member extension '(\"txt\"\
    \ \"exe\" \"dll\")))\n    (define (is_valid_prefix? prefix)\n      (and (not (empty?\
    \ prefix))\n           (regexp-match #rx\"[a-zA-Z]\" prefix)))\n    (define (is_valid_digits?\
    \ digits)\n      (and (not (empty? digits))\n           (<= (string-length digits)\
    \ 3)))\n    (define (is_valid_dot? dot)\n      (equal? dot \".\"))\n    (define\
    \ (is_valid_file_name-helper file_name)\n      (let* ([prefix (substring file_name\
    \ 0 (string-index file_name \".\"))]\n             [dot (substring file_name (string-index\
    \ file_name \".\") 1)]\n             [extension (substring file_name (+ (string-index\
    \ file_name \".\") 1))]\n             [digits (regexp-match #rx\"[0-9]\" file_name)])\n\
    \        (and (is_valid_extension? extension)\n             (is_valid_prefix?\
    \ prefix)\n             (is_valid_digits? digits)\n             (is_valid_dot?\
    \ dot))))\n    (is_valid_file_name-helper file_name))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (count-digits str)\n\
    \    (if (empty? str)\n        0\n        (if (char-numeric? (first str))\n  \
    \          (+ 1 (count-digits (rest str)))\n            (count-digits (rest str)))))\n\
    \  (define (count-dots str)\n    (if (empty? str)\n        0\n        (if (char=?\
    \ (first str) #\\.)\n            (+ 1 (count-dots (rest str)))\n            (count-dots\
    \ (rest str)))))\n  (define (is-valid-extension str)\n    (cond\n      [(string=?\
    \ str \"txt\") #t]\n      [(string=? str \"exe\") #t]\n      [(string=? str \"\
    dll\") #t]\n      [else #f]))\n  (define (is-valid-name str)\n    (and (char-alphabetic?\
    \ (first str))\n         (not (empty? str))))\n  (define (is-valid-file-name str)\n\
    \    (define (split-file-name str)\n      (define (split-file-name-helper str\
    \ name extension)\n        (if (empty? str)\n            (list name extension)\n\
    \            (if (char=? (first str) #\\.)\n                (split-file-name-helper\
    \ (rest str) name (string (first str)))\n                (split-file-name-helper\
    \ (rest str) (string-append name (string (first str))) extension))))\n      (split-file-name-helper\
    \ str \"\" \"\"))\n    (define (is-valid-file-name-helper str)\n      (define\
    \ (is-valid-file-name-helper-helper str)\n        (cond\n          [(empty? str)\
    \ #t]\n          [(char-alphabetic? (first str)) (is-valid-file-name-helper-helper\
    \ (rest str))]\n          [(char-numeric? (first str)) (is-valid-file-name-helper-helper\
    \ (rest str))]\n          [else #f]))\n      (is-valid-file-name-helper-helper\
    \ str))\n    (define (is-valid-file", "  (define (check-extension file_name)\n\
    \    (cond [(string=? (substring file_name (- (string-length file_name) 3)) \"\
    .txt\") #t]\n          [(string=? (substring file_name (- (string-length file_name)\
    \ 3)) \".exe\") #t]\n          [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \".dll\") #t]\n          [else #f]))\n  (define (check-before-dot\
    \ file_name)\n    (define (check-before-dot-helper file_name)\n      (cond [(string=?\
    \ file_name \"\") #t]\n            [(char-alphabetic? (string-ref file_name 0))\
    \ (check-before-dot-helper (substring file_name 1))]\n            [else #f]))\n\
    \    (check-before-dot-helper (substring file_name 0 (string-index file_name \"\
    .\"))))\n  (define (check-digits file_name)\n    (define (check-digits-helper\
    \ file_name)\n      (cond [(string=? file_name \"\") #t]\n            [(char-numeric?\
    \ (string-ref file_name 0)) (check-digits-helper (substring file_name 1))]\n \
    \           [else #f]))\n    (check-digits-helper (substring file_name 0 (string-index\
    \ file_name \".\"))))\n  (cond [(string=? file_name \"\") #f]\n        [(string=?\
    \ (string-index file_name \".\") #f) #f]\n        [(string=? (string-index file_name\
    \ \".\") (- (string-length file_name) 4)) #f]\n        [(string=? (string-index\
    \ file_name \".\") 0) #f]\n        [(check-extension file_name) (check-before-dot\
    \ file_name) (check-digits file_name)]\n        [else #f]))\n", "  (define (count-digits\
    \ file_name)\n    (define (count-digits-iter file_name count)\n      (cond ((null?\
    \ file_name) count)\n            ((char-numeric? (car file_name))\n          \
    \   (count-digits-iter (cdr file_name) (+ count 1)))\n            (else (count-digits-iter\
    \ (cdr file_name) count))))\n    (count-digits-iter file_name 0))\n  (define (count-dots\
    \ file_name)\n    (define (count-dots-iter file_name count)\n      (cond ((null?\
    \ file_name) count)\n            ((char=? (car file_name) #\\.)\n            \
    \ (count-dots-iter (cdr file_name) (+ count 1)))\n            (else (count-dots-iter\
    \ (cdr file_name) count))))\n    (count-dots-iter file_name 0))\n  (define (valid-extension?\
    \ file_name)\n    (define (valid-extension-iter file_name)\n      (cond ((null?\
    \ file_name) #f)\n            ((char=? (car file_name) #\\.)\n             (string=?\
    \ (substring file_name 1 4) \"txt\")\n             (string=? (substring file_name\
    \ 1 4) \"exe\")\n             (string=? (substring file_name 1 4) \"dll\"))\n\
    \            (else (valid-extension-iter (cdr file_name)))))\n    (valid-extension-iter\
    \ file_name))\n  (define (valid-prefix? file_name)\n    (define (valid-prefix-iter\
    \ file_name)\n      (cond ((null? file_name) #f)\n            ((char=? (car file_name)\
    \ #\\.)\n             (char-alphabetic? (car (cdr file_name))))\n            (else\
    \ (valid-prefix-iter (cdr file_name)))))\n    (valid-prefix-iter file_name))\n\
    \  (cond ((= (count-digits file_name) 4) \"No\")\n        ((= (count-dots file_name)\
    \ 1) \"No\")\n        ((valid-ext", "  (define (check-extension file_name)\n \
    \   (cond [(string=? (substring file_name (- (string-length file_name) 3)) \"\
    txt\") #t]\n          [(string=? (substring file_name (- (string-length file_name)\
    \ 3)) \"exe\") #t]\n          [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"dll\") #t]\n          [else #f]))\n  (define (check-before-dot\
    \ file_name)\n    (and (not (string=? (substring file_name 0 1) \"\"))\n     \
    \    (or (char-alphabetic? (string-ref file_name 0))\n             (char-numeric?\
    \ (string-ref file-name 0)))))\n  (define (check-digits file_name)\n    (let loop\
    \ ([i 0] [count 0])\n      (cond [(= i (string-length file_name))\n          \
    \   (if (= count 3) #f #t)]\n            [(char-numeric? (string-ref file_name\
    \ i))\n             (loop (+ i 1) (+ count 1))]\n            [else (loop (+ i\
    \ 1) count)])))\n  (define (check-dot file_name)\n    (let loop ([i 0] [count\
    \ 0])\n      (cond [(= i (string-length file_name))\n             (if (= count\
    \ 1) #t #f)]\n            [(char=? (string-ref file_name i) #\\.)\n          \
    \   (loop (+ i 1) (+ count 1))]\n            [else (loop (+ i 1) count)])))\n\
    \  (cond [(and (check-extension file_name)\n              (check-before-dot file_name)\n\
    \              (check-digits file_name)\n              (check-dot file_name))\n\
    \         \"Yes\"]\n        [else \"No\"]))\n", "  (define (check-extension file_name)\n\
    \    (cond\n      [(string=? (substring file_name (add1 (string-index file_name\
    \ #\\.)) (string-length file_name)) \"txt\") #t]\n      [(string=? (substring\
    \ file_name (add1 (string-index file_name #\\.)) (string-length file_name)) \"\
    exe\") #t]\n      [(string=? (substring file_name (add1 (string-index file_name\
    \ #\\.)) (string-length file_name)) \"dll\") #t]\n      [else #f]))\n  (define\
    \ (check-name file_name)\n    (cond\n      [(string=? (substring file_name 0 (string-index\
    \ file_name #\\.)) \"\") #f]\n      [(and (char-alphabetic? (string-ref file_name\
    \ 0)) (not (string-contains file_name #\\0)) (not (string-contains file_name #\\\
    1)) (not (string-contains file_name #\\2)) (not (string-contains file_name #\\\
    3)) (not (string-contains file_name #\\4)) (not (string-contains file_name #\\\
    5)) (not (string-contains file_name #\\6)) (not (string-contains file_name #\\\
    7)) (not (string-contains file_name #\\8)) (not (string-contains file_name #\\\
    9))) #t]\n      [else #f]))\n  (cond\n    [(and (check-extension file_name) (check-name\
    \ file_name)) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits file_name)\n\
    \    (if (empty? file_name)\n        0\n        (if (char-numeric? (first file_name))\n\
    \            (+ 1 (count-digits (rest file_name)))\n            (count-digits\
    \ (rest file_name)))))\n  (define (count-dots file_name)\n    (if (empty? file_name)\n\
    \        0\n        (if (char=? (first file_name) #\\.)\n            (+ 1 (count-dots\
    \ (rest file_name)))\n            (count-dots (rest file_name)))))\n  (define\
    \ (check-extension file_name)\n    (if (empty? file_name)\n        #f\n      \
    \  (if (char=? (first file_name) #\\.)\n            (if (string=? (rest file_name)\
    \ \"txt\")\n                #t\n                (if (string=? (rest file_name)\
    \ \"exe\")\n                    #t\n                    (if (string=? (rest file_name)\
    \ \"dll\")\n                        #t\n                        #f)))\n      \
    \      (check-extension (rest file_name)))))\n  (define (check-prefix file_name)\n\
    \    (if (empty? file_name)\n        #f\n        (if (char-alphabetic? (first\
    \ file_name))\n            #t\n            (check-prefix (rest file_name)))))\n\
    \  (if (and (= (count-digits file_name) 3)\n           (= (count-dots file_name)\
    \ 1)\n           (check-extension file_name)\n           (check-prefix file_name))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (check_digits file_name)\n    (cond\n\
    \      [(empty? file_name) 0]\n      [(char-numeric? (first file_name))\n    \
    \   (+ 1 (check_digits (rest file_name)))]\n      [else (check_digits (rest file_name))]))\n\
    \  (define (check_dot file_name)\n    (cond\n      [(empty? file_name) #f]\n \
    \     [(char=? (first file_name) #\\.) #t]\n      [else (check_dot (rest file_name))]))\n\
    \  (define (check_first_part file_name)\n    (cond\n      [(empty? file_name)\
    \ #f]\n      [(char-alphabetic? (first file_name)) #t]\n      [else (check_first_part\
    \ (rest file_name))]))\n  (define (check_second_part file_name)\n    (cond\n \
    \     [(empty? file_name) #f]\n      [(char=? (first file_name) #\\.) #t]\n  \
    \    [else (check_second_part (rest file_name))]))\n  (define (check_extension\
    \ file_name)\n    (cond\n      [(empty? file_name) #f]\n      [(string=? (string-append\
    \ (list (first file_name)) (list (second file_name)) (list (third file_name)))\
    \ \"txt\") #t]\n      [(string=? (string-append (list (first file_name)) (list\
    \ (second file_name)) (list (third file_name))) \"exe\") #t]\n      [(string=?\
    \ (string-append (list (first file_name)) (list (second file_name)) (list (third\
    \ file_name))) \"dll\") #t]\n      [else #f]))\n  (cond\n    [(> (check_digits\
    \ file_name) 3) \"No\"]\n    [(not (check_dot file_name)) \"No\"]\n    [(not (check_first_part\
    \ file_name)) \"No\"]\n    [(not (check_second_part file_name)) \"No\"]\n    [(not\
    \ (check_extension file_name)) \"No\"]", "  (define (count-digits str)\n    (define\
    \ (count-digits-iter str acc)\n      (cond ((empty? str) acc)\n            ((char-numeric?\
    \ (first str)) (count-digits-iter (rest str) (+ acc 1)))\n            (else (count-digits-iter\
    \ (rest str) acc))))\n    (count-digits-iter str 0))\n  (define (count-dots str)\n\
    \    (define (count-dots-iter str acc)\n      (cond ((empty? str) acc)\n     \
    \       ((char=? (first str) #\\.) (count-dots-iter (rest str) (+ acc 1)))\n \
    \           (else (count-dots-iter (rest str) acc))))\n    (count-dots-iter str\
    \ 0))\n  (define (valid-extension? str)\n    (cond ((string=? str \"txt\") #t)\n\
    \          ((string=? str \"exe\") #t)\n          ((string=? str \"dll\") #t)\n\
    \          (else #f)))\n  (define (valid-name? str)\n    (cond ((empty? str) #f)\n\
    \          ((char-alphabetic? (first str)) #t)\n          (else #f)))\n  (define\
    \ (valid-file-name? str)\n    (define (valid-file-name-iter str acc)\n      (cond\
    \ ((empty? str) acc)\n            ((char=? (first str) #\\.) (valid-file-name-iter\
    \ (rest str) (cons (list (substring str 0 (first acc)) (substring str (first acc)\
    \ (second acc))) (rest acc))))\n            (else (valid-file-name-iter (rest\
    \ str) (cons (first acc) (cons (+ (second acc) 1) (rest (rest acc))))))))\n  \
    \  (valid-file-name-iter str (list 0 0)))\n  (define (valid-file-name-check str)\n\
    \    (cond ((= (count-digits str) 3) #f)\n          ((= (count-dots str) 1) #t)\n\
    \          (else #f)))\n  (define (valid-file-name-extension str)\n    (cond ((",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"\
    Yes\"]\n    [else \"No\"]))\n```\n\n## Problem 3\n\n```racket\n#lang racket\n",
  "  (define (is_valid_extension extension)\n    (cond\n      [(equal? extension \"\
    txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal? extension \"\
    dll\") #t]\n      [else #f]))\n  (define (is_valid_name name)\n    (define (is_valid_char?\
    \ char)\n      (or (char-alphabetic? char) (char-numeric? char)))\n    (define\
    \ (is_valid_name_helper name)\n      (cond\n        [(empty? name) #t]\n     \
    \   [(is_valid_char? (first name)) (is_valid_name_helper (rest name))]\n     \
    \   [else #f]))\n    (and (not (empty? name)) (is_valid_name_helper name)))\n\
    \  (define (is_valid_file_name file_name)\n    (define (is_valid_file_name_helper\
    \ file_name)\n      (cond\n        [(empty? file_name) #t]\n        [(char-numeric?\
    \ (first file_name)) (is_valid_file_name_helper (rest file_name))]\n        [else\
    \ #f]))\n    (and (not (empty? file_name)) (is_valid_file_name_helper file_name)))\n\
    \  (define (is_valid_file_name_helper file_name)\n    (cond\n      [(empty? file_name)\
    \ #t]\n      [(char-numeric? (first file_name)) (is_valid_file_name_helper (rest\
    \ file_name))]\n      [else #f]))\n  (define (is_valid_file_name file_name)\n\
    \    (and (not (empty? file_name)) (is_valid_file_name_helper file_name)))\n \
    \ (define (is_valid_file_name_helper file_name)\n    (cond\n      [(empty? file_name)\
    \ #t]\n      [(char-numeric? (first file_name)) (is_valid_file_name_helper (rest\
    \ file_name))]\n      [else #f]))\n  (define (is_", "  (define (check-extension\
    \ extension)\n    (cond\n      [(string=? extension \"txt\") #t]\n      [(string=?\
    \ extension \"exe\") #t]\n      [(string=? extension \"dll\") #t]\n      [else\
    \ #f]))\n  (define (check-name name)\n    (cond\n      [(regexp-match #rx\"^[a-zA-Z]\\\
    \\w*$\" name) #t]\n      [else #f]))\n  (define (check-digits digits)\n    (cond\n\
    \      [(string-length digits) <= 3]\n      [else #f]))\n  (define (check-file-name\
    \ file-name)\n    (let* ([file-name-parts (string-split file-name #rx\"\\.\")]\n\
    \           [name (first file-name-parts)]\n           [extension (second file-name-parts)])\n\
    \      (and (check-name name)\n           (check-extension extension)\n      \
    \     (check-digits name))))\n  (cond\n    [(check-file-name file_name) \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (define (count-digits file_name)\n    (cond\n  \
    \    [(empty? file_name) 0]\n      [(char-numeric? (first file_name)) (+ 1 (count-digits\
    \ (rest file_name)))]\n      [else (count-digits (rest file_name))]))\n  (define\
    \ (count-dots file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char=?\
    \ (first file_name) #\\.) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots\
    \ (rest file_name))]))\n  (define (check-extension file_name)\n    (cond\n   \
    \   [(string=? (substring file_name (- (string-length file_name) 3)) \"txt\")\
    \ #t]\n      [(string=? (substring file_name (- (string-length file_name) 3))\
    \ \"exe\") #t]\n      [(string=? (substring file_name (- (string-length file_name)\
    \ 3)) \"dll\") #t]\n      [else #f]))\n  (define (check-prefix file_name)\n  \
    \  (cond\n      [(char-alphabetic? (string-ref file_name 0)) #t]\n      [else\
    \ #f]))\n  (cond\n    [(and (= (count-digits file_name) 3) (= (count-dots file_name)\
    \ 1) (check-extension file_name) (check-prefix file_name)) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (count-digits str)\n    (define (count-digits-iter\
    \ str count)\n      (cond\n        [(empty? str) count]\n        [(char-numeric?\
    \ (first str)) (count-digits-iter (rest str) (+ count 1))]\n        [else (count-digits-iter\
    \ (rest str) count)]))\n    (count-digits-iter str 0))\n  (define (count-dots\
    \ str)\n    (define (count-dots-iter str count)\n      (cond\n        [(empty?\
    \ str) count]\n        [(char=? (first str) #\\.) (count-dots-iter (rest str)\
    \ (+ count 1))]\n        [else (count-dots-iter (rest str) count)]))\n    (count-dots-iter\
    \ str 0))\n  (define (is-valid-extension str)\n    (cond\n      [(string=? str\
    \ \"txt\") #t]\n      [(string=? str \"exe\") #t]\n      [(string=? str \"dll\"\
    ) #t]\n      [else #f]))\n  (define (is-valid-substring str)\n    (cond\n    \
    \  [(empty? str) #f]\n      [(char-alphabetic? (first str)) #t]\n      [else #f]))\n\
    \  (define (is-valid-file-name str)\n    (let ([substring-before-dot (substring\
    \ str 0 (string-index str #\\.))]\n          [substring-after-dot (substring str\
    \ (+ (string-index str #\\.) 1) (string-length str))])\n      (and (is-valid-substring\
    \ substring-before-dot)\n           (is-valid-extension substring-after-dot))))\n\
    \  (cond\n    [(or (> (count-digits file_name) 3)\n         (> (count-dots file_name)\
    \ 1)\n         (not (is-valid-file-name file_name))) \"No\"]\n    [else \"Yes\"\
    ]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n\
    \    (cond [(empty? str) 0]\n          [(char-numeric? (first str)) (+ 1 (count-digits\
    \ (rest str)))]\n          [else (count-digits (rest str))]))\n  (define (count-dots\
    \ str)\n    (cond [(empty? str) 0]\n          [(char=? (first str) #\\.) (+ 1\
    \ (count-dots (rest str)))]\n          [else (count-dots (rest str))]))\n  (define\
    \ (check-substring str)\n    (cond [(empty? str) #f]\n          [(char-alphabetic?\
    \ (first str)) #t]\n          [else #f]))\n  (define (check-extension str)\n \
    \   (cond [(empty? str) #f]\n          [(or (string=? str \"txt\") (string=? str\
    \ \"exe\") (string=? str \"dll\")) #t]\n          [else #f]))\n  (define (split-file-name\
    \ str)\n    (let ([dot-pos (string-index str #\\.)])\n      (values (substring\
    \ str 0 dot-pos) (substring str (+ dot-pos 1)))))\n  (define (check-file-name\
    \ str)\n    (let-values ([(sub1 sub2) (split-file-name str)])\n      (and (check-substring\
    \ sub1)\n           (check-extension sub2)\n           (= (count-digits str) 3)\n\
    \           (= (count-dots str) 1))))\n  (cond [(check-file-name file_name) \"\
    Yes\"]\n        [else \"No\"]))\n", "  (define (count-digits str)\n    (cond\n\
    \      [(empty? str) 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits\
    \ (rest str)))]\n      [else (count-digits (rest str))]))\n  (define (count-dots\
    \ str)\n    (cond\n      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+\
    \ 1 (count-dots (rest str)))]\n      [else (count-dots (rest str))]))\n  (define\
    \ (is-valid-extension str)\n    (cond\n      [(string=? str \"txt\") #t]\n   \
    \   [(string=? str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else\
    \ #f]))\n  (define (is-valid-name str)\n    (cond\n      [(empty? str) #f]\n \
    \     [(char-alphabetic? (first str)) #t]\n      [else #f]))\n  (define (is-valid-file-name\
    \ str)\n    (and\n      (is-valid-name (substring str 0 (string-index str #\\\
    .)))\n      (is-valid-extension (substring str (+ 1 (string-index str #\\.))))\n\
    \      (<= (count-digits str) 3)\n      (= (count-dots str) 1)))\n  (cond\n  \
    \  [(is-valid-file-name file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define\
    \ (is_valid_extension? extension)\n    (member extension '(\"txt\" \"exe\" \"\
    dll\")))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n    \
    \     (char-alphabetic? (string-ref name 0))\n         (not (string-contains name\
    \ #\\.))\n         (not (string-contains name #\\_))))\n  (define (is_valid_version?\
    \ version)\n    (and (not (empty? version))\n         (not (> (string-length version)\
    \ 3))\n         (string-for-each char-numeric? version)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let* ([name (string-before file_name \".\")]\n           [version\
    \ (string-after file_name \".\")]\n           [extension (string-after version\
    \ \".\")])\n      (and (is_valid_name? name)\n           (is_valid_version? version)\n\
    \           (is_valid_extension? extension))))\n  (if (is_valid_file_name? file_name)\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (count-digits file_name)\n    (define\
    \ (count-digits-iter file_name count)\n      (cond\n        [(empty? file_name)\
    \ count]\n        [(char-numeric? (first file_name)) (count-digits-iter (rest\
    \ file_name) (+ count 1))]\n        [else (count-digits-iter (rest file_name)\
    \ count)]))\n    (count-digits-iter file_name 0))\n  (define (count-dots file_name)\n\
    \    (define (count-dots-iter file_name count)\n      (cond\n        [(empty?\
    \ file_name) count]\n        [(char=? (first file_name) #\\.) (count-dots-iter\
    \ (rest file_name) (+ count 1))]\n        [else (count-dots-iter (rest file_name)\
    \ count)]))\n    (count-dots-iter file_name 0))\n  (define (substring-before-dot\
    \ file_name)\n    (define (substring-before-dot-iter file_name result)\n     \
    \ (cond\n        [(empty? file_name) result]\n        [(char=? (first file_name)\
    \ #\\.) result]\n        [else (substring-before-dot-iter (rest file_name) (string-append\
    \ result (string (first file_name))))]))\n    (substring-before-dot-iter file_name\
    \ \"\"))\n  (define (substring-after-dot file_name)\n    (define (substring-after-dot-iter\
    \ file_name result)\n      (cond\n        [(empty? file_name) result]\n      \
    \  [(char=? (first file_name) #\\.) (substring-after-dot-iter (rest file_name)\
    \ \"\")]\n        [else (substring-after-dot-iter (rest file_name) (string-append\
    \ result (string (first file_name))))]))\n    (substring-after-dot-iter file_name\
    \ \"\"))\n  (define (valid-extension? extension)\n    (cond\n      [(string=?\
    \ extension \"txt\") #t]\n      [(string=? extension \"exe\") #t]\n      [(",
  "  (define (count-digits file_name)\n    (define (count-digits-iter file_name count)\n\
    \      (cond\n        [(empty? file_name) count]\n        [(char-numeric? (first\
    \ file_name)) (count-digits-iter (rest file_name) (+ count 1))]\n        [else\
    \ (count-digits-iter (rest file_name) count)]))\n    (count-digits-iter file_name\
    \ 0))\n  (define (count-dots file_name)\n    (define (count-dots-iter file_name\
    \ count)\n      (cond\n        [(empty? file_name) count]\n        [(char=? (first\
    \ file_name) #\\.) (count-dots-iter (rest file_name) (+ count 1))]\n        [else\
    \ (count-dots-iter (rest file_name) count)]))\n    (count-dots-iter file_name\
    \ 0))\n  (define (valid-extension? file_name)\n    (define (valid-extension-iter\
    \ file_name)\n      (cond\n        [(empty? file_name) #f]\n        [(char=? (first\
    \ file_name) #\\.) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\t) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\x) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\e) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\d) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\l) (valid-extension-iter (rest file_name))]\n        [else\
    \ #f]))\n    (valid-extension-iter file_name))\n  (define (valid-prefix? file_name)\n\
    \    (define (valid-prefix-iter file_name)\n      (cond\n        [(empty? file_name)\
    \ #f]\n        [(", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name)\n     \"Yes\"]\n    [else \"No\"]))\n", "  (define\
    \ (check-digits file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char-numeric?\
    \ (first file_name))\n       (+ 1 (check-digits (rest file_name)))]\n      [else\
    \ (check-digits (rest file_name))]))\n  (define (check-dot file_name)\n    (cond\n\
    \      [(empty? file_name) #f]\n      [(char=? (first file_name) #\\.) #t]\n \
    \     [else (check-dot (rest file_name))]))\n  (define (check-substring-before-dot\
    \ file_name)\n    (cond\n      [(empty? file_name) #f]\n      [(char-alphabetic?\
    \ (first file_name)) #t]\n      [else (check-substring-before-dot (rest file_name))]))\n\
    \  (define (check-substring-after-dot file_name)\n    (cond\n      [(empty? file_name)\
    \ #f]\n      [(string=? (substring file_name (add1 (string-index file_name #\\\
    .)) (string-length file_name)) \"txt\") #t]\n      [(string=? (substring file_name\
    \ (add1 (string-index file_name #\\.)) (string-length file_name)) \"exe\") #t]\n\
    \      [(string=? (substring file_name (add1 (string-index file_name #\\.)) (string-length\
    \ file_name)) \"dll\") #t]\n      [else #f]))\n  (cond\n    [(and (= (check-digits\
    \ file_name) 3)\n          (check-dot file_name)\n          (check-substring-before-dot\
    \ file_name)\n          (check-substring-after-dot file_name)) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (is_valid_extension? extension)\n    (cond\n      [(string=?\
    \ extension \"txt\") #t]\n      [(string=? extension \"exe\") #t]\n      [(string=?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n\
    \    (and (not (empty? name))\n         (char-alphabetic? (string-ref name 0))\n\
    \         (not (> (count (lambda (c) (char-numeric? c)) name) 3))))\n  (define\
    \ (is_valid_file_name? file_name)\n    (let ([name (substring file_name 0 (string-index\
    \ file_name \".\"))]\n          [extension (substring file_name (+ 1 (string-index\
    \ file_name \".\")) (string-length file_name))])\n      (and (is_valid_name? name)\n\
    \           (is_valid_extension? extension))))\n  (cond\n    [(is_valid_file_name?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n\
    \    (define (count-digits-iter str count)\n      (cond [(empty? str) count]\n\
    \            [(char-numeric? (first str)) (count-digits-iter (rest str) (+ count\
    \ 1))]\n            [else (count-digits-iter (rest str) count)]))\n    (count-digits-iter\
    \ str 0))\n  (define (check-extension str)\n    (cond [(string=? str \"txt\")\
    \ #t]\n          [(string=? str \"exe\") #t]\n          [(string=? str \"dll\"\
    ) #t]\n          [else #f]))\n  (define (check-name str)\n    (cond [(empty? str)\
    \ #f]\n          [(char-alphabetic? (first str)) #t]\n          [else #f]))\n\
    \  (define (check-dot str)\n    (cond [(empty? str) #f]\n          [(string=?\
    \ (first str) \".\") #t]\n          [else #f]))\n  (define (check-file-name str)\n\
    \    (cond [(empty? str) #f]\n          [(check-name str) #t]\n          [else\
    \ #f]))\n  (define (check-file-extension str)\n    (cond [(empty? str) #f]\n \
    \         [(check-extension str) #t]\n          [else #f]))\n  (define (check-file-dot\
    \ str)\n    (cond [(empty? str) #f]\n          [(check-dot str) #t]\n        \
    \  [else #f]))\n  (define (check-file-name-extension str)\n    (cond [(empty?\
    \ str) #f]\n          [(check-file-name str) #t]\n          [(check-file-extension\
    \ str) #t]\n          [else #f]))\n  (define (check-file-name-dot str)\n    (cond\
    \ [(empty? str) #f]\n          [(check-file-name str) #t]\n          [(check-file-dot\
    \ str) #t]\n          [else #f]))\n  (define (check-file-extension-dot str)",
  "  (define (count-digits str)\n    (define (count-digits-iter str acc)\n      (cond\n\
    \        [(empty? str) acc]\n        [(char-numeric? (first str)) (count-digits-iter\
    \ (rest str) (+ acc 1))]\n        [else (count-digits-iter (rest str) acc)]))\n\
    \    (count-digits-iter str 0))\n  (define (count-dots str)\n    (define (count-dots-iter\
    \ str acc)\n      (cond\n        [(empty? str) acc]\n        [(char=? (first str)\
    \ #\\.) (count-dots-iter (rest str) (+ acc 1))]\n        [else (count-dots-iter\
    \ (rest str) acc)]))\n    (count-dots-iter str 0))\n  (define (check-first-part\
    \ str)\n    (define (check-first-part-iter str)\n      (cond\n        [(empty?\
    \ str) #f]\n        [(char-alphabetic? (first str)) #t]\n        [else (check-first-part-iter\
    \ (rest str))]))\n    (check-first-part-iter str))\n  (define (check-second-part\
    \ str)\n    (define (check-second-part-iter str)\n      (cond\n        [(empty?\
    \ str) #f]\n        [(char=? (first str) #\\t) #t]\n        [(char=? (first str)\
    \ #\\e) #t]\n        [(char=? (first str) #\\d) #t]\n        [else (check-second-part-iter\
    \ (rest str))]))\n    (check-second-part-iter str))\n  (define (check-third-part\
    \ str)\n    (define (check-third-part-iter str)\n      (cond\n        [(empty?\
    \ str) #f]\n        [(char=? (first str) #\\x) #t]\n        [(char=? (first str)\
    \ #\\l) #t]\n        [else (check-third-part-iter (rest str))]))\n    (check-third-part-iter\
    \ str))\n  (define (check-fourth-", "  (define (count-digits str)\n    (if (string-empty?\
    \ str)\n        0\n        (if (char-numeric? (string-ref str 0))\n          \
    \  (+ 1 (count-digits (string-drop str 1)))\n            (count-digits (string-drop\
    \ str 1)))))\n  (define (is-valid-extension ext)\n    (cond ((string=? ext \"\
    txt\") #t)\n          ((string=? ext \"exe\") #t)\n          ((string=? ext \"\
    dll\") #t)\n          (else #f)))\n  (define (is-valid-name name)\n    (if (string-empty?\
    \ name)\n        #f\n        (if (char-alphabetic? (string-ref name 0))\n    \
    \        #t\n            #f)))\n  (define (is-valid-file-name file_name)\n   \
    \ (define (get-extension file_name)\n      (string-take-right file_name (string-length\
    \ file_name) (string-index file_name \".\")))\n    (define (get-name file_name)\n\
    \      (string-take file_name (string-length file_name) (string-index file_name\
    \ \".\")))\n    (if (string-index file_name \".\")\n        (if (<= (count-digits\
    \ (get-name file_name)) 3)\n            (if (is-valid-name (get-name file_name))\n\
    \                (if (is-valid-extension (get-extension file_name))\n        \
    \            #t\n                    #f)\n                #f)\n            #f)\n\
    \        #f))\n  (if (is-valid-file-name file_name)\n      \"Yes\"\n      \"No\"\
    ))\n", "  (define (count-digits str)\n    (define (count-digits-iter str count)\n\
    \      (cond [(empty? str) count]\n            [(char-numeric? (first str)) (count-digits-iter\
    \ (rest str) (+ count 1))]\n            [else (count-digits-iter (rest str) count)]))\n\
    \    (count-digits-iter str 0))\n  (define (valid-extension? str)\n    (cond [(string=?\
    \ str \"txt\") #t]\n          [(string=? str \"exe\") #t]\n          [(string=?\
    \ str \"dll\") #t]\n          [else #f]))\n  (define (valid-name? str)\n    (cond\
    \ [(empty? str) #f]\n          [(char-alphabetic? (first str)) #t]\n         \
    \ [else #f]))\n  (define (valid-file-name? str)\n    (cond [(empty? str) #f]\n\
    \          [(char-numeric? (first str)) #f]\n          [else #t]))\n  (define\
    \ (valid-file-name-iter str)\n    (cond [(empty? str) #t]\n          [(char-numeric?\
    \ (first str)) (valid-file-name-iter (rest str))]\n          [else #t]))\n  (define\
    \ (valid-file-name? str)\n    (cond [(empty? str) #f]\n          [(char-numeric?\
    \ (first str)) (valid-file-name-iter (rest str))]\n          [else #t]))\n  (define\
    \ (valid-file-name? str)\n    (cond [(empty? str) #f]\n          [(char-numeric?\
    \ (first str)) (valid-file-name-iter (rest str))]\n          [else #t]))\n  (define\
    \ (valid-file-name? str)\n    (cond [(empty? str) #f]\n          [(char-numeric?\
    \ (first str)) (valid-file-name-iter (rest str))]\n          [else #t]))\n  (define\
    \ (valid-file-name? str)\n    (cond [(empty? str) #f]\n          [(char-", " \
    \ (define (check-digits file_name)\n    (if (string-contains file_name #\\0)\n\
    \        (if (string-contains file_name #\\1)\n            (if (string-contains\
    \ file_name #\\2)\n                (if (string-contains file_name #\\3)\n    \
    \                (if (string-contains file_name #\\4)\n                      \
    \  (if (string-contains file_name #\\5)\n                            (if (string-contains\
    \ file_name #\\6)\n                                (if (string-contains file_name\
    \ #\\7)\n                                    (if (string-contains file_name #\\\
    8)\n                                        (if (string-contains file_name #\\\
    9)\n                                            #f\n                         \
    \                   #t)\n                                        #t)\n       \
    \                             #t)\n                                #t)\n     \
    \                       #t)\n                        #t)\n                   \
    \ #t)\n                #t)\n            #t)\n        #t))\n  (define (check-dot\
    \ file_name)\n    (if (string-contains file_name #\\.)\n        (if (string-contains\
    \ file_name #\\.)\n            #f\n            #t)\n        #f))\n  (define (check-substring\
    \ file_name)\n    (if (string-contains file_name #\\.)\n        (if (string-contains\
    \ (substring file_name 0 (string-index file_name #\\.)) #\\a)\n            (if\
    \ (string-contains (substring file_name 0 (string-index file_name #\\.)) #\\b)\n\
    \                (if (string-contains (substring file_name 0 (string-index file_name\
    \ #\\.)) #\\c)\n                    (if (string-contains (substring file_name\
    \ 0 (string-index file_name #\\.)) #\\d)\n                        (if (string-contains\
    \ (substring file_name 0 (string-index file_name #\\.)) #\\e)\n              \
    \              (if (string-contains (substring file_name 0 (string-index file_name\
    \ #\\.)) #\\f)\n                "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
