name: HumanEval_95_check_dict_case
language: rkt
prompt: "#lang racket\n\n#| Given a hash, return #t if all keys are strings in lower\
  \ \ncase or all keys are strings in upper case, else return #f.\nThe function should\
  \ return #f is the given hash is empty.\nExamples:\n>>> (check_dict_case #hash((\"\
  a\" .  \"apple\") (\"b\" .  \"banana\")))\n#t\n>>> (check_dict_case #hash((\"a\"\
  \ .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n#f\n>>> (check_dict_case\
  \ #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n#f\n>>> (check_dict_case\
  \ #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n\
  #f\n>>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n\
  #t|#\n(define (check_dict_case dict)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_dict_case))\n\
  \    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"\
  ))) #t)\n    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"\
  banana\") (\"B\" .  \"banana\"))) #f)\n    (check-equal? (candidate #hash((\"p\"\
  \ .  \"pineapple\") (\"5\" .  \"banana\") (\"a\" .  \"apple\"))) #f)\n    (check-equal?\
  \ (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"\
  ))) #f)\n    (check-equal? (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"\
  12345\"))) #t)\n    (check-equal? (candidate #hash((\"fruit\" .  \"Orange\") (\"\
  taste\" .  \"Sweet\"))) #t)\n    (check-equal? (candidate #hash()) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (keys dict))\n     (or (andmap\
    \ string-lower-case? (keys dict))\n         (andmap string-upper-case? (keys dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n \
    \   [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n   \
    \ [(empty? dict) #f]\n    [(string-ci=? (hash-ref dict (hash-keys dict 0)) (hash-ref\
    \ dict (hash-keys dict 1))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict\
    \ (hash-key dict))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n        \
    \  (string-ci=? (hash-ref dict (hash-keys dict 0))\n                        (hash-ref\
    \ dict (hash-keys dict 0))))\n     (check_dict_case (hash-remove dict (hash-keys\
    \ dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(or (string-ci=?\
    \ (hash-ref dict (hash-key dict 0)) (hash-ref dict (hash-key dict 0)))\n     \
    \    (string-ci=? (hash-ref dict (hash-key dict 0)) (hash-ref dict (hash-key dict\
    \ 0))))\n     (check_dict_case (hash-remove dict (hash-key dict 0)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-first dict)))\n          (string-ci=? (hash-ref dict (hash-first dict))\
    \ (hash-ref dict (hash-first dict))))\n     (check_dict_case (hash-rest dict))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(equal? (hash-ref\
    \ dict (hash-keys dict 0)) (string-upcase (hash-ref dict (hash-keys dict 0))))\
    \ #t]\n    [(equal? (hash-ref dict (hash-keys dict 0)) (string-downcase (hash-ref\
    \ dict (hash-keys dict 0)))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict)))) #t]\n    [else\
    \ #f]))\n", "  (define (check-key key)\n    (if (string? key)\n        (if (string-ci=?\
    \ key (string-upcase key))\n            #t\n            #f)\n        #f))\n  (define\
    \ (check-keys keys)\n    (if (null? keys)\n        #t\n        (if (check-key\
    \ (car keys))\n            (check-keys (cdr keys))\n            #f)))\n  (check-keys\
    \ (hash-keys dict)))\n", "  (if (hash-empty? dict)\n      #f\n      (let* ([keys\
    \ (hash-keys dict)]\n             [first-key (car keys)]\n             [is-lower?\
    \ (string-ci=? first-key (string-downcase first-key))])\n        (andmap (lambda\
    \ (key)\n                  (if is-lower?\n                      (string-ci=? key\
    \ (string-downcase key))\n                      (string-ci=? key (string-upcase\
    \ key))))\n                keys))))\n", "  (cond\n    [(empty? dict) #f]\n   \
    \ [(and (string? (hash-ref dict (hash-keys dict 0)))\n          (string-ci=? (hash-ref\
    \ dict (hash-keys dict 0))\n                        (hash-ref dict (hash-keys\
    \ dict 0))))\n     (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n \
    \   [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n   \
    \ [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n\
    \          (string? (hash-ref dict (hash-keys dict 1)))\n          (string? (hash-ref\
    \ dict (hash-keys dict 2)))\n          (string? (hash-ref dict (hash-keys dict\
    \ 3)))\n          (string? (hash-ref dict (hash-keys dict 4)))\n          (string?\
    \ (hash-ref dict (hash-keys dict 5)))\n          (string? (hash-ref dict (hash-keys\
    \ dict 6)))\n          (string? (hash-ref dict (hash-keys dict 7)))\n        \
    \  (string? (hash-ref dict (hash-keys dict 8)))\n          (string? (hash-ref\
    \ dict (hash-keys dict 9)))\n          (string? (hash-ref dict (hash-keys dict\
    \ 10)))\n          (string? (hash-ref dict (hash-keys dict 11)))\n          (string?\
    \ (hash-ref dict (hash-keys dict 12)))\n          (string? (hash-ref dict (hash-keys\
    \ dict 13)))\n          (string? (hash-ref dict (hash-keys dict 14)))\n      \
    \    (string? (hash-ref dict (hash-keys dict 15)))\n          (string? (hash-ref\
    \ dict (hash-keys dict 16)))\n          (string? (hash-ref dict (hash-keys dict\
    \ 17)))\n          (string? (hash-ref dict (hash-keys dict 18)))\n          (string?\
    \ (hash-ref dict (hash-keys dict 19)))\n          (string? (hash-ref dict (hash-keys\
    \ dict 20)))\n          (string? (hash-ref dict (hash-keys dict 21)))\n      \
    \    (string? (hash-ref dict (hash-keys dict 22)))\n          (string? (hash-ref\
    \ dict (hash-keys dict 23)))\n          (string? (hash-ref dict (hash-keys dict\
    \ 24)))\n          (string? (hash-ref dict (hash-keys dict 25)))\n          (string?\
    \ (hash-ref dict (hash-keys dict 26)))\n          (string? (hash-ref dict (hash-keys\
    \ dict 27)))\n          (string? (hash-ref dict (hash-keys dict 28)))\n      \
    \    (", "  (cond\n    [(empty? dict) #f]\n    [(string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(andmap string? (hash-keys dict))\n     (cond\n\
    \       [(andmap string-lower-case? (hash-keys dict)) #t]\n       [(andmap string-upper-case?\
    \ (hash-keys dict)) #t]\n       [else #f])]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap\
    \ symbol? (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                        (hash-ref dict (hash-key\
    \ (hash-rest dict)))))\n     (check_dict_case (hash-rest dict))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (map key dict)) #t]\n   \
    \ [(andmap string-ci? (map key dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(andmap string? (hash-keys dict))\n     (ormap string-lower-case?\
    \ (hash-keys dict))]\n    [(andmap symbol? (hash-keys dict))\n     (ormap string-upper-case?\
    \ (hash-keys dict))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n \
    \   [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(andmap string? (hash-keys dict))\n     (or (andmap string-lower-case?\
    \ (hash-keys dict))\n         (andmap string-upper-case? (hash-keys dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond [(empty? dict) #f]\n        [(andmap\
    \ string? (map key dict)) #t]\n        [(andmap string-ci? (map key dict)) #t]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (car (keys dict))) (string-ci=? (car (keys dict)) (car (keys dict)))) #t]\n\
    \    [(and (string? (car (keys dict))) (string-ci=? (car (keys dict)) (car (keys\
    \ dict)))) #f]\n    [else (check_dict_case (rest dict))]))\n", "  (let ([keys\
    \ (hash-keys dict)])\n    (if (empty? keys)\n        #f\n        (let ([first-key\
    \ (first keys)])\n          (if (string? first-key)\n              (if (string-ci=?\
    \ first-key (string-upcase first-key))\n                  (for/and ([key (in-list\
    \ (rest keys))])\n                    (string-ci=? key (string-upcase key)))\n\
    \                  (for/and ([key (in-list (rest keys))])\n                  \
    \  (string-ci=? key (string-downcase key))))\n              #f)))))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap\
    \ symbol? (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(andmap string? (hash-keys dict))\n     (or (andmap string-lower-case?\
    \ (hash-keys dict))\n         (andmap string-upper-case? (hash-keys dict)))]\n\
    \    [else #f]))\n", "  (if (empty? dict)\n      #f\n      (let ([keys (hash-keys\
    \ dict)])\n        (if (andmap string? keys)\n            (let ([first-key (car\
    \ keys)])\n              (andmap (\u03BB (key) (equal? (string-upcase key) key))\
    \ keys))\n            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-keys dict 0)))\n          (string-ci=? (hash-ref dict (hash-keys\
    \ dict 0)) (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case (hash-remove\
    \ dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol? (hash-keys\
    \ dict)) #t]\n    [else #f]))\n", "  (define (check-case-helper dict)\n    (cond\n\
    \      [(empty? dict) #t]\n      [(and (string? (hash-ref dict (car (hash-keys\
    \ dict))))\n            (string-ci=? (car (hash-keys dict)) (car (hash-keys dict))))\n\
    \       (check-case-helper (hash-remove dict (car (hash-keys dict))))]\n     \
    \ [else #f]))\n  (check-case-helper dict))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol?\
    \ (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond [(empty?\
    \ dict) #f]\n        [(andmap string? (hash-keys dict)) #t]\n        [(andmap\
    \ symbol? (hash-keys dict)) #t]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol?\
    \ (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                        (hash-ref dict (hash-key\
    \ (hash-rest dict)))))\n     (check_dict_case (hash-rest dict))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-keys dict 0)))\n          (string-ci=? (hash-ref dict (hash-keys dict\
    \ 0))\n                        (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case\
    \ (hash-remove dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n        \
    \  (string-ci=? (hash-ref dict (hash-keys dict 0))\n                        (hash-ref\
    \ dict (hash-keys dict 1))))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol?\
    \ (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol? (hash-keys dict))\
    \ #t]\n    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n      (let ([keys\
    \ (hash-keys dict)])\n        (if (andmap string? keys)\n            (if (andmap\
    \ string-ci=? keys)\n                #t\n                #f)\n            #f))))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n \
    \   [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n", "  (define (check-case\
    \ dict)\n    (cond\n      [(empty? dict) #t]\n      [(and (string? (key dict))\
    \ (string? (key (rest dict))))\n       (if (equal? (string-upcase (key dict))\
    \ (string-upcase (key (rest dict))))\n           (check-case (rest dict))\n  \
    \         #f)]\n      [else #f]))\n  (if (empty? dict)\n      #f\n      (check-case\
    \ dict)))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-keys dict 0)))\n          (string-ci=? (hash-ref dict (hash-keys dict\
    \ 0)) (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case (hash-remove\
    \ dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n          (string-ci=?\
    \ (hash-ref dict (hash-keys dict 0))\n                        (hash-ref dict (hash-keys\
    \ dict 0))))\n     (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-keys dict 0)))\n          (string-ci=? (hash-ref dict (hash-keys\
    \ dict 0)) (hash-ref dict (hash-keys dict 0)))) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap\
    \ symbol? (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap string-ci? (hash-keys\
    \ dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap\
    \ string? (hash-keys dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-keys dict 0)))\n          (string-ci=? (hash-ref dict (hash-keys\
    \ dict 0)) (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case (hash-remove\
    \ dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(string? (hash-ref dict (hash-keys dict 0))) #t]\n    [(string? (hash-ref\
    \ dict (hash-keys dict 0))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol? (hash-keys\
    \ dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                        (hash-ref dict (hash-key (hash-rest\
    \ dict)))))\n     (check_dict_case (hash-rest dict))]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (define (check-keys dict)\n    (cond\n      [(empty? dict) #t]\n\
    \      [(and (string? (hash-ref dict (hash-key (car dict))))\n            (string-ci=?\
    \ (hash-ref dict (hash-key (car dict)))\n                         (hash-ref dict\
    \ (hash-key (car dict)))))\n       (check-keys (cdr dict))]\n      [else #f]))\n\
    \  (if (empty? dict)\n      #f\n      (check-keys (hash-keys dict))))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap\
    \ symbol? (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol? (hash-keys\
    \ dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty?\
    \ dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string?\
    \ keys)\n            (let ([lower-keys (map string-downcase keys)])\n        \
    \      (if (equal? keys lower-keys)\n                  #t\n                  #f))\n\
    \            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (car\
    \ (keys dict))) (string-ci=? (car (keys dict)) (car (keys dict)))) #t]\n    [(and\
    \ (string? (car (keys dict))) (string-ci=? (car (keys dict)) (car (keys dict))))\
    \ #f]\n    [else (check_dict_case (rest dict))]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol? (hash-keys\
    \ dict)) #t]\n    [else #f]))\n", "  (if (empty? dict)\n      #f\n      (let ([keys\
    \ (hash-keys dict)])\n        (if (andmap string? keys)\n            (if (andmap\
    \ (lambda (x) (string-ci=? x (string-upcase x))) keys)\n                #t\n \
    \               (andmap (lambda (x) (string-ci=? x (string-downcase x))) keys))\n\
    \            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (if (empty? dict)\n      #f\n      (let ([keys\
    \ (hash-keys dict)])\n        (if (andmap string? keys)\n            (if (andmap\
    \ string-ci=? keys)\n                #t\n                #f)\n            #f))))\n",
  "  (if (empty? dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if\
    \ (andmap string? keys)\n            (let ([first-key (car keys)])\n         \
    \     (if (string-ci=? first-key (string-upcase first-key))\n                \
    \  (andmap (\u03BB (key) (string-ci=? key (string-upcase key))) keys)\n      \
    \            (andmap (\u03BB (key) (string-ci=? key (string-downcase key))) keys)))\n\
    \            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n \
    \   [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n   \
    \ [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n  \
    \        (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                        (hash-ref dict (hash-key (hash-rest dict)))))\n     (check_dict_case\
    \ (hash-rest dict))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n \
    \   [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond [(empty?\
    \ dict) #f]\n        [(andmap string? (hash-keys dict)) #t]\n        [(andmap\
    \ symbol? (hash-keys dict)) #t]\n        [else #f]))\n", "  (if (empty? dict)\n\
    \      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (if (andmap string-ci=? keys)\n                #t\n             \
    \   #f)\n            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-keys dict 0)))\n          (string-ci=? (hash-ref dict (hash-keys\
    \ dict 0))\n                       (hash-ref dict (hash-keys dict 0))))\n    \
    \ (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n    [else #f]))\n",
  "  (cond [(empty? dict) #f]\n        [(andmap string? (hash-keys dict))\n      \
    \   (or (andmap string-lower-case? (hash-keys dict))\n             (andmap string-upper-case?\
    \ (hash-keys dict)))]\n        [else #f]))\n```\n\n```racket\n#lang racket\n",
  "  (define (is_lower? str)\n    (and (string? str)\n         (string-ci=? str (string-downcase\
    \ str))))\n  (define (is_upper? str)\n    (and (string? str)\n         (string-ci=?\
    \ str (string-upcase str))))\n  (define (check-keys dict)\n    (cond [(empty?\
    \ dict) #t]\n          [(and (is_lower? (car (first dict)))\n                (is_lower?\
    \ (cdr (first dict))))\n           (check-keys (rest dict))]\n          [(and\
    \ (is_upper? (car (first dict)))\n                (is_upper? (cdr (first dict))))\n\
    \           (check-keys (rest dict))]\n          [else #f]))\n  (check-keys dict))\n",
  "  (cond [(empty? dict) #f]\n        [(andmap string? (hash-keys dict)) #t]\n  \
    \      [(andmap symbol? (hash-keys dict)) #t]\n        [else #f]))\n", "  (if\
    \ (empty? dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap\
    \ string? keys)\n            (let ([first-key (car keys)])\n              (if\
    \ (string-ci=? first-key (string-upcase first-key))\n                  (andmap\
    \ (lambda (key) (string-ci=? key (string-upcase key))) keys)\n               \
    \   (andmap (lambda (key) (string-ci=? key (string-downcase key))) keys)))\n \
    \           #f))))\n", "  (if (empty? dict)\n      #f\n      (let ([keys (hash-keys\
    \ dict)])\n        (if (andmap string? keys)\n            (or (andmap string-lowercase?\
    \ keys)\n                (andmap string-uppercase? keys))\n            #f))))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))) #t]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-keys dict 0)))\n          (string-ci=? (hash-ref dict (hash-keys dict\
    \ 0))\n                       (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case\
    \ (hash-remove dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol?\
    \ (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(andmap string? (map (lambda (key) (string-downcase key)) (hash-keys dict)))\
    \ #t]\n    [(andmap string? (map (lambda (key) (string-upcase key)) (hash-keys\
    \ dict))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))) #t]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict)))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n          (string-ci=?\
    \ (hash-ref dict (hash-keys dict 0))\n                        (hash-ref dict (hash-keys\
    \ dict 0))))\n     (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n \
    \   [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n   \
    \ [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap\
    \ symbol? (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol? (hash-keys\
    \ dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(equal? (string-upper-case (hash-ref dict (hash-key dict)))\n\
    \             (hash-ref dict (hash-key dict)))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(equal? (string-lower-case (hash-ref dict (hash-key\
    \ dict)))\n             (hash-ref dict (hash-key dict)))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol?\
    \ (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-keys dict 0)))\n          (string-ci=?\
    \ (hash-ref dict (hash-keys dict 0))\n                        (hash-ref dict (hash-keys\
    \ dict 0))))\n     (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict\
    \ 0)))\n          (string-ci=? (hash-ref dict (hash-keys dict 0))\n          \
    \              (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case (hash-remove\
    \ dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-keys dict 0)))\n          (string-ci=? (hash-ref\
    \ dict (hash-keys dict 0))\n                        (hash-ref dict (hash-keys\
    \ dict 0))))\n     (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap\
    \ string? (hash-keys dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n\
    \    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n      (let ([keys (hash-keys\
    \ dict)])\n        (if (andmap string? keys)\n            (let ([lower-keys (map\
    \ string-downcase keys)])\n              (if (equal? keys lower-keys)\n      \
    \            #t\n                  #f))\n            #f))))\n", "  (cond\n   \
    \ [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n\
    \          (string-ci=? (hash-ref dict (hash-keys dict 0)) (hash-ref dict (hash-keys\
    \ dict 0))))\n     (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                        (hash-ref dict (hash-key (hash-rest dict)))))\n     (check_dict_case\
    \ (hash-rest dict))]\n    [else #f]))\n", "  (if (empty? dict)\n      #f\n   \
    \   (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n      \
    \      (let ([first-key (car keys)])\n              (andmap (lambda (key)\n  \
    \                      (eq? (string-downcase key) (string-downcase first-key)))\n\
    \                      keys))\n            #f))))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(andmap string? (map key dict)) #t]\n    [(andmap string-ci? (map\
    \ key dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap\
    \ string? (hash-keys dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict\
    \ 0)))\n          (string-ci=? (hash-ref dict (hash-keys dict 0))\n          \
    \              (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case (hash-remove\
    \ dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                        (hash-ref dict (hash-key\
    \ (hash-rest dict)))))\n     (check_dict_case (hash-rest dict))]\n    [else #f]))\n",
  "  (let ([keys (hash-keys dict)])\n    (cond\n      [(empty? keys) #f]\n      [(andmap\
    \ string? keys)\n       (let ([lower-keys (map string-downcase keys)])\n     \
    \    (equal? keys lower-keys))]\n      [(andmap string? keys)\n       (let ([upper-keys\
    \ (map string-upcase keys)])\n         (equal? keys upper-keys))]\n      [else\
    \ #f])))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-keys dict 0)))\n          (string-ci=? (hash-ref dict (hash-keys dict\
    \ 0)) (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case (hash-remove\
    \ dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol? (hash-keys\
    \ dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n        \
    \  (string-ci=? (hash-ref dict (hash-keys dict 0)) (hash-ref dict (hash-keys dict\
    \ 0))))\n     (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(string-ci=? (hash-ref dict\
    \ (hash-key dict)) (hash-ref dict (hash-key dict))) #t]\n    [else #f]))\n", " \
    \ (letrec ([keys (hash-keys dict)]\n           [vals (hash-values dict)]\n   \
    \        [lower-keys (map string-downcase keys)]\n           [upper-keys (map\
    \ string-upcase keys)])\n    (if (or (equal? keys lower-keys) (equal? keys upper-keys))\n\
    \        #t\n        #f)))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string? (hash-ref dict (hash-key\
    \ (hash-rest dict)))))\n     (if (or (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key (hash-rest dict))))\n             (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key (hash-rest (hash-rest dict))))))\n\
    \         #t\n         #f)]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n          (string-ci=?\
    \ (hash-ref dict (hash-keys dict 0))\n                        (hash-ref dict (hash-keys\
    \ dict 0))))\n     (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-keys dict 0)))\n          (string-ci=? (hash-ref dict (hash-keys\
    \ dict 0))\n                        (hash-ref dict (hash-keys dict 0))))\n   \
    \  (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict\
    \ 0)))\n          (string-ci=? (hash-ref dict (hash-keys dict 0)) (hash-ref dict\
    \ (hash-keys dict 0))))\n     (check_dict_case (hash-remove dict (hash-keys dict\
    \ 0)))]\n    [else #f]))\n", "  (if (empty? dict)\n      #f\n      (let ((keys\
    \ (hash-keys dict)))\n        (if (string? (car keys))\n            (andmap string-lower-case?\
    \ keys)\n            (andmap string-upper-case? keys)))))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n        \
    \  (string-ci=? (hash-ref dict (hash-keys dict 0)) (hash-ref dict (hash-keys dict\
    \ 0))))\n     (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict\
    \ 0)))\n          (string-ci=? (hash-ref dict (hash-keys dict 0))\n          \
    \              (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case (hash-remove\
    \ dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol? (hash-keys\
    \ dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (empty? dict)\n\
    \      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (if (andmap string-ci=? keys)\n                #t\n             \
    \   #f)\n            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(string-ci=?\
    \ (hash-ref dict (hash-keys dict 0)) (hash-ref dict (hash-keys dict 1))) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (map\
    \ hash-key dict)) #t]\n    [(andmap string-ci? (map hash-key dict)) #t]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap\
    \ string? (hash-keys dict))\n     (or (andmap string-lower-case? (hash-keys dict))\n\
    \         (andmap string-upper-case? (hash-keys dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (car (dict-keys dict)))\n \
    \         (string-ci=? (car (dict-keys dict)) (car (dict-keys dict))))\n     (check_dict_case\
    \ (dict-rest dict))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n\
    \      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n   \
    \         (if (andmap string-ci=? keys)\n                #t\n                #f)\n\
    \            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-first dict)))\n          (string-ci=? (hash-ref dict (hash-first\
    \ dict)) (hash-ref dict (hash-first dict))))\n     (check_dict_case (hash-rest\
    \ dict))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap\
    \ string? (hash-keys dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(string-ci=? (hash-ref dict (hash-keys dict\
    \ 0))\n                  (hash-ref dict (hash-keys dict 1)))\n     (check_dict_case\
    \ (hash-remove dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (define (check-keys\
    \ dict)\n    (cond\n      [(empty? dict) #t]\n      [(and (string? (hash-ref dict\
    \ (hash-key (first dict))))\n            (string-ci=? (hash-ref dict (hash-key\
    \ (first dict)))\n                         (hash-key (first dict))))\n       (check-keys\
    \ (rest dict))]\n      [else #f]))\n  (check-keys dict))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(not (string? (hash-ref dict (hash-key dict)))) #f]\n    [(string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key (hash-rest dict))))\n\
    \     (check_dict_case (hash-rest dict))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty?\
    \ dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string?\
    \ keys)\n            (let ([lower-keys (map string-downcase keys)])\n        \
    \      (if (equal? keys lower-keys)\n                  #t\n                  #f))\n\
    \            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(or (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict)))\n         (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n        \
    \  (string-ci=? (hash-ref dict (hash-keys dict 0)) (hash-ref dict (hash-keys dict\
    \ 0))))\n     (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(string-ci=? (hash-ref dict\
    \ (hash-key dict)) (hash-ref dict (hash-key dict))) #t]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n\
    \    [(andmap string-ci? (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-keys dict 0)))\n          (string-ci=? (hash-ref dict (hash-keys dict\
    \ 0))\n                        (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case\
    \ (hash-remove dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict\
    \ (hash-key dict))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict)))\
    \ #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-keys dict 0)))\n          (string-ci=?\
    \ (hash-ref dict (hash-keys dict 0))\n                        (hash-ref dict (hash-keys\
    \ dict 0))))\n     (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n \
    \   [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n   \
    \ [(empty? dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap\
    \ symbol? (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(string-ci=? (hash-ref dict (hash-key dict 0))\n           \
    \       (hash-ref dict (hash-key dict 1)))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict 0)))]\n    [else #f]))\n", "  (if (empty? dict)\n      #f\n\
    \      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n   \
    \         (let ([lower-keys (map string-downcase keys)])\n              (if (equal?\
    \ keys lower-keys)\n                  #t\n                  (let ([upper-keys\
    \ (map string-upcase keys)])\n                    (if (equal? keys upper-keys)\n\
    \                        #t\n                        #f))))\n            #f))))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (map key dict)) #t]\n   \
    \ [(andmap string-ci? (map key dict)) #t]\n    [else #f]))\n", "  (cond [(empty?\
    \ dict) #f]\n        [(andmap string? (hash-keys dict))\n         (or (andmap\
    \ string-lower-case? (hash-keys dict))\n             (andmap string-upper-case?\
    \ (hash-keys dict)))]\n        [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(andmap string? (hash-keys dict))\n     (if (andmap string-upper-case?\
    \ (hash-keys dict))\n         #t\n         (andmap string-lower-case? (hash-keys\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-upper-case?\
    \ (hash-ref dict (hash-key dict))))\n     (check-dict-case-helper dict)]\n   \
    \ [(and (string? (hash-ref dict (hash-key dict)))\n          (string-lower-case?\
    \ (hash-ref dict (hash-key dict))))\n     (check-dict-case-helper dict)]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond [(empty? dict) #f]\n        [(andmap string? (map\
    \ car dict)) #t]\n        [(andmap string-ci? (map car dict)) #t]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys\
    \ dict)) #t]\n    [(andmap symbol? (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
