language: rkt
name: HumanEval_85_add
results:
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (+ (first\
    \ lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (length lst)) (add\
    \ (rest lst))]\n    [(even? (length lst)) (+ (first lst) (add (rest lst)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:18:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:21:4

    actual:     10

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (let loop ([lst lst] [sum 0])\n    (cond [(empty? lst) sum]\n\
    \          [(even? (first lst)) (loop (rest lst) (+ sum (first lst)))]\n     \
    \     [else (loop (rest lst) sum)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6952svz.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6952svz.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6952svz.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6952svz.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (if (and (even? (car lst)) (odd? (length lst)))\n            (helper\
    \ (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper\
    \ lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:17:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:18:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:19:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:20:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (if (empty? lst)\n      0\n      (if (odd? (car lst))\n \
    \         (add (cdr lst))\n          (+ (car lst) (add (cdr lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxwnlmv0x.rkt:19:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxwnlmv0x.rkt:20:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxwnlmv0x.rkt:21:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxwnlmv0x.rkt:22:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(odd? (cdr lst)) (add-helper (cddr lst) (+ acc (car lst)))]\n \
    \     [else (add-helper (cddr lst) acc)]))\n  (add-helper lst 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvw8ju3k.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvw8ju3k.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvw8ju3k.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvw8ju3k.rkt:23:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(odd? (cdr lst)) (add-helper (cddr lst) (+ acc (car lst)))]\n \
    \     [else (add-helper (cddr lst) acc)]))\n  (add-helper lst 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvw8ju3k.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvw8ju3k.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvw8ju3k.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvw8ju3k.rkt:23:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n        [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (rest lst)) (+ (first\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt55p8iuh.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt55p8iuh.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt55p8iuh.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt55p8iuh.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 1
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n```\n\n```racket\n#lang\
    \ racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpo0kbgbs1.rkt:14:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n        [else (add (cddr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg5z6vbl.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg5z6vbl.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg5z6vbl.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg5z6vbl.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst))\n  \
    \       (+ (first lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx0yk3vc1.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx0yk3vc1.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx0yk3vc1.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx0yk3vc1.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (length lst)) (add\
    \ (rest lst))]\n    [(even? (length lst)) (+ (first lst) (add (rest lst)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:18:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:21:4

    actual:     10

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 1
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n```\n\n## Problem\
    \ 5\n\n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpcwct3ivj.rkt:13:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 1
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (index lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm0726u7e.rkt:10:12: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpm0726u7e.rkt:10:12\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (null? lst)\n     \
    \   acc\n        (if (and (even? (car lst)) (odd? (length lst)))\n           \
    \ (add-helper (cdr lst) (+ acc (car lst)))\n            (add-helper (cdr lst)\
    \ acc))))\n  (add-helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (iter lst sum)\n    (cond\n      [(empty? lst) sum]\n\
    \      [(even? (first lst)) (iter (rest lst) (+ sum (first lst)))]\n      [else\
    \ (iter (rest lst) sum)]))\n  (iter lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvp85jche.rkt:20:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvp85jche.rkt:21:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvp85jche.rkt:22:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvp85jche.rkt:23:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (cadr lst)) (+ (cadr\
    \ lst) (add (cddr lst)))]\n        [else (add (cddr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3r94fzwj.rkt:17:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3r94fzwj.rkt:18:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3r94fzwj.rkt:19:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3r94fzwj.rkt:20:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (+ (first\
    \ lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (rest lst)) (+ (first\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt55p8iuh.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt55p8iuh.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt55p8iuh.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt55p8iuh.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(null? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp15efae4z.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp15efae4z.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp15efae4z.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp15efae4z.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (null? lst)\n     \
    \   acc\n        (if (and (even? (car lst)) (odd? (length lst)))\n           \
    \ (add-helper (cdr lst) (+ acc (car lst)))\n            (add-helper (cdr lst)\
    \ acc))))\n  (add-helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n        [else (add (cddr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg5z6vbl.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg5z6vbl.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg5z6vbl.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg5z6vbl.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (+ (first\
    \ lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (remainder (first\
    \ lst) 2)) (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp77umxcfv.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp77umxcfv.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp77umxcfv.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp77umxcfv.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:17:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:18:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:19:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:20:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n        [else (add (cddr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg5z6vbl.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg5z6vbl.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg5z6vbl.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg5z6vbl.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (remainder (length\
    \ lst) 2))\n     (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiesdlncp.rkt:20:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiesdlncp.rkt:21:4

    actual:     7

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n```\n\n```racket\n\
    #lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpmdcrqmpp.rkt:15:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (remainder (length\
    \ lst) 2))\n     (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiesdlncp.rkt:20:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiesdlncp.rkt:21:4

    actual:     7

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (if (and (even? (car lst)) (odd? (length lst)))\n            (helper\
    \ (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper\
    \ lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (length lst)) (add\
    \ (rest lst))]\n    [(even? (length lst)) (+ (first lst) (add (rest lst)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:18:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:21:4

    actual:     10

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:17:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:18:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:19:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:20:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (cond [(empty? lst) acc]\n\
    \          [(even? (first lst)) (add-helper (rest lst) (+ acc (first lst)))]\n\
    \          [else (add-helper (rest lst) acc)]))\n  (add-helper (rest lst) 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps1egh322.rkt:20:4

    actual:     130

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps1egh322.rkt:21:4

    actual:     6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps1egh322.rkt:22:4

    actual:     18

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (remainder (first\
    \ lst) 2)) (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\
    ```\n\n### [Add the even numbers in a list](https://www.codewars.com/kata/add-the-even-numbers-in-a-list/train/racket)\n\
    \n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n \
    \   (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp3196445b.rkt:14:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n        [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (cond [(empty? lst) acc]\n\
    \          [(even? (first lst)) (add-helper (rest lst) (+ acc (first lst)))]\n\
    \          [else (add-helper (rest lst) acc)]))\n  (add-helper (rest lst) 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps1egh322.rkt:20:4

    actual:     130

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps1egh322.rkt:21:4

    actual:     6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps1egh322.rkt:22:4

    actual:     18

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (null? lst)\n     \
    \   acc\n        (if (even? (car lst))\n            (add-helper (cdr lst) (+ acc\
    \ (car lst)))\n            (add-helper (cdr lst) acc))))\n  (add-helper (cdr lst)\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp50ylmcx6.rkt:22:4

    actual:     130

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp50ylmcx6.rkt:23:4

    actual:     6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp50ylmcx6.rkt:24:4

    actual:     18

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(and (even? (first lst)) (odd? (length lst))) (add-helper (rest\
    \ lst) (+ acc (first lst)))]\n      [else (add-helper (rest lst) acc)]))\n  (add-helper\
    \ lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (if (and (even? (car lst)) (odd? (length lst)))\n            (helper\
    \ (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper\
    \ lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (length lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8qkuldoe.rkt:17:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8qkuldoe.rkt:18:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8qkuldoe.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8qkuldoe.rkt:20:4

    actual:     10

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:17:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:18:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:19:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:20:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(= (remainder (first lst)\
    \ 2) 0) (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72fths2z.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72fths2z.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72fths2z.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72fths2z.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiehfwox4.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (if (and (even? (car lst)) (odd? (length lst)))\n            (helper\
    \ (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper\
    \ lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (null? lst)\n     \
    \   acc\n        (if (and (even? (car lst)) (odd? (length lst)))\n           \
    \ (add-helper (cdr lst) (+ acc (car lst)))\n            (add-helper (cdr lst)\
    \ acc))))\n  (add-helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (if (empty? lst)\n      0\n      (if (even? (first lst))\n\
    \          (if (odd? (length lst))\n              (first lst)\n              0)\n\
    \          0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal?\
    \ (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4\
    \ 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnwi85byq.rkt:21:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnwi85byq.rkt:22:4

    actual:     0

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnwi85byq.rkt:24:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (length lst)) (add\
    \ (rest lst))]\n    [(even? (length lst)) (+ (first lst) (add (rest lst)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:18:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpywam6ten.rkt:21:4

    actual:     10

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (+ (first\
    \ lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (+ (first\
    \ lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 1
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(and (even? (first lst))\
    \ (odd? (index lst)))\n     (+ (first lst) (add (rest lst)))]\n    [else (add\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal?\
    \ (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4\
    \ 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp37d5btbu.rkt:10:37: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp37d5btbu.rkt:10:37\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n \
    \         (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9aatyere.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9aatyere.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9aatyere.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9aatyere.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (let loop ([lst lst] [acc 0])\n    (if (null? lst)\n    \
    \    acc\n        (if (even? (car lst))\n            (loop (cdr lst) (+ acc (car\
    \ lst)))\n            (loop (cdr lst) acc)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpteqcpzmg.rkt:20:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpteqcpzmg.rkt:21:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpteqcpzmg.rkt:22:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpteqcpzmg.rkt:23:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n        [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (length lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8qkuldoe.rkt:17:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8qkuldoe.rkt:18:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8qkuldoe.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8qkuldoe.rkt:20:4

    actual:     10

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (cond [(empty? lst) acc]\n\
    \          [(even? (first lst)) (add-helper (rest lst) (+ acc (first lst)))]\n\
    \          [else (add-helper (rest lst) acc)]))\n  (add-helper (rest lst) 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps1egh322.rkt:20:4

    actual:     130

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps1egh322.rkt:21:4

    actual:     6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps1egh322.rkt:22:4

    actual:     18

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (empty? lst)\n    \
    \    acc\n        (add-helper (rest lst)\n                    (if (and (even?\
    \ (first lst))\n                             (odd? (length lst)))\n          \
    \              (+ acc (first lst))\n                        acc))))\n  (add-helper\
    \ lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (rest lst)) (+ (first\
    \ lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo4ojd01j.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo4ojd01j.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo4ojd01j.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo4ojd01j.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (null? lst)\n     \
    \   acc\n        (if (and (even? (car lst)) (odd? (length lst)))\n           \
    \ (add-helper (cdr lst) (+ acc (car lst)))\n            (add-helper (cdr lst)\
    \ acc))))\n  (add-helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2j05y11.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxspw4idd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(odd? (first lst)) (add-helper (rest lst) acc)]\n      [else (add-helper\
    \ (rest lst) (+ acc (first lst)))]))\n  (add-helper lst 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuofz84id.rkt:20:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuofz84id.rkt:21:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuofz84id.rkt:22:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuofz84id.rkt:23:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n        [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpftu34vu3.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_osl8s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (+ (first\
    \ lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsuju9kqo.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:17:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:18:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:19:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpawann226.rkt:20:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuiipaoj.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvxdjpja2.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\nExamples:\n>>> (add (list 4 2 6 7))\n2|#\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n        [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyk7aiff2.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
