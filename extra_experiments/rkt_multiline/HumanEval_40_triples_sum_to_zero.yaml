name: HumanEval_40_triples_sum_to_zero
language: rkt
prompt: "#lang racket\n\n#| triples_sum_to_zero takes a list of integers as an input.\n\
  it returns #t if there are three distinct elements in the list that\nsum to zero,\
  \ and #f otherwise.\n>>> (triples_sum_to_zero (list 1 3 5 0))\n#f\n>>> (triples_sum_to_zero\
  \ (list 1 3 -2 1))\n#t\n>>> (triples_sum_to_zero (list 1 2 3 7))\n#f\n>>> (triples_sum_to_zero\
  \ (list 2 4 -5 3 9 7))\n#t\n>>> (triples_sum_to_zero (list 1))\n#f|#\n(define (triples_sum_to_zero\
  \ l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triples_sum_to_zero))\n\
  \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
  \ (list 1 3 5 -1)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #t)\n    (check-equal?\
  \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 1 2 5 7)) #f)\n\
  \    (check-equal? (candidate (list 2 4 -5 3 9 7)) #t)\n    (check-equal? (candidate\
  \ (list 1)) #f)\n    (check-equal? (candidate (list 1 3 5 -100)) #f)\n    (check-equal?\
  \ (candidate (list 100 3 5 -100)) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l))\
    \ (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref l 0) (cdr l))\n   \
    \       (member? (- (list-ref l 0)) (cdr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (cdr l)) #f]\n \
    \   [(empty? (cddr l)) #f]\n    [(and (equal? (car l) (cadr l)) (equal? (cadr\
    \ l) (caddr l))) (triples_sum_to_zero (cddr l))]\n    [(and (equal? (car l) (cadr\
    \ l)) (not (equal? (cadr l) (caddr l)))) (triples_sum_to_zero (cdr l))]\n    [(and\
    \ (not (equal? (car l) (cadr l))) (equal? (cadr l) (caddr l))) (triples_sum_to_zero\
    \ (cddr l))]\n    [(and (not (equal? (car l) (cadr l))) (not (equal? (cadr l)\
    \ (caddr l))))\n     (or (and (equal? (+ (car l) (cadr l) (caddr l)) 0) #t)\n\
    \         (triples_sum_to_zero (cdr l)))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member? (list-ref l 0) (cdr l))\n          (member? (list-ref l 0)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l))\
    \ (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n \
    \   [(empty? l) #f]\n    [(and (member? (list-ref l 0) (cdr l))\n          (member?\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond [(empty? l) #f]\n        [(and (member? 0 l) (member? -1 l) (member? 1\
    \ l)) #t]\n        [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? (list-ref l 0) (rest l))\n          (member? (list-ref\
    \ l 0) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member? (first l) (rest l)) (member? (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (list 0 0 0) (subsets l))\n  \
    \        (not (member 0 l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member? -1 l) (member?\
    \ 1 l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? (list-ref l 0) (cdr l))\n          (member? (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (- (first\
    \ l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (- (first\
    \ l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member? (first l) (rest l)) (member? (- (first\
    \ l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member? 0 l) (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #", "  (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref\
    \ l 0) (cdr l))\n          (member? (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member? -1\
    \ l) (member? 1 l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member? 0 l) (member? -1 l) (member? 1 l)) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member? 0 l) (member? -1 l) (member? 1 l)) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member 0 l) (member (list-ref l 0) l)\
    \ (member (- (list-ref l 0)) l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref l 0) (cdr l))\n    \
    \      (member? (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l)\n   \
    \       (member? (- 0 (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member?\
    \ 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? (add1 0) l)) #t]\n    [(and (member? 0 l) (member? (sub1\
    \ 0) l)) #t]\n    [(and (member? (add1 0) l) (member? (add1 0) l)) #t]\n    [(and\
    \ (member? (add1 0) l) (member? (sub1 0) l)) #t]\n    [(and (member? (sub1 0)\
    \ l) (member? (sub1 0) l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n    \
    \      (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member? (-\
    \ 0 (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member? (first l) (rest l)) (member? (first\
    \ l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (empty? (cdr l)) (empty? (cddr l))) #f]\n\
    \    [(and (empty? (cdr l)) (not (empty? (cddr l))))\n     (or (and (= (car l)\
    \ 0) (= (cadr l) 0) (= (caddr l) 0))\n         (triples_sum_to_zero (cdr l)))]\n\
    \    [(and (not (empty? (cdr l))) (empty? (cddr l)))\n     (or (and (= (car l)\
    \ 0) (= (cadr l) 0))\n         (triples_sum_to_zero (cdr l)))]\n    [(and (not\
    \ (empty? (cdr l))) (not (empty? (cddr l))))\n     (or (and (= (car l) 0) (= (cadr\
    \ l) 0) (= (caddr l) 0))\n         (triples_sum_to_zero (cdr l)))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member? (- (first l) (second l)) (rest (rest\
    \ l)))\n          (member? (- (first l) (third l)) (rest (rest (rest l)))))\n\
    \     #t]\n    [else (triples_sum_to_zero (rest l))]))\n```\n\n```racket\n#lang\
    \ racket\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #", "  (cond\n    [(empty? l) #f]\n  \
    \  [(and (member 0 l) (member (- 0 (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? (first l)\
    \ (rest l)) (member? (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member?\
    \ -1 l) (member? 1 l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (define (helper l)\n    (cond\n      [(empty? l) #f]\n      [(member? (car l)\
    \ (cdr l)) #f]\n      [(member? (- (car l)) (cdr l)) #t]\n      [else (helper\
    \ (cdr l))]))\n  (helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member?\
    \ (first l) (rest l)) (member? (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? (first l)\
    \ (rest l)) (member? (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref\
    \ l 0) (rest l))\n          (member? (list-ref l 0) (rest (rest l)))) #t]\n  \
    \  [else (triples_sum_to_zero (rest l))]))\n", "  (define (helper l)\n    (cond\n\
    \      [(empty? l) #f]\n      [(empty? (rest l)) #f]\n      [(empty? (rest (rest\
    \ l))) #f]\n      [(and (not (member? (list-ref l 0) (rest l)))\n            (not\
    \ (member? (list-ref l 0) (rest (rest l))))\n            (not (member? (list-ref\
    \ (rest l) 0) (rest (rest l)))))\n       (if (= (list-ref l 0)\n             \
    \ (+ (list-ref (rest l) 0)\n                 (list-ref (rest (rest l)) 0)))\n\
    \           #t\n           (helper (rest l)))]\n      [else (helper (rest l))]))\n\
    \  (helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member?\
    \ 0 l) (member? 0 l)) #t]\n    [(and (member? (car l) l) (member? (- (car l))\
    \ l)) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? 0 l) (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? (car l) l) (member? (- (car l)) l)) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member?\
    \ 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #", "  (cond\n    [(empty? l) #f]\n  \
    \  [(empty? (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [(and (not (member?\
    \ 0 l))\n          (not (member? (add1 0) l))\n          (not (member? (sub1 0)\
    \ l))) #f]\n    [else\n     (or (and (member? (add1 0) l)\n              (member?\
    \ (sub1 0) l))\n         (triples_sum_to_zero (rest l)))]))\n```\n\n## Problem\
    \ 3\n\n```racket\n#lang racket\n", "  (define (triples_sum_to_zero_helper l)\n\
    \    (cond\n      [(empty? l) #f]\n      [(and (member? (- (first l) (second l))\
    \ (rest (rest l)))\n            (not (member? (first l) (rest (rest l))))) #t]\n\
    \      [else (triples_sum_to_zero_helper (rest l))]))\n  (triples_sum_to_zero_helper\
    \ (sort l <)))\n", "  (define (triples_sum_to_zero_helper l1 l2)\n    (cond\n\
    \      [(empty? l1) #f]\n      [(empty? l2) (triples_sum_to_zero_helper (rest\
    \ l1) (rest l1))]\n      [(= 0 (+ (first l1) (first l2))) #t]\n      [else (triples_sum_to_zero_helper\
    \ l1 (rest l2))]))\n  (triples_sum_to_zero_helper l l))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? 0 l) (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member? -1\
    \ l) (member? 1 l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (- (first\
    \ l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? (first l) (rest l)) (member? (- (first l)) (rest\
    \ l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l))\n          (member (- (car l)) (cdr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? 0 l) (member? -1 l) (member? 1 l)) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (list 0 0 0) (subsets l))\n          (not (member 0 l))) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member? 0 l) (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and\
    \ (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n\
    \    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member?\
    \ 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #t]\n    [(and (member? 0\
    \ l) (member? 0 l)) #t]\n    [(and (member? 0 l) (member? 0 l)) #", "  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(and (member (first l)\
    \ (rest l))\n            (member (- (first l)) (rest l))) #t]\n      [else (helper\
    \ (rest l))]))\n  (helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member\
    \ (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? (first l)\
    \ (rest l)) (member? (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(empty? l) #f]\n        [(and (member? (first l)\
    \ (rest l))\n              (member? (first l) (rest (rest l)))) #t]\n        [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member? (list-ref l 0) (cdr l))\n          (member? (list-ref l 0) (cddr l)))\
    \ #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond [(empty? l) #f]\n\
    \        [(and (member? (list-ref l 0) (cdr l))\n              (member? (list-ref\
    \ l 0) (cddr l))) #t]\n        [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member? (list-ref l 0) (cdr l))\n          (member?\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (define (triples_sum_to_zero-helper l)\n    (cond\n      [(empty? l) #f]\n  \
    \    [(and (member (car l) (cdr l))\n            (member (- (car l)) (cdr l)))\
    \ #t]\n      [else (triples_sum_to_zero-helper (cdr l))]))\n  (triples_sum_to_zero-helper\
    \ (sort < l)))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (rest l))\n          (member (list-ref l 0) (rest (rest l)))) #t]\n   \
    \ [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member? (list-ref l 0) (rest l))\n          (member? (list-ref l 0)\
    \ (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(and (member (car l) (cdr\
    \ l))\n            (member (- (car l)) (cdr l))) #t]\n      [else (helper (cdr\
    \ l))]))\n  (helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member?\
    \ 0 l) (member? -1 l) (member? 1 l)) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member 0 l) (member (add1\
    \ 0) l) (member (sub1 0) l)) #t]\n    [(and (member 0 l) (member (add1 0) l) (member\
    \ (add1 (add1 0)) l)) #t]\n    [(and (member 0 l) (member (sub1 0) l) (member\
    \ (sub1 (sub1 0)) l)) #t]\n    [(and (member 0 l) (member (add1 0) l) (member\
    \ (sub1 (add1 0)) l)) #t]\n    [(and (member 0 l) (member (sub1 0) l) (member\
    \ (add1 (sub1 0)) l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond [(empty? l) #f]\n        [(and (member? (list-ref l 0) (cdr l))\n    \
    \          (member? (list-ref l 0) (cddr l))) #t]\n        [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(empty? l) #f]\n        [(and (member? 0 l) (member?\
    \ (- 0 (first l)) (rest l))) #t]\n        [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member? (first l) (rest l)) (member? (first\
    \ l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond [(empty? l) #f]\n        [(and (member? (list-ref l 0) (cdr l))\n    \
    \          (member? (list-ref l 0) (cddr l))) #t]\n        [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref\
    \ l 0) (cdr l))\n          (member? (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (empty? (cdr l)) (empty?\
    \ (cddr l))) #f]\n    [(and (empty? (cdr l)) (not (empty? (cddr l))))\n     (or\
    \ (and (= (car l) (car (cddr l))) (= (car (cdr l)) 0))\n         (triples_sum_to_zero\
    \ (cdr l)))]\n    [(and (not (empty? (cdr l))) (empty? (cddr l)))\n     (or (and\
    \ (= (car l) (car (cdr l))) (= (car (cddr l)) 0))\n         (triples_sum_to_zero\
    \ (cdr l)))]\n    [(and (not (empty? (cdr l))) (not (empty? (cddr l))))\n    \
    \ (or (and (= (car l) (car (cdr l))) (= (car (cddr l)) 0))\n         (and (= (car\
    \ l) (car (cddr l))) (= (car (cdr l)) 0))\n         (and (= (car l) (car (cdr\
    \ l))) (= (car (cddr l)) 0))\n         (triples_sum_to_zero (cdr l)))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond [(empty? l) #f]\n        [(and (member? (first l) (rest l))\n        \
    \      (member? (- (first l)) (rest l))) #t]\n        [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member? (first l) (rest l)) (member? (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member? (first l) (rest l)) (member?\
    \ (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member? (first l) (rest l)) (member?\
    \ (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member? -1 l) (member? 1\
    \ l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? (first l) (rest l)) (member? (- (first l)) (rest\
    \ l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (define (triples_sum_to_zero_helper\
    \ l)\n    (cond\n      [(empty? l) #f]\n      [(and (member (car l) (cdr l)) (member\
    \ (- (car l)) (cdr l))) #t]\n      [else (triples_sum_to_zero_helper (cdr l))]))\n\
    \  (triples_sum_to_zero_helper (sort l <)))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member? (first l) (rest l)) (member? (- (first l)) (rest l))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member? (first l) (rest l)) (member? (- (first l)) (rest l))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member? 0 l) (member? 0 l) (member? 0 l)) #t]\n    [(and (member?\
    \ (car l) l) (member? (- (car l)) l)) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l))\
    \ (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref l 0) (rest l))\n   \
    \       (member? (list-ref l 0) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (rest l))\n          (member (list-ref l 0) (rest (rest l)))) #t]\n   \
    \ [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member? (list-ref l 0) (cdr l))\n          (member? (- (list-ref l\
    \ 0)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond [(empty?\
    \ l) #f]\n        [(and (member? (list-ref l 0) (cdr l))\n              (member?\
    \ (list-ref l 0) (cddr l))) #t]\n        [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member? -1 l) (member? 1\
    \ l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? (first l) (rest l)) (member? (first l) (rest (rest\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? (list-ref l 0) (cdr l))\n          (member? (- (list-ref\
    \ l 0)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? (first l) (rest l)) (member? (- (first l)) (rest\
    \ l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member? 0 l) (member? -1 l) (member? 1 l)) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list (first\
    \ l) (second l) (third l))\n                  (list-of-triples l))\n         \
    \ (= (apply + (first (list-of-triples l))) 0))\n     #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member?\
    \ -1 l) (member? 1 l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member? -1 l) (member?\
    \ 1 l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (define (triples_sum_to_zero_helper\
    \ l)\n    (cond\n      [(empty? l) #f]\n      [(and (member? (car l) (cdr l))\
    \ (member? (car l) (cddr l))) #t]\n      [else (triples_sum_to_zero_helper (cdr\
    \ l))]))\n  (triples_sum_to_zero_helper (sort l <)))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? (first l) (rest l)) (member? (- (first l)) (rest\
    \ l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? (list-ref l 0) (cdr l))\n          (member? (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (- (first\
    \ l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (- (first\
    \ l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? 0 l) (member? -1 l) (member? 1 l)) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member? 0 l) (member? -1 l) (member? 1 l)) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref\
    \ l 0) (cdr l))\n          (member? (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (define (helper l)\n    (cond\n      [(empty? l) #f]\n  \
    \    [(member (add1 (first l)) (rest l)) #t]\n      [else (helper (rest l))]))\n\
    \  (helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref\
    \ l 0) (cdr l))\n          (member? (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref l 0)\
    \ (rest l))\n          (member? (list-ref l 0) (rest (rest l)))) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty?\
    \ (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [(and (not (member (list-ref\
    \ l 0) (rest l)))\n          (not (member (list-ref l 0) (rest (rest l))))\n \
    \         (not (member (list-ref (rest l) 0) (rest (rest l)))))\n     (if (and\
    \ (= (list-ref l 0) (- (list-ref (rest l) 0) (list-ref (rest (rest l)) 0)))\n\
    \              (= (list-ref l 0) (- (list-ref (rest l) 0) (list-ref (rest (rest\
    \ l)) 0))))\n         #t\n         (triples_sum_to_zero (rest l)))]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond [(empty? l) #f]\n        [(and\
    \ (member (first l) (rest l))\n              (member (- (first l)) (rest l)))\
    \ #t]\n        [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (define (helper l)\n\
    \    (cond\n      [(empty? l) #f]\n      [(and (member (sub1 (first l)) (rest\
    \ l))\n            (member (sub1 (first l)) (rest l))) #t]\n      [else (helper\
    \ (rest l))]))\n  (helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member?\
    \ (car l) (cdr l)) (member? (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member?\
    \ -1 l) (member? 1 l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref l 0) (cdr l))\n   \
    \       (member? (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? (car l) (cdr l))\
    \ (member? (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first\
    \ l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member? -1 l) (member?\
    \ 1 l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l))\n          (member (- (car l)) (cdr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (define (helper l)\n\
    \    (cond\n      [(empty? l) #f]\n      [(member (list-ref l 0) (cdr l)) #t]\n\
    \      [else (helper (cdr l))]))\n  (cond\n    [(empty? l) #f]\n    [(member (-\
    \ (list-ref l 0)) (cdr l)) #t]\n    [(member (list-ref l 0) (cdr l)) (helper (cdr\
    \ l))]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? (list-ref l 0) (rest l))\n          (member? (list-ref\
    \ l 0) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref l 0) (cdr l))\n    \
    \      (member? (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? (first l) (rest\
    \ l))\n          (member? (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref\
    \ l 0) (rest l))\n          (member? (list-ref l 0) (rest (rest l)))) #t]\n  \
    \  [else (triples_sum_to_zero (rest l))]))\n", "  (define (helper l)\n    (cond\n\
    \      [(empty? l) #f]\n      [(and (member (car l) (cdr l)) (member (- (car l))\
    \ (cdr l))) #t]\n      [else (helper (cdr l))]))\n  (helper l))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first l)\
    \ (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member? (first l) (rest l))\n          (member?\
    \ (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member? (first l) (rest l))\n        \
    \  (member? (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member? -1\
    \ l) (member? 1 l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member? (car l) (cdr l)) (member? (car l) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member? (list-ref l 0) (cdr l))\n          (member? (- (list-ref l\
    \ 0)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? (first l) (rest l))\n          (member? (- (first\
    \ l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l)))\
    \ #f]\n    [(and (not (member? 0 l))\n          (not (member? (- 0 (first l))\
    \ (rest l)))\n          (not (member? (- 0 (second l)) (rest (rest l)))))\n  \
    \   (triples_sum_to_zero (rest l))]\n    [else #t]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l))\n          (member (- (first l))\
    \ (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n \
    \   [(empty? l) #f]\n    [(and (member? 0 l) (member? -1 l) (member? 1 l)) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member? (list-ref l 0) (cdr l))\n          (member? (list-ref l 0)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l))\
    \ (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n \
    \   [(empty? l) #f]\n    [(and (member? (list-ref l 0) (rest l))\n          (member?\
    \ (- (list-ref l 0)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member? -1 l) (member? 1\
    \ l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member? (list-ref l 0) (cdr l))\n          (member? (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\
    \ [(empty? l) #f]\n        [(and (member? (first l) (rest l))\n              (member?\
    \ (- (first l)) (rest l))) #t]\n        [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref l 0) (cdr l))\n    \
    \      (member? (- (list-ref l 0)) (cdr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? 0 l) (member?\
    \ -1 l) (member? 1 l)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (define (helper l1 l2)\n    (cond\n      [(empty? l1) #f]\n      [(empty? l2)\
    \ (helper (rest l1) l)]\n      [(= (sum (list (first l1) (first l2))) 0) #t]\n\
    \      [else (helper l1 (rest l2))]))\n  (helper l (rest l)))\n", "  (cond\n \
    \   [(empty? l) #f]\n    [(and (member? 0 l) (member? -1 l) (member? 1 l)) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
