name: HumanEval_58_common
language: rkt
prompt: "#lang racket\n\n#| Return sorted unique common elements for two lists.\n\
  >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n(list 1 5 653)\n\
  >>> (common (list 5 3 2 8) (list 3 2))\n(list 2 3)|#\n(define (common l1 l2)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
  \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
  \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
  \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
  \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
completions: ["  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (intersection l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (define (common-helper l1\
    \ l2 acc)\n    (cond [(empty? l1) acc]\n          [(empty? l2) acc]\n        \
    \  [(member (first l1) l2)\n           (common-helper (rest l1) l2 (cons (first\
    \ l1) acc))]\n          [else (common-helper (rest l1) l2 acc)]))\n  (sort (common-helper\
    \ l1 l2 '()) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n```\n\n## [`common-elements.rkt`](common-elements.rkt)\n\n```racket\n\
    #lang racket\n", "  (define (common-helper l1 l2)\n    (cond [(empty? l1) empty]\n\
    \          [(empty? l2) empty]\n          [(member (first l1) l2) (cons (first\
    \ l1) (common-helper (rest l1) l2))]\n          [else (common-helper (rest l1)\
    \ l2)]))\n  (sort (common-helper l1 l2) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (unique (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2))\
    \ <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (define (common-helper\
    \ l1 l2)\n    (cond [(empty? l1) empty]\n          [(empty? l2) empty]\n     \
    \     [(member (first l1) l2) (cons (first l1) (common-helper (rest l1) l2))]\n\
    \          [else (common-helper (rest l1) l2)]))\n  (sort (common-helper l1 l2)\
    \ <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (define (common-helper l1 l2 result)\n    (cond\n      [(empty? l1) result]\n\
    \      [(empty? l2) result]\n      [(member (first l1) l2)\n       (common-helper\
    \ (rest l1) l2 (cons (first l1) result))]\n      [else (common-helper (rest l1)\
    \ l2 result)]))\n  (sort (common-helper l1 l2 '()) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (unique (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1\
    \ l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (unique (append l1\
    \ l2)) <))\n", "  (sort (unique (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (define (common-helper l1 l2 acc)\n    (cond\n  \
    \    [(empty? l1) acc]\n      [(empty? l2) acc]\n      [(member (first l1) l2)\
    \ (common-helper (rest l1) l2 (cons (first l1) acc))]\n      [else (common-helper\
    \ (rest l1) l2 acc)]))\n  (sort (common-helper l1 l2 (list)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (define\
    \ (common-helper l1 l2 acc)\n    (cond\n      [(empty? l1) acc]\n      [(empty?\
    \ l2) acc]\n      [(member (first l1) l2) (common-helper (rest l1) l2 (cons (first\
    \ l1) acc))]\n      [else (common-helper (rest l1) l2 acc)]))\n  (sort (common-helper\
    \ l1 l2 (list)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", " \
    \ (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (unique (append l1\
    \ l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (unique (append l1 l2)) <))\n", "  (sort (unique (append l1 l2)) <))\n",
  "  (sort (unique (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1\
    \ l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (unique (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (define (common-helper l1 l2 acc)\n    (cond\n  \
    \    [(empty? l1) acc]\n      [(empty? l2) acc]\n      [(member (first l1) l2)\
    \ (common-helper (rest l1) l2 (cons (first l1) acc))]\n      [else (common-helper\
    \ (rest l1) l2 acc)]))\n  (sort (common-helper l1 l2 '()) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (cond [(empty? l1) empty]\n        [(member (first\
    \ l1) l2) (cons (first l1) (common (rest l1) l2))]\n        [else (common (rest\
    \ l1) l2)]))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (define (common-helper l1 l2 acc)\n\
    \    (cond\n      [(empty? l1) acc]\n      [(empty? l2) acc]\n      [(member (first\
    \ l1) l2) (common-helper (rest l1) l2 (append (list (first l1)) acc))]\n     \
    \ [else (common-helper (rest l1) l2 acc)]))\n  (sort (common-helper l1 l2 (list))\
    \ <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (define (common-helper l1 l2 acc)\n    (cond\n  \
    \    [(empty? l1) acc]\n      [(empty? l2) acc]\n      [(member (first l1) l2)\
    \ (common-helper (rest l1) l2 (append acc (list (first l1))))]\n      [else (common-helper\
    \ (rest l1) l2 acc)]))\n  (define (unique l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(member (first l) (rest l)) (unique (rest l))]\n      [else (cons (first\
    \ l) (unique (rest l)))]))\n  (unique (sort (common-helper l1 l2 empty) <)))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (intersection l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n```\n\n### [`difference`](difference.rkt)\n\n```racket\n\
    #lang racket\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
