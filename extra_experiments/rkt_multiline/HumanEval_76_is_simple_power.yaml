name: HumanEval_76_is_simple_power
language: rkt
prompt: "#lang racket\n\n#| Your task is to write a function that returns true if\
  \ a number x is a simple\npower of n and false in other cases.\nx is a simple power\
  \ of n if n**int=x\nFor example:\n>>> (is_simple_power 1 4)\ntrue\n>>> (is_simple_power\
  \ 2 2)\ntrue\n>>> (is_simple_power 8 2)\ntrue\n>>> (is_simple_power 3 2)\nfalse\n\
  >>> (is_simple_power 3 1)\nfalse\n>>> (is_simple_power 5 3)\nfalse|#\n(define (is_simple_power\
  \ x n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
  \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
  \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
  \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24 2)\
  \ #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate 12\
  \ 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate 1\
  \ 12) #t)\n))\n\n(test-humaneval)"
completions: ["  (define (is_power? x n)\n    (cond [(= n 1) true]\n          [(=\
    \ x 1) false]\n          [(= (modulo x n) 0) (is_power? (/ x n) n)]\n        \
    \  [else false]))\n  (is_power? x n))\n", "  (define (is_simple_power_iter x n\
    \ i)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(= x (* n\
    \ i)) true]\n      [(> x (* n i)) (is_simple_power_iter x n (+ i 1))]\n      [else\
    \ false]))\n  (is_simple_power_iter x n 1))\n", "  (if (= x 1)\n      #t\n   \
    \   (if (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n       \
    \   #f)))\n", "  (define (is-power-of? x n)\n    (cond\n      [(= x 1) true]\n\
    \      [(= x n) true]\n      [(> x n) (is-power-of? (/ x n) n)]\n      [else false]))\n\
    \  (is-power-of? x n))\n", "  (define (is_power? x n)\n    (if (= n 1)\n     \
    \   true\n        (if (= (modulo x n) 0)\n            (is_power? (/ x n) n)\n\
    \            false)))\n  (is_power? x n))\n", "  (and (not (= x 1))\n       (not\
    \ (= n 1))\n       (not (= x 0))\n       (not (= n 0))\n       (not (= (expt n\
    \ (round (/ (log x) (log n)))) x))))\n", "  (define (is-power-of? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", "  (define (is-power-of?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", " \
    \ (define (is-power? x n)\n    (if (= n 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) true]\n          [(=\
    \ x n) true]\n          [(> x n) (loop (- x n) n)]\n          [else false])))\n",
  "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (define (is_power? x n)\n    (cond\n    \
    \  [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n      [else (is_power?\
    \ (/ x n) n)]))\n  (is_power? x n))\n", "  (define (is-power-of? x n)\n    (cond\n\
    \      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n      [else\
    \ (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n", "  (define (is-power?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n", "  (define\
    \ (is_simple_power-helper x n i)\n    (if (= x (* n i))\n        true\n      \
    \  (if (&lt; x (* n i))\n            false\n            (is_simple_power-helper\
    \ x n (+ i 1)))))\n  (is_simple_power-helper x n 1))\n</code>\n", "  (define (is_simple_power-helper\
    \ x n)\n    (if (= x 1)\n        true\n        (if (= (remainder x n) 0)\n   \
    \         (is_simple_power-helper (/ x n) n)\n            false)))\n  (if (= x\
    \ 1)\n      true\n      (is_simple_power-helper x n)))\n", "  (let ([p (expt n\
    \ (round (log x n)))]\n        [q (expt n (ceiling (log x n)))]\n        [r (expt\
    \ n (floor (log x n)))])\n    (or (= x p) (= x q) (= x r))))\n", "  (if (zero?\
    \ x)\n      #f\n      (if (zero? (remainder x n))\n          (is_simple_power\
    \ (/ x n) n)\n          (if (= x n)\n              #t\n              #f))))\n",
  "  (define (is-power-of? x n)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n\
    \      [(< x n) #f]\n      [else (is-power-of? (/ x n) n)]))\n  (is-power-of?\
    \ x n))\n", "  (define (is_simple_power-helper x n)\n    (if (= x 1)\n       \
    \ true\n        (if (= (remainder x n) 0)\n            (is_simple_power-helper\
    \ (/ x n) n)\n            false)))\n  (if (= x n)\n      true\n      (is_simple_power-helper\
    \ x n)))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n    \
    \    (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n          \
    \  #f)))\n  (is-power-of? x n))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n\
    \          #t\n          (if (= x (* n n))\n              #t\n              (if\
    \ (= x (* n (* n n)))\n                  #t\n                  (if (= x (* n (*\
    \ n (* n n))))\n                      #t\n                      (if (= x (* n\
    \ (* n (* n (* n n)))))\n                          #t\n                      \
    \    (if (= x (* n (* n (* n (* n (* n n))))))\n                             \
    \ #t\n                              (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n\
    \                                  #t\n                                  (if (=\
    \ x (* n (* n (* n (* n (* n (* n (* n n))))))))\n                           \
    \           #t\n                                      (if (= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n n)))))))))\n                                      \
    \    #t\n                                          (if (= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))\n                                   \
    \           #t\n                                              (if (= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n                    \
    \                              #t\n                                          \
    \        (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\n\
    \                                                      #t\n                  \
    \                                    (if (= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))))\n                                 \
    \                         #t\n                                               \
    \           (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n n)))))))))))))\n                                                    \
    \          #t\n                                                              (if\
    \ (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                  #t\n      \
    \                                                            (if (= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                      #t", " \
    \ (if (= x 1)\n      true\n      (if (= x n)\n          true\n          (if (=\
    \ (remainder x n) 0)\n              (is_simple_power (/ x n) n)\n            \
    \  false))))\n", "  (define (is-power? x n)\n    (if (= x 1)\n        true\n \
    \       (if (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n          \
    \  false)))\n  (is-power? x n))\n", "  (let ((pow (expt n (exact-floor (log x\
    \ n)))))\n    (= x pow)))\n", "  (let loop ((x x) (n n) (i 1))\n    (if (= x (*\
    \ n n))\n        true\n        (if (&lt; x (* n n))\n            false\n     \
    \       (loop x n (+ i 1))))))\n</code>\n", "  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(= x 0) #f]\n          [(<\
    \ x n) #f]\n          [else (loop (/ x n) n)])))\n", "  (define (is-power-of?\
    \ x n)\n    (cond\n      [(= n 1) true]\n      [(= x 1) false]\n      [(= (modulo\
    \ x n) 0) (is-power-of? (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n",
  "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (if (is-power?\
    \ x n)\n      (if (= x n)\n          #f\n          #t)\n      #f))\n", "  (let\
    \ loop ([x x] [n n])\n    (cond [(= x 1) true]\n          [(= x n) true]\n   \
    \       [(< x n) false]\n          [else (loop (/ x n) n)])))\n", "  (and (integer?\
    \ (expt n (log x n)))\n       (not (zero? (remainder x n)))))\n", "  (if (zero?\
    \ x)\n      #f\n      (if (zero? (remainder x n))\n          (is_simple_power\
    \ (/ x n) n)\n          (if (= x n)\n              #t\n              #f))))\n",
  "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) true]\n          [(=\
    \ x n) true]\n          [(> x n) (loop x (* n n))]\n          [else false])))\n",
  "  (if (zero? x)\n      #f\n      (if (zero? (remainder x n))\n          (is_simple_power\
    \ (/ x n) n)\n          (if (= x n)\n              #t\n              #f))))\n",
  "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (remainder\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n      \
    \    (if (= (remainder x n) 0)\n              (is_simple_power (/ x n) n)\n  \
    \            #f))))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n \
    \         [(= x n) #t]\n          [(< x n) #f]\n          [else (loop (/ x n)\
    \ n)])))\n", "  (define (is-power-of? x n)\n    (if (= n 1)\n        #t\n    \
    \    (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n          \
    \  #f)))\n  (is-power-of? x n))\n", "  (define (is-power-of? x n)\n    (if (=\
    \ x 1)\n        true\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            false)))\n  (is-power-of? x n))\n", "  (let ([p (expt\
    \ n (floor (log x n)))]\n        [q (expt n (ceiling (log x n)))]\n        [r\
    \ (expt n (round (log x n)))]\n        [s (expt n (truncate (log x n)))]\n   \
    \     [t (expt n (inexact->exact (floor (log x n))))])\n    (or (= x p) (= x q)\
    \ (= x r) (= x s) (= x t))))\n", "  (define (is-power-of? x n)\n    (cond\n  \
    \    [(= n 1) (= x 1)]\n      [(= x 1) #f]\n      [(= x n) #t]\n      [(< x n)\
    \ #f]\n      [else (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n", "  (define\
    \ (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n\
    \            (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n",
  "  (if (zero? (remainder x n))\n      (if (zero? (remainder (expt n (expt n -1))\
    \ x))\n          #t\n          #f)\n      #f))\n", "  (let loop ([x x] [n n])\n\
    \    (if (= x 1)\n        #t\n        (if (and (integer? (/ x n)) (= (modulo x\
    \ n) 0))\n            (loop (/ x n) n)\n            #f))))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= x n)\n          #t\n          (if (= x (* n n))\n    \
    \          #t\n              (if (= x (* n (* n n)))\n                  #t\n \
    \                 (if (= x (* n (* n (* n n))))\n                      #t\n  \
    \                    (if (= x (* n (* n (* n (* n n)))))\n                   \
    \       #t\n                          (if (= x (* n (* n (* n (* n (* n n))))))\n\
    \                              #t\n                              (if (= x (* n\
    \ (* n (* n (* n (* n (* n n)))))))\n                                  #t\n  \
    \                                (if (= x (* n (* n (* n (* n (* n (* n (* n n))))))))\n\
    \                                      #t\n                                  \
    \    (if (= x (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))\n           \
    \                               #t\n                                         \
    \ (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n        \
    \                                      #t\n                                  \
    \            (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n\
    \                                                  #t\n                      \
    \                            (if (= x (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n n)))))))))))\n                                              \
    \        #t\n                                                      (if (= x (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))\n   \
    \                                                       #t\n                 \
    \                                         (if (= x (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                      \
    \                                        #t\n                                \
    \                              (if (= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                           \
    \                                       #t\n                                 \
    \                                 (if (= x (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                   \
    \                                                   #t", "  (define (is-power?\
    \ x n)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(< x n)\
    \ false]\n      [else (is-power? (/ x n) n)]))\n  (is-power? x n))\n", "  (if\
    \ (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (if (= x 1)\n      true\n      (if (= x n)\n          true\n  \
    \        (if (= (modulo x n) 0)\n              (is_simple_power (/ x n) n)\n \
    \             false))))\n", "  (define (is-power? x n)\n    (cond\n      [(= x\
    \ 1) true]\n      [(= x n) true]\n      [(< x n) false]\n      [else (is-power?\
    \ (/ x n) n)]))\n  (is-power? x n))\n", "  (define (is-power? x n)\n    (if (=\
    \ x 1)\n        #t\n        (if (= (remainder x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n", "  (define (is-power?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n", "  (if (=\
    \ x 1)\n      true\n      (if (= x n)\n          true\n          (if (= (modulo\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              false))))\n",
  "  (let loop ([x x] [n n])\n    (cond [(= x 1) true]\n          [(= x n) true]\n\
    \          [(> x n) (loop (/ x n) n)]\n          [else false])))\n", "  (let loop\
    \ ([x x] [n n])\n    (cond\n      [(zero? x) false]\n      [(zero? n) false]\n\
    \      [(= x 1) true]\n      [(= n 1) false]\n      [(= x n) true]\n      [(=\
    \ (remainder x n) 0) (loop (/ x n) n)]\n      [else false])))\n", "  (define (is_power?\
    \ x n)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(< x n)\
    \ false]\n      [else (is_power? (/ x n) n)]))\n  (is_power? x n))\n", "  (let\
    \ ([y (expt n (round (log x n)))]\n        [z (expt n (round (log x n) 1))])\n\
    \    (or (= x y) (= x z))))\n", "  (if (zero? (remainder x n))\n      (if (zero?\
    \ (remainder x (expt n 2)))\n          #f\n          #t)\n      #f))\n", "  (if\
    \ (= x 1)\n      #t\n      (if (= n 1)\n          #f\n          (if (= x n)\n\
    \              #t\n              (if (= (modulo x n) 0)\n                  (is_simple_power\
    \ (/ x n) n)\n                  #f)))))\n", "  (let loop ([x x] [n n])\n    (cond\n\
    \      [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n      [else (loop\
    \ (/ x n) n)])))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n\
    \          (is_simple_power (/ x n) n)\n          #f)))\n", "  (if (= x 1)\n \
    \     #t\n      (let loop ([x x] [n n])\n        (if (= x n)\n            #t\n\
    \            (if (< x n)\n                #f\n                (loop (/ x n) n))))))\n",
  "  (define (is-power? x n)\n    (if (= x 1)\n        true\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            false)))\n  (is-power?\
    \ x n))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n          [(=\
    \ x n) #t]\n          [(> x n) (loop (- x n) n)]\n          [else #f])))\n", " \
    \ (define (is-power-of? x n)\n    (if (= n 1)\n        true\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            false)))\n  (is-power-of?\
    \ x n))\n", "  (define (is_power x n)\n    (cond\n      [(= n 1) true]\n     \
    \ [(= x n) true]\n      [(= x 1) false]\n      [(= n 0) false]\n      [(zero?\
    \ (modulo x n)) (is_power (/ x n) n)]\n      [else false]))\n  (is_power x n))\n",
  "  (define (pow a b)\n    (if (= b 0)\n        1\n        (* a (pow a (- b 1)))))\n\
    \  (define (is_simple_power-iter x n i)\n    (if (= x (pow n i))\n        true\n\
    \        (if (&lt; x (pow n i))\n            false\n            (is_simple_power-iter\
    \ x n (+ i 1)))))\n  (is_simple_power-iter x n 0))\n</code>\n", "  (define (is_simple_power-helper\
    \ x n i)\n    (cond\n      [(= i 0) true]\n      [(= x (expt n i)) true]\n   \
    \   [else (is_simple_power-helper x n (- i 1))]))\n  (is_simple_power-helper x\
    \ n (floor (log x n))))\n", "  (define (is-power-of? x n)\n    (cond\n      [(=\
    \ n 1) true]\n      [(= x n) true]\n      [(= x 1) false]\n      [(= (modulo x\
    \ n) 0) (is-power-of? (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n",
  "  (if (zero? (modulo x n))\n      (if (zero? (modulo x (expt n 2)))\n         \
    \ #f\n          #t)\n      #f))\n", "  (define (is-power-of? x n)\n    (if (=\
    \ n 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", "  (if (zero? x)\n\
    \      #f\n      (if (zero? (remainder x n))\n          (if (zero? (remainder\
    \ x (expt n 2)))\n              #f\n              #t)\n          #f)))\n", " \
    \ (define (is_simple_power-helper x n)\n    (cond\n      [(= x 1) true]\n    \
    \  [(= x n) true]\n      [(> x n) (is_simple_power-helper (/ x n) n)]\n      [else\
    \ false]))\n  (is_simple_power-helper x n))\n", "  (and (integer? (expt n (log\
    \ x n)))\n       (not (zero? (modulo x n)))))\n", "  (let ((pow (expt n (round\
    \ (log x n)))))\n    (= pow x)))\n", "  (define (is-power? x n)\n    (cond [(=\
    \ x 1) #t]\n          [(= x n) #t]\n          [(> x n) (is-power? (/ x n) n)]\n\
    \          [else #f]))\n  (is-power? x n))\n", "  (define (is_power? x n)\n  \
    \  (if (= x 1)\n        true\n        (if (= (modulo x n) 0)\n            (is_power?\
    \ (/ x n) n)\n            false)))\n  (is_power? x n))\n", "  (if (= x 1)\n  \
    \    #t\n      (if (= x n)\n          #t\n          (if (= x (expt n 2))\n   \
    \           #t\n              (if (= x (expt n 3))\n                  #t\n   \
    \               (if (= x (expt n 4))\n                      #t\n             \
    \         (if (= x (expt n 5))\n                          #t\n               \
    \           (if (= x (expt n 6))\n                              #t\n         \
    \                     (if (= x (expt n 7))\n                                 \
    \ #t\n                                  (if (= x (expt n 8))\n               \
    \                       #t\n                                      (if (= x (expt\
    \ n 9))\n                                          #t\n                      \
    \                    (if (= x (expt n 10))\n                                 \
    \             #t\n                                              (if (= x (expt\
    \ n 11))\n                                                  #t\n             \
    \                                     (if (= x (expt n 12))\n                \
    \                                      #t\n                                  \
    \                    (if (= x (expt n 13))\n                                 \
    \                         #t\n                                               \
    \           (if (= x (expt n 14))\n                                          \
    \                    #t\n                                                    \
    \          (if (= x (expt n 15))\n                                           \
    \                       #t\n                                                 \
    \                 (if (= x (expt n 16))\n                                    \
    \                                  #t\n                                      \
    \                                (if (= x (expt n 17))\n                     \
    \                                                     #t\n                   \
    \                                                       (if (= x (expt n 18))\n\
    \                                                                            \
    \  #t\n                                                                      \
    \        (if (= x (expt n 19))\n                                             \
    \                                     #t\n                                   \
    \                                               (if (= x (expt n 20))\n      \
    \                                                                            \
    \    #t\n                                                                    \
    \                  (if (= x (expt n 21))\n                                   \
    \                                                       #t\n                 \
    \                                                                         (if\
    \ (= x (expt n 22))\n                                                        \
    \                                      #t\n                                  \
    \                                                            (if (= x (expt n\
    \ 23))\n                                                                     \
    \                             #t\n                                           \
    \                                                       (if (= x (expt n 24))\n\
    \                                                                            \
    \                          #t\n                                              \
    \                  ", "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n\
    \          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define (is_simple_power?\
    \ x n)\n    (if (= x 1)\n        true\n        (if (= (remainder x n) 0)\n   \
    \         (is_simple_power? (/ x n) n)\n            false)))\n  (is_simple_power?\
    \ x n))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) true]\n          [(=\
    \ x n) true]\n          [(> x n) (loop x (* n n))]\n          [else false])))\n",
  "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (define (is-power-of? x n)\n    (cond [(= n 1) true]\n          [(= x 1) false]\n\
    \          [(= (modulo x n) 0) (is-power-of? (/ x n) n)]\n          [else false]))\n\
    \  (is-power-of? x n))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) true]\n\
    \          [(= x n) true]\n          [(> x n) (loop x (* n n))]\n          [else\
    \ false])))\n", "  (let ([r (expt n (round (log x n)))]\n        [d (exact->inexact\
    \ (/ x r))])\n    (and (= r x) (= d 1))))\n", "  (let ((pow (expt n (round (log\
    \ x n)))))\n    (= pow x)))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1)\
    \ #t]\n          [(= x n) #t]\n          [(< x n) #f]\n          [else (loop (/\
    \ x n) n)])))\n", "  (define (is-power? x n)\n    (if (= x 1)\n        true\n\
    \        (if (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n         \
    \   false)))\n  (is-power? x n))\n", "  (define (is_simple_power-helper x n)\n\
    \    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is_simple_power-helper\
    \ (/ x n) n)\n            #f)))\n  (if (= x n)\n      #t\n      (is_simple_power-helper\
    \ x n)))\n", "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n       \
    \ (if (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n\
    \  (is-power? x n))\n", "  (define (is_simple_power-helper x n)\n    (if (= x\
    \ 1)\n        true\n        (if (= (modulo x n) 0)\n            (is_simple_power-helper\
    \ (/ x n) n)\n            false)))\n  (is_simple_power-helper x n))\n", "  (if\
    \ (= x 1)\n      #t\n      (if (= (expt n (floor (log x n))) x)\n          #t\n\
    \          #f)))\n", "  (if (= x 1)\n      true\n      (if (= (expt n (round (log\
    \ x n))) x)\n          true\n          false)))\n", "  (let ([n-root (exact-integer-sqrt\
    \ n)])\n    (and (integer? n-root)\n         (= (expt n-root x) n))))\n", "  (define\
    \ (is_simple_power_helper x n)\n    (if (= x 1)\n        true\n        (if (=\
    \ (remainder x n) 0)\n            (is_simple_power_helper (/ x n) n)\n       \
    \     false)))\n  (if (= x 1)\n      true\n      (is_simple_power_helper x n)))\n",
  "  (if (= x 1)\n      #t\n      (if (= (expt n (round (log x n))) x)\n         \
    \ #t\n          #f)))\n", "  (define (is-power? x n)\n    (if (= x 1)\n      \
    \  #t\n        (if (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n   \
    \         #f)))\n  (is-power? x n))\n", "  (define (is_simple_power-helper x n\
    \ i)\n    (cond ((= x 1) #t)\n          ((= x n) #t)\n          ((= x (* n i))\
    \ #t)\n          ((&gt; x (* n i)) (is_simple_power-helper x n (+ i 1)))\n   \
    \       (else #f)))\n  (is_simple_power-helper x n 2))\n</code>\n", "  (and (not\
    \ (= x 1))\n       (not (= n 1))\n       (not (= x n))\n       (or (= x (expt\
    \ n 1))\n           (= x (expt n 2))\n           (= x (expt n 3))\n          \
    \ (= x (expt n 4))\n           (= x (expt n 5))\n           (= x (expt n 6))\n\
    \           (= x (expt n 7))\n           (= x (expt n 8))\n           (= x (expt\
    \ n 9))\n           (= x (expt n 10))\n           (= x (expt n 11))\n        \
    \   (= x (expt n 12))\n           (= x (expt n 13))\n           (= x (expt n 14))\n\
    \           (= x (expt n 15))\n           (= x (expt n 16))\n           (= x (expt\
    \ n 17))\n           (= x (expt n 18))\n           (= x (expt n 19))\n       \
    \    (= x (expt n 20))\n           (= x (expt n 21))\n           (= x (expt n\
    \ 22))\n           (= x (expt n 23))\n           (= x (expt n 24))\n         \
    \  (= x (expt n 25))\n           (= x (expt n 26))\n           (= x (expt n 27))\n\
    \           (= x (expt n 28))\n           (= x (expt n 29))\n           (= x (expt\
    \ n 30))\n           (= x (expt n 31))\n           (= x (expt n 32))\n       \
    \    (= x (expt n 33))\n           (= x (expt n 34))\n           (= x (expt n\
    \ 35))\n           (= x (expt n 36))\n           (= x (expt n 37))\n         \
    \  (= x (expt n 38))\n           (= x (expt n 39))\n           (= x (expt n 40))\n\
    \           (= x (expt n 41))\n           (= x (expt n 42))\n           (= x (expt\
    \ n 43))\n           (= x (expt n 44))\n           (= x (expt n 45))\n       \
    \    (= x (expt n 46))\n           (= x (expt n 47))\n           (= x (expt n\
    \ 48))\n           (= x", "  (define (is-power-of-n? x n)\n    (if (zero? x)\n\
    \        true\n        (if (zero? (modulo x n))\n            (is-power-of-n? (/\
    \ x n) n)\n            false)))\n  (if (zero? x)\n      false\n      (is-power-of-n?\
    \ x n)))\n", "  (if (zero? (remainder x n))\n      (if (zero? (remainder n x))\n\
    \          #t\n          (is_simple_power (quotient x n) n))\n      #f))\n", " \
    \ (define (is_simple_power-helper x n)\n    (cond\n      [(= x 1) true]\n    \
    \  [(= x n) true]\n      [(> x n) (is_simple_power-helper (/ x n) n)]\n      [else\
    \ false]))\n  (is_simple_power-helper x n))\n", "  (let ((pow (expt n (round (log\
    \ x n)))))\n    (= pow x)))\n", "  (if (= x 1)\n      true\n      (if (= x n)\n\
    \          true\n          (if (= (remainder x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              false))))\n", "  (if (= x 1)\n      true\n      (if\
    \ (= (expt n (round (log x n))) x)\n          true\n          false)))\n", " \
    \ (define (is-power? x n)\n    (if (= x 1)\n        true\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            false)))\n  (is-power?\
    \ x n))\n", "  (if (= x 1)\n      #t\n      (if (= (expt n (floor (log x n)))\
    \ x)\n          #t\n          #f)))\n", "  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(= x 0) #f]\n          [(<\
    \ x n) #f]\n          [else (loop (/ x n) n)])))\n", "  (if (zero? x)\n      #f\n\
    \      (if (zero? (modulo x n))\n          (is_simple_power (/ x n) n)\n     \
    \     (if (= x n)\n              #t\n              #f))))\n", "  (let loop ([x\
    \ x] [n n])\n    (if (zero? x)\n        #t\n        (if (zero? (modulo x n))\n\
    \            (loop (/ x n) n)\n            #f))))\n", "  (let loop ([x x] [n n])\n\
    \    (cond [(= x 1) true]\n          [(= x n) true]\n          [(> x n) (loop\
    \ (/ x n) n)]\n          [else false])))\n", "  (if (= x 1)\n      true\n    \
    \  (if (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n        \
    \  false)))\n", "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n    \
    \    (if (= (remainder x n) 0)\n            (is-power? (/ x n) n)\n          \
    \  #f)))\n  (is-power? x n))\n", "  (define (is-power? x n)\n    (if (zero? (modulo\
    \ x n))\n        (is-power? (/ x n) n)\n        (= x 1)))\n  (is-power? x n))\n",
  "  (define (is-power? x n)\n    (if (= 1 x)\n        true\n        (if (= (remainder\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            false)))\n  (is-power?\
    \ x n))\n", "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if\
    \ (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n \
    \ (if (= x 1)\n      #t\n      (is-power? x n)))\n", "  (define (is-power? x n)\n\
    \    (if (= x 1)\n        true\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            false)))\n  (is-power? x n))\n", "  (if (and (integer?\
    \ x) (integer? n))\n      (if (and (not (= n 0)) (not (= x 0)))\n          (if\
    \ (= (expt n (round (log x n))) x)\n              #t\n              #f)\n    \
    \      #f)\n      #f))\n", "  (define (is-power-of? x n)\n    (cond ((= n 1) #t)\n\
    \          ((= x 1) #f)\n          ((= (modulo x n) 0) (is-power-of? (/ x n) n))\n\
    \          (else #f)))\n  (is-power-of? x n))\n", "  (if (= x 1)\n      #t\n \
    \     (if (= x n)\n          #t\n          (if (= (remainder x n) 0)\n       \
    \       (is_simple_power (/ x n) n)\n              #f))))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= x n)\n          #t\n          (if (= (remainder x n) 0)\n\
    \              (is_simple_power (/ x n) n)\n              #f))))\n", "  (define\
    \ (is_power? x n)\n    (if (= x 1)\n        #t\n        (if (= (remainder x n)\
    \ 0)\n            (is_power? (/ x n) n)\n            #f)))\n  (is_power? x n))\n",
  "  (define (is-power? x n)\n    (cond ((= x 1) #t)\n          ((= x n) #t)\n   \
    \       ((< x n) #f)\n          (else (is-power? (/ x n) n))))\n  (is-power? x\
    \ n))\n", "  (if (= 1 n)\n      (= 1 x)\n      (if (= 0 (remainder x n))\n   \
    \       (is_simple_power (/ x n) n)\n          false)))\n", "  (let loop ([x x]\
    \ [n n])\n    (cond [(= x 1) true]\n          [(= x n) true]\n          [(> x\
    \ n) (loop x (* n n))]\n          [else false])))\n", "  (define (is-power? x\
    \ n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n          \
    \  (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n", "  (if (=\
    \ x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (if (= x 1)\n      true\n      (if (= x n)\n          true\n          (if (=\
    \ x (* n n))\n              true\n              (if (= x (* n (* n n)))\n    \
    \              true\n                  (if (= x (* n (* n (* n n))))\n       \
    \               true\n                      (if (= x (* n (* n (* n (* n n)))))\n\
    \                          true\n                          (if (= x (* n (* n\
    \ (* n (* n (* n n))))))\n                              true\n               \
    \               (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n            \
    \                      true\n                                  (if (= x (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))\n                                     \
    \ true\n                                      (if (= x (* n (* n (* n (* n (*\
    \ n (* n (* n (* n n)))))))))\n                                          true\n\
    \                                          (if (= x (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n n))))))))))\n                                             \
    \ true\n                                              (if (= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n n))))))))))\n                           \
    \                       true\n                                               \
    \   (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\n\
    \                                                      true\n                \
    \                                      (if (= x (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n n))))))))))))\n                              \
    \                            true\n                                          \
    \                (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n)))))))))))))\n                                               \
    \               true\n                                                       \
    \       (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n n)))))))))))))\n                                                    \
    \              true\n                                                        \
    \          (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n n)))))))))))))\n                                          \
    \                            true\n                                          \
    \                            (if (= x (* n (* n (* n (* n", "  (define (is-power?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (remainder x n) 0)\n     \
    \       (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n", "  (if\
    \ (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (define (is-power-of? x n)\n    (cond\n \
    \     [(= n 1) (= x 1)]\n      [(= x 1) #f]\n      [(= x n) #t]\n      [(< x n)\
    \ #f]\n      [else (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n", "  (and\
    \ (not (= x 1))\n       (not (= n 1))\n       (not (= x n))\n       (not (zero?\
    \ (remainder x n)))\n       (not (zero? (remainder (expt n (exact-floor (log x\
    \ n))) x)))))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n       \
    \   [(= x n) #t]\n          [(< x n) #f]\n          [else (loop (/ x n) n)])))\n",
  "  (let ([p (expt n (floor (log x n)))]\n        [q (expt n (ceiling (log x n)))]\n\
    \        [r (expt n (round (log x n)))]\n        [s (expt n (truncate (log x n)))])\n\
    \    (or (= x p) (= x q) (= x r) (= x s))))\n", "  (define (is_power-of? x n)\n\
    \    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is_power-of?\
    \ (/ x n) n)\n            #f)))\n  (is_power-of? x n))\n", "  (if (and (integer?\
    \ x) (integer? n))\n      (if (= x 1)\n          true\n          (if (= n 1)\n\
    \              false\n              (if (= x n)\n                  true\n    \
    \              (if (= x (* n n))\n                      true\n               \
    \       (if (= x (* n (* n n)))\n                          true\n            \
    \              (if (= x (* n (* n (* n n))))\n                              true\n\
    \                              (if (= x (* n (* n (* n (* n n)))))\n         \
    \                         true\n                                  (if (= x (*\
    \ n (* n (* n (* n (* n n))))))\n                                      true\n\
    \                                      (if (= x (* n (* n (* n (* n (* n (* n\
    \ n)))))))\n                                          true\n                 \
    \                         (if (= x (* n (* n (* n (* n (* n (* n (* n n))))))))\n\
    \                                              true\n                        \
    \                      (if (= x (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))\n\
    \                                                  true\n                    \
    \                              (if (= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n n))))))))))\n                                                      true\n\
    \                                                      (if (= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n n))))))))))\n                           \
    \                               true\n                                       \
    \                   (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n n))))))))))\n                                                         \
    \     true\n                                                              (if\
    \ (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n\
    \                                                                  true\n    \
    \                                                              (if (= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n     \
    \                                                                 true\n     \
    \                                                                 (if (= x (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n\
    \                                                                          true\n\
    \                                                                          (if\
    \ (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (*", "  (if (and (integer?\
    \ x) (integer? n))\n      (if (= x 1)\n          true\n          (if (= n 1)\n\
    \              false\n              (if (= x n)\n                  true\n    \
    \              (if (= x (* n n))\n                      true\n               \
    \       (is_simple_power x (* n n))))))\n      false))\n", "  (if (= x 1)\n  \
    \    true\n      (if (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n\
    \          false)))\n", "  (and (not (= x 1))\n       (not (= n 1))\n       (or\
    \ (= x n)\n           (and (integer? (log x n))\n                (= (expt n (floor\
    \ (log x n))) x)))))\n", "  (let ([x (exact->inexact x)])\n    (if (= x 1)\n \
    \       true\n        (if (= (expt n (floor (log x n))) x)\n            true\n\
    \            false))))\n", "  (define (is-power? x n)\n    (if (= x 1)\n     \
    \   #t\n        (if (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n  \
    \          #f)))\n  (is-power? x n))\n", "  (if (= x 1)\n      #t\n      (if (=\
    \ x n)\n          #t\n          (if (= (modulo x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n", "  (if (and (integer? x) (integer? n))\n\
    \      (if (= x 1)\n          #t\n          (if (= n 1)\n              #f\n  \
    \            (if (= x n)\n                  #t\n                  (if (= (expt\
    \ n (floor (log x n))) x)\n                      #t\n                      #f))))\n\
    \      #f))\n", "  (let ((n-root (exact-integer-sqrt n)))\n    (and (integer?\
    \ n-root)\n         (= (expt n-root 2) n)\n         (= (expt n-root x) n))))\n",
  "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (let loop ((i 0))\n    (if (= (expt n i) x)\n        #t\n     \
    \   (if (< (expt n i) x)\n            (loop (+ i 1))\n            #f))))\n", " \
    \ (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= x (*\
    \ n n))\n              #t\n              (if (= x (* n (* n n)))\n           \
    \       #t\n                  (if (= x (* n (* n (* n n))))\n                \
    \      #t\n                      (if (= x (* n (* n (* n (* n n)))))\n       \
    \                   #t\n                          (if (= x (* n (* n (* n (* n\
    \ (* n n))))))\n                              #t\n                           \
    \   (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n                        \
    \          #t\n                                  (if (= x (* n (* n (* n (* n\
    \ (* n (* n (* n n))))))))\n                                      #t\n       \
    \                               (if (= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n)))))))))\n                                          #t\n               \
    \                           (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n))))))))))\n                                              #t\n          \
    \                                    (if (= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n n))))))))))\n                                             \
    \     #t\n                                                  (if (= x (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\n                \
    \                                      #t\n                                  \
    \                    (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n))))))))))))\n                                                \
    \          #t\n                                                          (if (=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                              #t\n          \
    \                                                    (if (= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n       \
    \                                                           #t\n             \
    \                                                     (if (= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                      #t", " \
    \ (define (is-power? x n)\n    (if (= x 1)\n        true\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            false)))\n  (is-power?\
    \ x n))\n", "  (let ([x (exact->inexact x)])\n    (and (integer? x)\n        \
    \ (integer? n)\n         (not (zero? n))\n         (let loop ([i 1])\n       \
    \    (if (= (expt n i) x)\n               #t\n               (if (&lt; (expt n\
    \ i) x)\n                   (loop (+ i 1))\n                   #f))))))\n</code>\n",
  "  (let ([p (expt n (exact-floor (log x n)))]\n        [q (expt n (exact-ceiling\
    \ (log x n)))]\n        [r (expt n (exact-round (log x n)))]\n        [s (expt\
    \ n (exact-truncate (log x n)))])\n    (or (= x p) (= x q) (= x r) (= x s))))\n",
  "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= x (*\
    \ n n))\n              #t\n              (if (= x (* n (* n n)))\n           \
    \       #t\n                  (if (= x (* n (* n (* n n))))\n                \
    \      #t\n                      (if (= x (* n (* n (* n (* n n)))))\n       \
    \                   #t\n                          (if (= x (* n (* n (* n (* n\
    \ (* n n))))))\n                              #t\n                           \
    \   (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n                        \
    \          #t\n                                  (if (= x (* n (* n (* n (* n\
    \ (* n (* n (* n n))))))))\n                                      #t\n       \
    \                               (if (= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n)))))))))\n                                          #t\n               \
    \                           (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n))))))))))\n                                              #t\n          \
    \                                    (if (= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n n))))))))))\n                                             \
    \     #t\n                                                  (if (= x (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\n                \
    \                                      #t\n                                  \
    \                    (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n))))))))))))\n                                                \
    \          #t\n                                                          (if (=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                              #t\n          \
    \                                                    (if (= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n       \
    \                                                           #t\n             \
    \                                                     (if (= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                      #t", " \
    \ (define (is-power? n)\n    (cond [(= n 1) #t]\n          [(= n x) #t]\n    \
    \      [(> n x) #f]\n          [else (is-power? (* n n))]))\n  (is-power? n))\n",
  "  (and (integer? x)\n       (integer? n)\n       (not (zero? n))\n       (not (zero?\
    \ x))\n       (integer? (log x n))))\n", "  (if (= 1 n)\n      (= 1 x)\n     \
    \ (if (= x n)\n          #t\n          (if (= 0 (modulo x n))\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n", "  (let ([x (exact->inexact x)])\n    (and\
    \ (integer? x)\n         (integer? n)\n         (not (zero? n))\n         (let\
    \ loop ([i 1])\n           (if (= x (expt n i))\n               #t\n         \
    \      (if (&lt; x (expt n i))\n                   #f\n                   (loop\
    \ (+ i 1))))))))\n</code>\n", "  (if (= x 1)\n      true\n      (if (= x n)\n\
    \          true\n          (if (= x (* n n))\n              true\n           \
    \   (if (= x (* n (* n n)))\n                  true\n                  (if (=\
    \ x (* n (* n (* n n))))\n                      true\n                      (if\
    \ (= x (* n (* n (* n (* n n)))))\n                          true\n          \
    \                (if (= x (* n (* n (* n (* n (* n n))))))\n                 \
    \             true\n                              (if (= x (* n (* n (* n (* n\
    \ (* n (* n n)))))))\n                                  true\n               \
    \                   (if (= x (* n (* n (* n (* n (* n (* n (* n n))))))))\n  \
    \                                    true\n                                  \
    \    (if (= x (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))\n           \
    \                               true\n                                       \
    \   (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n      \
    \                                        true\n                              \
    \                (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n\
    \                                                  true\n                    \
    \                              (if (= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n n)))))))))))\n                                            \
    \          true\n                                                      (if (=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))\n\
    \                                                          true\n            \
    \                                              (if (= x (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                 \
    \                                             true\n                         \
    \                                     (if (= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                      \
    \                                            true\n                          \
    \                                        (if (= x (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n            \
    \                                                          true\n            \
    \                                                          (if (= x (* n (* n\
    \ (* n (* n", "  (define (is-power-of? n x)\n    (if (= x 1)\n        #t\n   \
    \     (if (= (modulo x n) 0)\n            (is-power-of? n (/ x n))\n         \
    \   #f)))\n  (is-power-of? n x))\n", "  (if (zero? x)\n      #f\n      (if (zero?\
    \ (remainder x n))\n          (if (zero? (remainder (log x) (log n)))\n      \
    \        #t\n              #f)\n          #f)))\n", "  (define (is-power-of? x\
    \ n)\n    (cond\n      [(= n 1) true]\n      [(= x 1) false]\n      [(= (modulo\
    \ x n) 0) (is-power-of? (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n",
  "  (if (= x 1)\n      #t\n      (if (= (expt n (round (log x n))) x)\n         \
    \ #t\n          #f)))\n", "  (let loop ([i 1])\n    (if (= x (expt n i))\n   \
    \     #t\n        (if (< x (expt n i))\n            #f\n            (loop (+ i\
    \ 1))))))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) true]\n         \
    \ [(= x n) true]\n          [(< x n) false]\n          [else (loop (quotient x\
    \ n) n)])))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n  \
    \        (is_simple_power (/ x n) n)\n          #f)))\n", "  (define (is-power?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (remainder x n) 0)\n     \
    \       (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n", "  (define\
    \ (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n)\
    \ 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (if (= x 1)\n      true\n      (if (= (remainder x n) 0)\n    \
    \      (is_simple_power (/ x n) n)\n          false)))\n", "  (and (not (= x 1))\n\
    \       (not (= n 1))\n       (or (= x n)\n           (and (not (= (modulo x n)\
    \ 0))\n                (is_simple_power (expt n (floor (/ (log x) (log n)))) n)))))\n",
  "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (if (= x 1)\n      #t\n      (if (= n 1)\n          #f\n      \
    \    (if (= (expt n (floor (log x n))) x)\n              #t\n              #f))))\n",
  "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (define (is-power? x n)\n    (if (= x 1) #t\n        (if (= (remainder x n) 0)\
    \ (is-power? (/ x n) n) #f)))\n  (is-power? x n))\n", "  (define (is-power-of?\
    \ x n)\n    (if (= x 1)\n        true\n        (if (= (modulo x n) 0)\n      \
    \      (is-power-of? (/ x n) n)\n            false)))\n  (is-power-of? x n))\n",
  "  (define (is_simple_power-helper x n)\n    (if (= x 1)\n        #t\n        (if\
    \ (= (remainder x n) 0)\n            (is_simple_power-helper (/ x n) n)\n    \
    \        #f)))\n  (if (= x n)\n      #t\n      (is_simple_power-helper x n)))\n",
  "  (define (is-power-of? n x)\n    (if (= n 1)\n        true\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? n (/ x n))\n            false)))\n  (is-power-of?\
    \ n x))\n", "  (let loop ([x x] [n n])\n    (cond\n      [(= x 1) true]\n    \
    \  [(= x n) true]\n      [(< x n) false]\n      [else (loop (/ x n) n)])))\n",
  "  (define (is_simple_power-iter x n i)\n    (cond\n      [(= x n) true]\n     \
    \ [(> x n) (is_simple_power-iter x n (* i n))]\n      [else false]))\n  (is_simple_power-iter\
    \ x n n))\n", "  (define (is_simple_power-iter x n i)\n    (cond\n      [(= x\
    \ 1) #t]\n      [(= x n) #t]\n      [(= x (* n i)) #t]\n      [(> x (* n i)) (is_simple_power-iter\
    \ x n (+ i 1))]\n      [else #f]))\n  (is_simple_power-iter x n 1))\n", "  (and\
    \ (not (= x 1))\n       (not (= n 1))\n       (not (= x n))\n       (not (= (expt\
    \ n (round (log x n))) x))))\n", "  (if (= x 1)\n      #t\n      (if (= (expt\
    \ n (exact-floor (log x n))) x)\n          #t\n          #f)))\n", "  (and (not\
    \ (= x 1))\n       (not (= n 1))\n       (not (= x 0))\n       (not (= n 0))\n\
    \       (not (= x n))\n       (not (= (expt n (round (/ (log x) (log n)))) x))))\n",
  "  (and (not (= x 1))\n       (not (= n 1))\n       (or (= x n)\n           (and\
    \ (not (= (modulo x n) 0))\n                (is_simple_power (expt n 2) n)))))\n",
  "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (if (= x\
    \ 1)\n      #t\n      (is-power-of? x n)))\n", "  (if (= 1 x)\n      #t\n    \
    \  (if (= x (expt n (round (log x n))))\n          #t\n          #f)))\n", " \
    \ (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (if (zero? x)\n      #f\n      (if (zero? (modulo x n))\n     \
    \     (is_simple_power (/ x n) n)\n          (if (= x n)\n              #t\n \
    \             #f))))\n</code>\nI'm not sure if this is the best way to do it,\
    \ but it works.\n\n\nA:\n\nYour code is correct, but it can be simplified a bit.\n\
    First, you can use <code>and</code> instead of nested <code>if</code>s:\n<code>(define\
    \ (is_simple_power x n)\n  (and (not (zero? x))\n       (or (zero? (modulo x n))\n\
    \           (and (= x n)\n                #t))))\n</code>\nSecond, you can use\
    \ <code>cond</code> instead of <code>and</code> and <code>or</code>:\n<code>(define\
    \ (is_simple_power x n)\n  (cond [(zero? x) #f]\n        [(zero? (modulo x n))\
    \ (is_simple_power (/ x n) n)]\n        [(= x n) #t]\n        [else #f]))\n</code>\n",
  "  (define (is_power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is_power? (/ x n) n)\n            #f)))\n  (is_power?\
    \ x n))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n      \
    \    (is_simple_power (/ x n) n)\n          #f)))\n", "  (define (is_simple_power-helper\
    \ x n)\n    (if (= x 1)\n        true\n        (if (= (remainder x n) 0)\n   \
    \         (is_simple_power-helper (/ x n) n)\n            false)))\n  (if (= x\
    \ n)\n      true\n      (is_simple_power-helper x n)))\n", "  (define (is_power?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is_power? (/ x n) n)\n            #f)))\n  (is_power? x n))\n", "  (define\
    \ (is_simple_power-helper x n i)\n    (cond\n      [(= x 1) #t]\n      [(= x n)\
    \ #t]\n      [(= x (* n i)) #t]\n      [else (is_simple_power-helper x n (+ i\
    \ 1))]))\n  (is_simple_power-helper x n 2))\n", "  (define (is-power-of? x n)\n\
    \    (if (= x 1)\n        true\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            false)))\n  (is-power-of? x n))\n", "  (define (is_power?\
    \ x n)\n    (cond [(= x 1) true]\n          [(= x n) true]\n          [(= (remainder\
    \ x n) 0) (is_power? (/ x n) n)]\n          [else false]))\n  (is_power? x n))\n",
  "  (define (is-power-of? x n)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n\
    \      [(< x n) false]\n      [else (is-power-of? (/ x n) n)]))\n  (is-power-of?\
    \ x n))\n", "  (define (is_simple_power_helper x n)\n    (cond\n      [(= n 1)\
    \ true]\n      [(= x n) true]\n      [(= x 1) false]\n      [(= x 0) false]\n\
    \      [(< x n) false]\n      [else (is_simple_power_helper (/ x n) n)]))\n  (is_simple_power_helper\
    \ x n))\n", "  (define (is-power? x n)\n    (if (= x 1)\n        true\n      \
    \  (if (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n            false)))\n\
    \  (is-power? x n))\n", "  (define (is-power? x n)\n    (cond\n      [(= x 1)\
    \ true]\n      [(= x n) true]\n      [(< x n) false]\n      [else (is-power? (/\
    \ x n) n)]))\n  (is-power? x n))\n", "  (define (is-power? x n)\n    (if (= x\
    \ 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power? (/ x\
    \ n) n)\n            #f)))\n  (is-power? x n))\n", "  (let loop ([x x] [n n])\n\
    \    (cond [(= x 1) true]\n          [(= x n) true]\n          [(> x n) (loop\
    \ x (* n n))]\n          [else false])))\n", "  (let ([p (expt n (integer-sqrt\
    \ x))])\n    (and (= x (* p p))\n         (= x (expt p n)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
