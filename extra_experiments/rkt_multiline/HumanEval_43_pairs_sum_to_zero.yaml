name: HumanEval_43_pairs_sum_to_zero
language: rkt
prompt: "#lang racket\n\n#| pairs_sum_to_zero takes a list of integers as an input.\n\
  it returns #t if there are two distinct elements in the list that\nsum to zero,\
  \ and #f otherwise.\n>>> (pairs_sum_to_zero (list 1 3 5 0))\n#f\n>>> (pairs_sum_to_zero\
  \ (list 1 3 -2 1))\n#f\n>>> (pairs_sum_to_zero (list 1 2 3 7))\n#f\n>>> (pairs_sum_to_zero\
  \ (list 2 4 -5 3 5 7))\n#t\n>>> (pairs_sum_to_zero (list 1))\n#f|#\n(define (pairs_sum_to_zero\
  \ l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
  \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
  \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal?\
  \ (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n\
  \    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate\
  \ (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30))\
  \ #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (sub1 (first l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (first (rest l))) (rest (rest l))) #t]\n    [else\
    \ (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(member\
    \ (first l) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= 0 (abs (- (first l) (first\
    \ (rest l))))) #t]\n    [else (or (pairs_sum_to_zero (rest l))\n             \
    \ (pairs_sum_to_zero (rest (rest l))))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first (rest l))) 0) #t]\n\
    \    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(member (add1 (first l)) (rest l)) #t]\n   \
    \ [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n  \
    \  [(empty? (rest l)) #f]\n    [(member (- (first l) (first (rest l))) (rest (rest\
    \ l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (define (helper l)\n\
    \    (cond\n      [(empty? l) #f]\n      [(member (first l) (rest l)) #t]\n  \
    \    [else (helper (rest l))]))\n  (helper l))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(member (- (first l) (first (rest l))) (rest\
    \ (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n   \
    \ [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first\
    \ l) (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (not (zero? (car\
    \ l)))) #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l) (rest l)) (rest\
    \ l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l) (rest l)) (rest\
    \ l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first (rest\
    \ l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l) (rest l)) (rest\
    \ l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first (rest\
    \ l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l) (rest l)) (rest\
    \ l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty? l)\
    \ #f]\n        [(empty? (rest l)) #f]\n        [(= (sum (first l) (first (rest\
    \ l))) 0) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (first l) (rest l))\
    \ #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first (rest l))) 0)\
    \ #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty? l) #f]\n\
    \        [(empty? (rest l)) #f]\n        [(= (sum (first l) (first (rest l)))\
    \ 0) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (define (helper\
    \ l)\n    (cond\n      [(empty? l) #f]\n      [(member (sub1 (first l)) (rest\
    \ l)) #t]\n      [else (helper (rest l))]))\n  (helper l))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first (rest l)))\
    \ (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(member (zero? (- (first l) (first\
    \ (rest l)))) l) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(member (first l) (rest\
    \ l)) #t]\n      [else (helper (rest l))]))\n  (helper l))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first (rest l)))\
    \ 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(= (first l) (- (first (rest l))))\
    \ #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(empty? (rest l)) #f]\n    [(zero? (add (first l) (first (rest l))))\
    \ #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l) (first (rest l)))\
    \ (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= 0 (list-ref l 0)) #t]\n\
    \    [(= 0 (list-ref (rest l) 0)) #t]\n    [(member (list-ref l 0) (rest l)) #t]\n\
    \    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(member (sum (first l) (second l)) (rest (rest\
    \ l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l) (rest l)) (rest\
    \ l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first (rest l)))\
    \ (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n```\n\n```racket\n\
    #lang racket\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n \
    \   [(member (sum (first l) (first (rest l))) (rest (rest l))) #t]\n    [else\
    \ (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty?\
    \ (rest l)) #f]\n    [(member? (- (first l) (first (rest l))) (rest (rest l)))\
    \ #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first (rest l)))\
    \ (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first\
    \ l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (add1 (first l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond [(empty? l) #f]\n        [(and (member (car l) (cdr l))\n\
    \              (not (zero? (car l)))) #t]\n        [else (pairs_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (sub1 (first l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (add1 (first l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (sub1 (first l) (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (sub1 (first l) (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (sub1 (first l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(= (first l) (- (first (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n```\n\n## Problem 2\n\n```racket\n#lang racket\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first\
    \ l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member? (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else\
    \ (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty?\
    \ (rest l)) #f]\n    [(member (sub1 (first l) (rest l)) (rest l)) #t]\n    [else\
    \ (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty?\
    \ (rest l)) #f]\n    [(member (sum (first l) (first (rest l))) (rest (rest l)))\
    \ #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty? l) #f]\n\
    \        [(empty? (rest l)) #f]\n        [(= (first l) (- (first (rest l)))) #t]\n\
    \        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(= (length l) 1) #f]\n    [(= (length l) 2) (or (= (first l) 0) (= (second\
    \ l) 0))]\n    [else\n     (or (pairs_sum_to_zero (rest l))\n         (pairs_sum_to_zero\
    \ (rest (rest l)))\n         (pairs_sum_to_zero (append (list (first l)) (rest\
    \ (rest l))))\n         (pairs_sum_to_zero (append (list (second l)) (rest (rest\
    \ l))))\n         (pairs_sum_to_zero (append (list (first l) (second l)) (rest\
    \ (rest (rest l))))))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest\
    \ l)) #f]\n    [(member (sub1 (first l) (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(and (member (add1 (first l)) (rest l))\n          (not (member (sub1 (first\
    \ l)) (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n```\n\n### Exercise\
    \ 2\n\n```racket\n#lang racket\n", "  (define (helper l)\n    (cond\n      [(empty?\
    \ l) #f]\n      [(member (car l) (cdr l)) #t]\n      [else (helper (cdr l))]))\n\
    \  (helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(= (sum (first l) (first (rest l))) 0) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(zero? (+ (first l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(zero? (add (first l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(zero? (+ (first l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(= 0 (abs (first l))) #t]\n    [(member (abs (first l)) (rest l)) #t]\n\
    \    [else (pairs_sum_to_zero (rest l))]))\n", "  (define (helper l)\n    (cond\n\
    \      [(empty? l) #f]\n      [(member (sub1 (first l)) (rest l)) #t]\n      [else\
    \ (helper (rest l))]))\n  (helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(empty?\
    \ (rest l)) #f]\n    [(member (sub1 (first l) (second l)) (rest (rest l))) #t]\n\
    \    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(member (sub1 (first l) (first (rest l))) (rest\
    \ (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty?\
    \ l) #f]\n        [(empty? (rest l)) #f]\n        [(= (sum (first l) (first (rest\
    \ l))) 0) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first\
    \ l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(=\
    \ (first l) (- (first (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (first l) (first\
    \ (rest l))) #f]\n    [(= (first l) (- (first (rest l)))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(zero? (sum (first l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(= (sum (first l) (first (rest l))) 0) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (define (helper l)\n    (cond\n      [(empty? l) #f]\n \
    \     [(member (first l) (rest l)) #t]\n      [else (helper (rest l))]))\n  (helper\
    \ l))\n", "  (cond\n    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(member\
    \ (- (first l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(= (sum (first l) (first (rest l))) 0) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (add1 (first l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(= (length l) 1) #f]\n\
    \    [(member (car l) (cdr l)) #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first\
    \ l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first\
    \ l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (add (first\
    \ l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first\
    \ l) (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(member (first l) (rest l)) #t]\n    [else\
    \ (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty?\
    \ (rest l)) #f]\n    [(member (sub1 (first l) (second l)) (rest (rest l))) #t]\n\
    \    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(member (- (first l) (first (rest l))) (rest\
    \ (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n```\n\n## Problem\
    \ 2\n\n```racket\n#lang racket\n", "  (cond\n    [(empty? l) #f]\n    [(empty?\
    \ (rest l)) #f]\n    [(= (sum (first l) (first (rest l))) 0) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(zero? (sum (first l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (add1 (first l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(=\
    \ 0 (+ (first l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first\
    \ l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l))\n          (or (= (car l) 0)\n              (= (cadr l) 0)))\n     #t]\n\
    \    [else (pairs_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(member (add1 (first l)) (rest l)) #t]\n   \
    \ [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(null? l) #f]\n   \
    \ [(null? (cdr l)) #f]\n    [(member (- (car l) (car (cdr l))) (cdr (cdr l)))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l) (second l)) (rest\
    \ (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty?\
    \ l) #f]\n        [(empty? (rest l)) #f]\n        [(= 0 (abs (first l))) #t]\n\
    \        [else (or (pairs_sum_to_zero (rest l))\n                  (pairs_sum_to_zero\
    \ (append (rest l) (list (first l)))))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(member (sub1 (first l) (rest l)) (rest l))\
    \ #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first (rest l)))\
    \ (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first (rest l)))\
    \ (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first\
    \ l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first\
    \ l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (sub1 (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(zero? (+ (first l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (add1 (first l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (sub1 (first l) (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(=\
    \ (zero? (sum (first l) (first (rest l)))) #t) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(= (sum (first l) (first (rest l))) 0) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(empty? l) #f]\n        [(and (member (car l) (cdr\
    \ l))\n              (or (zero? (car l))\n                  (zero? (cadr l))))\n\
    \         #t]\n        [else (pairs_sum_to_zero (cdr l))]))\n", "  (cond\n   \
    \ [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (abs (first l))\
    \ (abs (second l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member? (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first\
    \ l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first\
    \ l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero?\
    \ (sum (first l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(member (first l) (rest l)) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (zero? (- (first l) (first (rest l)))) l) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(zero? (add (first l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(= (sum (first l) (first (rest l))) 0) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(= (first l) (first (rest l))) #f]\n    [(= (first l) (- (first (rest l))))\
    \ #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first (rest l))) 0)\
    \ #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first (rest l)))\
    \ (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (abs (first l)) (abs (second\
    \ l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (define (helper l)\n\
    \    (cond\n      [(empty? l) #f]\n      [(member (first l) (rest l)) #t]\n  \
    \    [else (helper (rest l))]))\n  (helper l))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(member (first l) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first\
    \ l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (sub1 (first l) (rest l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n```\n\n### Exercise 4\n\n```racket\n#lang racket\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= 0 (abs (first l))) #t]\n\
    \    [(member (abs (first l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond [(empty? l) #f]\n        [(empty? (rest l)) #f]\n      \
    \  [(zero? (+ (first l) (first (rest l)))) #t]\n        [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(zero? (add1 (first l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (add1 (first l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(member (first l) (rest l)) #t]\n\
    \    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first (rest l))) 0) #t]\n\
    \    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty? l) #f]\n    \
    \    [(empty? (rest l)) #f]\n        [(= (sum (first l) (first (rest l))) 0) #t]\n\
    \        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(member (sub1 (first l) (second l)) (rest (rest\
    \ l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (add (first l) (first (rest\
    \ l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first (rest l)))\
    \ (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= 0 (abs (first l))) #t]\n\
    \    [(member (- (first l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member\
    \ (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(zero? (+ (first l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(= 0 (abs (first l))) #t]\n    [(member (abs (first l)) (rest l)) #t]\n\
    \    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(member (sum (first l) (first (rest l))) (rest\
    \ (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n   \
    \ [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l)\
    \ (first (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond [(empty? l) #f]\n        [(empty? (rest l)) #f]\n        [(= (sum (first\
    \ l) (first (rest l))) 0) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first\
    \ l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (add1 (first\
    \ l) (second l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty?\
    \ l) #f]\n        [(empty? (rest l)) #f]\n        [(= (first l) (- (second l)))\
    \ #t]\n        [else (or (pairs_sum_to_zero (rest l))\n                  (pairs_sum_to_zero\
    \ (rest (rest l))))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l))\
    \ #f]\n    [(zero? (add (first l) (first (rest l)))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sub1 (first l) (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(= (sum (first l) (first (rest l))) 0) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (- (first l) (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(= (sum (first l) (first (rest l))) 0) #t]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond [(empty? l) #f]\n        [(empty? (rest l)) #f]\n\
    \        [(zero? (+ (first l) (first (rest l)))) #t]\n        [else (pairs_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(member (sum (first l) (first (rest l))) (rest (rest l))) #t]\n    [else\
    \ (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty?\
    \ (rest l)) #f]\n    [(or (member? (- (first l) (first (rest l))) (rest (rest\
    \ l)))\n         (member? (+ (first l) (first (rest l))) (rest (rest l)))) #t]\n\
    \    [else (pairs_sum_to_zero (rest l))]))\n", "  (cond [(empty? l) #f]\n    \
    \    [(empty? (rest l)) #f]\n        [(= (sum (first l) (first (rest l))) 0) #t]\n\
    \        [else (pairs_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(member (- (first l) (first (rest l))) (rest\
    \ (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
