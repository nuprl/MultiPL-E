name: HumanEval_87_get_row
language: rkt
prompt: "#lang racket\n\n#| You are given a 2 dimensional data, as a nested lists,\n\
  which is similar to matrix, however, unlike matrices,\neach row may contain a different\
  \ number of columns.\nGiven lst, and integer x, find integers x in the list,\nand\
  \ return list of lists, [(x1, y1), (x2, y2) ...] such that\neach list is a coordinate\
  \ - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending\
  \ order.\nAlso, sort coordinates of the row by columns in descending order.\nExamples:\n\
  >>> (get_row (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1)\n\
  (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0))\n>>> (get_row (list\
  \ ) 1)\n(list )\n>>> (get_row (list (list ) (list 1) (list 1 2 3)) 3)\n(list (list\
  \ 2 2))|#\n(define (get_row lst x)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_row))\n\
  \    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list\
  \ 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)))\n\
  \    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list\
  \ 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list\
  \ (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)))\n    (check-equal?\
  \ (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list\
  \ 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list\
  \ (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list\
  \ 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)))\n    (check-equal? (candidate\
  \ (list ) 1) (list ))\n    (check-equal? (candidate (list (list 1)) 2) (list ))\n\
  \    (check-equal? (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list\
  \ 2 2)))\n))\n\n(test-humaneval)"
completions: ["  (define (get-row-helper lst x row col)\n    (cond ((null? lst) '())\n\
    \          ((null? (car lst)) (get-row-helper (cdr lst) x (+ row 1) 0))\n    \
    \      ((= x (car (car lst))) (cons (list row col) (get-row-helper (cdr (car lst))\
    \ x row (+ col 1))))\n          (else (get-row-helper (cdr (car lst)) x row (+\
    \ col 1)))))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n  \
    \        (cond ((< (car l1) (car l2)) #t)\n                ((> (car l1) (car l2))\
    \ #f)\n                ((> (cadr l1) (cadr l2)) #t)\n                ((< (cadr\
    \ l1) (cadr l2)) #f)\n                (else #f)))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (helper lst x row col)\n    (cond\n\
    \      [(empty? lst) (list)]\n      [(empty? (first lst)) (helper (rest lst) x\
    \ (add1 row) col)]\n      [(equal? x (first (first lst)))\n       (append (list\
    \ (list row col)) (helper (rest lst) x row (add1 col)))]\n      [else (helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (helper lst x 0 0)\n        (lambda\
    \ (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n     \
    \       [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second l2))\
    \ #t]\n            [(< (second l1) (second l2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get-row-helper\
    \ (cdr lst) x))\n          ((equal? x (car (car lst))) (cons (list (length lst)\
    \ (length (car lst))) (get-row-helper (cdr lst) x)))\n          (else (get-row-helper\
    \ (cdr lst) x))))\n  (sort (get-row-helper lst x)\n        (lambda (l1 l2)\n \
    \         (cond ((< (car l1) (car l2)) #t)\n                ((> (car l1) (car\
    \ l2)) #f)\n                ((> (cadr l1) (cadr l2)) #t)\n                ((<\
    \ (cadr l1) (cadr l2)) #f)\n                (else #f)))))\n```\n\n```racket\n\
    #lang racket\n", "  (define (helper lst x acc)\n    (cond\n      [(empty? lst)\
    \ (reverse acc)]\n      [(member x (first lst)) (helper (rest lst) x (append (map\
    \ (lambda (y) (list (length lst) y)) (get-indexes (first lst) x)) acc))]\n   \
    \   [else (helper (rest lst) x acc)]))\n  (define (get-indexes lst x)\n    (define\
    \ (helper lst x acc)\n      (cond\n        [(empty? lst) (reverse acc)]\n    \
    \    [(= x (first lst)) (helper (rest lst) x (cons (length lst) acc))]\n     \
    \   [else (helper (rest lst) x acc)]))\n    (helper lst x (list)))\n  (sort (sort\
    \ (helper lst x (list)) <) >))\n", "  (cond [(empty? lst) empty]\n        [(empty?\
    \ (first lst)) (get_row (rest lst) x)]\n        [(equal? x (first (first lst)))\n\
    \         (append (list (list (sub1 (length lst)) (sub1 (length (first lst)))))\n\
    \                 (get_row (rest lst) x))]\n        [else (get_row (rest lst)\
    \ x)]))\n", "  (define (helper lst x row col)\n    (cond\n      [(empty? lst)\
    \ (list)]\n      [(empty? (first lst)) (helper (rest lst) x (add1 row) col)]\n\
    \      [(equal? x (first (first lst)))\n       (cons (list row col) (helper (rest\
    \ lst) x row (add1 col)))]\n      [else (helper (rest lst) x row (add1 col))]))\n\
    \  (sort (helper lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n      \
    \      [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first l2))\
    \ #f]\n            [(> (second l1) (second l2)) #t]\n            [(< (second l1)\
    \ (second l2)) #f]\n            [else #f]))))\n", "  (define (get-row-helper lst\
    \ x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (add1 row) col)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get-row-helper lst x result)\n\
    \    (if (null? lst)\n        result\n        (get-row-helper (cdr lst) x (append\
    \ result (get-row-helper2 (car lst) x 0 (length lst))))))\n  (define (get-row-helper2\
    \ lst x row-number row-length)\n    (if (null? lst)\n        (list)\n        (if\
    \ (= x (car lst))\n            (cons (list row-number row-length) (get-row-helper2\
    \ (cdr lst) x row-number (- row-length 1)))\n            (get-row-helper2 (cdr\
    \ lst) x row-number (- row-length 1)))))\n  (sort (get-row-helper lst x (list))\
    \ (lambda (l1 l2) (or (< (car l1) (car l2)) (and (= (car l1) (car l2)) (> (cadr\
    \ l1) (cadr l2)))))))\n", "  (define (get-row-helper lst x row col)\n    (cond\
    \ [(empty? lst) '()]\n          [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x (add1 row) col)]\n          [(equal? x (first (first lst)))\n           (cons\
    \ (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n          [else\
    \ (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst\
    \ x 0 0)\n        (lambda (l1 l2)\n          (cond [(< (first l1) (first l2))\
    \ #t]\n                [(> (first l1) (first l2)) #f]\n                [(> (second\
    \ l1) (second l2)) #t]\n                [(< (second l1) (second l2)) #f]))))\n",
  "  (define (get-row-helper lst x row col result)\n    (cond\n      [(empty? lst)\
    \ result]\n      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1)\
    \ 0 result)]\n      [(= x (first (first lst)))\n       (get-row-helper (rest (first\
    \ lst)) x row (+ col 1) (cons (list row col) result))]\n      [else (get-row-helper\
    \ (rest (first lst)) x row (+ col 1) result)]))\n  (sort (get-row-helper lst x\
    \ 0 0 '())\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n\
    \      [(empty? lst) '()]\n      [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n       (cons (list\
    \ row col) (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (add1 row) col)]\n \
    \     [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get_row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond [(empty? lst) '()]\n          [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (add1 row) 0)]\n          [(equal? x (first (first\
    \ lst)))\n           (cons (list row col) (get-row-helper (rest lst) x row (add1\
    \ col)))]\n          [else (get-row-helper (rest lst) x row (add1 col))]))\n \
    \ (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n          (cond [(<\
    \ (first l1) (first l2)) #t]\n                [(> (first l1) (first l2)) #f]\n\
    \                [(> (second l1) (second l2)) #t]\n                [(< (second\
    \ l1) (second l2)) #f]))))\n", "  (define (get-row-helper lst x row col)\n   \
    \ (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list\
    \ row col) (get-row-helper (rest lst) x row (+ col 1)))]\n      [else (get-row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n       \
    \ (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty?\
    \ (first lst)) (helper (rest lst) x acc)]\n      [(= x (first (first lst))) (helper\
    \ (rest lst) x (cons (list (length acc) (length (first lst))) acc))]\n      [else\
    \ (helper (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (helper lst\
    \ x (list)) (lambda (x y) (or (< (first x) (first y)) (and (= (first x) (first\
    \ y)) (> (second x) (second y)))))))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(empty? (first lst)) (get_row (rest lst) x)]\n    [(empty? (rest lst)) (get_row\
    \ (rest lst) x)]\n    [else\n     (append\n      (get_row (rest lst) x)\n    \
    \  (get_row (first lst) x)\n      (get_row (rest lst) x))]))\n", "  (define (get-row-helper\
    \ lst x result)\n    (cond\n      [(empty? lst) result]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x result)]\n      [(= x (first (first lst)))\n\
    \       (get-row-helper (rest lst) x (append result (list (list (length result)\
    \ 0))))]\n      [else (get-row-helper (rest lst) x (append result (list (list\
    \ (length result) (length (first lst))))))]))\n  (define (sort-by-row lst)\n \
    \   (sort lst (lambda (lst1 lst2)\n                (< (first lst1) (first lst2)))))\n\
    \  (define (sort-by-column lst)\n    (sort lst (lambda (lst1 lst2)\n         \
    \       (> (second lst1) (second lst2)))))\n  (sort-by-column (sort-by-row (get-row-helper\
    \ lst x '()))))\n", "  (define (get-row-helper lst x)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(empty? (first lst)) (get-row-helper (rest lst) x)]\n  \
    \    [(equal? x (first (first lst)))\n       (cons (list (length lst) (length\
    \ (first lst)))\n             (get-row-helper (rest lst) x))]\n      [else (get-row-helper\
    \ (rest lst) x)]))\n  (sort (get-row-helper lst x)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (define (helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty?\
    \ (first lst)) (helper (rest lst) x acc)]\n      [(= x (first (first lst))) (helper\
    \ (rest lst) x (cons (list (length acc) (length (first lst))) acc))]\n      [else\
    \ (helper (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (helper lst\
    \ x (list))\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get-row-helper lst x row col\
    \ result)\n    (if (null? lst)\n        result\n        (if (null? (car lst))\n\
    \            (get-row-helper (cdr lst) x (+ row 1) col result)\n            (if\
    \ (member x (car lst))\n                (get-row-helper (cdr lst) x (+ row 1)\
    \ col\n                                (append result (list (list row col))))\n\
    \                (get-row-helper (cdr lst) x (+ row 1) (+ col 1) result)))))\n\
    \  (sort (get-row-helper lst x 0 0 '())\n        (lambda (l1 l2)\n          (if\
    \ (= (car l1) (car l2))\n              (> (cadr l1) (cadr l2))\n             \
    \ (< (car l1) (car l2))))))\n", "  (define (get-row-helper lst x row col result)\n\
    \    (cond\n      [(empty? lst) result]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (+ row 1) 0 result)]\n      [(= x (first (first lst)))\n      \
    \ (get-row-helper (rest (first lst)) x row (+ col 1) (cons (list row col) result))]\n\
    \      [else (get-row-helper (rest (first lst)) x row (+ col 1) result)]))\n \
    \ (get-row-helper lst x 0 0 (list)))\n", "  (define (get-row-helper lst x row-num)\n\
    \    (cond\n      [(null? lst) (list)]\n      [(null? (car lst)) (get-row-helper\
    \ (cdr lst) x (+ row-num 1))]\n      [(equal? x (car (car lst)))\n       (append\
    \ (list (list row-num 0))\n               (get-row-helper (cdr (car lst)) x row-num)\n\
    \               (get-row-helper (cdr lst) x (+ row-num 1)))]\n      [else (get-row-helper\
    \ (cdr (car lst)) x row-num)]))\n  (sort (get-row-helper lst x 0)\n        (lambda\
    \ (lst1 lst2)\n          (cond\n            [(< (car lst1) (car lst2)) #t]\n \
    \           [(> (car lst1) (car lst2)) #f]\n            [(> (cadr lst1) (cadr\
    \ lst2)) #t]\n            [(< (cadr lst1) (cadr lst2)) #f]\n            [else\
    \ #f]))))\n", "  (define (get-row-helper lst x row col)\n    (cond ((null? lst)\
    \ '())\n          ((null? (car lst)) (get-row-helper (cdr lst) x (+ row 1) 0))\n\
    \          ((equal? x (car (car lst)))\n           (cons (list row col) (get-row-helper\
    \ (cdr (car lst)) x row (+ col 1))))\n          (else (get-row-helper (cdr (car\
    \ lst)) x row (+ col 1)))))\n  (sort (get-row-helper lst x 0 0)\n        (lambda\
    \ (lst1 lst2)\n          (cond ((< (car lst1) (car lst2)) #t)\n              \
    \  ((> (car lst1) (car lst2)) #f)\n                ((> (cadr lst1) (cadr lst2))\
    \ #t)\n                ((< (cadr lst1) (cadr lst2)) #f)\n                (else\
    \ #f)))))\n", "  (cond\n    [(empty? lst) empty]\n    [(empty? (first lst)) (get_row\
    \ (rest lst) x)]\n    [(equal? x (first (first lst)))\n     (append (list (list\
    \ (length lst) (length (first lst))))\n             (get_row (rest lst) x))]\n\
    \    [else (get_row (rest lst) x)]))\n", "  (define (helper lst x acc)\n    (cond\n\
    \      [(empty? lst) acc]\n      [(empty? (first lst)) (helper (rest lst) x acc)]\n\
    \      [(= x (first (first lst))) (helper (rest lst) x (cons (list (length acc)\
    \ (length (first lst))) acc))]\n      [else (helper (rest lst) x (cons (list (length\
    \ acc) 0) acc))]))\n  (sort (helper lst x (list))\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(> (first lst1) (first lst2)) #t]\n           \
    \ [(< (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #f]\n            [(< (second lst1) (second lst2)) #t]\n            [else #f]))))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(empty? (first lst)) (get_row (rest lst)\
    \ x)]\n    [(equal? x (first (first lst)))\n     (append (list (list (sub1 (length\
    \ lst)) (sub1 (length (first lst)))))\n             (get_row (rest lst) x))]\n\
    \    [else (get_row (rest lst) x)]))\n", "  (define (get-row-helper lst x row\
    \ col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (+ row 1) 0)]\n      [(equal? x (first (first lst)))\n       (cons\
    \ (list row col) (get-row-helper (rest lst) x row (+ col 1)))]\n      [else (get-row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n       \
    \ (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (helper lst x)\n    (cond\n      [(empty? lst) empty]\n      [(empty?\
    \ (first lst)) (helper (rest lst) x)]\n      [(equal? x (first (first lst)))\n\
    \       (cons (list (length lst) (length (first lst)))\n             (helper (rest\
    \ lst) x))]\n      [else (helper (rest lst) x)]))\n  (sort (helper lst x)\n  \
    \      (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2))\
    \ #t]\n            [(> (first l1) (first l2)) #f]\n            [(> (second l1)\
    \ (second l2)) #t]\n            [(< (second l1) (second l2)) #f]\n           \
    \ [else #f]))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n   \
    \   [(empty? lst) empty]\n      [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x (+ row 1) 0)]\n      [(equal? x (first (first lst)))\n       (cons (list row\
    \ col) (get-row-helper (rest lst) x row (+ col 1)))]\n      [else (get-row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n       \
    \ (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [(< (second lst1) (second lst2)) #f]))))\n",
  "  (define (get-row-helper lst x row-num)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row-num 1))]\n  \
    \    [(member x (first lst))\n       (append (list (list row-num (index-of x (first\
    \ lst))))\n               (get-row-helper (rest lst) x (+ row-num 1)))]\n    \
    \  [else (get-row-helper (rest lst) x (+ row-num 1))]))\n  (sort (get-row-helper\
    \ lst x 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(= (first\
    \ lst1) (first lst2))\n             (< (second lst1) (second lst2))]\n       \
    \     [else (< (first lst1) (first lst2))]))))\n", "  (define (helper lst x acc)\n\
    \    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (helper (rest\
    \ lst) x acc)]\n      [(equal? x (first (first lst)))\n       (helper (rest lst)\
    \ x (cons (list (length acc) 0) acc))]\n      [(equal? x (first (rest (first lst))))\n\
    \       (helper (rest lst) x (cons (list (length acc) 1) acc))]\n      [(equal?\
    \ x (first (rest (rest (first lst)))))\n       (helper (rest lst) x (cons (list\
    \ (length acc) 2) acc))]\n      [else (helper (rest lst) x acc)]))\n  (sort (helper\
    \ lst x (list))\n        (lambda (x y)\n          (cond\n            [(< (first\
    \ x) (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(>\
    \ (second x) (second y)) #t]\n            [(< (second x) (second y)) #f]))))\n",
  "  (sort (map (lambda (y) (list (car y) (cdr y)))\n             (filter (lambda\
    \ (y) (equal? x (car (cdr y))))\n                     (map (lambda (y) (cons (car\
    \ y) (cdr y)))\n                          (filter (lambda (y) (not (null? y)))\n\
    \                                  (map (lambda (y) (cons (car y) (cdr y)))\n\
    \                                       (filter (lambda (y) (not (null? y)))\n\
    \                                               (map (lambda (y) (cons (car y)\
    \ (cdr y)))\n                                                    (filter (lambda\
    \ (y) (not (null? y)))\n                                                     \
    \       (map (lambda (y) (cons (car y) (cdr y)))\n                           \
    \                                      (filter (lambda (y) (not (null? y)))\n\
    \                                                                         (map\
    \ (lambda (y) (cons (car y) (cdr y)))\n                                      \
    \                                        (filter (lambda (y) (not (null? y)))\n\
    \                                                                            \
    \          (map (lambda (y) (cons (car y) (cdr y)))\n                        \
    \                                                                   (filter (lambda\
    \ (y) (not (null? y)))\n                                                     \
    \                                              (map (lambda (y) (cons (car y)\
    \ (cdr y)))\n                                                                \
    \                                        (filter (lambda (y) (not (null? y)))\n\
    \                                                                            \
    \                                    (map (lambda (y) (cons (car y) (cdr y)))\n\
    \                                                                            \
    \                                         (filter (lambda (y) (not (null? y)))\n\
    \                                                                            \
    \                                                 (map (lambda (y) (cons (car\
    \ y) (cdr y)))\n                                                             \
    \                                                                     (filter\
    \ (lambda (y) (not (null? y)))\n                                             \
    \                                                                            \
    \                 (map (lambda (y) (cons (car y) (cdr y)))\n                 \
    \                                                                            \
    \                                                  (filter (lambda (y) (not (null?\
    \ y)))\n                                                                     \
    \                                                                            \
    \      (map (lambda (y) (cons (car y) (cdr y)))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get-row-helper\
    \ (cdr lst) x (+ row 1) 0))\n          ((equal? x (car (car lst)))\n         \
    \  (cons (list row col) (get-row-helper (cdr (car lst)) x row (+ col 1))))\n \
    \         (else (get-row-helper (cdr (car lst)) x row (+ col 1)))))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond ((< (car l1) (car l2))\
    \ #t)\n                ((> (car l1) (car l2)) #f)\n                ((> (cadr l1)\
    \ (cadr l2)) #t)\n                ((< (cadr l1) (cadr l2)) #f)\n             \
    \   (else #f)))))\n", "  (cond [(empty? lst) empty]\n        [(empty? (first lst))\
    \ (get_row (rest lst) x)]\n        [(equal? x (first (first lst)))\n         (append\
    \ (list (list (length lst) (length (first lst))))\n                 (get_row (rest\
    \ lst) x))]\n        [else (get_row (rest lst) x)]))\n", "  (define (get-row-helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x acc)]\n      [(member x (first lst)) (get-row-helper\
    \ (rest lst) x (append acc (list (list (length acc) (index-of x (first lst))))))]\n\
    \      [else (get-row-helper (rest lst) x acc)]))\n  (sort (get-row-helper lst\
    \ x '())\n        (lambda (l1 l2)\n          (cond\n            [(< (first l1)\
    \ (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n            [(>\
    \ (second l1) (second l2)) #t]\n            [(< (second l1) (second l2)) #f]))))\n",
  "  (define (get-row-helper lst x row acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1) acc)]\n  \
    \    [(equal? x (first (first lst)))\n       (get-row-helper (rest lst) x row\
    \ (cons (list row 0) acc))]\n      [else (get-row-helper (rest lst) x row acc)]))\n\
    \  (define (get-col-helper lst x row col acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(empty? (first lst)) (get-col-helper (rest lst) x (+ row 1) 0 acc)]\n\
    \      [(equal? x (first (first lst)))\n       (get-col-helper (rest lst) x row\
    \ (+ col 1) (cons (list row col) acc))]\n      [else (get-col-helper (rest lst)\
    \ x row (+ col 1) acc)]))\n  (define (sort-by-row lst)\n    (sort lst (lambda\
    \ (l1 l2) (< (first l1) (first l2)))))\n  (define (sort-by-col lst)\n    (sort\
    \ lst (lambda (l1 l2) (> (second l1) (second l2)))))\n  (define (sort-by-row-and-col\
    \ lst)\n    (sort-by-row (sort-by-col lst)))\n  (sort-by-row-and-col (get-col-helper\
    \ (get-row-helper lst x 0 (list)) x 0 0 (list))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get-row-helper\
    \ (cdr lst) x (+ row 1) 0))\n          ((equal? x (car (car lst)))\n         \
    \  (cons (list row col) (get-row-helper (cdr (car lst)) x row (+ col 1))))\n \
    \         (else (get-row-helper (cdr (car lst)) x row (+ col 1)))))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond ((< (car l1) (car l2))\
    \ #t)\n                ((> (car l1) (car l2)) #f)\n                ((> (cadr l1)\
    \ (cadr l2)) #t)\n                ((< (cadr l1) (cadr l2)) #f)\n             \
    \   (else #f)))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n \
    \     [(empty? lst) '()]\n      [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n       (cons (list\
    \ row col) (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]))))\n", "  (define (helper\
    \ lst x acc)\n    (if (null? lst)\n        acc\n        (let ([row (car lst)])\n\
    \          (helper (cdr lst) x (append (map (lambda (y) (list (length acc) y))\
    \ (filter (lambda (y) (= x y)) row)) acc)))))\n  (sort (helper lst x '()) (lambda\
    \ (a b) (or (and (= (car a) (car b)) (> (cadr a) (cadr b))) (< (car a) (car b))))))\n",
  "  (define (get-row-helper lst x row col result)\n    (cond\n      [(empty? lst)\
    \ result]\n      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1)\
    \ col result)]\n      [(= x (first (first lst)))\n       (get-row-helper (rest\
    \ (first lst)) x row (+ col 1) (cons (list row col) result))]\n      [else (get-row-helper\
    \ (rest (first lst)) x row (+ col 1) result)]))\n  (define (sort-by-row lst)\n\
    \    (sort lst (lambda (l1 l2) (< (first l1) (first l2)))))\n  (define (sort-by-col\
    \ lst)\n    (sort lst (lambda (l1 l2) (> (second l1) (second l2)))))\n  (define\
    \ (sort-by-row-and-col lst)\n    (sort-by-row (sort-by-col lst)))\n  (sort-by-row-and-col\
    \ (get-row-helper lst x 0 0 '())))\n", "  (define (helper lst x acc)\n    (cond\n\
    \      [(empty? lst) (reverse acc)]\n      [(empty? (first lst)) (helper (rest\
    \ lst) x acc)]\n      [(= x (first (first lst))) (helper (rest lst) x (cons (list\
    \ (length acc) 0) acc))]\n      [(> x (first (first lst))) (helper (rest lst)\
    \ x acc)]\n      [else (helper (rest lst) x (cons (list (length acc) (length (first\
    \ lst))) acc))]))\n  (define (helper2 lst x acc)\n    (cond\n      [(empty? lst)\
    \ (reverse acc)]\n      [(empty? (first lst)) (helper2 (rest lst) x acc)]\n  \
    \    [(= x (first (first lst))) (helper2 (rest lst) x (cons (list (length acc)\
    \ 0) acc))]\n      [(> x (first (first lst))) (helper2 (rest lst) x acc)]\n  \
    \    [else (helper2 (rest lst) x (cons (list (length acc) (length (first lst)))\
    \ acc))]))\n  (define (helper3 lst x acc)\n    (cond\n      [(empty? lst) (reverse\
    \ acc)]\n      [(empty? (first lst)) (helper3 (rest lst) x acc)]\n      [(= x\
    \ (first (first lst))) (helper3 (rest lst) x (cons (list (length acc) 0) acc))]\n\
    \      [(> x (first (first lst))) (helper3 (rest lst) x acc)]\n      [else (helper3\
    \ (rest lst) x (cons (list (length acc) (length (first lst))) acc))]))\n  (define\
    \ (helper4 lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n      [(empty?\
    \ (first lst)) (helper4 (rest lst) x acc)]\n      [(= x (first (first lst))) (helper4\
    \ (rest lst) x (cons (list (length acc) 0) acc))]\n     ", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x (add1 row) col)]\n      [(equal? x (first\
    \ (first lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row\
    \ (add1 col)))]\n      [else (get-row-helper (rest lst) x row (add1 col))]))\n\
    \  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n\
    \            [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first\
    \ l2)) #f]\n            [(> (second l1) (second l2)) #t]\n            [(< (second\
    \ l1) (second l2)) #f]\n            [else #f]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (add1 row) col)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get-row-helper lst x row col\
    \ result)\n    (cond\n      [(empty? lst) result]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (+ row 1) 0 result)]\n      [(= x (first (first\
    \ lst)))\n       (get-row-helper (rest (first lst)) x row (+ col 1) (cons (list\
    \ row col) result))]\n      [else (get-row-helper (rest (first lst)) x row (+\
    \ col 1) result)]))\n  (sort (get-row-helper lst x 0 0 '())\n        (lambda (l1\
    \ l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n         \
    \   [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n\
    \            [(< (second l1) (second l2)) #f]))))\n", "  (define (helper lst x\
    \ acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n      [(empty? (first lst))\
    \ (helper (rest lst) x acc)]\n      [(= x (first (first lst))) (helper (rest lst)\
    \ x (cons (list (length acc) 0) acc))]\n      [(> x (first (first lst))) (helper\
    \ (rest lst) x acc)]\n      [else (helper (rest lst) x (cons (list (length acc)\
    \ (helper2 (first lst) x 0)) acc))]))\n  (define (helper2 lst x acc)\n    (cond\n\
    \      [(empty? lst) acc]\n      [(= x (first lst)) acc]\n      [else (helper2\
    \ (rest lst) x (+ acc 1))]))\n  (sort (helper lst x (list))\n        (lambda (lst1\
    \ lst2)\n          (cond\n            [(> (first lst1) (first lst2)) #t]\n   \
    \         [(< (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second\
    \ lst2)) #f]\n            [(< (second lst1) (second lst2)) #t]\n            [else\
    \ #f]))))\n", "  (define (helper lst x row col)\n    (cond\n      [(empty? lst)\
    \ '()]\n      [(empty? (first lst)) (helper (rest lst) x (add1 row) 0)]\n    \
    \  [(equal? x (first (first lst)))\n       (cons (list row col) (helper (rest\
    \ lst) x row (add1 col)))]\n      [else (helper (rest lst) x row (add1 col))]))\n\
    \  (sort (helper lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n      \
    \      [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first l2))\
    \ #f]\n            [(> (second l1) (second l2)) #t]\n            [(< (second l1)\
    \ (second l2)) #f]\n            [else #f]))))\n", "  (define (helper lst x acc)\n\
    \    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (helper (rest\
    \ lst) x acc)]\n      [(= x (first (first lst))) (helper (rest lst) x (cons (list\
    \ (length acc) (length (first lst))) acc))]\n      [else (helper (rest lst) x\
    \ (cons (list (length acc) 0) acc))]))\n  (sort (helper lst x (list))\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(empty? (first lst)) (get_row (rest lst)\
    \ x)]\n    [(equal? x (first (first lst)))\n     (append (list (list (first lst)\
    \ (first (first lst))))\n             (get_row (rest lst) x))]\n    [else (get_row\
    \ (rest lst) x)]))\n", "  (define (get-row-helper lst x row col)\n    (cond\n\
    \      [(null? lst) '()]\n      [(null? (car lst)) (get-row-helper (cdr lst) x\
    \ (+ row 1) 0)]\n      [(= x (car (car lst)))\n       (cons (list row col) (get-row-helper\
    \ (cdr (car lst)) x row (+ col 1)))]\n      [else (get-row-helper (cdr (car lst))\
    \ x row (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1\
    \ lst2)\n          (cond\n            [(< (car lst1) (car lst2)) #t]\n       \
    \     [(> (car lst1) (car lst2)) #f]\n            [(> (cadr lst1) (cadr lst2))\
    \ #t]\n            [(< (cadr lst1) (cadr lst2)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x result)\n    (cond\n      [(empty? lst) result]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x result)]\n      [(=\
    \ x (first (first lst)))\n       (get-row-helper (rest lst) x (append result (list\
    \ (list (length result) 0))))]\n      [else (get-row-helper (rest lst) x (append\
    \ result (list (list (length result) (length (first lst))))))]))\n  (define (sort-by-row\
    \ lst)\n    (cond\n      [(empty? lst) lst]\n      [(empty? (rest lst)) lst]\n\
    \      [(< (first (first lst)) (first (first (rest lst))))\n       (append (list\
    \ (first lst)) (sort-by-row (rest lst)))]\n      [else (append (list (first (rest\
    \ lst))) (sort-by-row (cons (first lst) (rest (rest lst)))))]))\n  (define (sort-by-column\
    \ lst)\n    (cond\n      [(empty? lst) lst]\n      [(empty? (rest lst)) lst]\n\
    \      [(> (second (first lst)) (second (first (rest lst))))\n       (append (list\
    \ (first lst)) (sort-by-column (rest lst)))]\n      [else (append (list (first\
    \ (rest lst))) (sort-by-column (cons (first lst) (rest (rest lst)))))]))\n  (sort-by-column\
    \ (sort-by-row (get-row-helper lst x '()))))\n", "  (cond\n    [(empty? lst) (list)]\n\
    \    [(empty? (first lst)) (get_row (rest lst) x)]\n    [(equal? x (first (first\
    \ lst)))\n     (append (list (list (length lst) (length (first lst))))\n     \
    \        (get_row (rest lst) x))]\n    [else (get_row (rest lst) x)]))\n", " \
    \ (define (get-row-helper lst x row col)\n    (cond [(empty? lst) '()]\n     \
    \     [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n    \
    \      [(equal? x (first (first lst)))\n           (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n          [else (get-row-helper (rest lst) x\
    \ row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1\
    \ l2)\n          (cond [(< (first l1) (first l2)) #t]\n                [(> (first\
    \ l1) (first l2)) #f]\n                [(> (second l1) (second l2)) #t]\n    \
    \            [(< (second l1) (second l2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get-row-helper\
    \ (cdr lst) x (+ row 1) 0))\n          ((= x (car (car lst))) (cons (list row\
    \ col) (get-row-helper (cdr (car lst)) x row (+ col 1))))\n          (else (get-row-helper\
    \ (cdr (car lst)) x row (+ col 1)))))\n  (sort (get-row-helper lst x 0 0) (lambda\
    \ (x y) (and (< (car x) (car y)) (> (cadr x) (cadr y))))))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(empty? (first lst)) (get_row (rest lst) x)]\n    [(equal?\
    \ x (first (first lst)))\n     (append (list (list (first lst) (first (first lst))))\n\
    \             (get_row (rest lst) x))]\n    [else (get_row (rest lst) x)]))\n",
  "  (cond\n    [(empty? lst) (list)]\n    [(empty? (first lst)) (get_row (rest lst)\
    \ x)]\n    [(equal? x (first (first lst)))\n     (append (list (list (length lst)\
    \ (length (first lst))))\n             (get_row (list (rest (first lst)) (rest\
    \ lst)) x))]\n    [else (get_row (rest lst) x)]))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x (+ row 1) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (+ col\
    \ 1)))]\n      [else (get-row-helper (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get-row-helper lst x row col)\n\
    \    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (add1 row) col)]\n      [(equal? x (first (first lst)))\n     \
    \  (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n     \
    \ [else (get-row-helper (rest lst) x row (add1 col))]))\n  (define (sort-row-helper\
    \ lst)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (rest lst)) lst]\n\
    \      [(< (first (first lst)) (first (second lst)))\n       (cons (first lst)\
    \ (sort-row-helper (rest lst)))]\n      [else (cons (second lst) (cons (first\
    \ lst) (sort-row-helper (rest (rest lst)))))]))\n  (define (sort-col-helper lst)\n\
    \    (cond\n      [(empty? lst) '()]\n      [(empty? (rest lst)) lst]\n      [(>\
    \ (second (first lst)) (second (second lst)))\n       (cons (first lst) (sort-col-helper\
    \ (rest lst)))]\n      [else (cons (second lst) (cons (first lst) (sort-col-helper\
    \ (rest (rest lst)))))]))\n  (define (sort-row-col-helper lst)\n    (cond\n  \
    \    [(empty? lst) '()]\n      [(empty? (rest lst)) lst]\n      [(< (first (first\
    \ lst)) (first (second lst)))\n       (cons (first lst) (sort-row-col-helper (rest\
    \ lst)))]\n      [(> (first (first lst)) (first (second lst)))\n       (cons (second\
    \ lst) (cons (first lst) (sort-row-col-helper (rest (rest lst)))))]\n      [else\
    \ (cons (second lst) (cons (", "  (define (helper lst x acc)\n    (cond\n    \
    \  [(empty? lst) acc]\n      [(empty? (first lst)) (helper (rest lst) x acc)]\n\
    \      [(= x (first (first lst))) (helper (rest lst) x (cons (list (length acc)\
    \ (length (first lst))) acc))]\n      [else (helper (rest lst) x (cons (list (length\
    \ acc) 0) acc))]))\n  (sort (helper lst x (list))\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst)))\n       (cons (list row col) (get-row-helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n    \
    \      (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", "  (define\
    \ (get-row-helper lst x row col)\n    (cond [(empty? lst) empty]\n          [(empty?\
    \ (first lst)) (get-row-helper (rest lst) x (+ row 1) 0)]\n          [(= x (first\
    \ (first lst))) (cons (list row col) (get-row-helper (rest lst) x row (+ col 1)))]\n\
    \          [else (get-row-helper (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond [(< (first l1) (first l2))\
    \ #t]\n                [(> (first l1) (first l2)) #f]\n                [(> (second\
    \ l1) (second l2)) #t]\n                [else #f]))))\n", "  (cond\n    [(empty?\
    \ lst) (list)]\n    [(empty? (first lst)) (get_row (rest lst) x)]\n    [(equal?\
    \ x (first (first lst)))\n     (append (list (list (length lst) (length (first\
    \ lst))))\n             (get_row (rest lst) x))]\n    [else (get_row (rest lst)\
    \ x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(empty? (first lst)) (get_row\
    \ (rest lst) x)]\n    [(equal? x (first (first lst)))\n     (append (list (list\
    \ (first lst) (first (first lst))))\n             (get_row (rest lst) x))]\n \
    \   [else (get_row (rest lst) x)]))\n", "  (define (get-row-helper lst x row col\
    \ result)\n    (cond [(empty? lst) result]\n          [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (+ row 1) col result)]\n          [(= x (first (first lst))) (get-row-helper\
    \ (rest (first lst)) x row (+ col 1) (cons (list row col) result))]\n        \
    \  [else (get-row-helper (rest (first lst)) x row (+ col 1) result)]))\n  (define\
    \ (sort-by-row lst)\n    (sort lst (lambda (l1 l2) (< (first l1) (first l2)))))\n\
    \  (define (sort-by-col lst)\n    (sort lst (lambda (l1 l2) (> (second l1) (second\
    \ l2)))))\n  (sort-by-row (sort-by-col (get-row-helper lst x 0 0 '()))))\n", " \
    \ (cond [(empty? lst) empty]\n        [(empty? (first lst)) (get_row (rest lst)\
    \ x)]\n        [(equal? x (first (first lst)))\n         (append (list (list (length\
    \ lst) (length (first lst))))\n                 (get_row (rest lst) x))]\n   \
    \     [else (get_row (rest lst) x)]))\n", "  (define (get-row-helper lst x row\
    \ col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (+ row 1) col)]\n      [(equal? x (first (first lst)))\n      \
    \ (append (list (list row col)) (get-row-helper (rest lst) x row (+ col 1)))]\n\
    \      [else (get-row-helper (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get-row-helper lst x row col\
    \ result)\n    (cond\n      [(null? lst) (reverse result)]\n      [(null? (car\
    \ lst)) (get-row-helper (cdr lst) x (+ row 1) col result)]\n      [(equal? x (car\
    \ (car lst)))\n       (get-row-helper (cdr (car lst)) x row (+ col 1) (cons (list\
    \ row col) result))]\n      [else (get-row-helper (cdr (car lst)) x row (+ col\
    \ 1) result)]))\n  (get-row-helper lst x 0 0 (list)))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row-helper (rest lst) x row (add1 col))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(= (first\
    \ lst1) (first lst2))\n             (if (> (second lst1) (second lst2))\n    \
    \             #t\n                 #f)]\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [else #f]))))\n", "  (define (get-row-helper lst x acc)\n \
    \   (if (null? lst)\n        acc\n        (get-row-helper (cdr lst) x\n      \
    \                  (append acc\n                                (map (lambda (y)\
    \ (list (length acc) y))\n                                     (filter (lambda\
    \ (y) (= x y))\n                                             (car lst)))))))\n\
    \  (sort (get-row-helper lst x '())\n        (lambda (l1 l2)\n          (cond\n\
    \            [(> (car l1) (car l2)) #t]\n            [(< (car l1) (car l2)) #f]\n\
    \            [(> (cadr l1) (cadr l2)) #f]\n            [(< (cadr l1) (cadr l2))\
    \ #t]\n            [else #f]))))\n", "  (define (get-row-helper lst x row col)\n\
    \    (cond\n      [(empty? lst) (list)]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (add1 row) col)]\n      [(equal? x (first (first lst)))\n     \
    \  (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n     \
    \ [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get-row-helper lst x acc)\n \
    \   (cond\n      [(empty? lst) (reverse acc)]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n       (get-row-helper\
    \ (rest lst) x (cons (list (length acc) (length (first lst))) acc))]\n      [else\
    \ (get-row-helper (rest lst) x acc)]))\n  (get-row-helper lst x (list)))\n", " \
    \ (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n   \
    \   [(equal? x (first (first lst)))\n       (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (define (helper lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n\
    \      [(empty? (first lst)) (helper (rest lst) x acc)]\n      [(= x (first (first\
    \ lst))) (helper (rest lst) x (cons (list (length acc) 0) acc))]\n      [(> x\
    \ (first (first lst))) (helper (rest lst) x acc)]\n      [else (helper (rest lst)\
    \ x (cons (list (length acc) (length (first lst))) acc))]))\n  (define (helper2\
    \ lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n      [(empty? (first\
    \ lst)) (helper2 (rest lst) x acc)]\n      [(= x (first (first lst))) (helper2\
    \ (rest lst) x (cons (list (length acc) 0) acc))]\n      [(> x (first (first lst)))\
    \ (helper2 (rest lst) x acc)]\n      [else (helper2 (rest lst) x (cons (list (length\
    \ acc) (length (first lst))) acc))]))\n  (define (helper3 lst x acc)\n    (cond\n\
    \      [(empty? lst) (reverse acc)]\n      [(empty? (first lst)) (helper3 (rest\
    \ lst) x acc)]\n      [(= x (first (first lst))) (helper3 (rest lst) x (cons (list\
    \ (length acc) 0) acc))]\n      [(> x (first (first lst))) (helper3 (rest lst)\
    \ x acc)]\n      [else (helper3 (rest lst) x (cons (list (length acc) (length\
    \ (first lst))) acc))]))\n  (define (helper4 lst x acc)\n    (cond\n      [(empty?\
    \ lst) (reverse acc)]\n      [(empty? (first lst)) (helper4 (rest lst) x acc)]\n\
    \      [(= x (first (first lst))) (helper4 (rest lst) x (cons (list (length acc)\
    \ 0) acc))]\n     ", "  (define (get-row-helper lst x row col result)\n    (cond\n\
    \      [(null? lst) result]\n      [(null? (car lst)) (get-row-helper (cdr lst)\
    \ x (+ row 1) 0 result)]\n      [(equal? x (car (car lst)))\n       (get-row-helper\
    \ (cdr (car lst)) x row (+ col 1) (cons (list row col) result))]\n      [else\
    \ (get-row-helper (cdr (car lst)) x row (+ col 1) result)]))\n  (sort (get-row-helper\
    \ lst x 0 0 '())\n        (lambda (l1 l2)\n          (cond\n            [(< (car\
    \ l1) (car l2)) #t]\n            [(> (car l1) (car l2)) #f]\n            [(> (cadr\
    \ l1) (cadr l2)) #t]\n            [(< (cadr l1) (cadr l2)) #f]\n            [else\
    \ #f]))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty?\
    \ lst) (list)]\n      [(empty? (first lst)) (get-row-helper (rest lst) x (add1\
    \ row) col)]\n      [(equal? x (first (first lst)))\n       (cons (list row col)\
    \ (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [(< (second lst1) (second lst2)) #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond [(null? lst) '()]\n       \
    \   [(null? (car lst)) (get-row-helper (cdr lst) x (+ row 1) 0)]\n          [(=\
    \ x (car (car lst)))\n           (cons (list row col) (get-row-helper (cdr (car\
    \ lst)) x row (+ col 1)))]\n          [else (get-row-helper (cdr (car lst)) x\
    \ row (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond [(< (car l1) (car l2)) #t]\n                [(> (car l1) (car\
    \ l2)) #f]\n                [(> (cadr l1) (cadr l2)) #t]\n                [(<\
    \ (cadr l1) (cadr l2)) #f]\n                [else #f]))))\n", "  (define (helper\
    \ lst x)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (helper\
    \ (rest lst) x)]\n      [(equal? x (first (first lst)))\n       (cons (list (length\
    \ lst) (length (first lst)))\n             (helper (rest lst) x))]\n      [else\
    \ (helper (rest lst) x)]))\n  (sort (helper lst x)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst)))\n       (cons (list row col) (get-row-helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n    \
    \      (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", "  (define\
    \ (helper lst x res)\n    (cond\n      [(empty? lst) res]\n      [(empty? (first\
    \ lst)) (helper (rest lst) x res)]\n      [(= x (first (first lst))) (helper (rest\
    \ lst) x (cons (list (length res) (length (first lst))) res))]\n      [else (helper\
    \ (rest lst) x (cons (list (length res) 0) res))]))\n  (define (sort-by-row lst)\n\
    \    (sort lst (lambda (x y) (< (first x) (first y)))))\n  (define (sort-by-col\
    \ lst)\n    (sort lst (lambda (x y) (> (second x) (second y)))))\n  (sort-by-col\
    \ (sort-by-row (helper lst x '()))))\n", "  (define (get-row-helper lst x row\
    \ col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n       (cons\
    \ (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [(< (second lst1) (second lst2)) #f]))))\n",
  "  (define (helper lst x)\n    (cond\n      [(empty? lst) empty]\n      [(empty?\
    \ (first lst)) (helper (rest lst) x)]\n      [(= x (first (first lst))) (cons\
    \ (list (length lst) (length (first lst))) (helper (rest lst) x))]\n      [else\
    \ (helper (rest lst) x)]))\n  (define (sort-by-row lst)\n    (sort lst (lambda\
    \ (l1 l2) (< (first l1) (first l2)))))\n  (define (sort-by-col lst)\n    (sort\
    \ lst (lambda (l1 l2) (> (second l1) (second l2)))))\n  (define (sort-by-row-and-col\
    \ lst)\n    (sort-by-row (sort-by-col lst)))\n  (sort-by-row-and-col (helper lst\
    \ x)))\n", "  (define (get-row-helper lst x)\n    (cond ((null? lst) '())\n  \
    \        ((equal? x (car (car lst)))\n           (cons (list (car lst) (cdr lst))\
    \ (get-row-helper (cdr lst) x)))\n          (else (get-row-helper (cdr lst) x))))\n\
    \  (define (get-row-helper2 lst x)\n    (cond ((null? lst) '())\n          ((equal?\
    \ x (car (car lst)))\n           (cons (list (car lst) (cdr lst)) (get-row-helper2\
    \ (cdr lst) x)))\n          (else (get-row-helper2 (cdr lst) x))))\n  (define\
    \ (get-row-helper3 lst x)\n    (cond ((null? lst) '())\n          ((equal? x (car\
    \ (car lst)))\n           (cons (list (car lst) (cdr lst)) (get-row-helper3 (cdr\
    \ lst) x)))\n          (else (get-row-helper3 (cdr lst) x))))\n  (define (get-row-helper4\
    \ lst x)\n    (cond ((null? lst) '())\n          ((equal? x (car (car lst)))\n\
    \           (cons (list (car lst) (cdr lst)) (get-row-helper4 (cdr lst) x)))\n\
    \          (else (get-row-helper4 (cdr lst) x))))\n  (define (get-row-helper5\
    \ lst x)\n    (cond ((null? lst) '())\n          ((equal? x (car (car lst)))\n\
    \           (cons (list (car lst) (cdr lst)) (get-row-helper5 (cdr lst) x)))\n\
    \          (else (get-row-helper5 (cdr lst) x))))\n  (define (get-row-helper6\
    \ lst x)\n    (cond ((null? lst) '())\n          ((equal? x (car (car lst)))\n\
    \           (cons", "  (define (helper lst x acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(empty? (first lst)) (helper (rest lst) x acc)]\n      [(= x (first\
    \ (first lst))) (helper (rest lst) x (cons (list (length acc) (length (first lst)))\
    \ acc))]\n      [else (helper (rest lst) x (cons (list (length acc) 0) acc))]))\n\
    \  (sort (helper lst x (list))\n        (lambda (l1 l2)\n          (cond\n   \
    \         [(> (first l1) (first l2)) #t]\n            [(< (first l1) (first l2))\
    \ #f]\n            [(> (second l1) (second l2)) #f]\n            [(< (second l1)\
    \ (second l2)) #t]\n            [else #f]))))\n", "  (define (get-row-helper lst\
    \ x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first lst)))\n\
    \       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(= (first\
    \ l1) (first l2))\n             (if (< (second l1) (second l2))\n            \
    \     #t\n                 #f)]\n            [(< (first l1) (first l2)) #t]\n\
    \            [else #f]))))\n", "  (cond [(empty? lst) empty]\n        [(empty?\
    \ (first lst)) (get_row (rest lst) x)]\n        [(equal? x (first (first lst)))\n\
    \         (append (list (list (first lst) (first (first lst))))\n            \
    \     (get_row (rest lst) x))]\n        [else (get_row (rest lst) x)]))\n", " \
    \ (define (get-row-helper lst x row-num)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row-num 1))]\n  \
    \    [(= x (first (first lst)))\n       (cons (list row-num 0) (get-row-helper\
    \ (rest lst) x (+ row-num 1)))]\n      [else (get-row-helper (rest lst) x (+ row-num\
    \ 1))]))\n  (define (get-col-helper lst x row-num col-num)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(empty? (first lst)) (get-col-helper (rest lst) x row-num\
    \ (+ col-num 1))]\n      [(= x (first (first lst)))\n       (cons (list row-num\
    \ col-num) (get-col-helper (rest lst) x row-num (+ col-num 1)))]\n      [else\
    \ (get-col-helper (rest lst) x row-num (+ col-num 1))]))\n  (define (sort-row-helper\
    \ lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (rest lst)) lst]\n\
    \      [(< (first (first lst)) (first (second lst)))\n       (cons (first lst)\
    \ (sort-row-helper (rest lst)))]\n      [else (cons (second lst) (sort-row-helper\
    \ (cons (first lst) (rest (rest lst)))))]))\n  (define (sort-col-helper lst)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(empty? (rest lst)) lst]\n    \
    \  [(> (second (first lst)) (second (second lst)))\n       (cons (first lst) (sort-col-helper\
    \ (rest lst)))]\n      [else (cons (second lst) (sort-col-helper (cons (first\
    \ lst) (rest (rest lst)))))]))\n  (define (sort-row", "  (define (get-row-helper\
    \ lst x acc)\n    (if (null? lst)\n        acc\n        (get-row-helper (cdr lst)\
    \ x (append acc (get-row-helper2 (car lst) x 0 (list) (length lst))))))\n  (define\
    \ (get-row-helper2 lst x acc acc2 len)\n    (if (null? lst)\n        acc2\n  \
    \      (if (= x (car lst))\n            (get-row-helper2 (cdr lst) x (+ acc 1)\
    \ (append acc2 (list (list (- len 1) acc))) len)\n            (get-row-helper2\
    \ (cdr lst) x (+ acc 1) acc2 len))))\n  (get-row-helper lst x (list)))\n", " \
    \ (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) col)]\n \
    \     [(equal? x (first (first lst)))\n       (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (define (helper lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n\
    \      [(empty? (first lst)) (helper (rest lst) x acc)]\n      [(= x (first (first\
    \ lst))) (helper (rest lst) x (cons (list (length lst) (length (first lst))) acc))]\n\
    \      [else (helper (rest lst) x acc)]))\n  (helper lst x (list)))\n", "  (define\
    \ (helper lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n      [(empty?\
    \ (first lst)) (helper (rest lst) x acc)]\n      [(= x (first (first lst))) (helper\
    \ (rest lst) x (cons (list (length acc) (length (first lst))) acc))]\n      [else\
    \ (helper (rest lst) x acc)]))\n  (helper lst x (list)))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get-row-helper\
    \ (cdr lst) x (+ row 1) col))\n          ((equal? x (car (car lst))) (cons (list\
    \ row col) (get-row-helper (cdr (car lst)) x row (+ col 1))))\n          (else\
    \ (get-row-helper (cdr (car lst)) x row (+ col 1)))))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond ((< (car l1) (car l2))\
    \ #t)\n                ((> (car l1) (car l2)) #f)\n                ((> (cadr l1)\
    \ (cadr l2)) #t)\n                ((< (cadr l1) (cadr l2)) #f)\n             \
    \   (else #f)))))\n", "  (define (get-row-helper lst x row col)\n    (cond [(empty?\
    \ lst) empty]\n          [(empty? (first lst)) (get-row-helper (rest lst) x (+\
    \ row 1) 0)]\n          [(= x (first (first lst))) (cons (list row col) (get-row-helper\
    \ (rest lst) x row (+ col 1)))]\n          [else (get-row-helper (rest lst) x\
    \ row (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond [(< (first l1) (first l2)) #t]\n                [(> (first l1)\
    \ (first l2)) #f]\n                [(> (second l1) (second l2)) #t]\n        \
    \        [(< (second l1) (second l2)) #f]))))\n", "  (define (get-row-helper lst\
    \ x row-num)\n    (cond [(empty? lst) empty]\n          [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (+ row-num 1))]\n          [(member x (first lst))\n\
    \           (append (list (list row-num (position x (first lst))))\n         \
    \          (get-row-helper (rest lst) x (+ row-num 1)))]\n          [else (get-row-helper\
    \ (rest lst) x (+ row-num 1))]))\n  (sort (get-row-helper lst x 0)\n        (lambda\
    \ (lst1 lst2)\n          (cond [(< (first lst1) (first lst2)) #t]\n          \
    \      [(> (first lst1) (first lst2)) #f]\n                [else (< (second lst1)\
    \ (second lst2))]))))\n", "  (define (get-row-helper lst x row-num)\n    (cond\
    \ ((null? lst) '())\n          ((member x (car lst))\n           (append (map\
    \ (lambda (col-num) (list row-num col-num))\n                       (filter (lambda\
    \ (col-num) (= x (list-ref (car lst) col-num)))\n                            \
    \   (build-list (length (car lst)) (lambda (i) i))))\n                   (get-row-helper\
    \ (cdr lst) x (+ row-num 1))))\n          (else (get-row-helper (cdr lst) x (+\
    \ row-num 1)))))\n  (sort (get-row-helper lst x 0)\n        (lambda (lst1 lst2)\n\
    \          (cond ((< (car lst1) (car lst2)) #t)\n                ((> (car lst1)\
    \ (car lst2)) #f)\n                (else (> (cadr lst1) (cadr lst2)))))))\n",
  "  (define (helper lst x acc)\n    (if (null? lst)\n        acc\n        (let ((row\
    \ (car lst)))\n          (if (member x row)\n              (helper (cdr lst) x\
    \ (append acc (list (list (length acc) (index x row)))))\n              (helper\
    \ (cdr lst) x acc)))))\n  (sort (helper lst x '())\n        (lambda (x y)\n  \
    \        (if (= (car x) (car y))\n              (if (= (cadr x) (cadr y))\n  \
    \                #t\n                  (> (cadr x) (cadr y)))\n              (<\
    \ (car x) (car y))))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n\
    \      [(empty? lst) (list)]\n      [(empty? (first lst)) (get-row-helper (rest\
    \ lst) x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n       (cons (list\
    \ row col) (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [(< (second lst1) (second lst2)) #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) col)]\n \
    \     [(equal? x (first (first lst)))\n       (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst))\
    \ (helper (rest lst) x acc)]\n      [(= x (first (first lst))) (helper (rest lst)\
    \ x (cons (list (length acc) (length (first lst))) acc))]\n      [else (helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (helper lst x (list))\n\
    \        (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2))\
    \ #t]\n            [(> (first l1) (first l2)) #f]\n            [(> (second l1)\
    \ (second l2)) #t]\n            [(< (second l1) (second l2)) #f]\n           \
    \ [else #f]))))\n", "  (define (helper lst x)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(empty? (first lst)) (helper (rest lst) x)]\n      [(equal? x\
    \ (first (first lst)))\n       (append (list (list (length lst) (length (first\
    \ lst))))\n               (helper (rest lst) x))]\n      [else (helper (rest lst)\
    \ x)]))\n  (sort (helper lst x)\n        (lambda (l1 l2)\n          (cond\n  \
    \          [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first l2))\
    \ #f]\n            [(> (second l1) (second l2)) #t]\n            [(< (second l1)\
    \ (second l2)) #f]))))\n", "  (define (get-row-helper lst x row-num)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(empty? (first lst)) (get-row-helper (rest\
    \ lst) x (+ row-num 1))]\n      [(member x (first lst))\n       (append (map (lambda\
    \ (col-num) (list row-num col-num))\n                    (filter (lambda (col-num)\
    \ (= x col-num))\n                            (first lst)))\n               (get-row-helper\
    \ (rest lst) x (+ row-num 1)))]\n      [else (get-row-helper (rest lst) x (+ row-num\
    \ 1))]))\n  (sort (get-row-helper lst x 0)\n        (lambda (coord1 coord2)\n\
    \          (cond\n            [(= (first coord1) (first coord2))\n           \
    \  (if (< (second coord1) (second coord2)) #t #f)]\n            [(< (first coord1)\
    \ (first coord2)) #t]\n            [else #f]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]))))\n", "  (define (helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(empty? (first lst)) (helper (rest lst) x acc)]\n      [(= x (first (first\
    \ lst))) (helper (rest lst) x (cons (list (length acc) (length (first lst))) acc))]\n\
    \      [else (helper (rest lst) x (cons (list (length acc) (length (first lst)))\
    \ acc))]))\n  (sort (helper lst x (list)) (lambda (l1 l2) (or (< (first l1) (first\
    \ l2)) (and (= (first l1) (first l2)) (> (second l1) (second l2)))))))\n", " \
    \ (define (get-row-helper lst x row col)\n    (cond [(empty? lst) empty]\n   \
    \       [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1) col)]\n \
    \         [(= x (first (first lst)))\n           (cons (list row col) (get-row-helper\
    \ (rest lst) x row (+ col 1)))]\n          [else (get-row-helper (rest lst) x\
    \ row (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1\
    \ lst2)\n          (cond [(< (first lst1) (first lst2)) #t]\n                [(>\
    \ (first lst1) (first lst2)) #f]\n                [(> (second lst1) (second lst2))\
    \ #t]\n                [(< (second lst1) (second lst2)) #f]))))\n", "  (define\
    \ (helper lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n      [(empty?\
    \ (first lst)) (helper (rest lst) x acc)]\n      [(= x (first (first lst))) (helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]\n      [(= x (first (rest (first\
    \ lst)))) (helper (rest lst) x (cons (list (length acc) 1) acc))]\n      [(= x\
    \ (first (rest (rest (first lst))))) (helper (rest lst) x (cons (list (length\
    \ acc) 2) acc))]\n      [else (helper (rest lst) x acc)]))\n  (helper lst x (list)))\n",
  "  (define (get-row-helper lst x row col result)\n    (cond\n      [(empty? lst)\
    \ result]\n      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1)\
    \ 0 result)]\n      [(= x (first (first lst)))\n       (get-row-helper (rest (first\
    \ lst)) x row (+ col 1) (cons (list row col) result))]\n      [else (get-row-helper\
    \ (rest (first lst)) x row (+ col 1) result)]))\n  (sort (get-row-helper lst x\
    \ 0 0 '())\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]))))\n", "  (define (get-row-helper lst x row col)\n    (cond\
    \ [(empty? lst) empty]\n          [(empty? (first lst)) (get-row-helper (rest\
    \ lst) x (+ row 1) 0)]\n          [(= x (first (first lst))) (cons (list row col)\
    \ (get-row-helper (rest lst) x row (+ col 1)))]\n          [else (get-row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n       \
    \ (lambda (l1 l2)\n          (cond [(< (first l1) (first l2)) #t]\n          \
    \      [(> (first l1) (first l2)) #f]\n                [(> (second l1) (second\
    \ l2)) #t]\n                [(< (second l1) (second l2)) #f]))))\n", "  (define\
    \ (get-row-helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty?\
    \ (first lst)) (get-row-helper (rest lst) x acc)]\n      [(member x (first lst))\
    \ (get-row-helper (rest lst) x (append acc (list (list (length acc) (index-of\
    \ x (first lst))))))]\n      [else (get-row-helper (rest lst) x acc)]))\n  (get-row-helper\
    \ lst x (list)))\n", "  (define (get-coordinates lst x)\n    (define (get-coordinates-helper\
    \ lst x coordinates)\n      (cond\n        [(empty? lst) coordinates]\n      \
    \  [(empty? (first lst)) (get-coordinates-helper (rest lst) x coordinates)]\n\
    \        [(equal? x (first (first lst)))\n         (get-coordinates-helper (rest\
    \ lst) x (cons (list (length coordinates) (length (first lst))) coordinates))]\n\
    \        [else (get-coordinates-helper (rest lst) x coordinates)]))\n    (get-coordinates-helper\
    \ lst x (list)))\n  (define (sort-by-row coordinates)\n    (sort coordinates <\
    \ #:key (lambda (coordinate) (first coordinate))))\n  (define (sort-by-column\
    \ coordinates)\n    (sort coordinates > #:key (lambda (coordinate) (second coordinate))))\n\
    \  (sort-by-column (sort-by-row (get-coordinates lst x))))\n", "  (define (get-row-helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x acc)]\n      [(= x (first (first lst)))\n     \
    \  (get-row-helper (rest lst) x (cons (list (length acc) 0) acc))]\n      [(=\
    \ x (first (rest (first lst))))\n       (get-row-helper (rest lst) x (cons (list\
    \ (length acc) 1) acc))]\n      [(= x (first (rest (rest (first lst)))))\n   \
    \    (get-row-helper (rest lst) x (cons (list (length acc) 2) acc))]\n      [else\
    \ (get-row-helper (rest lst) x acc)]))\n  (define (sort-by-row lst)\n    (cond\n\
    \      [(empty? lst) lst]\n      [(empty? (rest lst)) lst]\n      [(< (first (first\
    \ lst)) (first (first (rest lst))))\n       (cons (first lst) (sort-by-row (rest\
    \ lst)))]\n      [else (cons (first (rest lst)) (cons (first lst) (rest (rest\
    \ lst))))]))\n  (define (sort-by-col lst)\n    (cond\n      [(empty? lst) lst]\n\
    \      [(empty? (rest lst)) lst]\n      [(> (second (first lst)) (second (first\
    \ (rest lst))))\n       (cons (first lst) (sort-by-col (rest lst)))]\n      [else\
    \ (cons (first (rest lst)) (cons (first lst) (rest (rest lst))))]))\n  (sort-by-col\
    \ (sort-by-row (get-row-helper lst x '()))))\n", "  (define (get-row-helper lst\
    \ x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n\
    \       (cons (list row col) (get-row-helper (rest lst) x row (+ col 1)))]\n \
    \     [else (get-row-helper (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n           \
    \ [else #f]))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n   \
    \   [(empty? lst) empty]\n      [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n       (cons (list\
    \ row col) (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [(< (second lst1) (second lst2)) #f]))))\n",
  "  (define (helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n    \
    \  [(empty? (first lst)) (helper (rest lst) x (add1 row) 0)]\n      [(equal? x\
    \ (first (first lst)))\n       (cons (list row col) (helper (rest lst) x row (add1\
    \ col)))]\n      [else (helper (rest lst) x row (add1 col))]))\n  (sort (helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]))))\n", "  (define (get-row-helper lst x row col)\n    (cond [(empty? lst)\
    \ '()]\n          [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row)\
    \ 0)]\n          [(equal? x (first (first lst)))\n           (cons (list row col)\
    \ (get-row-helper (rest lst) x row (add1 col)))]\n          [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond [(< (first l1) (first l2)) #t]\n         \
    \       [(> (first l1) (first l2)) #f]\n                [(> (second l1) (second\
    \ l2)) #t]\n                [(< (second l1) (second l2)) #f]))))\n", "  (define\
    \ (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty?\
    \ (first lst)) (get_row-helper (rest lst) x (add1 row) 0)]\n      [(= x (first\
    \ (first lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row\
    \ (add1 col)))]\n      [else (get_row-helper (rest lst) x row (add1 col))]))\n\
    \  (sort (get_row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n\
    \            [(< (first lst1) (first lst2)) #t]\n            [(> (first lst1)\
    \ (first lst2)) #f]\n            [(> (second lst1) (second lst2)) #t]\n      \
    \      [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (add1 row) col)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get-row-helper lst x row col)\n\
    \    (cond ((null? lst) '())\n          ((null? (car lst)) (get-row-helper (cdr\
    \ lst) x (+ row 1) 0))\n          ((equal? x (car (car lst))) (cons (list row\
    \ col) (get-row-helper (cdr (car lst)) x row (+ col 1))))\n          (else (get-row-helper\
    \ (cdr (car lst)) x row (+ col 1)))))\n  (sort (get-row-helper lst x 0 0) (lambda\
    \ (l1 l2) (and (equal? (car l1) (car l2)) (< (cadr l1) (cadr l2))))))\n", "  (define\
    \ (get-row-helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty?\
    \ (first lst)) (get-row-helper (rest lst) x acc)]\n      [(member x (first lst))\
    \ (get-row-helper (rest lst) x (append acc (list (list (length acc) (index-of\
    \ x (first lst))))))]\n      [else (get-row-helper (rest lst) x acc)]))\n  (sort\
    \ (get-row-helper lst x (list))\n        (lambda (lst1 lst2)\n          (cond\n\
    \            [(> (first lst1) (first lst2)) #t]\n            [(< (first lst1)\
    \ (first lst2)) #f]\n            [(> (second lst1) (second lst2)) #f]\n      \
    \      [(< (second lst1) (second lst2)) #t]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get-row-helper lst x row col)\n\
    \    (cond [(empty? lst) empty]\n          [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (+ row 1) 0)]\n          [(= x (first (first lst)))\n         \
    \  (cons (list row col) (get-row-helper (rest lst) x row (+ col 1)))]\n      \
    \    [else (get-row-helper (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond [(< (first lst1) (first\
    \ lst2)) #t]\n                [(> (first lst1) (first lst2)) #f]\n           \
    \     [(> (second lst1) (second lst2)) #t]\n                [(< (second lst1)\
    \ (second lst2)) #f]))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n\
    \      [(empty? lst) '()]\n      [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x (add1 row) col)]\n      [(equal? x (first (first lst)))\n       (cons (list\
    \ row col) (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [(< (second lst1) (second lst2)) #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) col)]\n \
    \     [(equal? x (first (first lst)))\n       (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (define (get-row-helper lst x row col)\n    (cond [(empty? lst) '()]\n     \
    \     [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n    \
    \      [(equal? x (first (first lst)))\n           (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n          [else (get-row-helper (rest lst) x\
    \ row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1\
    \ lst2)\n          (cond [(< (first lst1) (first lst2)) #t]\n                [(>\
    \ (first lst1) (first lst2)) #f]\n                [(> (second lst1) (second lst2))\
    \ #t]\n                [(< (second lst1) (second lst2)) #f]))))\n", "  (define\
    \ (get-row-helper lst x row-num)\n    (cond\n      [(empty? lst) empty]\n    \
    \  [(member x (first lst))\n       (append (get-row-helper (rest lst) x (+ row-num\
    \ 1))\n               (list (list row-num (index-of x (first lst)))))\n      \
    \ ]\n      [else (get-row-helper (rest lst) x (+ row-num 1))]))\n  (sort (get-row-helper\
    \ lst x 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first l1)\
    \ (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n            [(>\
    \ (second l1) (second l2)) #t]\n            [(< (second l1) (second l2)) #f]))))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (list (list-ref lst row) col))))\n\
    \        <))\n", "  (define (get-row-helper lst x row-num)\n    (cond ((null?\
    \ lst) '())\n          ((null? (car lst)) (get-row-helper (cdr lst) x (+ row-num\
    \ 1)))\n          ((member x (car lst))\n           (append (get-row-helper (cdr\
    \ lst) x (+ row-num 1))\n                   (list (list row-num (index-of x (car\
    \ lst))))))\n          (else (get-row-helper (cdr lst) x (+ row-num 1)))))\n \
    \ (sort (get-row-helper lst x 0)\n        (lambda (lst1 lst2)\n          (cond\
    \ ((< (car lst1) (car lst2)) #t)\n                ((> (car lst1) (car lst2)) #f)\n\
    \                (else (< (cadr lst1) (cadr lst2)))))))\n", "  (define (get-row-helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n\
    \       (get-row-helper (rest lst) x (cons (list (length acc) 0) acc))]\n    \
    \  [(equal? x (first (rest (first lst))))\n       (get-row-helper (rest lst) x\
    \ (cons (list (length acc) 1) acc))]\n      [(equal? x (first (rest (rest (first\
    \ lst)))))\n       (get-row-helper (rest lst) x (cons (list (length acc) 2) acc))]\n\
    \      [else (get-row-helper (rest lst) x acc)]))\n  (get-row-helper lst x (list)))\n",
  "  (define (get-row-helper lst x result)\n    (cond\n      [(empty? lst) result]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x result)]\n      [(equal?\
    \ x (first (first lst)))\n       (get-row-helper (rest lst) x (append result (list\
    \ (list (length result) (length (first lst))))))]\n      [else (get-row-helper\
    \ (rest lst) x (append result (list (list (length result) 0))))]))\n  (define\
    \ (sort-by-row lst)\n    (sort lst (lambda (lst1 lst2) (< (first lst1) (first\
    \ lst2)))))\n  (define (sort-by-column lst)\n    (sort lst (lambda (lst1 lst2)\
    \ (> (second lst1) (second lst2)))))\n  (sort-by-column (sort-by-row (get-row-helper\
    \ lst x '()))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n   \
    \   [(empty? lst) '()]\n      [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x (add1 row) col)]\n      [(= x (first (first lst)))\n       (cons (list row\
    \ col) (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(null? lst) '()]\n\
    \      [(null? (car lst)) (get-row-helper (cdr lst) x (+ row 1) col)]\n      [(equal?\
    \ x (car (car lst)))\n       (cons (list row col) (get-row-helper (cdr (car lst))\
    \ x row (+ col 1)))]\n      [else (get-row-helper (cdr (car lst)) x row (+ col\
    \ 1))]))\n  (define (sort-row lst)\n    (sort lst (lambda (x y)\n            \
    \    (cond\n                  [(< (car x) (car y)) #t]\n                  [(>\
    \ (car x) (car y)) #f]\n                  [(> (cadr x) (cadr y)) #t]\n       \
    \           [(< (cadr x) (cadr y)) #f]))))\n  (sort-row (get-row-helper lst x\
    \ 0 0)))\n", "  (define (helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(empty? (first lst)) (helper (rest lst) x acc)]\n      [(= x (first (first\
    \ lst))) (helper (rest lst) x (cons (list (length acc) 0) acc))]\n      [(= x\
    \ (first (rest (first lst)))) (helper (rest lst) x (cons (list (length acc) 1)\
    \ acc))]\n      [(= x (first (rest (rest (first lst))))) (helper (rest lst) x\
    \ (cons (list (length acc) 2) acc))]\n      [else (helper (rest lst) x acc)]))\n\
    \  (sort (helper lst x (list))\n        (lambda (a b)\n          (cond\n     \
    \       [(> (first a) (first b)) #t]\n            [(< (first a) (first b)) #f]\n\
    \            [(> (second a) (second b)) #f]\n            [(< (second a) (second\
    \ b)) #t]))))\n", "  (define (helper lst x acc)\n    (cond [(empty? lst) acc]\n\
    \          [(empty? (first lst)) (helper (rest lst) x acc)]\n          [(member\
    \ x (first lst)) (helper (rest lst) x (append acc (list (list (length acc) (index-of\
    \ x (first lst))))))]\n          [else (helper (rest lst) x acc)]))\n  (sort (helper\
    \ lst x (list))\n        (lambda (l1 l2)\n          (cond [(< (first l1) (first\
    \ l2)) #t]\n                [(> (first l1) (first l2)) #f]\n                [(>\
    \ (second l1) (second l2)) #t]\n                [(< (second l1) (second l2)) #f]))))\n",
  "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n   \
    \   [(equal? x (first (first lst)))\n       (cons (list row col) (get_row_helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(member x (first lst))\n\
    \       (get-row-helper (rest lst) x (append acc (list (list (length acc) (length\
    \ (first lst))))) )]\n      [else (get-row-helper (rest lst) x acc)]))\n  (sort\
    \ (get-row-helper lst x '())\n        (lambda (x y)\n          (cond\n       \
    \     [(> (first x) (first y)) #t]\n            [(< (first x) (first y)) #f]\n\
    \            [(> (second x) (second y)) #f]\n            [(< (second x) (second\
    \ y)) #t]))))\n", "  (define (helper lst x acc)\n    (cond\n      [(empty? lst)\
    \ (reverse acc)]\n      [(empty? (first lst)) (helper (rest lst) x acc)]\n   \
    \   [(= x (first (first lst))) (helper (rest lst) x (cons (list (length acc) 0)\
    \ acc))]\n      [(> x (first (first lst))) (helper (rest lst) x acc)]\n      [else\
    \ (helper (rest lst) x (cons (list (length acc) (helper2 (first lst) x 0)) acc))]))\n\
    \  (define (helper2 lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(=\
    \ x (first lst)) acc]\n      [else (helper2 (rest lst) x (+ acc 1))]))\n  (sort\
    \ (helper lst x '())\n        (lambda (lst1 lst2)\n          (cond\n         \
    \   [(> (first lst1) (first lst2)) #t]\n            [(< (first lst1) (first lst2))\
    \ #f]\n            [(> (second lst1) (second lst2)) #f]\n            [(< (second\
    \ lst1) (second lst2)) #t]\n            [else #f]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n           \
    \ [else #f]))))\n", "  (define (helper lst x acc)\n    (cond [(empty? lst) (reverse\
    \ acc)]\n          [(member x (first lst)) (helper (rest lst) x (cons (list (length\
    \ acc) (position x (first lst))) acc))]\n          [else (helper (rest lst) x\
    \ acc)]))\n  (sort (helper lst x (list))\n        (lambda (lst1 lst2)\n      \
    \    (cond [(> (first lst1) (first lst2)) #t]\n                [(< (first lst1)\
    \ (first lst2)) #f]\n                [(> (second lst1) (second lst2)) #f]\n  \
    \              [(< (second lst1) (second lst2)) #t]))))\n", "  (define (helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (helper (rest lst) x (add1 row) col)]\n      [(= x (first (first lst)))\n\
    \       (cons (list row col) (helper (rest lst) x row (add1 col)))]\n      [else\
    \ (helper (rest lst) x row (add1 col))]))\n  (sort (helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(equal? x (first (first lst)))\n       (cons (list row col) (get-row-helper\
    \ (rest lst) x row (+ col 1)))]\n      [else (get-row-helper (rest lst) x row\
    \ (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))", "  (define\
    \ (get-row-helper lst x row-num)\n    (cond\n      [(empty? lst) empty]\n    \
    \  [(member x (first lst))\n       (append (list (list row-num (index-of x (first\
    \ lst))))\n               (get-row-helper (rest lst) x (+ row-num 1)))]\n    \
    \  [else (get-row-helper (rest lst) x (+ row-num 1))]))\n  (sort (get-row-helper\
    \ lst x 0)\n        (lambda (x y)\n          (cond\n            [(= (first x)\
    \ (first y))\n             (< (second y) (second x))]\n            [else (< (first\
    \ x) (first y))]))))\n", "  (define (get-row-helper lst x acc)\n    (cond\n  \
    \    [(empty? lst) (reverse acc)]\n      [(find x (first lst))\n       (get-row-helper\
    \ (rest lst) x (append (get-coordinates (first lst) x) acc))]\n      [else (get-row-helper\
    \ (rest lst) x acc)]))\n  (get-row-helper lst x (list)))\n", "  (define (helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst))\
    \ (helper (rest lst) x acc)]\n      [(= x (first (first lst))) (helper (rest lst)\
    \ x (cons (list (length acc) (length (first lst))) acc))]\n      [else (helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (helper lst x (list))\
    \ (lambda (l1 l2) (or (< (first l1) (first l2)) (and (= (first l1) (first l2))\
    \ (> (second l1) (second l2)))))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (if (= col x)\n           \
    \  (list (list (list-ref lst (sub1 (length lst)))\n                         (list-ref\
    \ row (sub1 (length row)))))))\n        <))\n", "  (define (get-row-helper lst\
    \ x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (add1 row) col)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (when (= x col)\n         \
    \  (list (length lst) col)))\n        <))\n", "  (define (get-row-helper lst x\
    \ row col)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get-row-helper\
    \ (cdr lst) x (+ row 1) 0))\n          ((= x (car (car lst)))\n           (cons\
    \ (list row col) (get-row-helper (cdr (car lst)) x row (+ col 1))))\n        \
    \  (else (get-row-helper (cdr (car lst)) x row (+ col 1)))))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond ((< (car l1) (car l2))\
    \ #t)\n                ((> (car l1) (car l2)) #f)\n                ((> (cadr l1)\
    \ (cadr l2)) #t)\n                ((< (cadr l1) (cadr l2)) #f)\n             \
    \   (else #f)))))\n", "  (define (helper lst x acc)\n    (cond\n      [(empty?\
    \ lst) (reverse acc)]\n      [(empty? (first lst)) (helper (rest lst) x acc)]\n\
    \      [(= x (first (first lst))) (helper (rest lst) x (cons (list (length acc)\
    \ 0) acc))]\n      [(= x (first (rest (first lst)))) (helper (rest lst) x (cons\
    \ (list (length acc) 1) acc))]\n      [(= x (first (rest (rest (first lst)))))\
    \ (helper (rest lst) x (cons (list (length acc) 2) acc))]\n      [else (helper\
    \ (rest lst) x acc)]))\n  (helper lst x (list)))\n", "  (define (get-row-helper\
    \ lst x result)\n    (cond ((null? lst) result)\n          ((null? (car lst))\
    \ (get-row-helper (cdr lst) x result))\n          ((equal? x (car (car lst)))\n\
    \           (get-row-helper (cdr lst) x (append result (list (list (length result)\
    \ 0)))))\n          ((equal? x (car (cdr (car lst))))\n           (get-row-helper\
    \ (cdr lst) x (append result (list (list (length result) 1)))))\n          ((equal?\
    \ x (car (cdr (cdr (car lst)))))\n           (get-row-helper (cdr lst) x (append\
    \ result (list (list (length result) 2)))))\n          ((equal? x (car (cdr (cdr\
    \ (cdr (car lst))))))\n           (get-row-helper (cdr lst) x (append result (list\
    \ (list (length result) 3)))))\n          ((equal? x (car (cdr (cdr (cdr (cdr\
    \ (car lst)))))))\n           (get-row-helper (cdr lst) x (append result (list\
    \ (list (length result) 4)))))\n          ((equal? x (car (cdr (cdr (cdr (cdr\
    \ (cdr (car lst))))))))\n           (get-row-helper (cdr lst) x (append result\
    \ (list (list (length result) 5)))))\n          (else (get-row-helper (cdr lst)\
    \ x result))))\n  (define (sort-by-row lst)\n    (cond ((null? lst) '())\n   \
    \       ((null? (cdr lst)) lst)\n          ((< (car (car lst)) (car (car (cdr\
    \ lst))))\n           (cons (car lst) (sort-by-row (cdr lst))))\n          (else\
    \ (cons (car (cdr lst)) (sort-by-row (cons (car lst) (cdr (cdr lst))))))))\n \
    \ (define (sort-by-column lst)", "  (define (get-row-helper lst x row col)\n \
    \   (cond\n      [(empty? lst) (list)]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (add1 row) col)]\n      [(equal? x (first (first lst)))\n     \
    \  (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n     \
    \ [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (cond\n    [(empty? lst) (list)]\n   \
    \ [(empty? (first lst)) (get_row (rest lst) x)]\n    [(= x (first (first lst)))\n\
    \     (append (list (list (length lst) (length (first lst))))\n             (get_row\
    \ (rest lst) x))]\n    [else (get_row (rest lst) x)]))\n", "  (sort (for/list\
    \ ([row (in-list lst)]\n                   [col (in-list row)])\n         (if\
    \ (= col x)\n             (list (list (list-ref lst (sub1 (length lst)))\n   \
    \                      (list-ref row (sub1 (length row)))))))\n        (lambda\
    \ (l1 l2)\n          (cond\n            [(< (car (car l1)) (car (car l2))) #t]\n\
    \            [(> (car (car l1)) (car (car l2))) #f]\n            [(> (cadr (car\
    \ l1)) (cadr (car l2))) #t]\n            [(< (cadr (car l1)) (cadr (car l2)))\
    \ #f]))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(empty? (first lst)) (get-row-helper (rest lst) x (add1\
    \ row) 0)]\n      [(equal? x (first (first lst)))\n       (cons (list row col)\
    \ (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst)))\n       (cons (list row col) (get-row-helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x row-num)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get-row-helper\
    \ (cdr lst) x (+ row-num 1)))\n          ((member x (car lst)) (append (map (lambda\
    \ (y) (list row-num y)) (get-col-indices (car lst) x)) (get-row-helper (cdr lst)\
    \ x (+ row-num 1))))\n          (else (get-row-helper (cdr lst) x (+ row-num 1)))))\n\
    \  (define (get-col-indices lst x)\n    (cond ((null? lst) '())\n          ((=\
    \ x (car lst)) (cons 0 (map (lambda (y) (+ y 1)) (get-col-indices (cdr lst) x))))\n\
    \          (else (map (lambda (y) (+ y 1)) (get-col-indices (cdr lst) x)))))\n\
    \  (sort (get-row-helper lst x 0) (lambda (x y) (< (car x) (car y)))))\n", " \
    \ (define (helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty?\
    \ (first lst)) (helper (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n\
    \       (helper (rest lst) x (cons (list (length acc) 0) acc))]\n      [(equal?\
    \ x (first (rest (first lst))))\n       (helper (rest lst) x (cons (list (length\
    \ acc) 1) acc))]\n      [(equal? x (first (rest (rest (first lst)))))\n      \
    \ (helper (rest lst) x (cons (list (length acc) 2) acc))]\n      [else (helper\
    \ (rest lst) x acc)]))\n  (sort (helper lst x '())\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x row-num)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (+ row-num 1))]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row-num 0) (get-row-helper (rest lst) x (+ row-num\
    \ 1)))]\n      [else (get-row-helper (rest lst) x (+ row-num 1))]))\n  (define\
    \ (get-col-helper lst x row-num col-num)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get-col-helper (rest lst) x row-num (+ col-num 1))]\n\
    \      [(equal? x (first (first lst)))\n       (cons (list row-num col-num) (get-col-helper\
    \ (rest lst) x row-num (+ col-num 1)))]\n      [else (get-col-helper (rest lst)\
    \ x row-num (+ col-num 1))]))\n  (define (sort-row-helper lst)\n    (cond\n  \
    \    [(empty? lst) '()]\n      [else (cons (first lst) (sort-row-helper (rest\
    \ lst)))]))\n  (define (sort-col-helper lst)\n    (cond\n      [(empty? lst) '()]\n\
    \      [else (cons (first lst) (sort-col-helper (rest lst)))]))\n  (define (sort-row\
    \ lst)\n    (sort-row-helper (sort lst < #:key first)))\n  (define (sort-col lst)\n\
    \    (sort-col-helper (sort lst > #:key second)))\n  (sort-col (sort-row (append\
    \ (get-row-helper lst x 0) (get-col-helper lst x 0 0)))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (helper lst x acc)\n    (if (null?\
    \ lst)\n        acc\n        (let ((row (car lst)))\n          (if (null? row)\n\
    \              (helper (cdr lst) x acc)\n              (let ((col (car row)))\n\
    \                (if (= col x)\n                    (helper (cdr lst) x (cons\
    \ (list (length acc) 0) acc))\n                    (helper (cdr lst) x (cons (list\
    \ (length acc) (length (member x row))) acc))))))))\n  (sort (helper lst x (list))\n\
    \        (lambda (l1 l2)\n          (cond\n            [(< (car l1) (car l2))\
    \ #t]\n            [(> (car l1) (car l2)) #f]\n            [(> (cadr l1) (cadr\
    \ l2)) #t]\n            [(< (cadr l1) (cadr l2)) #f]\n            [else #f]))))\n",
  "  (define (helper lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n \
    \     [(empty? (first lst)) (helper (rest lst) x acc)]\n      [(= x (first (first\
    \ lst))) (helper (rest lst) x (cons (list (length acc) 0) acc))]\n      [(> x\
    \ (first (first lst))) (helper (rest lst) x acc)]\n      [else (helper (rest lst)\
    \ x (cons (list (length acc) (length (first lst))) acc))]))\n  (define (sort-by-row\
    \ lst)\n    (sort lst (lambda (l1 l2) (< (first l1) (first l2)))))\n  (define\
    \ (sort-by-col lst)\n    (sort lst (lambda (l1 l2) (> (second l1) (second l2)))))\n\
    \  (define (sort-by-row-and-col lst)\n    (sort-by-row (sort-by-col lst)))\n \
    \ (sort-by-row-and-col (helper lst x (list))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (+ row 1) col)]\n      [(= x (first (first lst)))\n\
    \       (cons (list row col) (get-row-helper (rest lst) x row (+ col 1)))]\n \
    \     [else (get-row-helper (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get-row-helper lst x row col)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (+ row 1) 0)]\n      [(equal? x (first (first lst)))\n       (cons\
    \ (list row col) (get-row-helper (rest lst) x row (+ col 1)))]\n      [else (get-row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n       \
    \ (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x (add1 row) col)]\n      [(equal? x (first\
    \ (first lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row\
    \ (add1 col)))]\n      [else (get-row-helper (rest lst) x row (add1 col))]))\n\
    \  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n\
    \            [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first\
    \ l2)) #f]\n            [(> (second l1) (second l2)) #t]\n            [(< (second\
    \ l1) (second l2)) #f]\n            [else #f]))))\n", "  (define (helper lst x\
    \ acc)\n    (cond [(empty? lst) acc]\n          [(empty? (first lst)) (helper\
    \ (rest lst) x acc)]\n          [(equal? x (first (first lst)))\n           (helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]\n          [(equal? x (first\
    \ (rest (first lst))))\n           (helper (rest lst) x (cons (list (length acc)\
    \ 1) acc))]\n          [(equal? x (first (rest (rest (first lst)))))\n       \
    \    (helper (rest lst) x (cons (list (length acc) 2) acc))]\n          [else\
    \ (helper (rest lst) x acc)]))\n  (sort (helper lst x (list))\n        (lambda\
    \ (x y)\n          (cond [(< (first x) (first y)) #t]\n                [(> (first\
    \ x) (first y)) #f]\n                [(> (second x) (second y)) #t]\n        \
    \        [(< (second x) (second y)) #f]))))\n", "  (define (get-row-helper lst\
    \ x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (add1 row) col)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get-row-helper lst x row-num)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (+ row-num 1))]\n      [(member x (first lst))\n       (append\
    \ (list (list row-num (position x (first lst))))\n               (get-row-helper\
    \ (rest lst) x (+ row-num 1)))]\n      [else (get-row-helper (rest lst) x (+ row-num\
    \ 1))]))\n  (sort (get-row-helper lst x 0)\n        (lambda (lst1 lst2)\n    \
    \      (cond\n            [(< (first lst1) (first lst2)) #t]\n            [(>\
    \ (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x row-num)\n    (cond [(empty? lst) empty]\n          [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (+ row-num 1))]\n          [(equal? x (first (first\
    \ lst))) (cons (list row-num 0) (get-row-helper (rest lst) x (+ row-num 1)))]\n\
    \          [(get-row-helper (rest (first lst)) x row-num)]))\n  (sort (get-row-helper\
    \ lst x 0) (lambda (x y) (if (equal? (first x) (first y))\n                  \
    \                                (if (< (second x) (second y))\n             \
    \                                         #t\n                               \
    \                       #f)\n                                                \
    \  (if (< (first x) (first y))\n                                             \
    \         #t\n                                                      #f)))))\n",
  "  (define (get_row-helper lst x row col)\n    (cond [(empty? lst) '()]\n      \
    \    [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      \
    \    [(= x (first (first lst)))\n           (cons (list row col) (get_row-helper\
    \ (rest lst) x row (+ col 1)))]\n          [else (get_row-helper (rest lst) x\
    \ row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (lst1\
    \ lst2)\n          (cond [(< (first lst1) (first lst2)) #t]\n                [(>\
    \ (first lst1) (first lst2)) #f]\n                [(> (second lst1) (second lst2))\
    \ #t]\n                [else #f]))))\n", "  (define (helper lst x acc)\n    (cond\n\
    \      [(empty? lst) acc]\n      [(empty? (first lst)) (helper (rest lst) x acc)]\n\
    \      [(= x (first (first lst))) (helper (rest lst) x (cons (list (length acc)\
    \ (length (first lst))) acc))]\n      [else (helper (rest lst) x (cons (list (length\
    \ acc) 0) acc))]))\n  (sort (helper lst x (list))\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(> (first lst1) (first lst2)) #t]\n           \
    \ [(< (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #f]\n            [(< (second lst1) (second lst2)) #t]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n   \
    \   [(equal? x (first (first lst)))\n       (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (define (helper lst x row col)\n    (cond [(empty? lst) '()]\n          [(empty?\
    \ (first lst)) (helper (rest lst) x (+ row 1) 0)]\n          [(= x (first (first\
    \ lst)))\n           (cons (list row col) (helper (rest lst) x row (+ col 1)))]\n\
    \          [else (helper (rest lst) x row (+ col 1))]))\n  (sort (helper lst x\
    \ 0 0)\n        (lambda (x y)\n          (cond [(> (first x) (first y)) #t]\n\
    \                [(< (first x) (first y)) #f]\n                [(> (second x)\
    \ (second y)) #f]\n                [(< (second x) (second y)) #t]))))\n", "  (define\
    \ (get-row-helper lst x row col result)\n    (cond\n      [(empty? lst) result]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1) col result)]\n\
    \      [(= x (first (first lst)))\n       (get-row-helper (rest (first lst)) x\
    \ row (+ col 1) (cons (list row col) result))]\n      [else (get-row-helper (rest\
    \ (first lst)) x row (+ col 1) result)]))\n  (sort (get-row-helper lst x 0 0 '())\n\
    \        (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2))\
    \ #t]\n            [(> (first l1) (first l2)) #f]\n            [(> (second l1)\
    \ (second l2)) #t]\n            [(< (second l1) (second l2)) #f]\n           \
    \ [else #f]))))\n", "  (define (get-row-helper lst x acc)\n    (cond [(empty?\
    \ lst) (reverse acc)]\n          [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x acc)]\n          [(= x (first (first lst))) (get-row-helper (rest lst) x (cons\
    \ (list (length acc) 0) acc))]\n          [(> x (first (first lst))) (get-row-helper\
    \ (rest lst) x acc)]\n          [else (get-row-helper (rest lst) x (cons (list\
    \ (length acc) (get-row-helper-2 (first lst) x 0)) acc))]))\n  (define (get-row-helper-2\
    \ lst x acc)\n    (cond [(empty? lst) acc]\n          [(= x (first lst)) acc]\n\
    \          [else (get-row-helper-2 (rest lst) x (+ acc 1))]))\n  (get-row-helper\
    \ lst x (list)))\n", "  (define (get-row-helper lst x row col)\n    (cond\n  \
    \    [(empty? lst) empty]\n      [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col)\
    \ (get-row-helper (rest lst) x row (+ col 1)))]\n      [else (get-row-helper (rest\
    \ lst) x row (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda\
    \ (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n     \
    \       [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second l2))\
    \ #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row-num)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(member x (first lst))\n       (append (list (list row-num (index-of x\
    \ (first lst))))\n               (get-row-helper (rest lst) x (+ row-num 1)))]\n\
    \      [else (get-row-helper (rest lst) x (+ row-num 1))]))\n  (sort (get-row-helper\
    \ lst x 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first l1)\
    \ (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n            [(>\
    \ (second l1) (second l2)) #t]\n            [(< (second l1) (second l2)) #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond [(empty? lst) '()]\n      \
    \    [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n     \
    \     [(equal? x (first (first lst)))\n           (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n          [else (get-row-helper (rest lst) x\
    \ row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1\
    \ lst2)\n          (cond [(< (first lst1) (first lst2)) #t]\n                [(>\
    \ (first lst1) (first lst2)) #f]\n                [(> (second lst1) (second lst2))\
    \ #t]\n                [(< (second lst1) (second lst2)) #f]))))\n", "  (define\
    \ (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n   \
    \   [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n      [(=\
    \ x (first (first lst)))\n       (cons (list row col) (get-row-helper (rest lst)\
    \ x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row (add1 col))]))\n\
    \  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n\
    \            [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first\
    \ l2)) #f]\n            [(> (second l1) (second l2)) #t]\n            [(< (second\
    \ l1) (second l2)) #f]\n            [else #f]))))\n", "  (define (helper lst x\
    \ acc)\n    (cond [(empty? lst) (reverse acc)]\n          [(empty? (first lst))\
    \ (helper (rest lst) x acc)]\n          [(= x (first (first lst)))\n         \
    \  (helper (rest lst) x (cons (list (length acc) (length (first lst))) acc))]\n\
    \          [else (helper (rest lst) x acc)]))\n  (define (sort-row lst)\n    (sort\
    \ lst (lambda (lst1 lst2)\n                (cond [(> (first lst1) (first lst2))\
    \ #t]\n                      [(< (first lst1) (first lst2)) #f]\n            \
    \          [(> (second lst1) (second lst2)) #f]\n                      [(< (second\
    \ lst1) (second lst2)) #t]))))\n  (sort-row (helper lst x '())))\n", "  (define\
    \ (get-row-helper lst x row-num)\n    (cond ((null? lst) '())\n          ((null?\
    \ (car lst)) (get-row-helper (cdr lst) x (+ row-num 1)))\n          ((member x\
    \ (car lst)) (append (get-row-helper (cdr lst) x (+ row-num 1))\n            \
    \                            (list (list row-num (- (length (car lst)) (length\
    \ (member x (car lst))))))))\n          (else (get-row-helper (cdr lst) x (+ row-num\
    \ 1)))))\n  (sort (get-row-helper lst x 0)\n        (lambda (x y)\n          (cond\
    \ ((< (car x) (car y)) #t)\n                ((> (car x) (car y)) #f)\n       \
    \         ((> (cadr x) (cadr y)) #t)\n                ((< (cadr x) (cadr y)) #f)\n\
    \                (else #f)))))\n", "  (define (get-row-helper lst x)\n    (cond\
    \ ((null? lst) '())\n          ((null? (car lst)) (get-row-helper (cdr lst) x))\n\
    \          ((equal? x (car (car lst)))\n           (cons (list (length lst) (length\
    \ (car lst)))\n                 (get-row-helper (cdr lst) x)))\n          (else\
    \ (get-row-helper (cdr lst) x))))\n  (sort (get-row-helper lst x)\n        (lambda\
    \ (lst1 lst2)\n          (cond ((< (car lst1) (car lst2)) #t)\n              \
    \  ((> (car lst1) (car lst2)) #f)\n                ((> (cadr lst1) (cadr lst2))\
    \ #t)\n                ((< (cadr lst1) (cadr lst2)) #f)\n                (else\
    \ #f)))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty?\
    \ lst) (list)]\n      [(empty? (first lst)) (get-row-helper (rest lst) x (add1\
    \ row) col)]\n      [(equal? x (first (first lst)))\n       (cons (list row col)\
    \ (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) col)]\n \
    \     [(equal? x (first (first lst)))\n       (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]))))\n", "  (define (helper lst x row col)\n    (cond\n  \
    \    [(empty? lst) (list)]\n      [(empty? (first lst)) (helper (rest lst) x (add1\
    \ row) col)]\n      [(equal? x (first (first lst)))\n       (cons (list row col)\
    \ (helper (rest lst) x row (add1 col)))]\n      [else (helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (helper lst x 0 0)\n        (lambda (lst1 lst2)\n  \
    \        (cond\n            [(< (first lst1) (first lst2)) #t]\n            [(>\
    \ (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n   \
    \   [(equal? x (first (first lst)))\n       (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (helper\
    \ lst x acc)\n    (cond [(empty? lst) (reverse acc)]\n          [(empty? (first\
    \ lst)) (helper (rest lst) x acc)]\n          [(= x (first (first lst)))\n   \
    \        (helper (rest lst) x (cons (list (length acc) (length (first lst))) acc))]\n\
    \          [else (helper (rest lst) x acc)]))\n  (define (sort-by-row lst)\n \
    \   (sort lst (lambda (lst1 lst2) (< (first lst1) (first lst2)))))\n  (define\
    \ (sort-by-col lst)\n    (sort lst (lambda (lst1 lst2) (> (second lst1) (second\
    \ lst2)))))\n  (sort-by-col (sort-by-row (helper lst x '()))))\n", "  (define\
    \ (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n    \
    \  [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(=\
    \ x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest lst)\
    \ x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n\
    \  (sort (get_row-helper lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n\
    \            [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first\
    \ l2)) #f]\n            [(> (second l1) (second l2)) #t]\n            [(< (second\
    \ l1) (second l2)) #f]\n            [else #f]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get-row-helper\
    \ (cdr lst) x (+ row 1) 0))\n          ((equal? x (car (car lst)))\n         \
    \  (cons (list row col) (get-row-helper (cdr (car lst)) x row (+ col 1))))\n \
    \         (else (get-row-helper (cdr (car lst)) x row (+ col 1)))))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (if (equal? (car x) (car y))\n\
    \              (if (< (cadr x) (cadr y)) #t #f)\n              (if (< (car x)\
    \ (car y)) #t #f)))))\n", "  (define (get-coordinates lst x)\n    (cond\n    \
    \  [(empty? lst) empty]\n      [(empty? (first lst)) (get-coordinates (rest lst)\
    \ x)]\n      [(equal? x (first (first lst))) (cons (list (length lst) (length\
    \ (first lst))) (get-coordinates (rest lst) x))]\n      [else (get-coordinates\
    \ (rest lst) x)]))\n  (define (sort-by-row lst)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(empty? (rest lst)) lst]\n      [(< (first (first lst)) (first\
    \ (first (rest lst)))) (cons (first lst) (sort-by-row (rest lst)))]\n      [else\
    \ (cons (first (rest lst)) (cons (first lst) (sort-by-row (rest (rest lst)))))]))\n\
    \  (define (sort-by-column lst)\n    (cond\n      [(empty? lst) empty]\n     \
    \ [(empty? (rest lst)) lst]\n      [(> (second (first lst)) (second (first (rest\
    \ lst)))) (cons (first lst) (sort-by-column (rest lst)))]\n      [else (cons (first\
    \ (rest lst)) (cons (first lst) (sort-by-column (rest (rest lst)))))]))\n  (define\
    \ (sort-by-row-and-column lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty?\
    \ (rest lst)) lst]\n      [(and (= (first (first lst)) (first (first (rest lst))))\n\
    \            (> (second (first lst)) (second (first (rest lst)))))\n       (cons\
    \ (first lst) (sort-by-row-and-column (rest lst)))]\n      [else (cons (first\
    \ (rest lst)) (cons (first lst) (sort-by-row-and-column (rest (rest lst)))))]))\n\
    \  (sort-by-row-and-column (sort-by-column (sort-by-row (get-", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x (add1 row) col)]\n      [(equal? x (first\
    \ (first lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row\
    \ (add1 col)))]\n      [else (get-row-helper (rest lst) x row (add1 col))]))\n\
    \  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n\
    \            [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first\
    \ l2)) #f]\n            [(> (second l1) (second l2)) #t]\n            [(< (second\
    \ l1) (second l2)) #f]\n            [else #f]))))\n", "  (define (get-row-helper\
    \ lst x row col result)\n    (cond\n      [(empty? lst) result]\n      [(empty?\
    \ (first lst)) (get-row-helper (rest lst) x (+ row 1) col result)]\n      [(=\
    \ x (first (first lst)))\n       (get-row-helper (rest (first lst)) x row (+ col\
    \ 1) (cons (list row col) result))]\n      [else (get-row-helper (rest (first\
    \ lst)) x row (+ col 1) result)]))\n  (define (sort-by-row lst)\n    (sort lst\
    \ (lambda (x y) (< (first x) (first y)))))\n  (define (sort-by-col lst)\n    (sort\
    \ lst (lambda (x y) (> (second x) (second y)))))\n  (sort-by-col (sort-by-row\
    \ (get-row-helper lst x 0 0 '()))))\n", "  (define (get-row-helper lst x acc)\n\
    \    (cond\n      [(empty? lst) (reverse acc)]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n       (get-row-helper\
    \ (rest lst) x (cons (list (length acc) (length (first lst))) acc))]\n      [else\
    \ (get-row-helper (rest lst) x acc)]))\n  (get-row-helper lst x (list)))\n", " \
    \ (define (get-row-helper lst x row col)\n    (cond [(empty? lst) (list)]\n  \
    \        [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) col)]\n\
    \          [(= x (first (first lst)))\n           (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n          [else (get-row-helper (rest lst) x\
    \ row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1\
    \ l2)\n          (cond [(< (first l1) (first l2)) #t]\n                [(> (first\
    \ l1) (first l2)) #f]\n                [(> (second l1) (second l2)) #t]\n    \
    \            [else #f]))))\n", "  (define (helper lst x acc)\n    (cond\n    \
    \  [(empty? lst) acc]\n      [(empty? (first lst)) (helper (rest lst) x acc)]\n\
    \      [(= x (first (first lst))) (helper (rest lst) x (cons (list (length acc)\
    \ (length (first lst))) acc))]\n      [else (helper (rest lst) x (cons (list (length\
    \ acc) 0) acc))]))\n  (sort (helper lst x (list))\n        (lambda (l1 l2)\n \
    \         (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", "  (define\
    \ (get-row-helper lst x row col result)\n    (cond [(empty? lst) result]\n   \
    \       [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1) col result)]\n\
    \          [(= x (first (first lst))) (get-row-helper (rest (first lst)) x row\
    \ (+ col 1) (cons (list row col) result))]\n          [else (get-row-helper (rest\
    \ (first lst)) x row (+ col 1) result)]))\n  (get-row-helper lst x 0 0 (list)))\n",
  "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (add1 row) col)]\n \
    \     [(equal? x (first (first lst)))\n       (cons (list row col) (get_row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get_row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) col)]\n \
    \     [(equal? x (first (first lst)))\n       (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst)))\n       (cons (list row col) (get-row-helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get-row-helper lst x row col)\n\
    \    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (add1 row) col)]\n      [(equal? x (first (first lst)))\n     \
    \  (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n     \
    \ [else (get-row-helper (rest lst) x row (add1 col))]))\n  (define (sort-by-row\
    \ lst)\n    (sort lst (lambda (l1 l2) (< (first l1) (first l2)))))\n  (define\
    \ (sort-by-col lst)\n    (sort lst (lambda (l1 l2) (> (second l1) (second l2)))))\n\
    \  (sort-by-row (sort-by-col (get-row-helper lst x 0 0))))\n", "  (define (get-row-helper\
    \ lst x result)\n    (cond\n      [(empty? lst) result]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x result)]\n      [(= x (first (first lst)))\n\
    \       (get-row-helper (rest lst) x (append result (list (list (length result)\
    \ 0))))]\n      [else (get-row-helper (rest lst) x (append result (list (list\
    \ (length result) (length (first lst))))))]))\n  (define (sort-by-row lst)\n \
    \   (sort lst (lambda (x y) (< (first x) (first y)))))\n  (define (sort-by-column\
    \ lst)\n    (sort lst (lambda (x y) (> (second x) (second y)))))\n  (sort-by-column\
    \ (sort-by-row (get-row-helper lst x '()))))\n", "  (define (get-row-helper lst\
    \ x row col result)\n    (cond\n      [(empty? lst) result]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x (+ row 1) 0 result)]\n      [(= x (first\
    \ (first lst)))\n       (get-row-helper (rest (first lst)) x row (+ col 1) (cons\
    \ (list row col) result))]\n      [else (get-row-helper (rest (first lst)) x row\
    \ (+ col 1) result)]))\n  (define (sort-by-row lst)\n    (sort lst (lambda (l1\
    \ l2) (< (first l1) (first l2)))))\n  (define (sort-by-col lst)\n    (sort lst\
    \ (lambda (l1 l2) (> (second l1) (second l2)))))\n  (sort-by-col (sort-by-row\
    \ (get-row-helper lst x 0 0 '()))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
