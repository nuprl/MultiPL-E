name: HumanEval_124_valid_date
language: rkt
prompt: "#lang racket\n\n#| You have to write a function which validates a given date\
  \ string and\nreturns #t if the date is valid otherwise #f.\nThe date is valid if\
  \ all of the following rules are satisfied:\n1. The date string is not empty.\n\
  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  3. The months should not be less than 1 or higher than 12.\n4. The date should be\
  \ in the format: mm-dd-yyyy\n>>> (valid_date \"03-11-2000\")\n#t\n>>> (valid_date\
  \ \"15-01-2012\")\n#f\n>>> (valid_date \"04-0-2040\")\n#f\n>>> (valid_date \"06-04-2020\"\
  )\n#t\n>>> (valid_date \"06/04/2020\")\n#f|#\n(define (valid_date date)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n\
  \    (check-equal? (candidate \"03-11-2000\") #t)\n    (check-equal? (candidate\
  \ \"15-01-2012\") #f)\n    (check-equal? (candidate \"04-0-2040\") #f)\n    (check-equal?\
  \ (candidate \"06-04-2020\") #t)\n    (check-equal? (candidate \"01-01-2007\") #t)\n\
  \    (check-equal? (candidate \"03-32-2011\") #f)\n    (check-equal? (candidate\
  \ \"\") #f)\n    (check-equal? (candidate \"04-31-3000\") #f)\n    (check-equal?\
  \ (candidate \"06-06-2005\") #t)\n    (check-equal? (candidate \"21-31-2000\") #f)\n\
  \    (check-equal? (candidate \"04-12-2003\") #t)\n    (check-equal? (candidate\
  \ \"04122003\") #f)\n    (check-equal? (candidate \"20030412\") #f)\n    (check-equal?\
  \ (candidate \"2003-04\") #f)\n    (check-equal? (candidate \"2003-04-12\") #f)\n\
  \    (check-equal? (candidate \"04-2003\") #f)\n))\n\n(test-humaneval)"
completions: ["  (define (valid-month month)\n    (and (not (empty? month))\n    \
    \     (and (not (empty? (string-&gt;number month)))\n              (and (&lt;=\
    \ 1 (string-&gt;number month))\n                   (&lt;= (string-&gt;number month)\
    \ 12)))))\n  (define (valid-day day)\n    (and (not (empty? day))\n         (and\
    \ (not (empty? (string-&gt;number day)))\n              (and (&lt;= 1 (string-&gt;number\
    \ day))\n                   (&lt;= (string-&gt;number day) 31)))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (and (not (empty?\
    \ (string-&gt;number year)))\n              (and (&lt;= 1 (string-&gt;number year))\n\
    \                   (&lt;= (string-&gt;number year) 9999)))))\n  (define (valid-format\
    \ date)\n    (and (not (empty? date))\n         (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n              (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n                   (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))))\n  (define (valid-date-format date)\n    (define (valid-date-format-helper\
    \ date)\n      (if (empty? date)\n          #t\n          (and (valid-date-format-helper\
    \ (cdr date))\n               (valid-format (car date)))))\n    (valid-date-format-helper\
    \ (string-split date \"-\")))\n  (define (valid-date-month date)\n    (define\
    \ (valid-date-month-helper date)\n      (if (empty? date)\n          #t\n    \
    \      (and (valid-date-month-hel", "  (define (valid-month month)\n    (and (not\
    \ (empty? month))\n         (integer? (string->number month))\n         (and (>=\
    \ (string->number month) 1)\n              (<= (string->number month) 12))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (integer? (string->number\
    \ day))\n         (and (>= (string->number day) 1)\n              (<= (string->number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (integer? (string->number year))\n         (and (>= (string->number year)\
    \ 1)\n              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (valid-date-format date)\n       (valid-month (substring date 0 2))\n      \
    \ (valid-day (substring date 3 5))\n       (valid-year (substring date 6 10))))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n      (define\
    \ (valid-month-day-pair month day)\n        (cond ((and (= month 1) (= day 31))\
    \ #t)\n              ((and (= month 3) (= day 31)) #t)\n              ((and (=\
    \ month 5) (= day 31)) #t)\n              ((and (= month 7) (= day 31)) #t)\n\
    \              ((and (= month 8) (= day 31)) #t)\n              ((and (= month\
    \ 10) (= day 31)) #t)\n              ((and (= month 12) (= day 31)) #t)\n    \
    \          ((and (= month 4) (= day 30)) #t)\n              ((and (= month 6)\
    \ (= day 30)) #t)\n              ((and (= month 9) (= day 30)) #t)\n         \
    \     ((and (= month 11) (= day 30)) #t)\n              ((and (= month 2) (= day\
    \ 29)) #t)\n              (else #f)))\n      (define (valid-month-day-pair-helper\
    \ date)\n        (define (valid-month-day-pair-helper-helper date)\n         \
    \ (define (valid-month-day-pair-helper-helper-helper date)\n            (define\
    \ (valid-month-day-pair-helper-helper-helper-helper date)\n              (define\
    \ (valid-month-day-pair-helper-helper-helper-helper-helper date)\n           \
    \     (define (valid-month-day-pair-", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day\
    \ month day)\n    (and (integer? day)\n         (cond\n           [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \            (and (>= day 1) (<= day 31))]\n           [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n            (and (>= day 1) (<= day 30))]\n  \
    \         [(= month 2)\n            (and (>= day 1) (<= day 29))]\n          \
    \ [else #f])))\n  (define (valid-year year)\n    (and (integer? year)\n      \
    \   (>= year 0)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date date)\n    (string-split\
    \ date #\\-))\n  (define (get-month-day-year date)\n    (map string->number (split-date\
    \ date)))\n  (define (valid-date? date)\n    (let* ([month-day-year (get-month-day-year\
    \ date)]\n           [month (list-ref month-day-year 0)]\n           [day (list-ref\
    \ month-day-year 1)]\n           [year (list-ref month-day-year 2)])\n      (and\
    \ (valid-date-format date)\n           (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (valid-date? date))\n", "  (cond\n\
    \    [(empty? date) #f]\n    [(not (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)) #f]\n    [(and (member (string-&gt;number (substring date 3 5)) '(1 3\
    \ 5 7 8 10 12))\n          (&gt; (string-&gt;number (substring date 0 2)) 31))\
    \ #f]\n    [(and (member (string-&gt;number (substring date 3 5)) '(4 6 9 11))\n\
    \          (&gt; (string-&gt;number (substring date 0 2)) 30)) #f]\n    [(and\
    \ (= (string-&gt;number (substring date 3 5)) 2)\n          (&gt; (string-&gt;number\
    \ (substring date 0 2)) 29)) #f]\n    [(and (&lt; (string-&gt;number (substring\
    \ date 3 5)) 1)\n          (&gt; (string-&gt;number (substring date 3 5)) 12))\
    \ #f]\n    [else #t]))\n</code>\n", "  (define (valid-day? day month)\n    (cond\n\
    \      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n\
    \      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define (valid-month?\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-year? year)\n\
    \    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format? date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-date-format? date)\n       (valid-day? (string->number\
    \ (string-ref date 3)) (string->number (string-ref date 0)))\n       (valid-month?\
    \ (string->number (string-ref date 0)))\n       (valid-year? (string->number (substring\
    \ date 6)))))\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         #t))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-date-parts-helper-helper date)\n        (define\
    \ (valid-date-parts-helper-helper-helper date)\n          (define (valid-date-parts-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-parts-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-date-part date)\n      (and (valid-month (string->number\
    \ (substring date 0 2)))\n           (valid-day (string->number (substring date\
    \ 3 5)))\n           (valid-year (string->number (substring date 6 10)))))\n \
    \   (valid-date-part date))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 0) (<= year 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (regexp-match? #rx\"\
    ^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (valid-date-parts date)\n \
    \   (define (valid-month-day month day)\n      (cond\n        [(and (member month\
    \ '(1 3 5 7 8 10 12))\n              (and (>= day 1) (<= day 31)))]\n        [(and\
    \ (member month '(4 6 9 11))\n              (and (>= day 1) (<= day 30)))]\n \
    \       [(and (= month 2)\n              (and (>= day 1) (<= day 29)))]\n    \
    \    [else #f]))\n    (define (valid-month-year month year)\n      (cond\n   \
    \     [(and (= month 2) (= year 2020)) #t]\n        [else #t]))\n    (define (valid-day-year\
    \ day year)\n      (cond\n        [(and (= day 29) (= year 2020)) #t]\n      \
    \  [else #t]))\n    (define (valid-month-day-year month day year)\n      (and\
    \ (valid-month-day month day)\n           (valid-month-year month year)\n    \
    \       (valid-day-year day year)))\n    (define (valid-date-parts-helper date)\n\
    \      (define (valid-date-parts-helper-helper date)\n        (define (valid-date-parts-helper-helper-helper\
    \ date)\n          (define (valid-date", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (and (&lt;= 1 month)\n              (&lt;= month\
    \ 12))))\n  (define (valid-day day)\n    (and (integer? day)\n         (and (&lt;=\
    \ 1 day)\n              (&lt;= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (&lt;= 1 year)\n              (&lt;= year 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-part date-part)\n\
    \      (and (integer? date-part)\n           (&lt;= 0 date-part)))\n    (let ([date-parts\
    \ (string-&gt;list date)])\n      (and (valid-date-part (string-&gt;number (list-ref\
    \ date-parts 0)))\n           (valid-date-part (string-&gt;number (list-ref date-parts\
    \ 1)))\n           (valid-date-part (string-&gt;number (list-ref date-parts 2)))\n\
    \           (valid-date-part (string-&gt;number (list-ref date-parts 3)))\n  \
    \         (valid-date-part (string-&gt;number (list-ref date-parts 5)))\n    \
    \       (valid-date-part (string-&gt;number (list-ref date-parts 6)))\n      \
    \     (valid-date-part (string-&gt;number (list-ref date-parts 7)))\n        \
    \   (valid-date-part (string-&gt;number (list-ref date-parts 8)))\n          \
    \ (valid-date-part (string-&gt;number (list-ref date-parts 9)))\n           (valid-date-part\
    \ (string-&gt;number (list-ref date-parts 10))))))\n  (define (valid-date-parts-values\
    \ date)\n    (define (valid-date-part-value date-part)\n     ", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (&lt;= 1 month)\n         \
    \     (&lt;= month 12))))\n  (define (valid-day month day)\n    (and (integer?\
    \ day)\n         (and (&lt;= 1 day)\n              (cond\n                [(or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n                 (&lt;= day 31)]\n                [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n                 (&lt;= day 30)]\n\
    \                [(= month 2)\n                 (&lt;= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (&gt;= year 0)))\n  (define\
    \ (valid-date-string date-string)\n    (and (string? date-string)\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date-string)))\n  (define (valid-date-list\
    \ date-list)\n    (and (list? date-list)\n         (= (length date-list) 3)))\n\
    \  (define (valid-date-list-values date-list)\n    (and (valid-month (string-&gt;number\
    \ (list-ref date-list 0)))\n         (valid-day (string-&gt;number (list-ref date-list\
    \ 0)) (string-&gt;number (list-ref date-list 1)))\n         (valid-year (string-&gt;number\
    \ (list-ref date-list 2)))))\n  (and (valid-date-string date)\n       (valid-date-list\
    \ (string-split date #\\-))\n       (valid-date-list-values (string-split date\
    \ #\\-))))\n</code>\n", "  (define (valid-day? day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (<= day 31))))\n  (define (valid-month?\
    \ month)\n    (and (integer? month)\n         (and (>= month 1)\n            \
    \  (<= month 12))))\n  (define (valid-year? year)\n    (and (integer? year)\n\
    \         (and (>= year 0)\n              (<= year 9999))))\n  (define (valid-date-format?\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-day-for-month? day month)\n    (cond\n      [(or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and\
    \ (>= day 1) (<= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (=\
    \ month 11))\n       (and (>= day 1) (<= day 30))]\n      [(= month 2)\n     \
    \  (and (>= day 1) (<= day 29))]\n      [else #f]))\n  (define (valid-date-parts?\
    \ date)\n    (let* ([date-parts (string-split date #\\-)]\n           [month (string->number\
    \ (vector-ref date-parts 0))]\n           [day (string->number (vector-ref date-parts\
    \ 1))]\n           [year (string->number (vector-ref date-parts 2))])\n      (and\
    \ (valid-day? day)\n           (valid-month? month)\n           (valid-year? year)\n\
    \           (valid-day-for-month? day month))))\n  (and (valid-date-format? date)\n\
    \       (valid-date-parts? date)))\n", "  (define (valid-day? day)\n    (and (not\
    \ (empty? day))\n         (not (negative? (string->number day)))\n         (not\
    \ (> (string->number day) 31))))\n  (define (valid-month? month)\n    (and (not\
    \ (empty? month))\n         (not (negative? (string->number month)))\n       \
    \  (not (> (string->number month) 12))))\n  (define (valid-year? year)\n    (and\
    \ (not (empty? year))\n         (not (negative? (string->number year)))))\n  (define\
    \ (valid-date-format? date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts? date)\n    (define (valid-day-for-month?\
    \ day month)\n      (cond\n        [(or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n         (and (valid-day? day)\n\
    \              (not (> (string->number day) 31)))]\n        [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n         (and (valid-day? day)\n       \
    \       (not (> (string->number day) 30)))]\n        [(and (= month 2) (valid-day?\
    \ day))\n         (and (valid-day? day)\n              (not (> (string->number\
    \ day) 29)))]))\n    (define (valid-date-parts-helper date)\n      (define (valid-date-parts-helper-helper\
    \ date)\n        (define (valid-date-parts-helper-helper-helper date)\n      \
    \    (and (valid-day-for-month? (substring date 3 5) (string->number (substring\
    \ date 0 2)))\n               (valid-year? (substring date 6 10))))\n        (and\
    \ (valid-month? (substring date 0 2))\n             (valid-date-parts-helper-helper-helper\
    \ date)))\n      (and (valid-day? (substring date 3 5))", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (not (negative? (string->number\
    \ month)))\n         (not (> (string->number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (not (negative? (string->number\
    \ day)))\n         (not (> (string->number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))\n         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-day-for-month day month)\n    (cond\n      [(or (equal? month \"1\")\n\
    \           (equal? month \"3\")\n           (equal? month \"5\")\n          \
    \ (equal? month \"7\")\n           (equal? month \"8\")\n           (equal? month\
    \ \"10\")\n           (equal? month \"12\"))\n       (not (> (string->number day)\
    \ 31))]\n      [(or (equal? month \"4\")\n           (equal? month \"6\")\n  \
    \         (equal? month \"9\")\n           (equal? month \"11\"))\n       (not\
    \ (> (string->number day) 30))]\n      [(equal? month \"2\")\n       (not (> (string->number\
    \ day) 29))]))\n  (define (valid-leap-year year)\n    (and (zero? (modulo (string->number\
    \ year) 4))\n         (or (not (zero? (modulo (string->number year) 100)))\n \
    \            (zero? (modulo (string->number year) 400)))))\n  (define (valid-day-for-leap-year\
    \ day month year)\n    (and (equal? month \"2\")\n         (equal? day \"29\"\
    )\n         (valid-leap-year year)))\n  (define (valid-day-for-non-leap-year day\
    \ month year)\n    (and", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^\\d{2}-\\d{2}-\\\
    d{4}$\" date))\n  (define (valid-date-parts date)\n    (define (valid-month-day\
    \ month day)\n      (cond\n        [(or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n         (and (>= day 1) (<=\
    \ day 31))]\n        [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \         (and (>= day 1) (<= day 30))]\n        [(= month 2)\n         (and (>=\
    \ day 1) (<= day 29))]\n        [else #f]))\n    (define (valid-month-year month\
    \ year)\n      (cond\n        [(= month 2)\n         (and (>= year 1) (<= year\
    \ 9999))]\n        [else #t]))\n    (define (valid-day-year day year)\n      (cond\n\
    \        [(= day 29)\n         (and (>= year 1) (<= year 9999))]\n        [else\
    \ #t]))\n    (define (valid-month-day-year month day year)\n      (cond\n    \
    \    [(and (= month 2) (= day 29))\n         (and (>= year 1) (<= year 9999))]\n\
    \        [else #t]))\n    (and (valid-month-day (car date) (cadr date))\n    \
    \     (valid-month-year (car date) (caddr date))\n         (valid-day-year (cadr\
    \ date) (caddr date))\n         (valid-month-day-year (car date) (cadr date)",
  "  (define (is-valid-month month)\n    (and (integer? month)\n         (and (>=\
    \ month 1) (<= month 12))))\n  (define (is-valid-day day)\n    (and (integer?\
    \ day)\n         (and (>= day 1) (<= day 31))))\n  (define (is-valid-year year)\n\
    \    (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define\
    \ (is-valid-date date)\n    (and (is-valid-month (car date))\n         (is-valid-day\
    \ (cadr date))\n         (is-valid-year (caddr date))))\n  (define (is-valid-date-string\
    \ date-string)\n    (and (not (empty? date-string))\n         (is-valid-date (string->date\
    \ date-string))))\n  (is-valid-date-string date))\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (not (string=? month \"00\"\
    ))\n         (not (string=? month \"13\"))\n         (not (string=? month \"14\"\
    ))\n         (not (string=? month \"15\"))\n         (not (string=? month \"16\"\
    ))\n         (not (string=? month \"17\"))\n         (not (string=? month \"18\"\
    ))\n         (not (string=? month \"19\"))\n         (not (string=? month \"20\"\
    ))\n         (not (string=? month \"21\"))\n         (not (string=? month \"22\"\
    ))\n         (not (string=? month \"23\"))\n         (not (string=? month \"24\"\
    ))\n         (not (string=? month \"25\"))\n         (not (string=? month \"26\"\
    ))\n         (not (string=? month \"27\"))\n         (not (string=? month \"28\"\
    ))\n         (not (string=? month \"29\"))\n         (not (string=? month \"30\"\
    ))\n         (not (string=? month \"31\"))\n         (not (string=? month \"32\"\
    ))\n         (not (string=? month \"33\"))\n         (not (string=? month \"34\"\
    ))\n         (not (string=? month \"35\"))\n         (not (string=? month \"36\"\
    ))\n         (not (string=? month \"37\"))\n         (not (string=? month \"38\"\
    ))\n         (not (string=? month \"39\"))\n         (not (string=? month \"40\"\
    ))\n         (not (string=? month \"41\"))\n         (not (string=? month \"42\"\
    ))\n         (not (string=? month \"43\"))\n         (not (string=? month \"44\"\
    ))\n         (not (string=? month \"45\"))\n         (not (string=? month \"46\"\
    ))\n         (not (string=? month \"47\"))\n         (not (string=? month \"48\"\
    ))\n         (not (string=? month \"49\"))\n         (not (string=? month \"50\"\
    ))\n         (not (string=? month \"51\"))\n         (not (string=? month \"52",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-month-day month day)\n      (cond\n\
    \        [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n         (and (>= day 1) (<= day 31))]\n        [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n         (and (>= day 1) (<= day 30))]\n\
    \        [(= month 2)\n         (and (>= day 1) (<= day 29))]\n        [else\n\
    \         #f]))\n    (define (valid-month-year month year)\n      (cond\n    \
    \    [(= month 2)\n         (and (>= year 1) (<= year 9999))]\n        [else\n\
    \         #t]))\n    (define (valid-day-year day year)\n      (cond\n        [(=\
    \ day 29)\n         (and (>= year 1) (<= year 9999))]\n        [else\n       \
    \  #t]))\n    (define (valid-day-month day month)\n      (cond\n        [(= day\
    \ 29)\n         (and (>= month 1) (<= month 2))]\n        [else\n         #t]))\n\
    \    (define (valid-month-day-year month day year)\n      (cond", "  (define (valid-date-helper\
    \ date)\n    (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date)\n      (define (valid-date-helper-helper-helper date)\n        (define\
    \ (valid-date-helper-helper-helper-helper date)\n          (define (valid-date-helper-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-helper-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (integer? month)\n         (and\
    \ (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer?\
    \ day)\n         (and (>= day 1)\n              (cond\n                [(or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n                 (<= day 31)]\n                [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n                 (<= day 30)]\n              \
    \  [(= month 2)\n                 (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (split-date date)\n\
    \      (string-split date #\\-)\n      (map string->number (string-split date\
    \ #\\-)))\n    (define (valid-date-parts-helper date)\n      (define (valid-date-parts-helper-helper\
    \ date)\n        (and (valid-month (car date))\n             (valid-day (car date)\
    \ (cadr date))\n             (valid-year (caddr date))))\n      (and (valid-date-parts-helper-helper\
    \ date)\n           (valid-date-parts-helper-helper (reverse date))))\n    (valid-date-parts-helper\
    \ (split-date date)))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-numbers date)\n    (define (valid-date-numbers-helper\
    \ date)\n      (define (valid-month-day-pair month day)\n        (cond\n     \
    \     [(and (= month 1) (= day 31)) #t]\n          [(and (= month 3) (= day 31))\
    \ #t]\n          [(and (= month 5) (= day 31)) #t]\n          [(and (= month 7)\
    \ (= day 31)) #t]\n          [(and (= month 8) (= day 31)) #t]\n          [(and\
    \ (= month 10) (= day 31)) #t]\n          [(and (= month 12) (= day 31)) #t]\n\
    \          [(and (= month 4) (= day 30)) #t]\n          [(and (= month 6) (= day\
    \ 30)) #t]\n          [(and (= month 9) (= day 30)) #t]\n          [(and (= month\
    \ 11) (= day 30)) #t]\n          [(and (= month 2) (= day 29)) #t]\n         \
    \ [else #f]))\n      (valid-month-day-pair (string-&gt;number (string-take date\
    \ 3))\n                            (string-&gt;number (string-take (string-drop\
    \ date 4) 2))))\n    (valid-date-numbers-helper date))\n  (and (valid-date-format\
    \ date)\n       (valid-date-numbers date)))\n</code>\n", "  (define (valid-month\
    \ month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day day month)\n\
    \    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n      [(and\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (<= 1 day) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (<= 1 day) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define (valid-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (split-date date)\n      (string-split\
    \ date #\\-))\n    (define (convert-to-int date-parts)\n      (map string->number\
    \ date-parts))\n    (define (valid-date-parts date-parts)\n      (and (valid-month\
    \ (car date-parts))\n           (valid-day (cadr date-parts) (car date-parts))\n\
    \           (valid-year (caddr date-parts))))\n    (valid-date-parts (convert-to-int\
    \ (split-date date))))\n  (and (valid-format date)\n       (valid-date-parts date)))\n\
    ```\n\n## [Reverse a String](https://www.codewars.com/kata/5168bb5dfe9a00b126000018)\n\
    \n```racket\n#lang racket\n", "  (define (valid-month month)\n    (and (not (empty?\
    \ month))\n         (and (&lt;= 1 (string-&gt;number month))\n              (&lt;=\
    \ (string-&gt;number month) 12))))\n  (define (valid-day day)\n    (and (not (empty?\
    \ day))\n         (and (&lt;= 1 (string-&gt;number day))\n              (&lt;=\
    \ (string-&gt;number day) 31))))\n  (define (valid-year year)\n    (and (not (empty?\
    \ year))\n         (and (&lt;= 1 (string-&gt;number year))\n              (&lt;=\
    \ (string-&gt;number year) 9999))))\n  (define (valid-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (define (valid-month-day month day)\n      (cond\n        [(or (equal? month\
    \ \"01\")\n             (equal? month \"03\")\n             (equal? month \"05\"\
    )\n             (equal? month \"07\")\n             (equal? month \"08\")\n  \
    \           (equal? month \"10\")\n             (equal? month \"12\"))\n     \
    \    (and (&lt;= 1 (string-&gt;number day))\n              (&lt;= (string-&gt;number\
    \ day) 31))]\n        [(or (equal? month \"04\")\n             (equal? month \"\
    06\")\n             (equal? month \"09\")\n             (equal? month \"11\"))\n\
    \         (and (&lt;= 1 (string-&gt;number day))\n              (&lt;= (string-&gt;number\
    \ day) 30))]\n        [(equal? month \"02\")\n         (and (&lt;= 1 (string-&gt;number\
    \ day))\n              (&lt;= (string-&gt;number day) 29))]\n        [else #f]))\n\
    \    (define (valid-leap-year year)\n      (and (equal? (modulo (string-&gt;number\
    \ year) 4) 0", "  (define (valid-month month)\n    (and (<= 1 month) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(= month 1) (<= 1\
    \ day) (<= day 31)]\n      [(= month 3) (<= 1 day) (<= day 31)]\n      [(= month\
    \ 5) (<= 1 day) (<= day 31)]\n      [(= month 7) (<= 1 day) (<= day 31)]\n   \
    \   [(= month 8) (<= 1 day) (<= day 31)]\n      [(= month 10) (<= 1 day) (<= day\
    \ 31)]\n      [(= month 12) (<= 1 day) (<= day 31)]\n      [(= month 4) (<= 1\
    \ day) (<= day 30)]\n      [(= month 6) (<= 1 day) (<= day 30)]\n      [(= month\
    \ 9) (<= 1 day) (<= day 30)]\n      [(= month 11) (<= 1 day) (<= day 30)]\n  \
    \    [(= month 2) (<= 1 day) (<= day 29)]))\n  (define (valid-year year)\n   \
    \ (and (<= 1 year) (<= year 9999)))\n  (define (valid-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (valid-format date)\n   \
    \    (valid-month (string->number (regexp-replace #rx\"^([0-9]{2})-[0-9]{2}-[0-9]{4}$\"\
    \ date \"\\\\1\")))\n       (valid-day (string->number (regexp-replace #rx\"^([0-9]{2})-[0-9]{2}-[0-9]{4}$\"\
    \ date \"\\\\1\"))\n                  (string->number (regexp-replace #rx\"^[0-9]{2}-([0-9]{2})-[0-9]{4}$\"\
    \ date \"\\\\1\")))\n       (valid-year (string->number (regexp-replace #rx\"\
    ^[0-9]{2", "  (define (valid-date-helper date)\n    (define (valid-month? month)\n\
    \      (and (integer? month)\n           (and (&lt;= 1 month)\n              \
    \  (&lt;= month 12))))\n    (define (valid-day? day)\n      (and (integer? day)\n\
    \           (and (&lt;= 1 day)\n                (&lt;= day 31))))\n    (define\
    \ (valid-year? year)\n      (and (integer? year)\n           (and (&lt;= 1 year)\n\
    \                (&lt;= year 9999))))\n    (define (valid-date-format? date)\n\
    \      (and (string? date)\n           (string-match #rx\"^\\\\d{2}-\\\\d{2}-\\\
    \\d{4}$\" date)))\n    (define (valid-date-parts? date)\n      (define (valid-date-parts-helper\
    \ date)\n        (define (valid-date-parts-helper-helper date)\n          (define\
    \ (valid-date-parts-helper-helper-helper date)\n            (define (valid-date-parts-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-parts-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-parts-helper-helper-helper-helper-helper-",
  "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper date)\n\
    \      (define (valid-date-helper-helper-helper date)\n        (define (valid-date-helper-helper-helper-helper\
    \ date)\n          (define (valid-date-helper-helper-helper-helper-helper date)\n\
    \            (define (valid-date-helper-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (not (empty? month))\n     \
    \    (and (<= 1 (string->number month))\n              (<= (string->number month)\
    \ 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n         (and\
    \ (<= 1 (string->number day))\n              (<= (string->number day) 31))))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (and (<=\
    \ 1 (string->number year))\n              (<= (string->number year) 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-year date)\n    (define (valid-month-day-year-helper\
    \ date)\n      (define (valid-month-day-year-helper-helper date)\n        (define\
    \ (valid-month-day-year-helper-helper-helper date)\n          (define (valid-month-day-year-helper-helper-helper-helper\
    \ date)\n            (define (valid-month-day-year-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-month-day-year-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-month-day-year-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-month-day-year-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-month-day-year-helper-helper-helper-helper-helper-helper-",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (and (not\
    \ (empty? (string-&gt;number month)))\n              (and (&lt;= 1 (string-&gt;number\
    \ month))\n                   (&lt;= (string-&gt;number month) 12)))))\n  (define\
    \ (valid-day day)\n    (and (not (empty? day))\n         (and (not (empty? (string-&gt;number\
    \ day)))\n              (and (&lt;= 1 (string-&gt;number day))\n             \
    \      (&lt;= (string-&gt;number day) 31)))))\n  (define (valid-year year)\n \
    \   (and (not (empty? year))\n         (and (not (empty? (string-&gt;number year)))\n\
    \              (and (&lt;= 1 (string-&gt;number year))\n                   (&lt;=\
    \ (string-&gt;number year) 9999)))))\n  (define (valid-date-format date)\n   \
    \ (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (valid-date-format\
    \ date)\n       (and (valid-month (substring date 0 2))\n            (and (valid-day\
    \ (substring date 3 5))\n                 (valid-year (substring date 6 10))))))\n\
    </code>\n", "  (define (valid-month month)\n    (and (integer? month)\n      \
    \   (and (&lt;= 1 month)\n              (&lt;= month 12))))\n  (define (valid-day\
    \ day)\n    (and (integer? day)\n         (and (&lt;= 1 day)\n              (&lt;=\
    \ day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n        \
    \ (and (&lt;= 1 year)\n              (&lt;= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n      (define\
    \ (valid-date-parts-helper-helper date)\n        (define (valid-date-parts-helper-helper-helper\
    \ date)\n          (define (valid-date-parts-helper-helper-helper-helper date)\n\
    \            (define (valid-date-parts-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (integer? month)\n         (and\
    \ (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer?\
    \ day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-month-day-pair\
    \ month day)\n      (cond\n        [(and (= month 1) (= day 31)) #t]\n       \
    \ [(and (= month 3) (= day 31)) #t]\n        [(and (= month 5) (= day 31)) #t]\n\
    \        [(and (= month 7) (= day 31)) #t]\n        [(and (= month 8) (= day 31))\
    \ #t]\n        [(and (= month 10) (= day 31)) #t]\n        [(and (= month 12)\
    \ (= day 31)) #t]\n        [(and (= month 4) (= day 30)) #t]\n        [(and (=\
    \ month 6) (= day 30)) #t]\n        [(and (= month 9) (= day 30)) #t]\n      \
    \  [(and (= month 11) (= day 30)) #t]\n        [(and (= month 2) (= day 29)) #t]\n\
    \        [(and (= month 2) (= day 28)) #t]\n        [else #f]))\n    (define (valid-leap-year\
    \ year)\n      (and (integer? year)\n           (and (>= year 1) (<= year 9999))))\n\
    \    (define (is-leap-year year)\n      (and (valid-leap-year year)\n        \
    \   (or (and (zero? (modulo year 4))\n                    (not (zero? (modulo\
    \ year 100))))\n               (zero? (modulo year 400)))))\n    (define (valid-month-day-year-pair\
    \ month day year)\n      (cond", "  (define (valid-month month)\n    (and (not\
    \ (empty? month))\n         (not (negative? (string->number month)))\n       \
    \  (not (> (string->number month) 12))))\n  (define (valid-day day)\n    (and\
    \ (not (empty? day))\n         (not (negative? (string->number day)))\n      \
    \   (not (> (string->number day) 31))))\n  (define (valid-year year)\n    (and\
    \ (not (empty? year))\n         (not (negative? (string->number year)))\n    \
    \     (not (> (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-month-day-format\
    \ date)\n    (define (valid-month-day-format-helper date)\n      (cond\n     \
    \   [(string=? \"01\" (substring date 0 2))\n         (and (string=? \"01\" (substring\
    \ date 0 2))\n              (valid-day (substring date 3 5))\n              (valid-year\
    \ (substring date 6 10)))]\n        [(string=? \"03\" (substring date 0 2))\n\
    \         (and (string=? \"03\" (substring date 0 2))\n              (valid-day\
    \ (substring date 3 5))\n              (valid-year (substring date 6 10)))]\n\
    \        [(string=? \"05\" (substring date 0 2))\n         (and (string=? \"05\"\
    \ (substring date 0 2))\n              (valid-day (substring date 3 5))\n    \
    \          (valid-year (substring date 6 10)))]\n        [(string=? \"07\" (substring\
    \ date 0 2))\n         (and (string=? \"07\" (substring date 0 2))\n         \
    \     (valid-day (substring date 3 5))\n              (valid-year (substring date\
    \ 6 10)))]\n        [(string=? \"08\" (substring date 0 2))\n         (and (string=?\
    \ \"08\" (substring date 0 2))\n              (valid", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (<= 1 month 12)))\n  (define (valid-day\
    \ day)\n    (and (integer? day)\n         (<= 1 day 31)))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (<= 1 year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-month-day month day)\n      (cond\n\
    \        [(and (= month 1) (= day 31)) #t]\n        [(and (= month 3) (= day 31))\
    \ #t]\n        [(and (= month 5) (= day 31)) #t]\n        [(and (= month 7) (=\
    \ day 31)) #t]\n        [(and (= month 8) (= day 31)) #t]\n        [(and (= month\
    \ 10) (= day 31)) #t]\n        [(and (= month 12) (= day 31)) #t]\n        [(and\
    \ (= month 4) (= day 30)) #t]\n        [(and (= month 6) (= day 30)) #t]\n   \
    \     [(and (= month 9) (= day 30)) #t]\n        [(and (= month 11) (= day 30))\
    \ #t]\n        [(and (= month 2) (= day 29)) #t]\n        [else #f]))\n    (define\
    \ (valid-month-day-year month day year)\n      (cond\n        [(and (= month 2)\
    \ (= day 29) (= year 2020)) #t]\n        [(and (= month 2) (= day 29) (= year\
    \ 2024)) #t]\n        [(and (= month 2) (= day 29) (= year 2028)) #t]\n      \
    \  [(and (= month 2) (= day 29) (= year 2032)) #t]\n        [(and (= month 2)\
    \ (= day 29) (= year 2036)) #t]\n        [(and (= month 2) (= day 29) (= year\
    \ 2040)) #t]\n        [(and (= month 2) (= day 29) (= year 2044)) #t]\n       ",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-month-day-year date)\n    (define (valid-month-day-year-helper date)\n\
    \      (define (valid-month-day-year-helper-helper date)\n        (define (valid-month-day-year-helper-helper-helper\
    \ date)\n          (define (valid-month-day-year-helper-helper-helper-helper date)\n\
    \            (define (valid-month-day-year-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-month-day-year-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-month-day-year-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-month-day-year-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-month-day-year-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-month-day-year-helper-helper-helper-helper-helper-helper-helper-helper-",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (not (negative?\
    \ (string->number month)))\n         (not (> (string->number month) 12))))\n \
    \ (define (valid-day day)\n    (and (not (empty? day))\n         (not (negative?\
    \ (string->number day)))\n         (not (> (string->number day) 31))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))\n         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-day-for-month day month)\n    (cond\n      [(or (equal?\
    \ month \"01\")\n           (equal? month \"03\")\n           (equal? month \"\
    05\")\n           (equal? month \"07\")\n           (equal? month \"08\")\n  \
    \         (equal? month \"10\")\n           (equal? month \"12\"))\n       (and\
    \ (not (negative? (string->number day)))\n            (not (> (string->number\
    \ day) 31)))]\n      [(or (equal? month \"04\")\n           (equal? month \"06\"\
    )\n           (equal? month \"09\")\n           (equal? month \"11\"))\n     \
    \  (and (not (negative? (string->number day)))\n            (not (> (string->number\
    \ day) 30)))]\n      [(equal? month \"02\")\n       (and (not (negative? (string->number\
    \ day)))\n            (not (> (string->number day) 29)))]))\n  (define (valid-leap-year\
    \ year)\n    (and (not (negative? (string->number year)))\n         (not (> (string->number\
    \ year) 9999))\n         (or (and (zero? (modulo (string->number year) 4))\n \
    \                 (not (zero? (modulo (string->number year) 100))))\n        \
    \     (zero? (mod", "  (define (is-valid-month month)\n    (and (integer? month)\n\
    \         (and (&lt;= 1 month)\n              (&lt;= month 12))))\n  (define (is-valid-day\
    \ day)\n    (and (integer? day)\n         (and (&lt;= 1 day)\n              (&lt;=\
    \ day 31))))\n  (define (is-valid-year year)\n    (and (integer? year)\n     \
    \    (and (&lt;= 1 year)\n              (&lt;= year 9999))))\n  (define (is-valid-date\
    \ date)\n    (and (string? date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (is-valid-date-parts date-parts)\n    (and (is-valid-month\
    \ (string-&gt;number (list-ref date-parts 0)))\n         (is-valid-day (string-&gt;number\
    \ (list-ref date-parts 1)))\n         (is-valid-year (string-&gt;number (list-ref\
    \ date-parts 2)))))\n  (and (is-valid-date date)\n       (is-valid-date-parts\
    \ (string-split date #\\-))))\n</code>\n", "  (define (valid-month month)\n  \
    \  (and (not (empty? month))\n         (integer? (string->number month))\n   \
    \      (<= 1 (string->number month) 12)))\n  (define (valid-day day)\n    (and\
    \ (not (empty? day))\n         (integer? (string->number day))\n         (<= 1\
    \ (string->number day) 31)))\n  (define (valid-year year)\n    (and (not (empty?\
    \ year))\n         (integer? (string->number year))\n         (<= 1 (string->number\
    \ year) 9999)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n   \
    \ (let* ([date-parts (string-split date \"-\")]\n           [month (first date-parts)]\n\
    \           [day (second date-parts)]\n           [year (third date-parts)])\n\
    \      (and (valid-month month)\n           (valid-day day)\n           (valid-year\
    \ year))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\
    \ (<= day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (>= year 1) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-list (string-split\
    \ date \"-\")]\n                [month (string->number (list-ref date-list 0))]\n\
    \                [day (string->number (list-ref date-list 1))]\n             \
    \   [year (string->number (list-ref date-list 2))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-date-helper date)\n    (define (valid-month month)\n      (and (integer?\
    \ month)\n           (and (>= month 1) (<= month 12))))\n    (define (valid-day\
    \ day)\n      (and (integer? day)\n           (and (>= day 1) (<= day 31))))\n\
    \    (define (valid-year year)\n      (and (integer? year)\n           (and (>=\
    \ year 0) (<= year 9999))))\n    (define (valid-date-format date)\n      (and\
    \ (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n           (not (regexp-match?\
    \ #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n    (define (valid-date-parts\
    \ date)\n      (define (valid-month-day month day)\n        (cond\n          [(and\
    \ (= month 1) (= day 31)) #t]\n          [(and (= month 3) (= day 31)) #t]\n \
    \         [(and (= month 5) (= day 31)) #t]\n          [(and (= month 7) (= day\
    \ 31)) #t]\n          [(and (= month 8) (= day 31)) #t]\n          [(and (= month\
    \ 10) (= day 31)) #t]\n          [(and (= month 12) (= day 31)) #t]\n        \
    \  [(and (= month 4) (= day 30)) #t]\n          [(and (= month 6) (= day 30))\
    \ #t]\n          [(and (= month 9) (= day 30)) #t]\n          [(and (= month 11)\
    \ (= day 30)) #t]\n          [(and (= month 2) (= day 29)) #t]\n          [else\
    \ #f]))\n      (define (valid-leap-year year)\n        (and (zero? (modulo year\
    \ 4))\n             (or (not (zero? (modulo year 100)))\n                 (zero?\
    \ (modulo year 400)))))\n      (define (valid-february-day day year)\n       \
    \ (and (valid-leap-year year)\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (&lt;= 1 month) (&lt;= month 12))))\n  (define (valid-day\
    \ day)\n    (and (integer? day)\n         (and (&lt;= 1 day) (&lt;= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (&lt;= 1\
    \ year) (&lt;= year 9999))))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (define (valid-date-parts-helper date)\n      (define (valid-date-parts-helper-helper\
    \ date)\n        (define (valid-date-parts-helper-helper-helper date)\n      \
    \    (define (valid-date-parts-helper-helper-helper-helper date)\n           \
    \ (define (valid-date-parts-helper-helper-helper-helper-helper date)\n       \
    \       (define (valid-date-parts-helper-helper-helper-helper-helper-helper date)\n\
    \                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define", "  (define (valid-month month)\n\
    \    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n\
    \      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n\
    \      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define (valid-year\
    \ year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match?\
    \ #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date)))\n  (define (split-date date)\n \
    \   (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n  (define\
    \ (split-date-slash date)\n    (regexp-match #rx\"^([0-9]{2})/([0-9]{2})/([0-9]{4})$\"\
    \ date))\n  (cond\n    [(valid-format date)\n     (let* ([split-date (split-date\
    \ date)]\n            [month (string->number (list-ref split-date 1))]\n     \
    \       [day (string->number (list-ref split-date 2))]\n            [year (string->number\
    \ (list-ref split-date 3))])\n       (and (valid-month month)\n            (valid-day\
    \ month day)\n            (valid-year year)))]\n    [(valid-format date)\n   \
    \  (let* ([split-date (split-date-slash date)]\n            [month (", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (and (char-numeric?\
    \ (string-ref month 0))\n              (char-numeric? (string-ref month 1))\n\
    \              (and (<= (string->number month) 12)\n                   (>= (string->number\
    \ month) 1)))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (and (char-numeric? (string-ref day 0))\n              (char-numeric? (string-ref\
    \ day 1))\n              (and (<= (string->number day) 31)\n                 \
    \  (>= (string->number day) 1)))))\n  (define (valid-year year)\n    (and (not\
    \ (empty? year))\n         (and (char-numeric? (string-ref year 0))\n        \
    \      (char-numeric? (string-ref year 1))\n              (char-numeric? (string-ref\
    \ year 2))\n              (char-numeric? (string-ref year 3)))))\n  (define (valid-format\
    \ date)\n    (and (not (empty? date))\n         (and (char-numeric? (string-ref\
    \ date 0))\n              (char-numeric? (string-ref date 1))\n              (char-numeric?\
    \ (string-ref date 3))\n              (char-numeric? (string-ref date 4))\n  \
    \            (char-numeric? (string-ref date 6))\n              (char-numeric?\
    \ (string-ref date 7))\n              (char-numeric? (string-ref date 8))\n  \
    \            (char-numeric? (string-ref date 9))\n              (and (char=? (string-ref\
    \ date 2) #\\- )\n                   (char=? (string-ref date 5) #\\- )))))\n\
    \  (and (valid-format date)\n       (and (valid-month (substring date 0 2))\n\
    \            (valid-day (substring date 3 5))\n            (valid-year (substring\
    \ date 6 10)))))\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-date-parts-helper-helper date)\n        (define\
    \ (valid-date-parts-helper-helper-helper date)\n          (define (valid-date-parts-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-parts-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-parts-helper-helper", " \
    \ (define (valid-month month)\n    (and (not (empty? month))\n         (not (negative?\
    \ (string->number month)))\n         (not (> (string->number month) 12))))\n \
    \ (define (valid-day day)\n    (and (not (empty? day))\n         (not (negative?\
    \ (string->number day)))\n         (not (> (string->number day) 31))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))\n         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-day-for-month day month)\n    (cond\n      [(string=? month \"01\") (and\
    \ (<= 1 (string->number day)) (<= (string->number day) 31))]\n      [(string=?\
    \ month \"02\") (and (<= 1 (string->number day)) (<= (string->number day) 29))]\n\
    \      [(string=? month \"03\") (and (<= 1 (string->number day)) (<= (string->number\
    \ day) 31))]\n      [(string=? month \"04\") (and (<= 1 (string->number day))\
    \ (<= (string->number day) 30))]\n      [(string=? month \"05\") (and (<= 1 (string->number\
    \ day)) (<= (string->number day) 31))]\n      [(string=? month \"06\") (and (<=\
    \ 1 (string->number day)) (<= (string->number day) 30))]\n      [(string=? month\
    \ \"07\") (and (<= 1 (string->number day)) (<= (string->number day) 31))]\n  \
    \    [(string=? month \"08\") (and (<= 1 (string->number day)) (<= (string->number\
    \ day) 31))]\n      [(string=? month \"09\") (and (<= 1 (string->number day))\
    \ (<= (string->number day) 30))]\n      [(string=? month \"10\")", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (not (negative?\
    \ (string->number month)))\n         (not (> (string->number month) 12))))\n \
    \ (define (valid-day day)\n    (and (not (empty? day))\n         (not (negative?\
    \ (string->number day)))\n         (not (> (string->number day) 31))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))\n         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-day-for-month day month)\n    (cond\n      [(or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and\
    \ (>= day 1) (<= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (=\
    \ month 11))\n       (and (>= day 1) (<= day 30))]\n      [(= month 2)\n     \
    \  (and (>= day 1) (<= day 29))]))\n  (define (valid-date-parts date)\n    (define\
    \ (valid-date-parts-helper date)\n      (let* ([date-parts (string-split date\
    \ \"-\")]\n             [month (first date-parts)]\n             [day (second\
    \ date-parts)]\n             [year (third date-parts)])\n        (and (valid-month\
    \ month)\n             (valid-day day)\n             (valid-year year)\n     \
    \        (valid-day-for-month (string->number day) (string->number month)))))\n\
    \  (and (valid-date-format date)\n       (valid-date-parts-helper date)))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-day-for-month day month)\n     \
    \ (cond\n        [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n         (and (>= day 1) (<= day 31))]\n    \
    \    [(and (= month 4) (= month 6) (= month 9) (= month 11))\n         (and (>=\
    \ day 1) (<= day 30))]\n        [(= month 2)\n         (and (>= day 1) (<= day\
    \ 29))]\n        [else #f]))\n    (define (valid-date-parts-helper date)\n   \
    \   (define (valid-date-parts-helper-helper date)\n        (define (valid-date-parts-helper-helper-helper\
    \ date)\n          (define (valid-date-parts-helper-helper-helper-helper date)\n\
    \            (define (valid-date-parts-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-hel", "  (define (is-valid-month\
    \ month)\n    (and (not (empty? month))\n         (integer? (string->number month))\n\
    \         (<= 1 (string->number month) 12)))\n  (define (is-valid-day day)\n \
    \   (and (not (empty? day))\n         (integer? (string->number day))\n      \
    \   (<= 1 (string->number day) 31)))\n  (define (is-valid-year year)\n    (and\
    \ (not (empty? year))\n         (integer? (string->number year))\n         (<=\
    \ 1 (string->number year) 9999)))\n  (define (is-valid-date date)\n    (and (not\
    \ (empty? date))\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (and (is-valid-date date)\n       (is-valid-month (regexp-match #rx\"^[0-9]{2}-\"\
    \ date))\n       (is-valid-day (regexp-match #rx\"-[0-9]{2}-\" date))\n      \
    \ (is-valid-year (regexp-match #rx\"-[0-9]{4}$\" date))))\n", "  (define (valid-day?\
    \ day)\n    (and (not (empty? day))\n         (not (negative? (string->number\
    \ day)))\n         (not (> (string->number day) 31))))\n  (define (valid-month?\
    \ month)\n    (and (not (empty? month))\n         (not (negative? (string->number\
    \ month)))\n         (not (> (string->number month) 12))))\n  (define (valid-year?\
    \ year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))))\n  (define (valid-date-format? date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts? date)\n    (define (valid-day-for-month?\
    \ day month)\n      (cond\n        [(or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n         (and (valid-day? day)\n\
    \              (not (> (string->number day) 31)))]\n        [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n         (and (valid-day? day)\n       \
    \       (not (> (string->number day) 30)))]\n        [(= month 2)\n         (and\
    \ (valid-day? day)\n              (not (> (string->number day) 29)))]))\n    (define\
    \ (valid-date-parts-helper date)\n      (define (valid-date-parts-helper-helper\
    \ date)\n        (define (valid-date-parts-helper-helper-helper date)\n      \
    \    (define (valid-date-parts-helper-helper-helper-helper date)\n           \
    \ (define (valid-date-parts-helper-helper-helper-helper-helper date)\n       \
    \       (define (valid-date-parts-helper-helper-helper-helper-helper-helper date)\n\
    \                (define (valid-date-parts-helper-helper-helper-helper-", "  (define\
    \ (valid-date-helper date)\n    (define (valid-date-helper-helper date)\n    \
    \  (define (valid-date-helper-helper-helper date)\n        (define (valid-date-helper-helper-helper-helper\
    \ date)\n          (define (valid-date-helper-helper-helper-helper-helper date)\n\
    \            (define (valid-date-helper-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (integer? month)\n         (and\
    \ (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer?\
    \ day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         #t))\n  (define (valid-date-parts date)\n    (define (valid-month-day-pair\
    \ month day)\n      (cond\n        [(and (equal? month 1) (equal? day 31)) #t]\n\
    \        [(and (equal? month 3) (equal? day 31)) #t]\n        [(and (equal? month\
    \ 5) (equal? day 31)) #t]\n        [(and (equal? month 7) (equal? day 31)) #t]\n\
    \        [(and (equal? month 8) (equal? day 31)) #t]\n        [(and (equal? month\
    \ 10) (equal? day 31)) #t]\n        [(and (equal? month 12) (equal? day 31)) #t]\n\
    \        [(and (equal? month 4) (equal? day 30)) #t]\n        [(and (equal? month\
    \ 6) (equal? day 30)) #t]\n        [(and (equal? month 9) (equal? day 30)) #t]\n\
    \        [(and (equal? month 11) (equal? day 30)) #t]\n        [(and (equal? month\
    \ 2) (equal? day 29)) #t]\n        [else #f]))\n    (define (valid-leap-year year)\n\
    \      (cond\n        [(and (equal? (modulo year 4) 0) (equal? (modulo year 100)\
    \ 0)) #t]\n        [(and (equal? (modulo year 4) 0) (equal? (modulo year 100)\
    \ 0) (equal? (modulo year 400) 0)) #t", "  (cond\n    [(empty? date) #f]\n   \
    \ [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date)\n     (let ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\"\
    \ date))]\n           [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n       (cond\n         [(or (< month 1) (> month 12)) #f]\n      \
    \   [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n          (and (>= day 1) (<= day 31))]\n         [(and (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n          (and (>= day 1) (<=\
    \ day 30))]\n         [(= month 2)\n          (and (>= day 1) (<= day 29))]))]\n\
    \    [else #f]))\n", "  (define (valid-day? day)\n    (and (integer? day)\n  \
    \       (not (negative? day))\n         (not (zero? day))\n         (not (> day\
    \ 31))))\n  (define (valid-month? month)\n    (and (integer? month)\n        \
    \ (not (negative? month))\n         (not (zero? month))\n         (not (> month\
    \ 12))))\n  (define (valid-year? year)\n    (and (integer? year)\n         (not\
    \ (negative? year))\n         (not (zero? year))))\n  (define (valid-date-format?\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts? date)\n    (define (valid-day-for-month? day month)\n   \
    \   (cond\n        [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n         (and (<= day 31) (>= day 1))]\n    \
    \    [(or (= month 4) (= month 6) (= month 9) (= month 11))\n         (and (<=\
    \ day 30) (>= day 1))]\n        [(= month 2)\n         (and (<= day 29) (>= day\
    \ 1))]\n        [else #f]))\n    (define (valid-date-parts-helper date)\n    \
    \  (define (valid-date-parts-helper-helper date)\n        (define (valid-date-parts-helper-helper-helper\
    \ date)\n          (define (valid-date-parts-helper-helper-helper-helper date)\n\
    \            (define (valid-date-parts-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-hel", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (string? date)\n         (regexp-match? #rx\"^\\\\d{2}-\\\\d{2}-\\\\\
    d{4}$\" date)))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-month-day month day)\n        (cond\n          [(and\
    \ (= month 1) (= day 31)) #t]\n          [(and (= month 3) (= day 31)) #t]\n \
    \         [(and (= month 5) (= day 31)) #t]\n          [(and (= month 7) (= day\
    \ 31)) #t]\n          [(and (= month 8) (= day 31)) #t]\n          [(and (= month\
    \ 10) (= day 31)) #t]\n          [(and (= month 12) (= day 31)) #t]\n        \
    \  [(and (= month 4) (= day 30)) #t]\n          [(and (= month 6) (= day 30))\
    \ #t]\n          [(and (= month 9) (= day 30)) #t]\n          [(and (= month 11)\
    \ (= day 30)) #t]\n          [(and (= month 2) (= day 29)) #t]\n          [else\
    \ #f]))\n      (and (valid-month (string->number (string-take date 2)))\n    \
    \       (valid-day (string->number (string-take (string-drop date 3) 2)))\n  \
    \         (valid-year (string->number (string-drop date 6)))\n           (valid-month-day\
    \ (string->number (string-take date 2))\n                            (string->number\
    \ (string-take (string-drop date 3) 2)))))\n    (valid-date-parts-helper date))\n\
    \  (and (valid-date-format date)\n", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day\
    \ day)\n    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (>= year 1) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]\n           [month (string->number (list-ref date-parts 0))]\n \
    \          [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year))))\n  (and (not (string=? date \"\"))\n \
    \      (valid-date-format date)\n       (valid-date-parts date)))\n", "  (let\
    \ ([date-parts (string-split date \"-\")])\n    (and (not (empty? date-parts))\n\
    \         (andmap (lambda (x) (and (not (empty? x)) (regexp-match #rx\"^[0-9]+$\"\
    \ x))) date-parts)\n         (andmap (lambda (x) (and (not (empty? x)) (regexp-match\
    \ #rx\"^[0-9]+$\" x))) date-parts)\n         (andmap (lambda (x) (and (not (empty?\
    \ x)) (regexp-match #rx\"^[0-9]+$\" x))) date-parts)\n         (andmap (lambda\
    \ (x) (and (not (empty? x)) (regexp-match #rx\"^[0-9]+$\" x))) date-parts)\n \
    \        (andmap (lambda (x) (and (not (empty? x)) (regexp-match #rx\"^[0-9]+$\"\
    \ x))) date-parts)\n         (andmap (lambda (x) (and (not (empty? x)) (regexp-match\
    \ #rx\"^[0-9]+$\" x))) date-parts)\n         (andmap (lambda (x) (and (not (empty?\
    \ x)) (regexp-match #rx\"^[0-9]+$\" x))) date-parts)\n         (andmap (lambda\
    \ (x) (and (not (empty? x)) (regexp-match #rx\"^[0-9]+$\" x))) date-parts)\n \
    \        (andmap (lambda (x) (and (not (empty? x)) (regexp-match #rx\"^[0-9]+$\"\
    \ x))) date-parts)\n         (andmap (lambda (x) (and (not (empty? x)) (regexp-match\
    \ #rx\"^[0-9]+$\" x))) date-parts)\n         (andmap (lambda (x) (and (not (empty?\
    \ x)) (regexp-match #rx\"^[0-9]+$\" x))) date-parts)\n         (andmap (lambda\
    \ (x) (and (not (empty? x)) (re", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (<= 1 month) (<= month 12))))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (and (<= 1 day) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-year-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-month-day-year-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-month-day-year-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-year-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-month-day-year-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-month-day-year-format date)\n    (", "  (define (is-valid-date? date)\n\
    \    (define (is-valid-month? month)\n      (and (integer? month)\n          \
    \ (and (>= month 1) (<= month 12))))\n    (define (is-valid-day? day)\n      (and\
    \ (integer? day)\n           (and (>= day 1) (<= day 31))))\n    (define (is-valid-year?\
    \ year)\n      (and (integer? year)\n           (and (>= year 1) (<= year 9999))))\n\
    \    (define (is-valid-format? date)\n      (and (string? date)\n           (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n    (define (is-valid-month-day?\
    \ month day)\n      (cond\n        [(and (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n         (and (>= day 1) (<=\
    \ day 31))]\n        [(and (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \         (and (>= day 1) (<= day 30))]\n        [(= month 2)\n         (and (>=\
    \ day 1) (<= day 29))]\n        [else #f]))\n    (define (is-valid-date-format?\
    \ date)\n      (let* ([date-list (string-split date \"-\")]\n             [month\
    \ (string->number (list-ref date-list 0))]\n             [day (string->number\
    \ (list-ref date-list 1))]\n             [year (string->number (list-ref date-list\
    \ 2))])\n        (and (is-valid-month? month)\n             (is-valid-day? day)\n\
    \             (is-valid-year? year)\n             (is-valid-month-day? month day))))\n\
    \    (and (is-valid-format? date)\n         (is-valid-date-format? date)))\n \
    \ (is-valid-date? date))\n", "  (define (valid-date-helper date)\n    (define\
    \ (valid-month? month)\n      (and (integer? month)\n           (and (>= month\
    \ 1) (<= month 12))))\n    (define (valid-day? day)\n      (and (integer? day)\n\
    \           (and (>= day 1) (<= day 31))))\n    (define (valid-year? year)\n \
    \     (and (integer? year)\n           (and (>= year 1) (<= year 9999))))\n  \
    \  (define (valid-date-format? date)\n      (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n           (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \    (define (valid-month-day-year? month day year)\n      (and (valid-month?\
    \ month)\n           (valid-day? day)\n           (valid-year? year)))\n    (define\
    \ (valid-month-day? month day)\n      (and (valid-month? month)\n           (valid-day?\
    \ day)))\n    (define (valid-month-year? month year)\n      (and (valid-month?\
    \ month)\n           (valid-year? year)))\n    (define (valid-day-year? day year)\n\
    \      (and (valid-day? day)\n           (valid-year? year)))\n    (define (valid-month-day-year-format?\
    \ date)\n      (and (valid-date-format? date)\n           (valid-month-day-year?\
    \ (string->number (regexp-match #rx\"^[0-9]{2}-\" date))\n                   \
    \               (string->number (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-\" date))\n\
    \                                  (string->number (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))", "  (define (valid-month month)\n    (and (integer? month)\n       \
    \  (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n    (and\
    \ (integer? day)\n         (and (<= 1 day)\n              (cond\n            \
    \    [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n                 (<= day 31)]\n                [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n                 (<= day 30)]\n  \
    \              [(= month 2)\n                 (<= day 29)]))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (string? date)\n         (string-match\
    \ \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date \"-\")]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (integer?\
    \ (string->number month))\n         (<= 1 (string->number month) 12)))\n  (define\
    \ (valid-day day)\n    (and (not (empty? day))\n         (integer? (string->number\
    \ day))\n         (<= 1 (string->number day) 31)))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (integer? (string->number year))\n   \
    \      (<= 1 (string->number year) 9999)))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (valid-date-format\
    \ date)\n       (valid-month (string-take date 2))\n       (valid-day (string-take\
    \ (string-drop date 3) 2))\n       (valid-year (string-drop date 6))))\n", " \
    \ (define (valid-month month)\n    (and (not (empty? month))\n         (integer?\
    \ (string->number month))\n         (<= 1 (string->number month) 12)))\n  (define\
    \ (valid-day day)\n    (and (not (empty? day))\n         (integer? (string->number\
    \ day))\n         (<= 1 (string->number day) 31)))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (integer? (string->number year))\n   \
    \      (<= 1 (string->number year) 9999)))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-month-day month day)\n      (cond ((or (equal? month\
    \ \"01\")\n                 (equal? month \"03\")\n                 (equal? month\
    \ \"05\")\n                 (equal? month \"07\")\n                 (equal? month\
    \ \"08\")\n                 (equal? month \"10\")\n                 (equal? month\
    \ \"12\"))\n             (<= 1 (string->number day) 31))\n            ((or (equal?\
    \ month \"04\")\n                 (equal? month \"06\")\n                 (equal?\
    \ month \"09\")\n                 (equal? month \"11\"))\n             (<= 1 (string->number\
    \ day) 30))\n            ((equal? month \"02\")\n             (<= 1 (string->number\
    \ day) 29))\n            (else #f)))\n    (define (valid-month-year month year)\n\
    \      (cond ((or (equal? month \"01\")\n                 (equal? month \"03\"\
    )\n                 (equal? month \"05\")\n                 (equal? month \"07\"\
    )\n                 (equal? month \"08\")\n                 (equal? month \"10\"\
    )\n                 (equal? month \"12\"))\n             (<= 1 (string->number\
    \ year) 9999))\n            ((or (equal? month \"04\")\n                 (equal?\
    \ month \"06\")\n                 (equal? month \"09\")\n                 (equal?\
    \ month \"11\"))\n             (<= 1 (", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (and (not (empty? (string-trim-both month #\\\
    0)))\n              (and (not (empty? (string-trim-both month #\\space)))\n  \
    \                 (and (not (empty? (string-trim-both month #\\-)))\n        \
    \                (and (not (empty? (string-trim-both month #\\/)))\n         \
    \                    (and (not (empty? (string-trim-both month #\\.))))\n    \
    \                         (and (not (empty? (string-trim-both month #\\,)))\n\
    \                                  (and (not (empty? (string-trim-both month #\\\
    ;)))\n                                       (and (not (empty? (string-trim-both\
    \ month #\\:)))\n                                            (and (not (empty?\
    \ (string-trim-both month #\\!)))\n                                          \
    \       (and (not (empty? (string-trim-both month #\\?)))\n                  \
    \                                    (and (not (empty? (string-trim-both month\
    \ #\\@)))\n                                                           (and (not\
    \ (empty? (string-trim-both month #\\#)))\n                                  \
    \                              (and (not (empty? (string-trim-both month #\\$)))\n\
    \                                                                     (and (not\
    \ (empty? (string-trim-both month #\\%)))\n                                  \
    \                                        (and (not (empty? (string-trim-both month\
    \ #\\^)))\n                                                                  \
    \             (and (not (empty? (string-trim-both month #\\&)))\n            \
    \                                                                        (and\
    \ (not (empty? (string-trim-both month #\\*)))\n                             \
    \                                                            (and (not (empty?\
    \ (string-trim-both month #\\())))\n                                         \
    \                                                (and (not (empty? (string-trim-both\
    \ month #\\))))\n                                                            \
    \                                  (and (not (empty? (string-trim-both month #\\\
    [)))\n                                                                       \
    \                            (and (not (empty? (string-trim-both month #\\])))\n\
    \                                                ", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 1) (<= year 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         #t))\n  (define (valid-date-format-2\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date)\n \
    \        #f))\n  (define (valid-date-format-3 date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2} [0-9]{2} [0-9]{4}$\" date)\n         #f))\n  (define (valid-date-format-4\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2} [0-9]{2} [0-9]{2}$\" date)\n \
    \        #f))\n  (define (valid-date-format-5 date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}/[0-9]{2}/[0-9]{2}$\" date)\n         #f))\n  (define (valid-date-format-6\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{2}$\" date)\n \
    \        #f))\n  (define (valid-date-format-7 date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2} [", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (&lt;= 1 month)\n              (&lt;= month 12))))\n  (define (valid-day\
    \ month day)\n    (and (integer? day)\n         (and (&lt;= 1 day)\n         \
    \     (cond\n                [(or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n                 (&lt;= day 31)]\n\
    \                [(or (= month 4) (= month 6) (= month 9) (= month 11))\n    \
    \             (&lt;= day 30)]\n                [(= month 2)\n                \
    \ (&lt;= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (&gt;= year 0)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (let* ([month (string-&gt;number (regexp-replace\
    \ #rx\"^([0-9]{2})-[0-9]{2}-[0-9]{4}$\" date \"\\\\1\"))]\n              [day\
    \ (string-&gt;number (regexp-replace #rx\"^[0-9]{2}-([0-9]{2})-[0-9]{4}$\" date\
    \ \"\\\\1\"))]\n              [year (string-&gt;number (regexp-replace #rx\"^[0-9]{2}-[0-9]{2}-([0-9]{4})$\"\
    \ date \"\\\\1\"))])\n         (and (valid-month month)\n              (valid-day\
    \ month day)\n              (valid-year year)))))\n</code>\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-month-day-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}$\" date))\n  (define (valid-month-year-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-day-year-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-month-day-year-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-month-day-year-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-year-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-month-day-year-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-date-parts-helper date)\n      (define (valid-month-day\
    \ month day)\n        (cond\n          [(and (= month 1) (= day 31)) #t]\n   \
    \       [(and (= month 3) (= day 31)) #t]\n          [(and (= month 5) (= day\
    \ 31)) #t]\n          [(and (= month 7) (= day 31)) #t]\n          [(and (= month\
    \ 8) (= day 31)) #t]\n          [(and (= month 10) (= day 31)) #t]\n         \
    \ [(and (= month 12) (= day 31)) #t]\n          [(and (= month 4) (= day 30))\
    \ #t]\n          [(and (= month 6) (= day 30)) #t]\n          [(and (= month 9)\
    \ (= day 30)) #t]\n          [(and (= month 11) (= day 30)) #t]\n          [(and\
    \ (= month 2) (= day 29)) #t]\n          [else #f]))\n      (valid-month-day (string-&gt;number\
    \ (list-ref date 0))\n                      (string-&gt;number (list-ref date\
    \ 1))))\n    (valid-date-parts-helper (string-split date #\\-)))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n</code>\n", "  (define (valid-month?\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day? day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year? year)\n    (and (integer? year)\n   \
    \      (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format? date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts?\
    \ date)\n    (let* ([date-parts (string-split date #\\-)]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month? month)\n           (valid-day? day)\n           (valid-year? year))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format? date)\n       (valid-date-parts?\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n  \
    \  (and (integer? day)\n         (and (<= 1 day)\n              (cond ((or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n                     (<= day 31))\n                    ((or (= month 4)\
    \ (= month 6) (= month 9) (= month 11))\n                     (<= day 30))\n \
    \                   ((= month 2)\n                     (<= day 29))))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (<= 1 year) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (get-date-parts date)\n\
    \      (string-split date #\\-)\n      (map string->number (string-split date\
    \ #\\-)))\n    (define date-parts (get-date-parts date))\n    (and (valid-month\
    \ (list-ref date-parts 0))\n         (valid-day (list-ref date-parts 0) (list-ref\
    \ date-parts 1))\n         (valid-year (list-ref date-parts 2))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (integer? (string->number month))\n         (and (<= 1 (string->number\
    \ month))\n              (<= (string->number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (integer? (string->number day))\n\
    \         (and (<= 1 (string->number day))\n              (<= (string->number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (integer? (string->number year))\n         (and (<= 1 (string->number year))\n\
    \              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n      (define\
    \ (valid-date-parts-helper-helper date)\n        (cond ((equal? (string-length\
    \ date) 2)\n               (and (valid-month (substring date 0 2))\n         \
    \           (valid-date-parts-helper (substring date 2))))\n              ((equal?\
    \ (string-length date) 4)\n               (and (valid-day (substring date 0 2))\n\
    \                    (valid-date-parts-helper (substring date 2))))\n        \
    \      ((equal? (string-length date) 8)\n               (and (valid-year (substring\
    \ date 0 4))\n                    (valid-date-parts-helper (substring date 4))))\n\
    \              ((equal? (string-length date) 0)\n               #t)\n        \
    \      (else #f)))\n      (valid-date-parts-helper-helper date))\n    (valid-date-parts-helper\
    \ date))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n\
    ```\n\n## [Valid Parentheses](https://www.codewars.com/kata/valid-parentheses/",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (and (not\
    \ (empty? (rest month)))\n              (and (not (empty? (rest (rest month))))\n\
    \                   (and (not (empty? (rest (rest (rest month)))))\n         \
    \               (and (not (empty? (rest (rest (rest (rest month)))))))\n     \
    \                        (and (not (empty? (rest (rest (rest (rest (rest month)))))))\n\
    \                                  (not (empty? (rest (rest (rest (rest (rest\
    \ (rest month))))))))))))))\n  (define (valid-day day)\n    (and (not (empty?\
    \ day))\n         (and (not (empty? (rest day)))\n              (and (not (empty?\
    \ (rest (rest day))))\n                   (and (not (empty? (rest (rest (rest\
    \ day)))))\n                        (and (not (empty? (rest (rest (rest (rest\
    \ day)))))))\n                             (and (not (empty? (rest (rest (rest\
    \ (rest (rest day)))))))\n                                  (not (empty? (rest\
    \ (rest (rest (rest (rest (rest day))))))))))))))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (and (not (empty? (rest year)))\n    \
    \          (and (not (empty? (rest (rest year))))\n                   (and (not\
    \ (empty? (rest (rest (rest year)))))\n                        (and (not (empty?\
    \ (rest (rest (rest (rest year)))))))\n                             (and (not\
    \ (empty? (rest (rest (rest (rest (rest year)))))))\n                        \
    \          (not (empty? (rest (rest (rest (rest (rest (rest year))))))))))))))\n\
    \  (define (valid-date-format date)\n    (and (not (empty? date))\n         (and\
    \ (not (empty? (rest date)))\n              (and (not (empty? (rest (rest date))))\n\
    \                   (and (not (empty? (rest (rest (rest date)))))\n          \
    \              (and (not (empty? (rest (rest (rest (rest date)))))))\n       \
    \                      (and (not (empty? (rest (rest (rest (rest", "  (define\
    \ (valid-date-helper date)\n    (define (valid-date-helper-helper date)\n    \
    \  (define (valid-date-helper-helper-helper date)\n        (define (valid-date-helper-helper-helper-helper\
    \ date)\n          (define (valid-date-helper-helper-helper-helper-helper date)\n\
    \            (define (valid-date-helper-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-date-helper date)\n    (define (valid-month? month)\n\
    \      (and (not (empty? month))\n           (and (not (empty? (rest month)))\n\
    \                (not (empty? (rest (rest month))))\n                (and (char=?\
    \ (first month) #\\0)\n                     (char=? (first (rest month)) #\\1)\n\
    \                     (char=? (first (rest (rest month))) #\\2)))))\n    (define\
    \ (valid-day? day)\n      (and (not (empty? day))\n           (and (not (empty?\
    \ (rest day)))\n                (not (empty? (rest (rest day))))\n           \
    \     (and (char=? (first day) #\\0)\n                     (char=? (first (rest\
    \ day)) #\\3)\n                     (char=? (first (rest (rest day))) #\\1)))))\n\
    \    (define (valid-year? year)\n      (and (not (empty? year))\n           (and\
    \ (not (empty? (rest year)))\n                (not (empty? (rest (rest year))))\n\
    \                (and (char=? (first year) #\\2)\n                     (char=?\
    \ (first (rest year)) #\\0)\n                     (char=? (first (rest (rest year)))\
    \ #\\2)\n                     (char=? (first (rest (rest (rest year)))) #\\0)))))\n\
    \    (define (valid-date? date)\n      (and (valid-month? (substring date 0 2))\n\
    \           (valid-day? (substring date 3 5))\n           (valid-year? (substring\
    \ date 6 10))))\n    (valid-date? date))\n  (valid-date-helper date))\n", "  (cond\n\
    \    [(empty? date) #f]\n    [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n     (let* ([month (string->number (regexp-match #rx\"^[0-9]{2}\" date))]\n\
    \            [day (string->number (regexp-match #rx\"^[0-9]{2}-[0-9]{2}\" date))]\n\
    \            [year (string->number (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}\"\
    \ date))])\n       (and (and (<= 1 month 12) (<= 1 day 31))\n            (or (and\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n                (and (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n                (and (= month 2) (<= 1 day 29)))))\n     #t]\n    [else\
    \ #f]))\n", "  (define (valid-month month)\n    (and (integer? month)\n      \
    \   (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer?\
    \ day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (regexp-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-leap-year year)\n   \
    \ (and (integer? year)\n         (or (and (zero? (modulo year 4))\n          \
    \        (not (zero? (modulo year 100))))\n             (zero? (modulo year 400)))))\n\
    \  (define (valid-february-day day year)\n    (and (integer? day)\n         (and\
    \ (>= day 1) (<= day (if (valid-leap-year year) 29 28)))))\n  (define (valid-day-by-month\
    \ day month year)\n    (cond ((and (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n           (valid-day day))\n   \
    \       ((and (= month 4) (= month 6) (= month 9) (= month 11))\n           (and\
    \ (valid-day day) (<= day 30)))\n          ((= month 2)\n           (valid-february-day\
    \ day year))\n          (else #f)))\n  (define (valid-date-by-month-day-year month\
    \ day year)\n    (and (valid-month month)\n         (valid-day-by-month day month\
    \ year)\n         (valid-year year)))\n  (define (valid-date-by-date-format date)\n\
    \    (and (valid-date-format date)\n         (valid-date-by-month-day-year (string->number\
    \ (substring date 0 2))\n                                       (string->number\
    \ (substring date 3 5", "  (and (not (empty? date))\n       (regexp-match? #rx\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\" date)\n       (let*\
    \ ([date-parts (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date)]\n              [month (string-&gt;number (list-ref date-parts 1))]\n\
    \              [day (string-&gt;number (list-ref date-parts 2))]\n           \
    \   [year (string-&gt;number (list-ref date-parts 3))])\n         (and (or (and\
    \ (= month 1) (= day 31))\n                  (and (= month 3) (= day 31))\n  \
    \                (and (= month 5) (= day 31))\n                  (and (= month\
    \ 7) (= day 31))\n                  (and (= month 8) (= day 31))\n           \
    \       (and (= month 10) (= day 31))\n                  (and (= month 12) (=\
    \ day 31))\n                  (and (= month 4) (= day 30))\n                 \
    \ (and (= month 6) (= day 30))\n                  (and (= month 9) (= day 30))\n\
    \                  (and (= month 11) (= day 30))\n                  (and (= month\
    \ 2) (= day 29))\n                  (and (= month 2) (= day 28)))\n          \
    \    (and (&gt;= month 1) (&lt;= month 12))\n              (&gt;= year 1)\n  \
    \            (&lt;= year 9999)))))\n</code>\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 1) (<= year 9999))))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-day-for-month month\
    \ day)\n    (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n           (and (>= day 1) (<= day 31)))\n  \
    \        ((or (= month 4) (= month 6) (= month 9) (= month 11))\n           (and\
    \ (>= day 1) (<= day 30)))\n          ((= month 2)\n           (and (>= day 1)\
    \ (<= day 29)))))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date \"-\")]\n           [month (string->number (list-ref date-parts 0))]\n\
    \           [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year)\n           (valid-day-for-month month day))))\n\
    \  (and (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (<= 1 month) (<=\
    \ month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n         (and\
    \ (<= 1 day) (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (and (<= 0 year) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not\
    \ (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (valid-month-day-year\
    \ date)\n    (define (valid-month-day-year-helper date)\n      (define (valid-month-day-year-helper-helper\
    \ date)\n        (define (valid-month-day-year-helper-helper-helper date)\n  \
    \        (define (valid-month-day-year-helper-helper-helper-helper date)\n   \
    \         (define (valid-month-day-year-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-month-day-year-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-month-day-year-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-month-day-year-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-month-day-year-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-month-day-year-helper-helper-helper-helper-helper-helper-helper-helper-",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (and (char-numeric?\
    \ (string-ref month 0))\n              (char-numeric? (string-ref month 1))\n\
    \              (and (not (empty? (string-drop month 2)))\n                   (string=?\
    \ (string-drop month 2) \"-\")))))\n  (define (valid-day day)\n    (and (not (empty?\
    \ day))\n         (and (char-numeric? (string-ref day 0))\n              (char-numeric?\
    \ (string-ref day 1))\n              (and (not (empty? (string-drop day 2)))\n\
    \                   (string=? (string-drop day 2) \"-\")))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (char-numeric? (string-ref\
    \ year 0))\n              (char-numeric? (string-ref year 1))\n              (char-numeric?\
    \ (string-ref year 2))\n              (char-numeric? (string-ref year 3)))))\n\
    \  (define (valid-date-format date)\n    (and (valid-month (string-take date 2))\n\
    \         (valid-day (string-take (string-drop date 3) 2))\n         (valid-year\
    \ (string-drop date 6))))\n  (define (valid-month-days month)\n    (cond\n   \
    \   [(string=? month \"01\") (and (<= 1 31) (>= 31 31))]\n      [(string=? month\
    \ \"02\") (and (<= 1 29) (>= 29 29))]\n      [(string=? month \"03\") (and (<=\
    \ 1 31) (>= 31 31))]\n      [(string=? month \"04\") (and (<= 1 30) (>= 30 30))]\n\
    \      [(string=? month \"05\") (and (<= 1 31) (>= 31 31))]\n      [(string=?\
    \ month \"06\") (and (<= 1 30) (>= 30 30))]\n      [(string=? month \"07\") (and\
    \ (<= 1 31) (>= 31 31))]\n      [(string=? month \"08\") (and (<= 1 31) (>= 31",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-day-for-month day month)\n    (cond\n      [(and (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n       (and (>= day 1) (<= day 31))]\n      [(and (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n      [(=\
    \ month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define (valid-date-for-month\
    \ day month year)\n    (cond\n      [(and (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1) (<=\
    \ day 31))]\n      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n \
    \      (and (>= day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day\
    \ 1) (<= day 29))]))\n  (define (valid-date-for-year day month year)\n    (cond\n\
    \      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<= day 30))",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (and (&lt;=\
    \ 1 (string-&gt;number month) 12)\n              (and (not (empty? (rest (rest\
    \ date))))\n                   (and (&lt;= 1 (string-&gt;number (rest (rest date)))\
    \ 31)\n                        (and (not (empty? (rest (rest (rest (rest date)))))))\n\
    \                        (and (not (empty? (rest (rest (rest (rest (rest (rest\
    \ date))))))))\n                             (and (equal? #\\- (first (rest (rest\
    \ (rest (rest date))))))\n                                  (and (equal? #\\-\
    \ (first (rest (rest (rest (rest (rest date))))))))\n                        \
    \          (and (equal? #\\- (first (rest (rest (rest (rest (rest (rest date))))))))))))))))))\n\
    \  (valid-month (first date)))\n</code>\nI'm trying to make a function that checks\
    \ if a date is valid. I'm not sure if I'm doing it right. I'm trying to check\
    \ if the first part of the date is a valid month, and then check if the second\
    \ part is a valid day, and then check if the third part is a valid year. I'm not\
    \ sure if I'm doing it right.\n\n\nA:\n\nI think you're overcomplicating things.\
    \ There's no need to check for the empty string, because the <code>string-&gt;number</code>\
    \ procedure will return <code>#f</code> if the string is empty. Also, you can\
    \ use <code>string-split</code> to split the string into a list of strings, and\
    \ then use <code>map</code> to convert each string to a number.\n<code>(define\
    \ (valid-date date)\n  (define (valid-month month)\n    (and (&lt;= 1 month 12)\n\
    \         (or (and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12))\n             (and (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n             (= month 2))))\n  (define (valid-day month day)\n\
    \    (and (&lt;= 1 day 31)\n        ", "  (define (valid-month month)\n    (and\
    \ (not (negative? month))\n         (not (positive? (sub1 month)))))\n  (define\
    \ (valid-day day)\n    (and (not (negative? day))\n         (not (positive? (sub1\
    \ day)))))\n  (define (valid-year year)\n    (and (not (negative? year))\n   \
    \      (not (positive? (sub1 year)))))\n  (define (valid-date-format date)\n \
    \   (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-month-day-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-month-day-year-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-year-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-month-day-year-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-month-day-year-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-year-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-month-day-year-format\
    \ date)\n", "  (define (valid-month month)\n    (and (integer? month)\n      \
    \   (and (&lt;= 1 month)\n              (&lt;= month 12))))\n  (define (valid-day\
    \ day)\n    (and (integer? day)\n         (and (&lt;= 1 day)\n              (&lt;=\
    \ day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n        \
    \ (and (&lt;= 1 year)\n              (&lt;= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (let ([date-parts (string-split date #\\-)]\n \
    \         [month (string-&gt;number (list-ref date-parts 0))]\n          [day\
    \ (string-&gt;number (list-ref date-parts 1))]\n          [year (string-&gt;number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year))))\n  (and (valid-date-format date)\n   \
    \    (valid-date-parts date)))\n</code>\n", "  (define (valid-month month)\n \
    \   (and (integer? month)\n         (and (&lt;= 1 month)\n              (&lt;=\
    \ month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n   \
    \      (and (&lt;= 1 day)\n              (cond ((or (= month 1) (= month 3) (=\
    \ month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n              \
    \       (&lt;= day 31))\n                    ((or (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n                     (&lt;= day 30))\n                   \
    \ ((= month 2)\n                     (&lt;= day 29))))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (&gt;= year 0)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (split-date date)\n      (string-split\
    \ date #\\-))\n    (define (to-int str)\n      (string-&gt;number str))\n    (define\
    \ (to-int-list str-list)\n      (map to-int str-list))\n    (define (to-int-list-list\
    \ str-list-list)\n      (map to-int-list str-list-list))\n    (define (valid-date-parts-helper\
    \ date-parts)\n      (and (valid-month (car date-parts))\n           (valid-day\
    \ (car date-parts) (cadr date-parts))\n           (valid-year (caddr date-parts))))\n\
    \    (valid-date-parts-helper (to-int-list-list (split-date date))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n</code>\n", "  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (integer? (string->number day))\n     \
    \    (not (< (string->number day) 1))\n         (not (> (string->number day) 31))))\n\
    \  (define (valid-month month)\n    (and (not (empty? month))\n         (integer?\
    \ (string->number month))\n         (not (< (string->number month) 1))\n     \
    \    (not (> (string->number month) 12))))\n  (define (valid-year year)\n    (and\
    \ (not (empty? year))\n         (integer? (string->number year))\n         (not\
    \ (< (string->number year) 1))))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (define (valid-day-for-month day month)\n      (cond\n        [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \         (not (> day 31))]\n        [(or (= month 4) (= month 6) (= month 9)\
    \ (= month 11))\n         (not (> day 30))]\n        [(= month 2)\n         (not\
    \ (> day 29))]))\n    (define (valid-month-for-day month day)\n      (cond\n \
    \       [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n         (not (< day 1))]\n        [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n         (not (< day 1))]\n        [(= month 2)\n\
    \         (not (< day 1))]))\n    (define (valid-leap-year year)\n      (and (not\
    \ (= (modulo year 4) 0))\n           (not (= (modulo year 100) 0))\n         \
    \  (not (= (modulo year 400) 0))))\n    (define (valid-month-for-year month year)\n\
    \      (cond\n", "  (define (valid-month month)\n    (and (integer? month)\n \
    \        (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-month-day-helper month day)\n        (cond\n   \
    \       [(and (= month 1) (= day 31)) #t]\n          [(and (= month 3) (= day\
    \ 31)) #t]\n          [(and (= month 5) (= day 31)) #t]\n          [(and (= month\
    \ 7) (= day 31)) #t]\n          [(and (= month 8) (= day 31)) #t]\n          [(and\
    \ (= month 10) (= day 31)) #t]\n          [(and (= month 12) (= day 31)) #t]\n\
    \          [(and (= month 4) (= day 30)) #t]\n          [(and (= month 6) (= day\
    \ 30)) #t]\n          [(and (= month 9) (= day 30)) #t]\n          [(and (= month\
    \ 11) (= day 30)) #t]\n          [(and (= month 2) (= day 29)) #t]\n         \
    \ [else #f]))\n      (and (valid-month-day-helper (string->number (list-ref date\
    \ 0))\n                                   (string->number (list-ref date 2)))\n\
    \           (valid-year (string->number (list-ref date 4)))))\n    (valid-date-parts-helper\
    \ (string-split date #\\-)))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))", "  (define (valid-month month)\n    (and (integer? month)\n      \
    \   (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer?\
    \ day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)])\n      (and (valid-month (string->number (list-ref date-parts 0)))\n\
    \           (valid-day (string->number (list-ref date-parts 1)))\n           (valid-year\
    \ (string->number (list-ref date-parts 2))))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (&lt;= 1 month)\
    \ (&lt;= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (&lt;= 1 day)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                 (&lt;= day 31)]\n                [(or (= month 4) (= month 6)\
    \ (= month 9) (= month 11))\n                 (&lt;= day 30)]\n              \
    \  [(= month 2)\n                 (&lt;= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (&gt;= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        #t))\n  (define (valid-date-parts date)\n    (let* ([parts (string-split\
    \ date \"-\")]\n           [month (string-&gt;number (list-ref parts 0))]\n  \
    \         [day (string-&gt;number (list-ref parts 1))]\n           [year (string-&gt;number\
    \ (list-ref parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (valid-date-parts date)))\n</code>\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (cond ((or (= month 1) (= month 3) (=\
    \ month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n              \
    \       (<= day 31))\n                    ((or (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n                     (<= day 30))\n                    ((=\
    \ month 2)\n                     (<= day 29))))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n              (not (regexp-match?\
    \ #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date)))))\n  (define (split-date date)\n\
    \    (define (split-date-helper date acc)\n      (if (string-null? date)\n   \
    \       acc\n          (split-date-helper (substring date 1) (cons (string->number\
    \ (substring date 0 1)) acc))))\n    (split-date-helper date '()))\n  (define\
    \ (valid-date-helper date)\n    (define (valid-date-helper-helper date acc)\n\
    \      (if (null? date)\n          acc\n          (valid-date-helper-helper (cdr\
    \ date) (cons (car date) acc))))\n    (valid-date-helper-helper date '()))\n \
    \ (define (valid-date-helper-helper date acc)\n    (if (null? date)\n        acc\n\
    \        (valid-date-helper-helper (cdr date) (cons (car date) acc))))\n  (define\
    \ (", "  (define (valid-month month)\n    (and (integer? month)\n         (and\
    \ (&lt;= 1 month)\n              (&lt;= month 12))))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (and (&lt;= 1 day)\n              (&lt;= day\
    \ 31))))\n  (define (valid-year year)\n    (and (integer? year)\n         (and\
    \ (&lt;= 1 year)\n              (&lt;= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-part date-part)\n      (and\
    \ (integer? date-part)\n           (&lt;= 0 date-part)))\n    (define (valid-date-parts-length\
    \ date-parts)\n      (and (= (length date-parts) 3)\n           (and (valid-date-part\
    \ (car date-parts))\n                (valid-date-part (cadr date-parts))\n   \
    \             (valid-date-part (caddr date-parts)))))\n    (valid-date-parts-length\
    \ (string-&gt;list date)))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n</code>\n", "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date)\n      (define (valid-date-helper-helper-helper date)\n        (define\
    \ (valid-date-helper-helper-helper-helper date)\n          (define (valid-date-helper-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-helper-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (cond\n    [(empty? date) #f]\n    [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n     (let* ([date-list (string-split date #\"-\")]\n            [month\
    \ (string->number (list-ref date-list 0))]\n            [day (string->number (list-ref\
    \ date-list 1))]\n            [year (string->number (list-ref date-list 2))])\n\
    \       (cond\n         [(and (<= 1 month 12) (<= 1 day 31))\n          (or (and\
    \ (= month 1) (= day 31))\n              (and (= month 3) (= day 31))\n      \
    \        (and (= month 5) (= day 31))\n              (and (= month 7) (= day 31))\n\
    \              (and (= month 8) (= day 31))\n              (and (= month 10) (=\
    \ day 31))\n              (and (= month 12) (= day 31))\n              (and (=\
    \ month 4) (= day 30))\n              (and (= month 6) (= day 30))\n         \
    \     (and (= month 9) (= day 30))\n              (and (= month 11) (= day 30))\n\
    \              (and (= month 2) (= day 29))\n              (and (= month 2) (=\
    \ day 28)))]\n         [else #f]))))\n    [else #f]))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-date-parts-helper date)\n      (let* ([date-parts\
    \ (string-split date \"-\")]\n             [month (string->number (vector-ref\
    \ date-parts 0))]\n             [day (string->number (vector-ref date-parts 1))]\n\
    \             [year (string->number (vector-ref date-parts 2))])\n        (and\
    \ (valid-month month)\n             (valid-day day)\n             (valid-year\
    \ year))))\n    (cond [(valid-date-format date) (valid-date-parts-helper date)]\n\
    \          [else #f]))\n  (cond [(string? date) (valid-date-parts date)]\n   \
    \     [else #f]))\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (integer? (string->number month))\n         (<= 1 (string->number month)\
    \ 12)))\n  (define (valid-day day)\n    (and (not (empty? day))\n         (integer?\
    \ (string->number day))\n         (<= 1 (string->number day) 31)))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (integer? (string->number\
    \ year))\n         (<= 1 (string->number year) 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-month-day-format date)\n    (define (valid-month-day-format-helper date)\n\
    \      (cond\n        [(string=? (substring date 0 2) \"01\") #t]\n        [(string=?\
    \ (substring date 0 2) \"03\") #t]\n        [(string=? (substring date 0 2) \"\
    05\") #t]\n        [(string=? (substring date 0 2) \"07\") #t]\n        [(string=?\
    \ (substring date 0 2) \"08\") #t]\n        [(string=? (substring date 0 2) \"\
    10\") #t]\n        [(string=? (substring date 0 2) \"12\") #t]\n        [(string=?\
    \ (substring date 0 2) \"04\")\n         (and (<= 1 (string->number (substring\
    \ date 3 5)) 30))]\n        [(string=? (substring date 0 2) \"06\")\n        \
    \ (and (<= 1 (string->number (substring date 3 5)) 30))]\n        [(string=? (substring\
    \ date 0 2) \"09\")\n         (and (<= 1 (string->number (substring date 3 5))\
    \ 30))]\n        [(string=? (substring date 0 2) \"11\")\n         (and (<= 1\
    \ (string->number (substring date 3 5)) 30))]\n        [(string=? (", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (>= month 1) (<=\
    \ month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n         (and\
    \ (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (let* ([date-parts (string-split date #\\-)]\n             [month\
    \ (string->number (list-ref date-parts 0))]\n             [day (string->number\
    \ (list-ref date-parts 1))]\n             [year (string->number (list-ref date-parts\
    \ 2))])\n        (and (valid-month month)\n             (valid-day day)\n    \
    \         (valid-year year))))\n    (and (valid-date-format date)\n         (valid-date-parts-helper\
    \ date)))\n  (valid-date-parts date))\n", "  (define (valid-day day month)\n \
    \   (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n      [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (<= 1 day) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (<= 1 day) (<= day 29))]))\n  (define\
    \ (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-year\
    \ year)\n    (and (<= 1900 year) (<= year 2100)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (define (split-date date)\n      (string-split\
    \ date #\\-)\n      (map string->number (string-split date #\\-)))\n    (define\
    \ parts (split-date date))\n    (and (valid-month (car parts))\n         (valid-day\
    \ (cadr parts) (car parts))\n         (valid-year (caddr parts))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (integer? (string->number month))\n         (<= 1 (string->number month)\
    \ 12)))\n  (define (valid-day day)\n    (and (not (empty? day))\n         (integer?\
    \ (string->number day))\n         (<= 1 (string->number day) 31)))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (integer? (string->number\
    \ year))\n         (<= 1 (string->number year) 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-day-for-month day month)\n    (cond\n      [(or (equal?\
    \ month \"01\")\n           (equal? month \"03\")\n           (equal? month \"\
    05\")\n           (equal? month \"07\")\n           (equal? month \"08\")\n  \
    \         (equal? month \"10\")\n           (equal? month \"12\"))\n       (<=\
    \ 1 (string->number day) 31)]\n      [(or (equal? month \"04\")\n           (equal?\
    \ month \"06\")\n           (equal? month \"09\")\n           (equal? month \"\
    11\"))\n       (<= 1 (string->number day) 30)]\n      [(equal? month \"02\")\n\
    \       (<= 1 (string->number day) 29)]))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date #\\-)]\n           [month (list-ref\
    \ date-parts 0)]\n           [day (list-ref date-parts 1)]\n           [year (list-ref\
    \ date-parts 2)])\n      (and (valid-month month)\n           (valid-day day)\n\
    \           (valid-year year)\n           (valid-day-for-month day month))))\n\
    \  (and (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-date-helper date)\n    (define (valid-month month)\n      (and (integer?\
    \ month)\n           (and (&lt;= 1 month)\n                (&lt;= month 12))))\n\
    \    (define (valid-day month day)\n      (and (integer? day)\n           (and\
    \ (&lt;= 1 day)\n                (cond ((or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12))\n                       (&lt;=\
    \ day 31))\n                      ((or (= month 4) (= month 6) (= month 9) (=\
    \ month 11))\n                       (&lt;= day 30))\n                      ((=\
    \ month 2)\n                       (&lt;= day 29))))))\n    (define (valid-year\
    \ year)\n      (and (integer? year)\n           (&lt;= 1 year)))\n    (define\
    \ (valid-format date)\n      (and (string? date)\n           (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n    (define (valid-date date)\n      (define\
    \ (valid-date-helper date)\n        (define (valid-month month)\n          (and\
    \ (integer? month)\n               (and (&lt;= 1 month)\n                    (&lt;=\
    \ month 12))))\n        (define (valid-day month day)\n          (and (integer?\
    \ day)\n               (and (&lt;= 1 day)\n                    (cond ((or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                           (&lt;= day 31))\n                          ((or (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n                           (&lt;=\
    \ day 30))\n                          ((= month 2)\n                         \
    \  (&lt;= day 29))))))\n        (define (valid-year year)\n          (and (integer?\
    \ year)\n               (&lt;= 1 year)))\n        (define (valid-format date)\n\
    \          (and (string? date)\n               (regexp-match? #rx\"^[0-9]", " \
    \ (define (valid-month month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n \
    \ (define (valid-day day month)\n    (cond\n      [(and (= month 1) (= month 3)\
    \ (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and\
    \ (&gt;= day 1) (&lt;= day 31))]\n      [(and (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n       (and (&gt;= day 1) (&lt;= day 30))]\n      [(= month\
    \ 2)\n       (and (&gt;= day 1) (&lt;= day 29))]))\n  (define (valid-year year)\n\
    \    (and (&gt;= year 1) (&lt;= year 9999)))\n  (define (valid-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-format date)\n       (valid-month (string-&gt;number\
    \ (substring date 0 2)))\n       (valid-day (string-&gt;number (substring date\
    \ 3 5))\n                  (string-&gt;number (substring date 0 2)))\n       (valid-year\
    \ (string-&gt;number (substring date 6 10)))))\n</code>\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (&lt;= 1 month)\n         \
    \     (&lt;= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n\
    \         (and (&lt;= 1 day)\n              (&lt;= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (&lt;= 1 year)\n            \
    \  (&lt;= year 9999))))\n  (define (valid-date-format date)\n    (and (string?\
    \ date)\n         (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-parts date)\n    (define (valid-date-part date)\n     \
    \ (and (valid-month (string-&gt;number (substring date 0 2)))\n           (valid-day\
    \ (string-&gt;number (substring date 3 5)))\n           (valid-year (string-&gt;number\
    \ (substring date 6 10)))))\n    (valid-date-part date))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n</code>\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-day-for-month\
    \ day month)\n    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n\
    \      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>=\
    \ day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n\
    \  (define (valid-date-parts date)\n    (define (split-date date)\n      (string-split\
    \ date #\\-))\n    (define (parse-date-parts date-parts)\n      (map string->number\
    \ date-parts))\n    (define (valid-date-parts date-parts)\n      (and (valid-month\
    \ (list-ref date-parts 0))\n           (valid-day-for-month (list-ref date-parts\
    \ 1) (list-ref date-parts 0))\n           (valid-year (list-ref date-parts 2))))\n\
    \    (valid-date-parts (parse-date-parts (split-date date))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (not (empty? (string-&gt;number month)))\n\
    \         (not (&lt; (string-&gt;number month) 1))\n         (not (&gt; (string-&gt;number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (not (empty? (string-&gt;number day)))\n         (not (&lt; (string-&gt;number\
    \ day) 1))\n         (not (&gt; (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (empty? (string-&gt;number\
    \ year)))\n         (not (&lt; (string-&gt;number year) 1))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-date-format date)\n       (valid-month (substring date\
    \ 0 2))\n       (valid-day (substring date 3 5))\n       (valid-year (substring\
    \ date 6))))\n</code>\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (&lt;= 1 month)\n              (&lt;= month 12))))\n  (define (valid-day\
    \ day)\n    (and (integer? day)\n         (and (&lt;= 1 day)\n              (&lt;=\
    \ day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n        \
    \ (and (&lt;= 1 year)\n              (&lt;= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n      (let*\
    \ ([month (string-&gt;number (substring date 0 2))]\n             [day (string-&gt;number\
    \ (substring date 3 5))]\n             [year (string-&gt;number (substring date\
    \ 6 10))])\n        (and (valid-month month)\n             (valid-day day)\n \
    \            (valid-year year))))\n    (cond ((valid-date-format date)\n     \
    \      (valid-date-parts-helper date))\n          (else #f)))\n  (cond ((string?\
    \ date)\n         (valid-date-parts date))\n        (else #f)))\n</code>\n", " \
    \ (define (valid-date-helper date)\n    (define (valid-date-helper-helper date)\n\
    \      (define (valid-date-helper-helper-helper date)\n        (define (valid-date-helper-helper-helper-helper\
    \ date)\n          (define (valid-date-helper-helper-helper-helper-helper date)\n\
    \            (define (valid-date-helper-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (integer? month)\n         (and\
    \ (&lt;= 1 month)\n              (&lt;= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (&lt;= 1 day)\n              (cond\n\
    \                [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                 (&lt;= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n              \
    \   (&lt;= day 30)]\n                [(= month 2)\n                 (&lt;= day\
    \ 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n         (&gt;=\
    \ year 0)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let ([month (string-&gt;number\
    \ (vector-ref (split-date date) 1))]\n          [day (string-&gt;number (vector-ref\
    \ (split-date date) 2))]\n          [year (string-&gt;number (vector-ref (split-date\
    \ date) 3))])\n      (and (valid-month month)\n           (valid-day month day)\n\
    \           (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n</code>\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts\
    \ date)\n    (let* ([date-parts (string-split date #\\-)]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month)\n           (valid-day day)\n           (valid-year year))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n```\n\n## [Valid Parentheses](https://www.codewars.com/kata/valid-parentheses/train/racket)\n\
    \n```racket\n#lang racket\n", "  (define (valid-month month)\n    (and (not (empty?\
    \ month))\n         (integer? (string->number month))\n         (and (<= 1 (string->number\
    \ month))\n              (<= (string->number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (integer? (string->number day))\n\
    \         (and (<= 1 (string->number day))\n              (<= (string->number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (integer? (string->number year))\n         (and (<= 1 (string->number year))\n\
    \              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (valid-date-format date)\n       (valid-month (substring date 0 2))\n      \
    \ (valid-day (substring date 3 5))\n       (valid-year (substring date 6 10))))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (&lt;=\
    \ 1 month)\n              (&lt;= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (&lt;= 1 day)\n              (cond\n \
    \               [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                 (&lt;= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n              \
    \   (&lt;= day 30)]\n                [(= month 2)\n                 (&lt;= day\
    \ 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n         (&gt;=\
    \ year 0)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]\n           [month (string-&gt;number (list-ref date-parts 0))]\n\
    \           [day (string-&gt;number (list-ref date-parts 1))]\n           [year\
    \ (string-&gt;number (list-ref date-parts 2))])\n      (and (valid-month month)\n\
    \           (valid-day month day)\n           (valid-year year))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n</code>\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (integer? (string->number month))\n         (and (>= (string->number\
    \ month) 1)\n              (<= (string->number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (integer? (string->number day))\n\
    \         (and (>= (string->number day) 1)\n              (<= (string->number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (integer? (string->number year))\n         (and (>= (string->number year)\
    \ 1)\n              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (valid-date-format date)\n       (valid-month (substring date 0 2))\n      \
    \ (valid-day (substring date 3 5))\n       (valid-year (substring date 6 10))))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (<= 1 month\
    \ 12)))\n  (define (valid-day day)\n    (and (integer? day)\n         (<= 1 day\
    \ 31)))\n  (define (valid-year year)\n    (and (integer? year)\n         (<= 1\
    \ year 9999)))\n  (define (valid-date-format date)\n    (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\"-\")]\n           [month (string->number (vector-ref date-parts 0))]\n\
    \           [day (string->number (vector-ref date-parts 1))]\n           [year\
    \ (string->number (vector-ref date-parts 2))])\n      (and (valid-month month)\n\
    \           (valid-day day)\n           (valid-year year))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (and (not (empty? (rest month)))\n  \
    \            (and (not (empty? (rest (rest month))))\n                   (and\
    \ (not (empty? (rest (rest (rest month)))))\n                        (and (not\
    \ (empty? (rest (rest (rest (rest month)))))))\n                             (and\
    \ (not (empty? (rest (rest (rest (rest (rest month)))))))\n                  \
    \                (not (empty? (rest (rest (rest (rest (rest (rest month))))))))))))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (and (not (empty?\
    \ (rest day)))\n              (and (not (empty? (rest (rest day))))\n        \
    \           (and (not (empty? (rest (rest (rest day)))))\n                   \
    \     (and (not (empty? (rest (rest (rest (rest day)))))))\n                 \
    \            (and (not (empty? (rest (rest (rest (rest (rest day)))))))\n    \
    \                              (not (empty? (rest (rest (rest (rest (rest (rest\
    \ day))))))))))))))\n  (define (valid-year year)\n    (and (not (empty? year))\n\
    \         (and (not (empty? (rest year)))\n              (and (not (empty? (rest\
    \ (rest year))))\n                   (and (not (empty? (rest (rest (rest year)))))\n\
    \                        (and (not (empty? (rest (rest (rest (rest year)))))))\n\
    \                             (and (not (empty? (rest (rest (rest (rest (rest\
    \ year)))))))\n                                  (not (empty? (rest (rest (rest\
    \ (rest (rest (rest year))))))))))))))\n  (define (valid-date-format date)\n \
    \   (and (equal? (list-ref date 2) #\\- )\n         (equal? (list-ref date 5)\
    \ #\\- )))\n  (define (valid-month-day month day)\n    (cond\n      [(or (equal?\
    \ month #1 ) (equal? month #3 ) (equal? month #5 ) (equal? month #7 ) (equal?\
    \ month #8 ) (equal? month #10 )", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (<= 1 month) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (<= 1 day)\n              (cond\n\
    \                [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                 (<= day 31)]\n             \
    \   [(or (= month 4) (= month 6) (= month 9) (= month 11))\n                 (<=\
    \ day 30)]\n                [(= month 2)\n                 (<= day 29)]))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (<= 0 year)\
    \ (<= year 9999))))\n  (cond\n    [(empty? date)\n     #f]\n    [(regexp-match\
    \ #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date)\n     (let ([month (string->number\
    \ (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date 1))]\n        \
    \   [day (string->number (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date 2))]\n           [year (string->number (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date 3))])\n       (and (valid-month month)\n            (valid-day month day)\n\
    \            (valid-year year)))]\n    [else\n     #f]))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not\
    \ (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (valid-month-day-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-month-day-year-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-month-day-year date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define", "  (define (valid-month month)\n    (and (not (empty? month))\n \
    \        (and (char-numeric? (string-ref month 0))\n              (char-numeric?\
    \ (string-ref month 1))\n              (and (not (empty? (string-drop month 2)))\n\
    \                   (not (char-numeric? (string-ref (string-drop month 2) 0)))))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (and (char-numeric?\
    \ (string-ref day 0))\n              (char-numeric? (string-ref day 1))\n    \
    \          (and (not (empty? (string-drop day 2)))\n                   (not (char-numeric?\
    \ (string-ref (string-drop day 2) 0)))))))\n  (define (valid-year year)\n    (and\
    \ (not (empty? year))\n         (and (char-numeric? (string-ref year 0))\n   \
    \           (char-numeric? (string-ref year 1))\n              (char-numeric?\
    \ (string-ref year 2))\n              (char-numeric? (string-ref year 3))\n  \
    \            (and (not (empty? (string-drop year 4)))\n                   (not\
    \ (char-numeric? (string-ref (string-drop year 4) 0)))))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (and (char-numeric? (string-ref\
    \ date 0))\n              (char-numeric? (string-ref date 1))\n              (and\
    \ (not (empty? (string-drop date 2)))\n                   (not (char-numeric?\
    \ (string-ref (string-drop date 2) 0))))\n              (and (not (empty? (string-drop\
    \ date 3)))\n                   (not (char-numeric? (string-ref (string-drop date\
    \ 3) 0))))\n              (and (not (empty? (string-drop date 4)))\n         \
    \          (not (char-numeric? (string-ref (string-drop date 4) 0))))\n      \
    \        (and (not (empty? (string-drop date 5)))\n                   (not (char-numeric?\
    \ (string-ref (", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-month-day-year month day year)\n        (and (valid-month\
    \ month)\n             (and (valid-day day) (valid-year year))))\n      (define\
    \ (valid-month-day month day)\n        (and (valid-month month) (valid-day day)))\n\
    \      (define (valid-month-year month year)\n        (and (valid-month month)\
    \ (valid-year year)))\n      (define (valid-day-year day year)\n        (and (valid-day\
    \ day) (valid-year year)))\n      (cond ((valid-month-day-year (string->number\
    \ (list-ref date 0))\n                                   (string->number (list-ref\
    \ date 2))\n                                   (string->number (list-ref date\
    \ 4)))\n             #t)\n            ((valid-month-day (string->number (list-ref\
    \ date 0))\n                              (string->number (list-ref date 2)))\n\
    \             #t)\n            ((valid-month-year (string->number (list-ref date\
    \ 0))\n                               (string->number (list-ref date 4)))\n  \
    \           #t)\n            ((valid-day-year (string->number (list-ref date 2))\n\
    \                             (string->number (list-ref date 4)))\n          \
    \   #t)\n            (else #f)))\n    (valid-date-parts-helper (string-split date\
    \ \"-\")))\n  (and (not (", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-day-month-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-year-month-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-year-day-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-year-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-day-year-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]", "  (define (valid-month month)\n    (and (integer? month)\n  \
    \       (and (&lt;= 1 month)\n              (&lt;= month 12))))\n  (define (valid-day\
    \ day)\n    (and (integer? day)\n         (and (&lt;= 1 day)\n              (&lt;=\
    \ day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n        \
    \ (and (&lt;= 1 year)\n              (&lt;= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\"-\")]\n\
    \           [month (string-&gt;number (list-ref date-parts 0))]\n           [day\
    \ (string-&gt;number (list-ref date-parts 1))]\n           [year (string-&gt;number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year))))\n  (and (valid-date-format date)\n   \
    \    (valid-date-parts date)))\n</code>\n", "  (define (valid-month month)\n \
    \   (and (not (empty? month))\n         (integer? (string->number month))\n  \
    \       (<= 1 (string->number month) 12)))\n  (define (valid-day day)\n    (and\
    \ (not (empty? day))\n         (integer? (string->number day))\n         (<= 1\
    \ (string->number day) 31)))\n  (define (valid-year year)\n    (and (not (empty?\
    \ year))\n         (integer? (string->number year))\n         (<= 0 (string->number\
    \ year) 9999)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-day-for-month day month)\n\
    \    (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (<= 1 (string->number day) 31)]\n    \
    \  [(or (= month 4) (= month 6) (= month 9) (= month 11))\n       (<= 1 (string->number\
    \ day) 30)]\n      [(= month 2)\n       (<= 1 (string->number day) 29)]))\n  (define\
    \ (valid-date-for-month date)\n    (let* ([date-list (string-split date #\\-)]\n\
    \           [month (list-ref date-list 0)]\n           [day (list-ref date-list\
    \ 1)]\n           [year (list-ref date-list 2)])\n      (valid-day-for-month day\
    \ month)))\n  (and (valid-date-format date)\n       (valid-date-for-month date)))",
  "  (define (valid-date-helper date)\n    (define (valid-month? month)\n      (and\
    \ (not (string=? month \"\"))\n           (and (not (string=? month \"0\"))\n\
    \                (and (not (string=? month \"00\"))\n                     (and\
    \ (not (string=? month \"000\"))\n                          (and (not (string=?\
    \ month \"0000\"))\n                               (and (not (string=? month \"\
    00000\"))\n                                    (and (not (string=? month \"000000\"\
    ))\n                                         (and (not (string=? month \"0000000\"\
    ))\n                                              (and (not (string=? month \"\
    00000000\"))\n                                                   (and (not (string=?\
    \ month \"000000000\"))\n                                                    \
    \    (and (not (string=? month \"0000000000\"))\n                            \
    \                                 (and (not (string=? month \"00000000000\"))\n\
    \                                                                  (and (not (string=?\
    \ month \"000000000000\"))\n                                                 \
    \                      (and (not (string=? month \"0000000000000\"))\n       \
    \                                                                     (and (not\
    \ (string=? month \"00000000000000\"))\n                                     \
    \                                            (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \             (and (not (string=? month \"0000000000000000\"))\n             \
    \                                                                            \
    \  (and (not (string=? month \"00000000000000000\"))\n                       \
    \                                                                         (and\
    \ (not (string=? month \"000000000000000000\"))\n                            \
    \                                                                         (and\
    \ (not (string=? month \"0000000000000000000\"))\n                           \
    \                                                                            \
    \   (and (not (string=? month \"00000000000000000000\"))\n                   \
    \                                                                            \
    \                (and (not (string=? month \"000000000000000000000\"))\n     \
    \                                                                            \
    \                                   (and (not (string=? month \"0000000000000000000000\"\
    ))\n                                                                         \
    \                                                (and (not (string=? month \"\
    00000000000000000000000\"))\n                                                \
    \                                                                            \
    \  (and (not (string=? month \"000000000000000000000000\"))\n                \
    \                                                                            \
    \                                       (and (not (string=? month \"0000000000000000000000000\"\
    ))\n                                                                         \
    \                                                               (and (not (string=?\
    \ month \"00000000000000000000000000\"))", "  (define (valid-month month)\n  \
    \  (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12))\n                 (<= day\
    \ 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \                 (<= day 30)]\n                [(= month 2)\n               \
    \  (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n \
    \        (>= year 0)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         #t))\n  (define (valid-date-parts\
    \ date)\n    (let ([month (string->number (regexp-match #rx\"^[0-9]{2}-\" date))]\n\
    \          [day (string->number (regexp-match #rx\"-[0-9]{2}-\" date))]\n    \
    \      [year (string->number (regexp-match #rx\"-[0-9]{4}$\" date))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day day month)\n    (cond\n\
    \      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (&gt;= day 1) (&lt;= day 31))]\n      [(and (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n       (and (&gt;= day 1) (&lt;=\
    \ day 30))]\n      [(= month 2)\n       (and (&gt;= day 1) (&lt;= day 29))]))\n\
    \  (define (valid-year year)\n    (and (&gt;= year 1) (&lt;= year 9999)))\n  (define\
    \ (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (empty? date))\n       (valid-format date)\n       (valid-year\
    \ (string-&gt;number (substring date 6)))\n       (valid-month (string-&gt;number\
    \ (substring date 0 2)))\n       (valid-day (string-&gt;number (substring date\
    \ 3 5))\n                  (string-&gt;number (substring date 0 2)))))\n</code>\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (not (string-contains\
    \ month #\\0))\n         (not (string-contains month #\\2))\n         (not (string-contains\
    \ month #\\4))\n         (not (string-contains month #\\6))\n         (not (string-contains\
    \ month #\\8))\n         (not (string-contains month #\\9))\n         (not (string-contains\
    \ month #\\1))\n         (not (string-contains month #\\3))\n         (not (string-contains\
    \ month #\\5))\n         (not (string-contains month #\\7))\n         (not (string-contains\
    \ month #\\9))\n         (not (string-contains month #\\1))\n         (not (string-contains\
    \ month #\\3))\n         (not (string-contains month #\\5))\n         (not (string-contains\
    \ month #\\7))\n         (not (string-contains month #\\9))\n         (not (string-contains\
    \ month #\\1))\n         (not (string-contains month #\\3))\n         (not (string-contains\
    \ month #\\5))\n         (not (string-contains month #\\7))\n         (not (string-contains\
    \ month #\\9))\n         (not (string-contains month #\\1))\n         (not (string-contains\
    \ month #\\3))\n         (not (string-contains month #\\5))\n         (not (string-contains\
    \ month #\\7))\n         (not (string-contains month #\\9))\n         (not (string-contains\
    \ month #\\1))\n         (not (string-contains month #\\3))\n         (not (string-contains\
    \ month #\\5))\n         (not (string-contains month #\\7))\n         (not (string-contains\
    \ month #\\9))\n         (not (string-contains month #\\1))\n         (not (string-contains\
    \ month #\\3))\n         (not (string-contains month #\\5))\n         (not (string-contains\
    \ month #\\7))\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (&lt;= 1 month) (&lt;= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (&lt;= 1 day)\n              (cond\n\
    \                [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                 (&lt;= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n              \
    \   (&lt;= day 30)]\n                [(= month 2)\n                 (&lt;= day\
    \ 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n         (&gt;=\
    \ year 0)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (valid-date? date)\n    (let* ([date-split (split-date date)]\n\
    \           [month (string-&gt;number (cadr date-split))]\n           [day (string-&gt;number\
    \ (caddr date-split))]\n           [year (string-&gt;number (cadddr date-split))])\n\
    \      (and (valid-date-format date)\n           (valid-month month)\n       \
    \    (valid-day month day)\n           (valid-year year))))\n  (valid-date? date))\n\
    </code>\n", "  (define (valid-month? month)\n    (and (>= month 1) (<= month 12)))\n\
    \  (define (valid-day? day month)\n    (and (>= day 1)\n         (cond\n     \
    \      [(member month '(1 3 5 7 8 10 12)) (<= day 31)]\n           [(member month\
    \ '(4 6 9 11)) (<= day 30)]\n           [(= month 2) (<= day 29)])))\n  (define\
    \ (valid-year? year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format?\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (split-date date)\n    (map string->number (regexp-split #rx\"-\" date)))\n\
    \  (define (valid-date? date)\n    (let ([date-parts (split-date date)])\n   \
    \   (and (valid-date-format? date)\n           (valid-month? (list-ref date-parts\
    \ 0))\n           (valid-day? (list-ref date-parts 1) (list-ref date-parts 0))\n\
    \           (valid-year? (list-ref date-parts 2)))))\n  (valid-date? date))\n",
  "  (define (is-leap-year year)\n    (or (and (zero? (modulo year 4)) (not (zero?\
    \ (modulo year 100))))\n        (zero? (modulo year 400))))\n  (define (is-valid-date\
    \ year month day)\n    (cond\n      [(and (or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n            (<= 1 day\
    \ 31))\n       #t]\n      [(and (or (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n            (<= 1 day 30))\n       #t]\n      [(and (= month 2)\n    \
    \        (<= 1 day 29)\n            (is-leap-year year))\n       #t]\n      [(and\
    \ (= month 2)\n            (<= 1 day 28)\n            (not (is-leap-year year)))\n\
    \       #t]\n      [else\n       #f]))\n  (define (is-valid-month month)\n   \
    \ (and (<= 1 month 12)))\n  (define (is-valid-year year)\n    (and (<= 1 year\
    \ 9999)))\n  (define (is-valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (is-valid-format date)\n \
    \      (is-valid-year (string->number (substring date 6 10)))\n       (is-valid-month\
    \ (string->number (substring date 3 5)))\n       (is-valid-date (string->number\
    \ (substring date 6 10))\n                      (string->number (substring date\
    \ 3 5))\n                      (string->number (substring date 0 2)))))\n", " \
    \ (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (and (<= 1 day) (<= day (cond ((member month '(1\
    \ 3 5 7 8 10 12)) 31)\n                                  ((member month '(4 6\
    \ 9 11)) 30)\n                                  (else 29)))))\n  (define (valid-year\
    \ year)\n    (and (<= 1 year) (<= year 9999)))\n  (define (valid-date-string date-string)\n\
    \    (and (string? date-string)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date-string)))\n  (define (valid-date-list date-list)\n    (and (list? date-list)\n\
    \         (= (length date-list) 3)\n         (every number? date-list)))\n  (define\
    \ (valid-date-parts month day year)\n    (and (valid-month month)\n         (valid-day\
    \ month day)\n         (valid-year year)))\n  (define (valid-date-parts-list date-list)\n\
    \    (apply valid-date-parts date-list))\n  (cond ((valid-date-string date)\n\
    \         (valid-date-parts-list (string-&gt;list date #\\-)))\n        ((valid-date-list\
    \ date)\n         (valid-date-parts-list date))\n        (else #f)))\n</code>\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date \"-\")]\n\
    \           [month (string->number (list-ref date-parts 0))]\n           [day\
    \ (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year))))\n  (and (valid-date-format date)\n   \
    \    (valid-date-parts date)))\n", "  (define (is-valid-month month)\n    (and\
    \ (integer? month)\n         (and (<= 1 month) (<= month 12))))\n  (define (is-valid-day\
    \ month day)\n    (and (integer? day)\n         (cond\n           [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \            (and (<= 1 day) (<= day 31))]\n           [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n            (and (<= 1 day) (<= day 30))]\n  \
    \         [(= month 2)\n            (and (<= 1 day) (<= day 29))]\n          \
    \ [else #f])))\n  (define (is-valid-year year)\n    (and (integer? year)\n   \
    \      (and (<= 1 year) (<= year 9999))))\n  (define (is-valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         #t))\n\
    \  (define (split-date date)\n    (map string->number (regexp-split #rx\"-\" date)))\n\
    \  (define (is-valid-date date)\n    (let* ([date-list (split-date date)]\n  \
    \         [month (list-ref date-list 0)]\n           [day (list-ref date-list\
    \ 1)]\n           [year (list-ref date-list 2)])\n      (and (is-valid-date-format\
    \ date)\n           (is-valid-month month)\n           (is-valid-day month day)\n\
    \           (is-valid-year year))))\n  (is-valid-date date))\n", "  (define (valid-month\
    \ month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day month\
    \ day)\n    (and (&gt;= day 1)\n         (&lt;= day (cond\n                  [(=\
    \ month 1) 31]\n                  [(= month 3) 31]\n                  [(= month\
    \ 5) 31]\n                  [(= month 7) 31]\n                  [(= month 8) 31]\n\
    \                  [(= month 10) 31]\n                  [(= month 12) 31]\n  \
    \                [(= month 4) 30]\n                  [(= month 6) 30]\n      \
    \            [(= month 9) 30]\n                  [(= month 11) 30]\n         \
    \         [(= month 2) 29]\n                  [else 0]))))\n  (define (valid-year\
    \ year)\n    (and (&gt;= year 0) (&lt;= year 9999)))\n  (define (valid-date-string\
    \ date-string)\n    (and (string? date-string)\n         (not (string=? date-string\
    \ \"\"))\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date-string)))\n\
    \  (define (split-date date-string)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date-string))\n  (define (valid-date-parts date-parts)\n    (and (list? date-parts)\n\
    \         (= (length date-parts) 4)\n         (valid-month (string-&gt;number\
    \ (list-ref date-parts 1)))\n         (valid-day (string-&gt;number (list-ref\
    \ date-parts 1))\n                    (string-&gt;number (list-ref date-parts\
    \ 2)))\n         (valid-year (string-&gt;number (list-ref date-parts 3)))))\n\
    \  (and (valid-date-string date)\n       (valid-date-parts (split-date date))))\n\
    </code>\n", "  (define (valid-month month)\n    (and (not (empty? month))\n  \
    \       (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (and (<= 1 (string->number day))\n              (<= (string->number day)\
    \ 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n        \
    \ (and (<= 1 (string->number year))\n              (<= (string->number year) 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-day-month-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-year-month-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-year-day-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-year-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-day-year-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]\n           [month (string->number (list-ref date-parts 0))]\n \
    \          [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year))))\n  (and (valid-date-format date)\n   \
    \    (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-month-day-pair month day)\n        (cond\n     \
    \     [(and (= month 1) (= day 31)) #t]\n          [(and (= month 3) (= day 31))\
    \ #t]\n          [(and (= month 5) (= day 31)) #t]\n          [(and (= month 7)\
    \ (= day 31)) #t]\n          [(and (= month 8) (= day 31)) #t]\n          [(and\
    \ (= month 10) (= day 31)) #t]\n          [(and (= month 12) (= day 31)) #t]\n\
    \          [(and (= month 4) (= day 30)) #t]\n          [(and (= month 6) (= day\
    \ 30)) #t]\n          [(and (= month 9) (= day 30)) #t]\n          [(and (= month\
    \ 11) (= day 30)) #t]\n          [(and (= month 2) (= day 29)) #t]\n         \
    \ [else #f]))\n      (valid-month-day-pair (string-&gt;number (list-ref date 0))\n\
    \                            (string-&gt;number (list-ref date 1))))\n    (and\
    \ (valid-date-parts-helper date)\n         (valid-date-parts-helper (list-ref\
    \ date 2))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n\
    </code>\n", "  (define (valid-month? month)\n    (and (integer? month)\n     \
    \    (and (&lt;= 1 month)\n              (&lt;= month 12))))\n  (define (valid-day?\
    \ day)\n    (and (integer? day)\n         (and (&lt;= 1 day)\n              (&lt;=\
    \ day 31))))\n  (define (valid-year? year)\n    (and (integer? year)\n       \
    \  (and (&lt;= 1 year)\n              (&lt;= year 9999))))\n  (define (valid-date-format?\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts? date)\n    (let* ([date-parts (string-split date #\\-)]\n\
    \           [month (string-&gt;number (list-ref date-parts 0))]\n           [day\
    \ (string-&gt;number (list-ref date-parts 1))]\n           [year (string-&gt;number\
    \ (list-ref date-parts 2))])\n      (and (valid-month? month)\n           (valid-day?\
    \ day)\n           (valid-year? year))))\n  (and (valid-date-format? date)\n \
    \      (valid-date-parts? date)))\n", "  (define (is-valid-date? date)\n    (and\
    \ (regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date)\n         (let* ([month (string-&gt;number (regexp-match #rx\"^(0[1-9]|1[0-2])\"\
    \ date))]\n                [day (string-&gt;number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n           (cond [(or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n                  (and (&lt;= 1 day)\
    \ (&lt;= day 31))]\n                 [(or (= month 4) (= month 6) (= month 9)\
    \ (= month 11))\n                  (and (&lt;= 1 day) (&lt;= day 30))]\n     \
    \            [(= month 2)\n                  (and (&lt;= 1 day) (&lt;= day 29))]\n\
    \                 [else #f]))))\n  (is-valid-date? date))\n</code>\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (not (negative?\
    \ (string->number month)))\n         (not (> (string->number month) 12))))\n \
    \ (define (valid-day day)\n    (and (not (empty? day))\n         (not (negative?\
    \ (string->number day)))\n         (not (> (string->number day) 31))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))\n         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (valid-date-format date)\n       (valid-month (substring date 0 2))\n      \
    \ (valid-day (substring date 3 5))\n       (valid-year (substring date 6 10))))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (<= 1 month)\
    \ (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n     \
    \    (and (<= 1 day) (<= day 31))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (and (<= 1 year) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date))\n  (define (valid-leap-year year)\n    (and (integer? year)\n       \
    \  (and (<= 1 year) (<= year 9999))\n         (or (and (zero? (modulo year 4))\n\
    \                  (not (zero? (modulo year 100))))\n             (zero? (modulo\
    \ year 400)))))\n  (define (valid-february-day day year)\n    (and (integer? day)\n\
    \         (and (<= 1 day) (<= day 29))\n         (valid-leap-year year)))\n  (define\
    \ (valid-february-day-non-leap day)\n    (and (integer? day)\n         (and (<=\
    \ 1 day) (<= day 28))))\n  (define (valid-month-day month day year)\n    (cond\
    \ ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n           (valid-day day))\n          ((or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n           (and (valid-day day) (<= day 30)))\n\
    \          ((= month 2)\n           (if (valid-leap-year year)\n             \
    \  (valid-february-day day year)\n               (valid-february-day-non-leap\
    \ day)))))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)", "  (define (valid-month month)\n    (and (integer? month)\n        \
    \ (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n    (and\
    \ (integer? day)\n         (and (>= day 1)\n              (cond\n            \
    \    [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n                 (<= day 31)]\n                [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n                 (<= day 30)]\n  \
    \              [(= month 2)\n                 (<= day 29)]))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([date-list (string-split date \"-\")])\n           (and\
    \ (valid-month (string->number (list-ref date-list 0)))\n                (valid-day\
    \ (string->number (list-ref date-list 0)) (string->number (list-ref date-list\
    \ 1)))\n                (valid-year (string->number (list-ref date-list 2)))))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-date-helper date)\n    (define (valid-month month)\n      (and (integer?\
    \ month)\n           (and (>= month 1) (<= month 12))))\n    (define (valid-day\
    \ day)\n      (and (integer? day)\n           (and (>= day 1) (<= day 31))))\n\
    \    (define (valid-year year)\n      (and (integer? year)\n           (and (>=\
    \ year 1) (<= year 9999))))\n    (define (valid-date-format date)\n      (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n    (define (valid-date-parts date)\n\
    \      (define (valid-date-parts-helper date)\n        (define (valid-month-day-pair\
    \ month day)\n          (cond\n            [(and (= month 1) (= day 31)) #t]\n\
    \            [(and (= month 3) (= day 31)) #t]\n            [(and (= month 5)\
    \ (= day 31)) #t]\n            [(and (= month 7) (= day 31)) #t]\n           \
    \ [(and (= month 8) (= day 31)) #t]\n            [(and (= month 10) (= day 31))\
    \ #t]\n            [(and (= month 12) (= day 31)) #t]\n            [(and (= month\
    \ 4) (= day 30)) #t]\n            [(and (= month 6) (= day 30)) #t]\n        \
    \    [(and (= month 9) (= day 30)) #t]\n            [(and (= month 11) (= day\
    \ 30)) #t]\n            [(and (= month 2) (= day 29)) #t]\n            [else #f]))\n\
    \        (define (valid-month-day-pair-helper date)\n          (define (valid-month-day-pair-helper-helper\
    \ date)\n            (define (valid-month-day-pair-helper-helper-helper date)\n\
    \              (define (valid-month-day-pair-helper-helper-helper-helper date)\n\
    \                (define (valid-month-day-pair-helper-helper-helper-helper-hel",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (<= 1 month)\
    \ (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (cond\n           [(or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n            (and (<= 1 day) (<= day\
    \ 31))]\n           [(or (= month 4) (= month 6) (= month 9) (= month 11))\n \
    \           (and (<= 1 day) (<= day 30))]\n           [(= month 2)\n         \
    \   (and (<= 1 day) (<= day 29))]\n           [else #f])))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n\
    \  (define (valid-date-string date)\n    (and (string? date)\n         (string-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-numbers date)\n\
    \    (and (valid-month (string->number (substring date 0 2)))\n         (valid-day\
    \ (string->number (substring date 0 2)) (string->number (substring date 3 5)))\n\
    \         (valid-year (string->number (substring date 6 10)))))\n  (and (valid-date-string\
    \ date)\n       (valid-date-numbers date)))\n", "  (define (valid-month month)\n\
    \    (and (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (&gt;= day 1) (&lt;= day 31))]\n\
    \      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (&gt;=\
    \ day 1) (&lt;= day 30))]\n      [(= month 2)\n       (and (&gt;= day 1) (&lt;=\
    \ day 29))]))\n  (define (valid-year year)\n    (and (&gt;= year 0) (&lt;= year\
    \ 9999)))\n  (define (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (valid-format date)\n       (valid-month (string-&gt;number (regexp-match\
    \ #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string-&gt;number (regexp-match\
    \ #rx\"^[0-9]{2}-\" date))\n                  (string-&gt;number (regexp-match\
    \ #rx\"-[0-9]{2}-\" date)))\n       (valid-year (string-&gt;number (regexp-match\
    \ #rx\"-[0-9]{4}$\" date)))))\n</code>\nI think it's a bit verbose, but I'm not\
    \ sure how to make it more concise.\n\n\nA:\n\nI think you can make it more concise\
    \ by using <code>cond</code> instead of <code>and</code> and <code>or</code>.\n\
    <code>(define (valid-month month)\n  (cond\n    [(and (&gt;= month 1) (&lt;= month\
    \ 12)) #t]\n    [else #f]))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (let* ([date-parts (string-split date #\\-)]\n             [month\
    \ (string->number (list-ref date-parts 0))]\n             [day (string->number\
    \ (list-ref date-parts 1))]\n             [year (string->number (list-ref date-parts\
    \ 2))])\n        (and (valid-month month)\n             (valid-day day)\n    \
    \         (valid-year year))))\n    (cond ((valid-date-format date)\n        \
    \   (valid-date-parts-helper date))\n          (else #f)))\n  (cond ((string=?\
    \ date \"\") #f)\n        ((valid-date-parts date) #t)\n        (else #f)))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (&lt;=\
    \ 1 month)\n              (&lt;= month 12))))\n  (define (valid-day day)\n   \
    \ (and (integer? day)\n         (and (&lt;= 1 day)\n              (&lt;= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (&lt;= 1\
    \ year)\n              (&lt;= year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-date-parts-helper date)\n      (define (valid-date-parts-helper-helper\
    \ date)\n        (define (valid-date-parts-helper-helper-helper date)\n      \
    \    (define (valid-date-parts-helper-helper-helper-helper date)\n           \
    \ (define (valid-date-parts-helper-helper-helper-helper-helper date)\n       \
    \       (define (valid-date-parts-helper-helper-helper-helper-helper-helper date)\n\
    \                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (not (empty? month))\n     \
    \    (not (char-numeric? (string-ref month 0)))\n         (not (char-numeric?\
    \ (string-ref month 1)))\n         (not (negative? (string->number month)))\n\
    \         (not (> (string->number month) 12))))\n  (define (valid-day day)\n \
    \   (and (not (empty? day))\n         (not (char-numeric? (string-ref day 0)))\n\
    \         (not (char-numeric? (string-ref day 1)))\n         (not (negative? (string->number\
    \ day)))\n         (not (> (string->number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (char-numeric? (string-ref\
    \ year 0)))\n         (not (char-numeric? (string-ref year 1)))\n         (not\
    \ (char-numeric? (string-ref year 2)))\n         (not (char-numeric? (string-ref\
    \ year 3)))\n         (not (negative? (string->number year)))))\n  (define (valid-format\
    \ date)\n    (and (not (empty? date))\n         (not (char-numeric? (string-ref\
    \ date 0)))\n         (not (char-numeric? (string-ref date 1)))\n         (not\
    \ (char-numeric? (string-ref date 3)))\n         (not (char-numeric? (string-ref\
    \ date 4)))\n         (not (char-numeric? (string-ref date 6)))\n         (not\
    \ (char-numeric? (string-ref date 7)))\n         (not (char-numeric? (string-ref\
    \ date 8)))\n         (not (char-numeric? (string-ref date 9)))\n         (char=?\
    \ (string-ref date 2) #\\-)))\n  (define (valid-month-day month day)\n    (and\
    \ (not (empty? month))\n         (not (empty? day))\n         (not (negative?\
    \ (string->number month)))\n         (not (negative? (string->number day)))\n\
    \         (cond [(or (= (string->number month) 1)", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (and (not (empty? (string-&gt;number\
    \ month)))\n              (and (&lt;= 1 (string-&gt;number month))\n         \
    \          (&lt;= (string-&gt;number month) 12)))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (not (empty? (string-&gt;number day)))\n\
    \              (and (&lt;= 1 (string-&gt;number day))\n                   (&lt;=\
    \ (string-&gt;number day) 31)))))\n  (define (valid-year year)\n    (and (not\
    \ (empty? year))\n         (and (not (empty? (string-&gt;number year)))\n    \
    \          (and (&lt;= 1 (string-&gt;number year))\n                   (&lt;=\
    \ (string-&gt;number year) 9999)))))\n  (define (valid-date-format date)\n   \
    \ (and (not (empty? date))\n         (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n              (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n                   (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))))\n  (define (valid-date-parts date)\n    (and (valid-month (string-&gt;number\
    \ (substring date 0 2)))\n         (and (valid-day (string-&gt;number (substring\
    \ date 3 5)))\n              (valid-year (string-&gt;number (substring date 6\
    \ 10))))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n\
    </code>\n", "  (define (valid-month month)\n    (and (integer? month)\n      \
    \   (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer?\
    \ day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-pair month day)\n    (cond ((or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \           (and (valid-day day) (<= day 31)))\n          ((or (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n           (and (valid-day day) (<= day\
    \ 30)))\n          ((= month 2)\n           (and (valid-day day) (<= day 29)))\n\
    \          (else #f)))\n  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (split-date\
    \ date)]\n           [month (string->number (list-ref date-parts 1))]\n      \
    \     [day (string->number (list-ref date-parts 2))]\n           [year (string->number\
    \ (list-ref date-parts 3))])\n      (and (valid-month month)\n           (valid-month-day-pair\
    \ month day)\n           (valid-year year))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (and (not (empty?\
    \ (rest month)))\n              (not (empty? (rest (rest month)))))))\n  (define\
    \ (valid-day day)\n    (and (not (empty? day))\n         (and (not (empty? (rest\
    \ day)))\n              (not (empty? (rest (rest day)))))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (not (empty? (rest year)))\n\
    \              (not (empty? (rest (rest year))))\n              (not (empty? (rest\
    \ (rest (rest year))))))))\n  (define (valid-date-format date)\n    (and (not\
    \ (empty? date))\n         (and (not (empty? (rest date)))\n              (not\
    \ (empty? (rest (rest date))))\n              (not (empty? (rest (rest (rest date))))))))\n\
    \  (define (valid-month-days month)\n    (cond ((or (= month 1) (= month 3) (=\
    \ month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n           (and\
    \ (&gt;= month 1) (&lt;= month 31)))\n          ((or (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n           (and (&gt;= month 1) (&lt;= month 30)))\n\
    \          ((= month 2)\n           (and (&gt;= month 1) (&lt;= month 29)))))\n\
    \  (define (valid-month-format month)\n    (and (not (empty? month))\n       \
    \  (and (not (empty? (rest month)))\n              (not (empty? (rest (rest month)))))))\n\
    \  (define (valid-day-format day)\n    (and (not (empty? day))\n         (and\
    \ (not (empty? (rest day)))\n              (not (empty? (rest (rest day)))))))\n\
    \  (define (valid-year-format year)\n    (and (not (empty? year))\n         (and\
    \ (not (empty? (rest year)))\n              (not (empty? (rest (rest year))))\n\
    \              (not (empty? (rest (rest", "  (define (valid-month month)\n   \
    \ (and (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day month day)\n \
    \   (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (&gt;= day 1) (&lt;= day 31))]\n\
    \      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (&gt;=\
    \ day 1) (&lt;= day 30))]\n      [(= month 2)\n       (and (&gt;= day 1) (&lt;=\
    \ day 29))]))\n  (define (valid-year year)\n    (and (&gt;= year 0) (&lt;= year\
    \ 9999)))\n  (define (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-format date)\n    \
    \   (valid-month (string-&gt;number (regexp-match #rx\"^[0-9]{2}-\" date)))\n\
    \       (valid-day (string-&gt;number (regexp-match #rx\"^[0-9]{2}-\" date))\n\
    \                  (string-&gt;number (regexp-match #rx\"-[0-9]{2}-\" date)))\n\
    \       (valid-year (string-&gt;number (regexp-match #rx\"-[0-9]{4}$\" date)))))\n\
    </code>\n", "  (define (valid-month month)\n    (and (integer? month)\n      \
    \   (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer?\
    \ day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-part date)\n\
    \      (and (valid-month (string->number (substring date 0 2)))\n           (valid-day\
    \ (string->number (substring date 3 5)))\n           (valid-year (string->number\
    \ (substring date 6 10)))))\n    (valid-date-part date))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper date)\n\
    \      (define (valid-date-helper-helper-helper date)\n        (define (valid-date-helper-helper-helper-helper\
    \ date)\n          (define (valid-date-helper-helper-helper-helper-helper date)\n\
    \            (define (valid-date-helper-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (not (empty? month))\n     \
    \    (and (&lt;= 1 (string-&gt;number month))\n              (&lt;= (string-&gt;number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (and (&lt;= 1 (string-&gt;number day))\n              (&lt;= (string-&gt;number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (and (&lt;= 1 (string-&gt;number year))\n              (&lt;= (string-&gt;number\
    \ year) 9999))))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-numbers date)\n \
    \   (let* ([date-numbers (string-split date \"-\")]\n           [month (list-ref\
    \ date-numbers 0)]\n           [day (list-ref date-numbers 1)]\n           [year\
    \ (list-ref date-numbers 2)])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year))))\n  (and (valid-date-format date)\n   \
    \    (valid-date-numbers date)))\n</code>\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 0) (<= year 9999))))\n  (define (valid-date-format date)\n    (and (string?\
    \ date)\n         (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-parts date)\n    (let* ([parts (string-split date #\\-)]\n\
    \           [month (string->number (list-ref parts 0))]\n           [day (string->number\
    \ (list-ref parts 1))]\n           [year (string->number (list-ref parts 2))])\n\
    \      (and (valid-month month)\n           (valid-day day)\n           (valid-year\
    \ year))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (and (not\
    \ (empty? (string-&gt;number month)))\n              (and (&lt;= 1 (string-&gt;number\
    \ month))\n                   (&lt;= (string-&gt;number month) 12)))))\n  (define\
    \ (valid-day day)\n    (and (not (empty? day))\n         (and (not (empty? (string-&gt;number\
    \ day)))\n              (and (&lt;= 1 (string-&gt;number day))\n             \
    \      (&lt;= (string-&gt;number day) 31)))))\n  (define (valid-year year)\n \
    \   (and (not (empty? year))\n         (and (not (empty? (string-&gt;number year)))\n\
    \              (and (&lt;= 1 (string-&gt;number year))\n                   (&lt;=\
    \ (string-&gt;number year) 9999)))))\n  (define (valid-date-format date)\n   \
    \ (and (not (empty? date))\n         (and (equal? (string-length date) 10)\n \
    \             (and (equal? (substring date 2 3) \"-\")\n                   (and\
    \ (equal? (substring date 5 6) \"-\")\n                        (and (valid-month\
    \ (substring date 0 2))\n                             (and (valid-day (substring\
    \ date 3 5))\n                                  (valid-year (substring date 6\
    \ 10)))))))))\n  (valid-date-format date))\n</code>\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-day-for-month day month)\n      (cond ((or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \             (and (>= day 1) (<= day 31)))\n            ((or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n             (and (>= day 1) (<= day 30)))\n \
    \           ((= month 2)\n             (and (>= day 1) (<= day 29)))))\n    (define\
    \ (valid-date-parts-helper date)\n      (define (valid-date-parts-helper-helper\
    \ date)\n        (define (valid-date-parts-helper-helper-helper date)\n      \
    \    (define (valid-date-parts-helper-helper-helper-helper date)\n           \
    \ (define (valid-date-parts-helper-helper-helper-helper-helper date)\n       \
    \       (define (valid-date-parts-helper-helper-helper-helper-helper-helper date)\n\
    \                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-hel",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (and (<=\
    \ 1 (string->number month))\n              (<= (string->number month) 12))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (and (<= 1 (string->number\
    \ day))\n              (<= (string->number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (<= 1 (string->number year))\n\
    \              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-month-day month day)\n      (cond\n\
    \        [(and (string=? month \"01\") (string=? day \"31\")) #t]\n        [(and\
    \ (string=? month \"02\") (string=? day \"29\")) #t]\n        [(and (string=?\
    \ month \"03\") (string=? day \"31\")) #t]\n        [(and (string=? month \"04\"\
    ) (string=? day \"30\")) #t]\n        [(and (string=? month \"05\") (string=?\
    \ day \"31\")) #t]\n        [(and (string=? month \"06\") (string=? day \"30\"\
    )) #t]\n        [(and (string=? month \"07\") (string=? day \"31\")) #t]\n   \
    \     [(and (string=? month \"08\") (string=? day \"31\")) #t]\n        [(and\
    \ (string=? month \"09\") (string=? day \"30\")) #t]\n        [(and (string=?\
    \ month \"10\") (string=? day \"31\")) #t]\n        [(and (string=? month \"11\"\
    ) (string=? day \"30\")) #t]\n        [(and (string=? month \"12\") (string=?\
    \ day \"31\")) #t]\n        [else #f]))\n    (define (valid-month", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (not (negative?\
    \ (string->number month)))\n         (not (> (string->number month) 12))))\n \
    \ (define (valid-day day)\n    (and (not (empty? day))\n         (not (negative?\
    \ (string->number day)))\n         (not (> (string->number day) 31))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))\n         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-day-for-month month day)\n    (cond\n      [(or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (not\
    \ (> (string->number day) 31))]\n      [(or (= month 4) (= month 6) (= month 9)\
    \ (= month 11))\n       (not (> (string->number day) 30))]\n      [(= month 2)\n\
    \       (not (> (string->number day) 29))]))\n  (define (valid-date-parts date)\n\
    \    (define (valid-date-parts-helper date-parts)\n      (cond\n        [(empty?\
    \ date-parts) #t]\n        [(valid-date-format (car date-parts))\n         (valid-date-parts-helper\
    \ (cdr date-parts))]\n        [else #f]))\n    (valid-date-parts-helper (string-split\
    \ date #\\space)))\n  (define (valid-date-parts-2 date)\n    (define (valid-date-parts-helper\
    \ date-parts)\n      (cond\n        [(empty? date-parts) #t]\n        [(valid-date-format\
    \ (car date-parts))\n         (valid-date-parts-helper (cdr date-parts))]\n  \
    \      [else #f]))\n   ", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-leap-year year)\n    (and (integer? year)\n         (or (and\
    \ (= (modulo year 4) 0)\n                  (not (= (modulo year 100) 0)))\n  \
    \           (= (modulo year 400) 0))))\n  (define (valid-month-day-pair month\
    \ day)\n    (cond\n      [(and (valid-month month) (valid-day day))\n       (cond\n\
    \         [(and (= month 1) (= day 31)) #t]\n         [(and (= month 3) (= day\
    \ 31)) #t]\n         [(and (= month 5) (= day 31)) #t]\n         [(and (= month\
    \ 7) (= day 31)) #t]\n         [(and (= month 8) (= day 31)) #t]\n         [(and\
    \ (= month 10) (= day 31)) #t]\n         [(and (= month 12) (= day 31)) #t]\n\
    \         [(and (= month 4) (= day 30)) #t]\n         [(and (= month 6) (= day\
    \ 30)) #t]\n         [(and (= month 9) (= day 30)) #t]\n         [(and (= month\
    \ 11) (= day 30)) #t]\n         [(and (= month 2) (= day 29)) #t]\n         [(and\
    \ (= month 2) (= day 28)) #t]\n         [else #f]]]\n      [else #f]))\n", " \
    \ (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-day-for-month day month)\n     \
    \ (cond ((and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n             (and (>= day 1) (<= day 31)))\n            ((and\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n             (and (>= day\
    \ 1) (<= day 30)))\n            ((= month 2)\n             (and (>= day 1) (<=\
    \ day 29)))))\n    (let* ([date-parts (string-split date \"-\")]\n           [month\
    \ (string->number (list-ref date-parts 0))]\n           [day (string->number (list-ref\
    \ date-parts 1))]\n           [year (string->number (list-ref date-parts 2))])\n\
    \      (and (valid-month month)\n           (valid-day day)\n           (valid-year\
    \ year)\n           (valid-day-for-month day month))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (not (negative? (string->number month)))\n\
    \         (not (> (string->number month) 12))))\n  (define (valid-day day)\n \
    \   (and (not (empty? day))\n         (not (negative? (string->number day)))\n\
    \         (not (> (string->number day) 31))))\n  (define (valid-year year)\n \
    \   (and (not (empty? year))\n         (not (negative? (string->number year)))\n\
    \         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-numbers date)\n    (let* ([date-list (string-split date \"-\")]\n\
    \           [month (list-ref date-list 0)]\n           [day (list-ref date-list\
    \ 1)]\n           [year (list-ref date-list 2)])\n      (and (valid-month month)\n\
    \           (valid-day day)\n           (valid-year year))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-numbers date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 1) (<= year 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (regexp-match? #rx\"\
    ^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (valid-day-for-month day month)\n\
    \    (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\\-)]\n\
    \           [month (string->number (list-ref date-parts 0))]\n           [day\
    \ (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year)\n           (valid-day-for-month day month))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-date-helper date)\n    (define (valid-month month)\n\
    \      (and (not (string=? month \"\"))\n           (and (&lt;= 1 (string-&gt;number\
    \ month) 12)))\n      )\n    (define (valid-day day)\n      (and (not (string=?\
    \ day \"\"))\n           (and (&lt;= 1 (string-&gt;number day) 31)))\n      )\n\
    \    (define (valid-year year)\n      (and (not (string=? year \"\"))\n      \
    \     (and (&lt;= 1 (string-&gt;number year) 9999)))\n      )\n    (define (valid-date-format\
    \ date)\n      (and (string-contains date #\\-))\n      )\n    (define (valid-date-format-helper\
    \ date)\n      (define (valid-date-format-helper-helper date)\n        (define\
    \ (valid-date-format-helper-helper-helper date)\n          (and (valid-date-format\
    \ date)\n               (and (valid-month (substring date 0 2))\n            \
    \        (and (valid-day (substring date 3 5))\n                         (and\
    \ (valid-year (substring date 6 10))))))\n          )\n        (valid-date-format-helper-helper-helper\
    \ date)\n        )\n      (valid-date-format-helper-helper date)\n      )\n  \
    \  (valid-date-format-helper date)\n    )\n  (valid-date-helper date)\n  )\n</code>\n\
    I am trying to make a function that validates a date. I have to make sure that\
    \ the date is in the format mm-dd-yyyy. I have to make sure that the date is not\
    \ empty. I have to make sure that the month is between 1 and 12. I have to make\
    \ sure that the day is between 1 and 31. I have to make sure that the year is\
    \ between 1 and 9999. I have to make sure that the date is in the format mm-dd-yyyy.\
    \ I have to make sure that the date is not empty. I have to make sure that the\
    \ month is between 1 and 12. I have to make sure that the day is", "  (define\
    \ (valid-month month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define\
    \ (valid-day day month)\n    (cond ((or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n           (and (&gt;= day\
    \ 1) (&lt;= day 31)))\n          ((or (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n           (and (&gt;= day 1) (&lt;= day 30)))\n          ((= month 2)\n\
    \           (and (&gt;= day 1) (&lt;= day 29)))))\n  (define (valid-year year)\n\
    \    (and (&gt;= year 1) (&lt;= year 9999)))\n  (define (valid-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let\
    \ ([date-list (string-&gt;list date)])\n           (and (= (list-ref date-list\
    \ 2) #\\-)))))\n  (define (valid-date-list date-list)\n    (and (valid-month (string-&gt;number\
    \ (list-&gt;string (list-ref date-list 0))))\n         (valid-day (string-&gt;number\
    \ (list-&gt;string (list-ref date-list 1)))\n                    (string-&gt;number\
    \ (list-&gt;string (list-ref date-list 0))))\n         (valid-year (string-&gt;number\
    \ (list-&gt;string (list-ref date-list 3))))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-format date)\n       (valid-date-list (string-split date #\\\
    -))))\n</code>\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (<= 1 month) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (<= 1 day) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-day-for-month day month)\n    (cond\n      [(or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n       (and (<= 1 day) (<= day 31))]\n      [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n       (and (<= 1 day) (<= day 30))]\n      [(=\
    \ month 2)\n       (and (<= 1 day) (<= day 29))]\n      [else #f]))\n  (define\
    \ (valid-leap-year year)\n    (and (= (modulo year 4) 0)\n         (or (not (=\
    \ (modulo year 100) 0))\n             (= (modulo year 400) 0))))\n  (define (valid-day-for-month-and-year\
    \ day month year)\n    (cond\n      [(and (= month 2) (valid-leap-year year))\n\
    \       (and (<= 1 day) (<= day 29))]\n      [else (valid-day-for-month day month)]))\n\
    \  (define (valid-date-parts date)\n    (let* ([date-parts (string-split date\
    \ #\\-)])\n      (and (equal? (length date-parts) 3)\n           (and (valid-month\
    \ (string->number (list-ref date-parts 0)))\n                (and (valid-day-for-month-and-year\
    \ (string->number (list-ref date-parts 1)) (string->number (list-ref date-parts\
    \ 0", "  (define (valid-month month)\n    (and (integer? month)\n         (and\
    \ (&lt;= 1 month)\n              (&lt;= month 12))))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (and (&lt;= 1 day)\n              (&lt;= day\
    \ 31))))\n  (define (valid-year year)\n    (and (integer? year)\n         (and\
    \ (&lt;= 1 year)\n              (&lt;= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-month-day month day)\n      (cond\
    \ ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n             (&lt;= day 31))\n            ((or (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n             (&lt;= day 30))\n         \
    \   ((= month 2)\n             (&lt;= day 29))\n            (else #f)))\n    (define\
    \ (valid-month-year month year)\n      (cond ((= month 2)\n             (and (&lt;=\
    \ year 1582)\n                  (&lt;= 1582 year)))\n            (else #t)))\n\
    \    (define (valid-day-year day year)\n      (cond ((= day 29)\n            \
    \ (and (&lt;= year 1582)\n                  (&lt;= 1582 year)))\n            (else\
    \ #t)))\n    (define (valid-month-day-year month day year)\n      (cond ((= month\
    \ 2)\n             (and (&lt;= day 28)\n                  (&lt;= year 1582)\n\
    \                  (&lt;= 1582 year)))\n            (else #t)))\n    (let* ([date-parts\
    \ (string-split date #\\-)])\n      (and (valid-month-day (string-&gt;number (list-ref\
    \ date-parts 0))\n                            (string-&gt;number (list", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (>= month 1) (<=\
    \ month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n         (and\
    \ (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts\
    \ date)\n    (define (date-parts date)\n      (map string->number (regexp-split\
    \ #rx\"-\" date)))\n    (define (valid-month-day-year month day year)\n      (and\
    \ (valid-month month)\n           (valid-day day)\n           (valid-year year)))\n\
    \    (define (valid-month-day month day)\n      (and (valid-month month)\n   \
    \        (valid-day day)))\n    (define (valid-day-year day year)\n      (and\
    \ (valid-day day)\n           (valid-year year)))\n    (define (valid-month-year\
    \ month year)\n      (and (valid-month month)\n           (valid-year year)))\n\
    \    (define (valid-month-day-year-parts month day year)\n      (and (valid-month-day-year\
    \ month day year)\n           (and (or (and (= month 1) (= day 31))\n        \
    \            (and (= month 3) (= day 31))\n                    (and (= month 5)\
    \ (= day 31))\n                    (and (= month 7) (= day 31))\n            \
    \        (and (= month 8) (= day 31))\n                    (and (= month 10) (=\
    \ day 31))\n                    (and (= month 12) (= day 31))\n              \
    \      (and (= month 4) (= day 30))\n                    (and (= month 6) (= day\
    \ 30))\n                    (and (= month 9) (= day 30))\n                   \
    \ (and (= month 11) (= day 30))\n                    (and (= month 2) (= day 29)))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n      (define\
    \ (valid-date-parts-helper-helper date)\n        (define (valid-date-parts-helper-helper-helper\
    \ date)\n          (define (valid-date-parts-helper-helper-helper-helper date)\n\
    \            (define (valid-date-parts-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-parts-helper-helper", " \
    \ (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-month-day month day)\n      (cond\n\
    \        [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n         (and (>= day 1) (<= day 31))]\n        [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n         (and (>= day 1) (<= day 30))]\n\
    \        [(= month 2)\n         (and (>= day 1) (<= day 29))]\n        [else #f]))\n\
    \    (define (valid-month-year month year)\n      (cond\n        [(= month 2)\n\
    \         (and (>= year 0) (<= year 9999))]\n        [else #t]))\n    (define\
    \ (valid-day-year day year)\n      (cond\n        [(= day 29)\n         (and (>=\
    \ year 0) (<= year 9999))]\n        [else #t]))\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-date-parts-helper-helper date)\n        (define\
    \ (valid-date-parts-helper-helper-helper date)\n          (define (valid-date-parts-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-parts-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-parts-helper-helper-", "  (define (valid-date-format?\
    \ date)\n    (regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-numbers? date)\n    (define (valid-month? month)\n\
    \      (and (<= 1 month) (<= month 12)))\n    (define (valid-day? month day)\n\
    \      (cond\n        [(= month 1) (<= 1 day) (<= day 31)]\n        [(= month\
    \ 2) (<= 1 day) (<= day 29)]\n        [(= month 3) (<= 1 day) (<= day 31)]\n \
    \       [(= month 4) (<= 1 day) (<= day 30)]\n        [(= month 5) (<= 1 day)\
    \ (<= day 31)]\n        [(= month 6) (<= 1 day) (<= day 30)]\n        [(= month\
    \ 7) (<= 1 day) (<= day 31)]\n        [(= month 8) (<= 1 day) (<= day 31)]\n \
    \       [(= month 9) (<= 1 day) (<= day 30)]\n        [(= month 10) (<= 1 day)\
    \ (<= day 31)]\n        [(= month 11) (<= 1 day) (<= day 30)]\n        [(= month\
    \ 12) (<= 1 day) (<= day 31)]))\n    (define (valid-year? year)\n      (and (<=\
    \ 1 year) (<= year 9999)))\n    (define (valid-date-numbers-helper date)\n   \
    \   (define (valid-date-numbers-helper-helper date)\n        (define (valid-date-numbers-helper-helper-helper\
    \ date)\n          (define (valid-date-numbers-helper-helper-helper-helper date)\n\
    \            (define (valid-date-numbers-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-numbers-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (number? (string->number month))\n  \
    \       (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (number? (string->number day))\n         (and (<= 1 (string->number day))\n\
    \              (<= (string->number day) 31))))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (number? (string->number year))\n    \
    \     (and (<= 1 (string->number year))\n              (<= (string->number year)\
    \ 9999))))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (valid-date-format date)\n       (valid-month (substring date\
    \ 0 2))\n       (valid-day (substring date 3 5))\n       (valid-year (substring\
    \ date 6 10))))\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-day-month-year day month year)\n    (cond\n      [(and (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \       (and (>= day 1) (<= day 31))]\n      [(and (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n      [(and (=\
    \ month 2) (= year 2020))\n       (and (>= day 1) (<= day 29))]\n      [(and (=\
    \ month 2) (not (= year 2020)))\n       (and (>= day 1) (<= day 28))]))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n      (define\
    \ (valid-date-parts-helper-helper date)\n        (define (valid-date-parts-helper-helper-helper\
    \ date)\n          (valid-day-month-year (string->number (string-ref date 3))\n\
    \                                (string->number (string-ref date 0))\n      \
    \                          (string->number (string-ref date 6))))\n        (valid-date-parts-helper-helper-helper\
    \ date))\n      (valid-date-parts-helper-helper date))\n    (", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n       \
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \                [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-parts (string-split date \"-\")]\n            \
    \    [month (string->number (list-ref date-parts 0))]\n                [day (string->number\
    \ (list-ref date-parts 1))]\n                [year (string->number (list-ref date-parts\
    \ 2))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-month month)\n   \
    \ (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (cond ((or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                (and (>= day 1) (<= day 31)))\n               ((or (= month 4)\
    \ (= month 6) (= month 9) (= month 11))\n                (and (>= day 1) (<= day\
    \ 30)))\n               ((= month 2)\n                (and (>= day 1) (<= day\
    \ 29))))))\n  (define (valid-year year)\n    (and (integer? year)\n         (>=\
    \ year 1)))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         #t))\n  (define (valid-date-parts\
    \ date)\n    (let ((date-parts (string-split date #\\-)))\n      (and (valid-month\
    \ (string->number (list-ref date-parts 0)))\n           (valid-day (string->number\
    \ (list-ref date-parts 0))\n                      (string->number (list-ref date-parts\
    \ 1)))\n           (valid-year (string->number (list-ref date-parts 2))))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (&gt;= month 1) (&lt;=\
    \ month 12)))\n  (define (valid-day day month)\n    (cond\n      [(and (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \       (and (&gt;= day 1) (&lt;= day 31))]\n      [(and (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n       (and (&gt;= day 1) (&lt;= day 30))]\n \
    \     [(= month 2)\n       (and (&gt;= day 1) (&lt;= day 29))]))\n  (define (valid-year\
    \ year)\n    (and (&gt;= year 1) (&lt;= year 9999)))\n  (define (valid-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (not (string=? date \"\"))\n       (valid-format date)\n       (valid-month\
    \ (string-&gt;number (substring date 0 2)))\n       (valid-day (string-&gt;number\
    \ (substring date 3 5))\n                  (string-&gt;number (substring date\
    \ 0 2)))\n       (valid-year (string-&gt;number (substring date 6 10)))))\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (not (empty?\
    \ (string-&gt;number month)))\n         (and (&lt;= 1 (string-&gt;number month))\n\
    \              (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (not (empty? (string-&gt;number day)))\n\
    \         (and (&lt;= 1 (string-&gt;number day))\n              (&lt;= (string-&gt;number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (not (empty? (string-&gt;number year)))\n         (and (&lt;= 1 (string-&gt;number\
    \ year))\n              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (string-contains date #\\-)))\n\
    \  (and (valid-date-format date)\n       (valid-month (substring date 0 2))\n\
    \       (valid-day (substring date 3 5))\n       (valid-year (substring date 6\
    \ 10))))\n</code>\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (and (not (empty? (rest month)))\n              (and (not (empty? (rest\
    \ (rest month))))\n                   (and (char-numeric? (string-ref month 0))\n\
    \                        (char-numeric? (string-ref month 1))\n              \
    \          (and (char-numeric? (string-ref month 3))\n                       \
    \      (char-numeric? (string-ref month 4))\n                             (and\
    \ (char-numeric? (string-ref month 6))\n                                  (char-numeric?\
    \ (string-ref month 7))\n                                  (and (char-numeric?\
    \ (string-ref month 8))\n                                       (char-numeric?\
    \ (string-ref month 9))\n                                       (and (char=? (string-ref\
    \ month 2) #\\- )\n                                            (and (char=? (string-ref\
    \ month 5) #\\- )\n                                                 (and (and\
    \ (<= (string->number (substring month 0 2)) 12)\n                           \
    \                                (>= (string->number (substring month 0 2)) 1))\n\
    \                                                      (and (<= (string->number\
    \ (substring month 3 5)) 31)\n                                               \
    \            (>= (string->number (substring month 3 5)) 1))\n                \
    \                                      (and (<= (string->number (substring month\
    \ 6 8)) 2020)\n                                                           (>=\
    \ (string->number (substring month 6 8)) 2000))))))))))))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (and (not (empty? (rest day)))\n\
    \              (and (not (empty? (rest (rest day))))\n                   (and\
    \ (char-numeric? (string-ref day 0))\n                        (char-numeric? (string-ref\
    \ day 1))\n                        (and (char-numeric? (string-ref day 3))\n \
    \                            (char-numeric? (string-ref day 4))\n            \
    \                 (and (char-numeric? (string-ref day 6))\n                  \
    \                (char-numeric? (string-ref day 7))\n                        \
    \          (and (char-numeric? (string-ref", "  (define (valid-month month)\n\
    \    (and (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day day month)\n\
    \    (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (&gt;= day 1) (&lt;= day 31))]\n\
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (&gt;=\
    \ day 1) (&lt;= day 30))]\n      [(= month 2)\n       (and (&gt;= day 1) (&lt;=\
    \ day 29))]))\n  (define (valid-year year)\n    (and (&gt;= year 0) (&lt;= year\
    \ 9999)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (get-month date)\n    (string-&gt;number (vector-ref (split-date\
    \ date) 1)))\n  (define (get-day date)\n    (string-&gt;number (vector-ref (split-date\
    \ date) 2)))\n  (define (get-year date)\n    (string-&gt;number (vector-ref (split-date\
    \ date) 3)))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-month (get-month date))\n       (valid-day (get-day date) (get-month\
    \ date))\n       (valid-year (get-year date))))\n</code>\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n       \
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \                [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (let ([date-list (string-split date #\\-)])\n           (and (valid-month\
    \ (string->number (list-ref date-list 0)))\n                (valid-day (string->number\
    \ (list-ref date-list 0)) (string->number (list-ref date-list 1)))\n         \
    \       (valid-year (string->number (list-ref date-list 2)))))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define (valid-day?\
    \ day)\n    (and (integer? day)\n         (and (<= 1 day) (<= day 31))))\n  (define\
    \ (valid-month? month)\n    (and (integer? month)\n         (and (<= 1 month)\
    \ (<= month 12))))\n  (define (valid-year? year)\n    (and (integer? year)\n \
    \        (and (<= 1 year) (<= year 9999))))\n  (define (valid-date-format? date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts?\
    \ date)\n    (define (valid-date-parts-helper date)\n      (define (valid-day-for-month?\
    \ day month)\n        (cond\n          [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12))\n           (and (<= 1 day)\
    \ (<= day 31))]\n          [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \           (and (<= 1 day) (<= day 30))]\n          [(= month 2)\n          \
    \ (and (<= 1 day) (<= day 29))]\n          [else\n           #f]))\n      (define\
    \ (valid-date-parts-helper-helper date)\n        (define (valid-date-parts-helper-helper-helper\
    \ date)\n          (define (valid-date-parts-helper-helper-helper-helper date)\n\
    \            (define (valid-date-parts-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (not (empty? (string-&gt;number month)))\n  \
    \       (not (&lt; (string-&gt;number month) 1))\n         (not (&gt; (string-&gt;number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (not (empty? (string-&gt;number day)))\n         (not (&lt; (string-&gt;number\
    \ day) 1))\n         (not (&gt; (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (empty? (string-&gt;number\
    \ year)))\n         (not (&lt; (string-&gt;number year) 1))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (string-contains date #\\-)))\n\
    \  (and (valid-date-format date)\n       (valid-month (substring date 0 2))\n\
    \       (valid-day (substring date 3 5))\n       (valid-year (substring date 6\
    \ 10))))\n</code>\n", "  (define (valid-month month)\n    (and (positive? month)\
    \ (<= month 12)))\n  (define (valid-day month day)\n    (and (positive? day)\n\
    \         (cond\n           [(member month '(1 3 5 7 8 10 12)) (<= day 31)]\n\
    \           [(member month '(4 6 9 11)) (<= day 30)]\n           [(= month 2)\
    \ (<= day 29)]\n           [else #f])))\n  (define (valid-year year)\n    (and\
    \ (positive? year) (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (empty? date))\n   \
    \    (valid-date-format date)\n       (let* ([parts (string-split date \"-\")]\n\
    \              [month (string->number (list-ref parts 0))]\n              [day\
    \ (string->number (list-ref parts 1))]\n              [year (string->number (list-ref\
    \ parts 2))])\n         (and (valid-month month)\n              (valid-day month\
    \ day)\n              (valid-year year)))))\n", "  (define (valid-month month)\n\
    \    (and (positive? month)\n         (not (> month 12))))\n  (define (valid-day\
    \ month day)\n    (and (positive? day)\n         (cond\n           [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \            (not (> day 31))]\n           [(or (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n            (not (> day 30))]\n           [(= month 2)\n \
    \           (not (> day 29))])))\n  (define (valid-year year)\n    (and (positive?\
    \ year)\n         (not (> year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date\
    \ date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n\
    \  (define (valid-date? date)\n    (let* ([splitted-date (split-date date)]\n\
    \           [month (string->number (vector-ref splitted-date 1))]\n          \
    \ [day (string->number (vector-ref splitted-date 2))]\n           [year (string->number\
    \ (vector-ref splitted-date 3))])\n      (and (valid-date-format date)\n     \
    \      (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (valid-date? date))\n", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (and (&lt;= 1 month)\n              (&lt;= month\
    \ 12))))\n  (define (valid-day day)\n    (and (integer? day)\n         (and (&lt;=\
    \ 1 day)\n              (&lt;= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (&lt;= 1 year)\n              (&lt;= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         #t))\n  (define (valid-date-parts date)\n    (define (valid-month-day-pair\
    \ month day)\n      (cond\n        [(and (equal? month 1)\n              (equal?\
    \ day 31)) #t]\n        [(and (equal? month 3)\n              (equal? day 31))\
    \ #t]\n        [(and (equal? month 5)\n              (equal? day 31)) #t]\n  \
    \      [(and (equal? month 7)\n              (equal? day 31)) #t]\n        [(and\
    \ (equal? month 8)\n              (equal? day 31)) #t]\n        [(and (equal?\
    \ month 10)\n              (equal? day 31)) #t]\n        [(and (equal? month 12)\n\
    \              (equal? day 31)) #t]\n        [(and (equal? month 4)\n        \
    \      (equal? day 30)) #t]\n        [(and (equal? month 6)\n              (equal?\
    \ day 30)) #t]\n        [(and (equal? month 9)\n              (equal? day 30))\
    \ #t]\n        [(and (equal? month 11)\n              (equal? day 30)) #t]\n \
    \       [(and (equal? month 2)\n              (equal? day 29)) #t]\n        [else\
    \ #f]))\n    (define (valid-year-month-pair year month)\n      (cond\n       \
    \ [(and (equal? month 2)\n              (equal? day 29)) #t]\n        [", "  (define\
    \ (is_leap_year? year)\n    (or (and (zero? (modulo year 4))\n             (not\
    \ (zero? (modulo year 100))))\n        (zero? (modulo year 400))))\n  (define\
    \ (valid-month? month)\n    (and (not (zero? month))\n         (<= month 12)))\n\
    \  (define (valid-day? month day)\n    (cond ((or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n           (<= day 31))\n\
    \          ((or (= month 4) (= month 6) (= month 9) (= month 11))\n          \
    \ (<= day 30))\n          ((= month 2)\n           (if (is_leap_year? (caddr (string-&gt;list\
    \ date)))\n               (<= day 29)\n               (<= day 28)))\n        \
    \  (else #f)))\n  (and (not (empty? date))\n       (valid-month? (string-&gt;number\
    \ (substring date 0 2)))\n       (valid-day? (string-&gt;number (substring date\
    \ 0 2))\n                   (string-&gt;number (substring date 3 5)))\n      \
    \ (equal? (substring date 2 3) \"-\")\n       (equal? (substring date 5 6) \"\
    -\")\n       (equal? (string-length date) 10)))\n</code>\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-month-day-pair month day)\n      (cond ((or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \             (and (>= day 1) (<= day 31)))\n            ((or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n             (and (>= day 1) (<= day 30)))\n \
    \           ((= month 2)\n             (and (>= day 1) (<= day 29)))))\n    (define\
    \ (valid-date-parts-helper date)\n      (define (valid-date-parts-helper-helper\
    \ date)\n        (define (valid-date-parts-helper-helper-helper date)\n      \
    \    (define (valid-date-parts-helper-helper-helper-helper date)\n           \
    \ (define (valid-date-parts-helper-helper-helper-helper-helper date)\n       \
    \       (define (valid-date-parts-helper-helper-helper-helper-helper-helper date)\n\
    \                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-hel",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (not (negative?\
    \ (string->number month)))\n         (not (> (string->number month) 12))))\n \
    \ (define (valid-day day)\n    (and (not (empty? day))\n         (not (negative?\
    \ (string->number day)))\n         (cond [(or (= (string->number month) 1)\n \
    \                   (= (string->number month) 3)\n                    (= (string->number\
    \ month) 5)\n                    (= (string->number month) 7)\n              \
    \      (= (string->number month) 8)\n                    (= (string->number month)\
    \ 10)\n                    (= (string->number month) 12))\n                (not\
    \ (> (string->number day) 31))]\n               [(or (= (string->number month)\
    \ 4)\n                    (= (string->number month) 6)\n                    (=\
    \ (string->number month) 9)\n                    (= (string->number month) 11))\n\
    \                (not (> (string->number day) 30))]\n               [(= (string->number\
    \ month) 2)\n                (not (> (string->number day) 29))])))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))))\n  (define (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-part date-part)\n\
    \      (and (not (empty? date-part))\n           (not (negative? (string->number\
    \ date-part)))))\n  (and (valid-date-part (substring date 0 2))\n       (valid-date-part\
    \ (substring date 3 5))\n       (valid-date-part (substring date 6 10))))\n  (and\
    \ (valid-format date)\n       (valid-date-parts date)\n       (valid-month (substring\
    \ date 0 2))\n       (valid-day (substring date 3 5))\n       (valid-year (substring\
    \ date 6 10))))\n\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (and (not (empty? (rest month)))\n              (and (not (empty? (rest\
    \ (rest month))))\n                   (and (char-numeric? (string-ref month 0))\n\
    \                        (char-numeric? (string-ref month 1))\n              \
    \          (and (char-numeric? (string-ref month 3))\n                       \
    \      (char-numeric? (string-ref month 4))\n                             (and\
    \ (char-numeric? (string-ref month 6))\n                                  (char-numeric?\
    \ (string-ref month 7))\n                                  (and (char-numeric?\
    \ (string-ref month 8))\n                                       (char-numeric?\
    \ (string-ref month 9))\n                                       (and (char=? (string-ref\
    \ month 2) #\\- )\n                                            (char=? (string-ref\
    \ month 5) #\\- )))))))))))\n  (define (valid-day day)\n    (and (not (empty?\
    \ day))\n         (and (not (empty? (rest day)))\n              (and (not (empty?\
    \ (rest (rest day))))\n                   (and (char-numeric? (string-ref day\
    \ 0))\n                        (char-numeric? (string-ref day 1))\n          \
    \              (and (char-numeric? (string-ref day 3))\n                     \
    \        (char-numeric? (string-ref day 4))\n                             (and\
    \ (char-numeric? (string-ref day 6))\n                                  (char-numeric?\
    \ (string-ref day 7))\n                                  (and (char-numeric? (string-ref\
    \ day 8))\n                                       (char-numeric? (string-ref day\
    \ 9))\n                                       (and (char=? (string-ref day 2)\
    \ #\\- )\n                                            (char=? (string-ref day\
    \ 5) #\\- )))))))))))\n  (define (valid-year year)\n    (and (not (empty? year))\n\
    \         (and (not (empty? (rest year)))\n              (and (not (empty? (rest\
    \ (rest year))))\n                   (and (char-numeric? (string-ref year 0))\n\
    \                       ", "  (let ([date-list (string-split date \"-\")])\n \
    \   (and (not (empty? date-list))\n         (and (not (empty? (cdr date-list)))\n\
    \              (and (not (empty? (cddr date-list)))\n                   (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and", "  (define\
    \ (valid-date-helper date)\n    (define (valid-month month)\n      (and (not (empty?\
    \ month))\n           (and (not (empty? (rest month)))\n                (and (char-numeric?\
    \ (string-ref month 0))\n                     (char-numeric? (string-ref month\
    \ 1))))))\n    (define (valid-day day)\n      (and (not (empty? day))\n      \
    \     (and (not (empty? (rest day)))\n                (and (char-numeric? (string-ref\
    \ day 0))\n                     (char-numeric? (string-ref day 1))))))\n    (define\
    \ (valid-year year)\n      (and (not (empty? year))\n           (and (not (empty?\
    \ (rest year)))\n                (and (not (empty? (rest (rest year))))\n    \
    \                 (and (not (empty? (rest (rest (rest year)))))\n            \
    \              (and (char-numeric? (string-ref year 0))\n                    \
    \           (char-numeric? (string-ref year 1))\n                            \
    \   (char-numeric? (string-ref year 2))\n                               (char-numeric?\
    \ (string-ref year 3))))))))\n    (define (valid-month-day month day)\n      (cond\
    \ ((and (= (string->number month) 1) (= (string->number month) 3) (= (string->number\
    \ month) 5) (= (string->number month) 7) (= (string->number month) 8) (= (string->number\
    \ month) 10) (= (string->number month) 12))\n             (and (<= 1 (string->number\
    \ day)) (<= (string->number day) 31)))\n            ((and (= (string->number month)\
    \ 4) (= (string->number month) 6) (= (string->number month) 9) (= (string->number\
    \ month) 11))\n             (and (<= 1 (string->number day)) (<= (string->number\
    \ day) 30)))\n            ((= (string->number month) 2)\n             (and (<=\
    \ 1 (string->number day)) (<= (string->number day) 29)))\n            (else #f)))\n\
    \    (define (valid-month-year month year)\n      (and (<= 1 (", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (and (not (empty? (rest month)))\n\
    \              (not (empty? (rest (rest month)))))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (not (empty? (rest day)))\n      \
    \        (not (empty? (rest (rest day)))))))\n  (define (valid-year year)\n  \
    \  (and (not (empty? year))\n         (and (not (empty? (rest year)))\n      \
    \        (not (empty? (rest (rest year))))\n              (not (empty? (rest (rest\
    \ (rest year))))))))\n  (define (valid-format date)\n    (and (equal? (list-ref\
    \ date 2) #\\- )\n         (equal? (list-ref date 5) #\\- )))\n  (define (valid-month-day\
    \ month day)\n    (cond ((and (equal? month \"01\") (equal? day \"31\")) #t)\n\
    \          ((and (equal? month \"03\") (equal? day \"31\")) #t)\n          ((and\
    \ (equal? month \"05\") (equal? day \"31\")) #t)\n          ((and (equal? month\
    \ \"07\") (equal? day \"31\")) #t)\n          ((and (equal? month \"08\") (equal?\
    \ day \"31\")) #t)\n          ((and (equal? month \"10\") (equal? day \"31\"))\
    \ #t)\n          ((and (equal? month \"12\") (equal? day \"31\")) #t)\n      \
    \    ((and (equal? month \"04\") (equal? day \"30\")) #t)\n          ((and (equal?\
    \ month \"06\") (equal? day \"30\")) #t)\n          ((and (equal? month \"09\"\
    ) (equal? day \"30\")) #t)\n          ((and (equal? month \"11\") (equal? day\
    \ \"30\")) #t)\n          ((and (equal? month \"02\") (equal? day \"29\")) #t)\n\
    \          (else #f)))\n  (define (valid-month-day-year month day year)\n    (cond\
    \ ((and (equal? month \"01\") (equal? day \"31\") (", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (not (negative? (string->number\
    \ month)))\n         (not (> (string->number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (not (negative? (string->number\
    \ day)))\n         (not (> (string->number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))\n         (not (> (string->number year) 9999))))\n  (define (valid-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-month month day)\n      (cond\n\
    \        [(equal? month \"01\") #t]\n        [(equal? month \"03\") #t]\n    \
    \    [(equal? month \"05\") #t]\n        [(equal? month \"07\") #t]\n        [(equal?\
    \ month \"08\") #t]\n        [(equal? month \"10\") #t]\n        [(equal? month\
    \ \"12\") #t]\n        [(equal? month \"04\") (and (<= (string->number day) 30)\
    \ (> (string->number day) 0))]\n        [(equal? month \"06\") (and (<= (string->number\
    \ day) 30) (> (string->number day) 0))]\n        [(equal? month \"09\") (and (<=\
    \ (string->number day) 30) (> (string->number day) 0))]\n        [(equal? month\
    \ \"11\") (and (<= (string->number day) 30) (> (string->number day) 0))]\n   \
    \     [(equal? month \"02\") (and (<= (string->number day) 29) (> (string->number\
    \ day) 0))]\n        [else #f]))\n    (define (valid-year year)\n      (and (<=\
    \ (string->number year) 9999) (> (string->number year) 0)))\n    (define (valid-day\
    \ day)\n", "  (define (valid-month month)\n    (and (integer? month)\n       \
    \  (and (<= 1 month) (<= month 12))))\n  (define (valid-day day)\n    (and (integer?\
    \ day)\n         (and (<= 1 day) (<= day 31))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-pair month day)\n    (cond\n      [(and (member\
    \ month '(1 3 5 7 8 10 12)) (<= day 31)) #t]\n      [(and (member month '(4 6\
    \ 9 11)) (<= day 30)) #t]\n      [(and (= month 2) (<= day 29)) #t]\n      [else\
    \ #f]))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (let ([month (string->number (regexp-match #rx\"^[0-9]{2}-\" date))]\n\
    \            [day (string->number (regexp-match #rx\"-[0-9]{2}-\" date))]\n  \
    \          [year (string->number (regexp-match #rx\"-[0-9]{4}$\" date))])\n  \
    \      (and (valid-month month)\n             (valid-day day)\n             (valid-year\
    \ year)\n             (valid-month-day-pair month day))))\n    (valid-date-parts-helper\
    \ date))\n  (and (not (empty? date))\n       (valid-date-format date)\n      \
    \ (valid-date-parts date)))\n", "  (define (is-valid-month month)\n    (and (integer?\
    \ month)\n         (and (<= 1 month) (<= month 12))))\n  (define (is-valid-day\
    \ day)\n    (and (integer? day)\n         (and (<= 1 day) (<= day 31))))\n  (define\
    \ (is-valid-year year)\n    (and (integer? year)\n         (and (<= 1 year) (<=\
    \ year 9999))))\n  (define (is-valid-date-format date)\n    (and (string? date)\n\
    \         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (is-valid-date-parts date)\n    (define (is-valid-date-part date)\n      (let*\
    \ ([date-parts (string-split date #\\-)]\n             [month (string->number\
    \ (list-ref date-parts 0))]\n             [day (string->number (list-ref date-parts\
    \ 1))]\n             [year (string->number (list-ref date-parts 2))])\n      \
    \  (and (is-valid-month month)\n             (is-valid-day day)\n            \
    \ (is-valid-year year))))\n    (is-valid-date-part date))\n  (and (is-valid-date-format\
    \ date)\n       (is-valid-date-parts date)))\n", "  (define (valid-date-helper\
    \ date)\n    (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (integer? month)\n         (and\
    \ (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer?\
    \ day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-part date)\n\
    \      (and (valid-month (string->number (substring date 0 2)))\n           (valid-day\
    \ (string->number (substring date 3 5)))\n           (valid-year (string->number\
    \ (substring date 6 10)))))\n    (valid-date-part date))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (<= 1 month)\
    \ (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n     \
    \    (and (<= 1 day) (<= day 31))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (and (<= 1 year) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\\-)]\n\
    \           [month (string->number (vector-ref date-parts 0))]\n           [day\
    \ (string->number (vector-ref date-parts 1))]\n           [year (string->number\
    \ (vector-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year))))\n  (and (not (string=? date \"\"))\n \
    \      (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (and (&lt;= 1 (string-&gt;number\
    \ month))\n              (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (and (&lt;= 1 (string-&gt;number\
    \ day))\n              (&lt;= (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (&lt;= 1 (string-&gt;number\
    \ year))\n              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-part date)\n      (and (not\
    \ (empty? date))\n           (and (&lt;= 1 (string-&gt;number date))\n       \
    \         (&lt;= (string-&gt;number date) 31))))\n    (and (valid-date-part (list-ref\
    \ (string-split date #\"-\") 0))\n         (valid-date-part (list-ref (string-split\
    \ date #\"-\") 1))\n         (valid-date-part (list-ref (string-split date #\"\
    -\") 2))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n\
    </code>\n", "  (define (valid-month month)\n    (and (integer? month)\n      \
    \   (or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day\
    \ day)\n    (and (integer? day)\n         (or (= day 1) (= day 3) (= day 5) (=\
    \ day 7) (= day 8) (= day 10) (= day 12))\n         (and (>= day 1) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 1) (<= year 9999))))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (define (valid-date-part date)\n      (and (valid-month (string->number (substring\
    \ date 0 2)))\n           (valid-day (string->number (substring date 3 5)))\n\
    \           (valid-year (string->number (substring date 6 10)))))\n    (valid-date-part\
    \ date))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define\
    \ (valid-day day month)\n    (cond\n      [(and (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (&gt;= day\
    \ 1) (&lt;= day 31))]\n      [(and (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n       (and (&gt;= day 1) (&lt;= day 30))]\n      [(= month 2)\n     \
    \  (and (&gt;= day 1) (&lt;= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (&gt;= year 0) (&lt;= year 9999)))\n  (define (valid-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"\
    ))\n       (valid-format date)\n       (valid-month (string-&gt;number (substring\
    \ date 0 2)))\n       (valid-day (string-&gt;number (substring date 3 5)) (string-&gt;number\
    \ (substring date 0 2)))\n       (valid-year (string-&gt;number (substring date\
    \ 6 10)))))\n</code>\n", "  (define (valid-month month)\n    (and (positive? month)\
    \ (<= month 12)))\n  (define (valid-day month day)\n    (and (positive? day)\n\
    \         (cond [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                (<= day 31)]\n              \
    \ [(or (= month 4) (= month 6) (= month 9) (= month 11))\n                (<=\
    \ day 30)]\n               [(= month 2)\n                (<= day 29)]\n      \
    \         [else #f])))\n  (define (valid-year year)\n    (and (positive? year)\
    \ (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (empty? date))\n       (valid-date-format\
    \ date)\n       (let* ([month (string->number (regexp-replace #rx\"^([0-9]{2})-[0-9]{2}-[0-9]{4}$\"\
    \ date \"\\\\1\"))]\n              [day (string->number (regexp-replace #rx\"\
    ^[0-9]{2}-([0-9]{2})-[0-9]{4}$\" date \"\\\\1\"))]\n              [year (string->number\
    \ (regexp-replace #rx\"^[0-9]{2}-[0-9]{2}-([0-9]{4})$\" date \"\\\\1\"))])\n \
    \        (and (valid-month month)\n              (valid-day month day)\n     \
    \         (valid-year year)))))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-month-day-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-day-month-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-year-month-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (and (not (empty? (string-&gt;number month)))\n              (and (&lt;=\
    \ 1 (string-&gt;number month))\n                   (&lt;= (string-&gt;number month)\
    \ 12)))))\n  (define (valid-day day)\n    (and (not (empty? day))\n         (and\
    \ (not (empty? (string-&gt;number day)))\n              (and (&lt;= 1 (string-&gt;number\
    \ day))\n                   (&lt;= (string-&gt;number day) 31)))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (and (not (empty?\
    \ (string-&gt;number year)))\n              (and (&lt;= 1 (string-&gt;number year))\n\
    \                   (&lt;= (string-&gt;number year) 9999)))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n              (and (valid-month (substring date 0 2))\n             \
    \      (and (valid-day (substring date 3 5))\n                        (valid-year\
    \ (substring date 6 10)))))))\n  (valid-date-format date))\n</code>\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (integer? (string->number\
    \ month))\n         (<= 1 (string->number month) 12)))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (integer? (string->number day))\n     \
    \    (<= 1 (string->number day) 31)))\n  (define (valid-year year)\n    (and (not\
    \ (empty? year))\n         (integer? (string->number year))\n         (<= 1 (string->number\
    \ year) 9999)))\n  (define (valid-date-format date)\n    (and (not (empty? date))\n\
    \         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-month-day-pair month day)\n    \
    \  (cond\n        [(and (equal? month \"01\") (equal? day \"31\")) #t]\n     \
    \   [(and (equal? month \"03\") (equal? day \"31\")) #t]\n        [(and (equal?\
    \ month \"05\") (equal? day \"31\")) #t]\n        [(and (equal? month \"07\")\
    \ (equal? day \"31\")) #t]\n        [(and (equal? month \"08\") (equal? day \"\
    31\")) #t]\n        [(and (equal? month \"10\") (equal? day \"31\")) #t]\n   \
    \     [(and (equal? month \"12\") (equal? day \"31\")) #t]\n        [(and (equal?\
    \ month \"04\") (equal? day \"30\")) #t]\n        [(and (equal? month \"06\")\
    \ (equal? day \"30\")) #t]\n        [(and (equal? month \"09\") (equal? day \"\
    30\")) #t]\n        [(and (equal? month \"11\") (equal? day \"30\")) #t]\n   \
    \     [(and (equal? month \"02\") (equal? day \"29\")) #t]\n        [else #f]))\n\
    \    (define (valid-leap-year year)\n      (and (equal? ("]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
