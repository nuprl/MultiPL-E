name: HumanEval_89_encrypt
language: rkt
prompt: "#lang racket\n\n#| Create a function encrypt that takes a string as an argument\
  \ and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet\
  \ should be rotated in a manner such that the letters \nshift down by two multiplied\
  \ to two places.\nFor example:\n>>> (encrypt \"hi\")\n\"lm\"\n>>> (encrypt \"asdfghjkl\"\
  )\n\"ewhjklnop\"\n>>> (encrypt \"gf\")\n\"kj\"\n>>> (encrypt \"et\")\n\"ix\"|#\n\
  (define (encrypt s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n\
  \    (check-equal? (candidate \"hi\") \"lm\")\n    (check-equal? (candidate \"asdfghjkl\"\
  ) \"ewhjklnop\")\n    (check-equal? (candidate \"gf\") \"kj\")\n    (check-equal?\
  \ (candidate \"et\") \"ix\")\n    (check-equal? (candidate \"faewfawefaewg\") \"\
  jeiajeaijeiak\")\n    (check-equal? (candidate \"hellomyfriend\") \"lippsqcjvmirh\"\
  )\n    (check-equal? (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ) \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n    (check-equal? (candidate\
  \ \"a\") \"e\")\n))\n\n(test-humaneval)"
completions: ["  (define (rotate-char c)\n    (let ([c (char-downcase c)])\n     \
    \ (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n    \
    \    [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c])))\n  (string-map\
    \ rotate-char s))\n", "  (string-append (substring s 2) (substring s 0 2)))\n",
  "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n\
    \     (map (lambda (c)\n            (list-ref alphabet\n                     \
    \ (+ (list-index alphabet c)\n                         (* 2 2))))\n          (string->list\
    \ s)))))\n", "  (define (helper s i)\n    (cond\n      [(= i (string-length s))\
    \ \"\"]\n      [else (string-append (string (modulo (+ (string-ref s i) (- ?a\
    \ 2)) 26) (+ ?a 2)) (helper s (+ i 1)))]))\n  (helper s 0))\n", "  (define (rotate\
    \ n)\n    (if (zero? n)\n        s\n        (rotate (- n 1))\n        (string-append\
    \ (substring s (- n 1)) (substring s 0 (- n 1)))))\n  (rotate 2))\n", "  (define\
    \ (helper s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-down",
  "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n\
    \     (map\n      (lambda (c)\n        (list-ref alphabet (+ (list-index c alphabet)\
    \ (* 2 2))))\n      (string->list s)))))\n", "  (define (rotate-char c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (map rotate-char (string->list s)))\n", " \
    \ (let ([s (string->list s)])\n    (map (lambda (c)\n           (let ([c (char-downcase\
    \ c)])\n             (if (char=? c #\\z)\n                 #\\b\n            \
    \     (if (char=? c #\\y)\n                     #\\a\n                     (char+\
    \ c 2)))))\n         s)))\n", "  (define (encrypt-helper s)\n    (if (empty? s)\n\
    \        empty\n        (cons (encrypt-char (first s))\n              (encrypt-helper\
    \ (rest s)))))\n  (list->string (encrypt-helper (string->list s))))\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=?\
    \ c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\\
    e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (if (string-empty? s)\n        \"\"\n        (string-append (string\
    \ (rotate-char (string-ref s 0)))\n                       (rotate-string (substring\
    \ s 1)))))\n  (rotate-string s))\n", "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-join\n     (map\n      (lambda (c)\n        (list-ref alphabet\
    \ (+ (list-index c alphabet) (* 2 2))))\n      (string->list s)))))\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=?\
    \ c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\\
    e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (define (rotate-string-helper s)\n      (cond\n        [(empty? s) empty]\n\
    \        [else (cons (rotate-char (first s)) (rotate-string-helper (rest s)))]))\n\
    \    (rotate-string", "  (map (lambda (x)\n         (if (char-alphabetic? x)\n\
    \             (if (char-ci&gt;=? x #\\m)\n                 (char-&gt;integer (char-downcase\
    \ x))\n                 (char-&gt;integer (char-upcase x)))\n             (char-&gt;integer\
    \ x)))\n       (string-&gt;list s)))\n", "  (define (rotate-char c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (string-map rotate-char s))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else (cons (rotate-char (first s) 2) (encrypt (rest\
    \ s)))]))\n", "  (define (shift-char c)\n    (integer->char (+ c (* 2 2))))\n\
    \  (define (shift-string s)\n    (string-map shift-char s))\n  (shift-string s))\n",
  "  (define (rotate-char c)\n    (let ([c (char-downcase c)])\n      (cond\n    \
    \    [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=?\
    \ c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\\
    g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=?\
    \ c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\\
    l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=?\
    \ c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\\
    q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=?\
    \ c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\\
    v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=?\
    \ c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\\
    a]\n        [(char=? c #\\z) #\\b]\n        [else c])))\n  (string-map rotate-char\
    \ s))\n", "  (define (rotate s)\n    (cond [(string=? s \"a\") \"c\"]\n      \
    \    [(string=? s \"b\") \"d\"]\n          [(string=? s \"c\") \"e\"]\n      \
    \    [(string=? s \"d\") \"f\"]\n          [(string=? s \"e\") \"g\"]\n      \
    \    [(string=? s \"f\") \"h\"]\n          [(string=? s \"g\") \"i\"]\n      \
    \    [(string=? s \"h\") \"j\"]\n          [(string=? s \"i\") \"k\"]\n      \
    \    [(string=? s \"j\") \"l\"]\n          [(string=? s \"k\") \"m\"]\n      \
    \    [(string=? s \"l\") \"n\"]\n          [(string=? s \"m\") \"o\"]\n      \
    \    [(string=? s \"n\") \"p\"]\n          [(string=? s \"o\") \"q\"]\n      \
    \    [(string=? s \"p\") \"r\"]\n          [(string=? s \"q\") \"s\"]\n      \
    \    [(string=? s \"r\") \"t\"]\n          [(string=? s \"s\") \"u\"]\n      \
    \    [(string=? s \"t\") \"v\"]\n          [(string=? s \"u\") \"w\"]\n      \
    \    [(string=? s \"v\") \"x\"]\n          [(string=? s \"w\") \"y\"]\n      \
    \    [(string=? s \"x\") \"z\"]\n          [(string=? s \"y\") \"a\"]\n      \
    \    [(string=? s \"z\") \"b\"]\n          [else \"\"]))\n  (define (rotate2 s)\n\
    \    (cond [(string=? s \"a\") \"c\"]\n          [(string=? s \"b\") \"d\"]\n\
    \          [(string=? s \"c\") \"e\"]\n          [(string=? s \"d\") \"f\"]\n\
    \          [(string=? s \"e\") \"g\"]\n          [(string=? s \"f\") \"h\"]\n\
    \          [(string=? s \"g\") \"i\"]\n          [(string=? s \"h\") \"j\"]\n\
    \          [(string=? s \"i\") \"k\"]\n          [(string=? s \"j\") \"l\"]\n\
    \          [(string=? s \"k\") \"m\"]\n", "  (define (rotate-char c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (define (rotate-string s)\n    (string-map\
    \ rotate-char s))\n  (rotate-string s))\n", "  (define (helper s)\n    (if (empty?\
    \ s)\n        empty\n        (cons (char-downcase (car s)) (helper (cdr s)))))\n\
    \  (define (rotate s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase\
    \ (car s)) (rotate (cdr s)))))\n  (define (rotate2 s)\n    (if (empty? s)\n  \
    \      empty\n        (cons (char-downcase (car s)) (rotate2 (cdr s)))))\n  (define\
    \ (rotate3 s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase\
    \ (car s)) (rotate3 (cdr s)))))\n  (define (rotate4 s)\n    (if (empty? s)\n \
    \       empty\n        (cons (char-downcase (car s)) (rotate4 (cdr s)))))\n  (define\
    \ (rotate5 s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase\
    \ (car s)) (rotate5 (cdr s)))))\n  (define (rotate6 s)\n    (if (empty? s)\n \
    \       empty\n        (cons (char-downcase (car s)) (rotate6 (cdr s)))))\n  (define\
    \ (rotate7 s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase\
    \ (car s)) (rotate7 (cdr s)))))\n  (define (rotate8 s)\n    (if (empty? s)\n \
    \       empty\n        (cons (char-downcase (car s)) (rotate8 (cdr s)))))\n  (define\
    \ (rotate9 s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase\
    \ (car s)) (rotate9 (cdr s)))))\n  (define (rotate10 s)\n    (if (empty? s)\n\
    \        empty\n        (cons (char-downcase (car s)) (rotate10 (cdr s)))))\n\
    \  (define (rotate11 s)\n    (if (empty? s)\n       ", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (rotate-char (first\
    \ s)) (rotate-string (rest s)))]))\n  (rotate-string s))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (define (rotate-string-helper s)\n      (cond\n        [(empty? s) empty]\n\
    \        [else (cons (rotate-char (first s)) (rotate-string-helper (rest s)))]))\n\
    \    (rotate-string", "  (define (rotate n)\n    (if (= n 0)\n        (list->string\
    \ (reverse s))\n        (rotate (- n 1))\n        )\n    )\n  (rotate 2)\n  )\n",
  "  (define (rotate-char c)\n    (let ([n (char->integer c)])\n      (integer->char\
    \ (+ n (* 2 2)))))\n  (string-map rotate-char s))\n", "  (define (rotate-char\
    \ c)\n    (if (char=? c #\\z)\n        #\\b\n        (if (char=? c #\\y)\n   \
    \         #\\a\n            (integer->char (+ (char->integer c) 2)))))\n  (define\
    \ (rotate-string s)\n    (string-map rotate-char s))\n  (rotate-string s))\n",
  "  (define (rotate-char c)\n    (if (char-alphabetic? c)\n        (let* ([alphabet\
    \ (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\")]\n               [index (string-index\
    \ (string-&gt;list (string-downcase s)) c)]\n               [new-index (+ index\
    \ (* 2 2))])\n          (list-ref alphabet (modulo new-index (length alphabet))))\n\
    \        c))\n  (string-join (map rotate-char (string-&gt;list s))))\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=?\
    \ c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\\
    e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (define (rotate-string-helper s)\n      (cond\n        [(empty? s) empty]\n\
    \        [else (cons (rotate-char (first s)) (rotate-string-helper (rest s)))]))\n\
    \    (rotate-string", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\z)\n          #\\b\n          (if (char=? c #\\y)\n\
    \              #\\a\n              (integer->char (+ (char->integer c) 2)))))\n\
    \    (rotate-char-helper c))\n  (define (encrypt-helper s)\n    (if (empty? s)\n\
    \        empty\n        (cons (rotate-char (first s)) (encrypt-helper (rest s)))))\n\
    \  (list->string (encrypt-helper (string->list s))))\n", "  (let ([alphabet (string->list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n     (map (lambda (c)\n\
    \            (list-ref alphabet\n                      (+ (string-ci-&gt;index\
    \ (string c))\n                         (* 2 2))))\n          (string-&gt;list\
    \ s)))))\n", "  (define (rotate-char c)\n    (integer->char (+ c (* 2 2))))\n\
    \  (define (rotate-string s)\n    (string-map rotate-char s))\n  (rotate-string\
    \ s))\n", "  (define (helper s)\n    (cond\n      [(empty? s) empty]\n      [else\
    \ (cons (char-downcase (char-downcase (car s) 2) 2) (helper (cdr s)))]))\n  (list->string\
    \ (helper (string->list s))))\n", "  (define (rotate n)\n    (if (or (= n 0) (=\
    \ n 1))\n        n\n        (+ (* n 2) (* n 2))))\n  (string-map (lambda (c)\n\
    \                (integer->char (+ c (rotate (char->integer c)))))\n         \
    \     s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n\
    \        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (if (string-empty? s)\n        \"\"\n\
    \        (string-append (string (rotate-char (string-ref s 0)))\n            \
    \           (rotate-string (substring s 1)))))\n  (rotate-string s))\n", "  (define\
    \ (helper s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (char-downcase\
    \ (char-downcase (car s) 2) 2) (helper (cdr s)))]))\n  (list->string (helper (string->list\
    \ s))))\n", "  (define (encrypt-helper s i)\n    (if (= i (string-length s))\n\
    \        \"\"\n        (string-append (string (char-downcase (+ (char-downcase\
    \ (string-ref s i)) 2)))\n                       (encrypt-helper s (+ i 1)))))\n\
    \  (encrypt-helper s 0))\n", "  (define (rotate-char c)\n    (integer->char (+\
    \ c (* 2 2))))\n  (define (rotate-string s)\n    (map rotate-char s))\n  (string->list\
    \ s))\n", "  (define (rotate n)\n    (cond\n      [(< n 97) (+ n 26)]\n      [(>\
    \ n 122) (- n 26)]\n      [else n]))\n  (define (helper s)\n    (if (empty? s)\n\
    \        empty\n        (cons (rotate (+ (car s) 2)) (helper (cdr s)))))\n  (list->string\
    \ (helper (string->list s))))\n", "  (map (lambda (x)\n         (if (char-alphabetic?\
    \ x)\n             (let ([n (char-downcase x)])\n               (if (char&lt;=?\
    \ #\\a n)\n                   (char-&gt;integer (char-&gt;integer n) (+ 2 (* 2)))\n\
    \                   (char-&gt;integer (char-&gt;integer n) (+ 2 (* 2)))))\n  \
    \           x))\n       s))\n</code>\nI'm getting the following error:\n<code>char-&gt;integer:\
    \ expects type &lt;char&gt; as 1st argument, given: #\\a; other arguments were:\
    \ #\\c\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nThe problem is\
    \ that you're trying to add 2 to the ASCII code of the character, but that's not\
    \ the way to do it. The <code>char-&gt;integer</code> procedure is used to convert\
    \ a character to its ASCII code, and the <code>integer-&gt;char</code> procedure\
    \ is used to convert an ASCII code to a character.\nAlso, you're using <code>char-&gt;integer</code>\
    \ twice, and that's not necessary.\nHere's a fixed version:\n<code>(define (encrypt\
    \ s)\n  (map (lambda (x)\n         (if (char-alphabetic? x)\n             (let\
    \ ([n (char-downcase x)])\n               (if (char&lt;=? #\\a n)\n          \
    \         (integer-&gt;char (+ (char-&gt;integer n) (* 2 2)))\n              \
    \     (integer-&gt;char (+ (char-&gt;integer n) (* 2 2)))))\n             x))\n\
    \       s))\n</code>\n", "  (define (shift-char c)\n    (define (shift-char-helper\
    \ c)\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\\
    d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (shift-char-helper\
    \ c))\n  (define (encrypt-helper s)\n    (cond\n      [(empty? s) empty]\n   \
    \   [else (cons (shift-char (first s)) (encrypt-helper (rest s)))]))\n  (encrypt-helper\
    \ s))\n", "  (define (rotate-char c)\n    (let ([c (string-&gt;char c)])\n   \
    \   (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n  \
    \      [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c])))\n  (string-join\
    \ (map rotate-char (string-&gt;list s))))\n</code>\n", "  (define (rotate c)\n\
    \    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\b) #\\d]\n     \
    \ [(char=? c #\\c) #\\e]\n      [(char=? c #\\d) #\\f]\n      [(char=? c #\\e)\
    \ #\\g]\n      [(char=? c #\\f) #\\h]\n      [(char=? c #\\g) #\\i]\n      [(char=?\
    \ c #\\h) #\\j]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\j) #\\l]\n\
    \      [(char=? c #\\k) #\\m]\n      [(char=? c #\\l) #\\n]\n      [(char=? c\
    \ #\\m) #\\o]\n      [(char=? c #\\n) #\\p]\n      [(char=? c #\\o) #\\q]\n  \
    \    [(char=? c #\\p) #\\r]\n      [(char=? c #\\q) #\\s]\n      [(char=? c #\\\
    r) #\\t]\n      [(char=? c #\\s) #\\u]\n      [(char=? c #\\t) #\\v]\n      [(char=?\
    \ c #\\u) #\\w]\n      [(char=? c #\\v) #\\x]\n      [(char=? c #\\w) #\\y]\n\
    \      [(char=? c #\\x) #\\z]\n      [(char=? c #\\y) #\\a]\n      [(char=? c\
    \ #\\z) #\\b]\n      [else c]))\n  (define (rotate-string s)\n    (string-map\
    \ rotate s))\n  (rotate-string s))\n", "  (string-append (string-map (lambda (x)\
    \ (if (char-alphabetic? x) (char-downcase (char-upcase x)) x)) s)))\n", "  (define\
    \ (rotate-char c)\n    (if (char=? c #\\z)\n        #\\b\n        (if (char=?\
    \ c #\\y)\n            #\\a\n            (integer->char (+ (char->integer c) 2)))))\n\
    \  (string-map rotate-char s))\n", "  (define (rotate-char c)\n    (if (char=?\
    \ c #\\z)\n        #\\b\n        (if (char=? c #\\y)\n            #\\a\n     \
    \       (integer->char (+ (char->integer c) 2)))))\n  (string-map rotate-char\
    \ s))\n", "  (define (rotate-letter l)\n    (define (rotate-letter-helper l)\n\
    \      (cond\n        [(char=? l #\\a) #\\c]\n        [(char=? l #\\b) #\\d]\n\
    \        [(char=? l #\\c) #\\e]\n        [(char=? l #\\d) #\\f]\n        [(char=?\
    \ l #\\e) #\\g]\n        [(char=? l #\\f) #\\h]\n        [(char=? l #\\g) #\\\
    i]\n        [(char=? l #\\h) #\\j]\n        [(char=? l #\\i) #\\k]\n        [(char=?\
    \ l #\\j) #\\l]\n        [(char=? l #\\k) #\\m]\n        [(char=? l #\\l) #\\\
    n]\n        [(char=? l #\\m) #\\o]\n        [(char=? l #\\n) #\\p]\n        [(char=?\
    \ l #\\o) #\\q]\n        [(char=? l #\\p) #\\r]\n        [(char=? l #\\q) #\\\
    s]\n        [(char=? l #\\r) #\\t]\n        [(char=? l #\\s) #\\u]\n        [(char=?\
    \ l #\\t) #\\v]\n        [(char=? l #\\u) #\\w]\n        [(char=? l #\\v) #\\\
    x]\n        [(char=? l #\\w) #\\y]\n        [(char=? l #\\x) #\\z]\n        [(char=?\
    \ l #\\y) #\\a]\n        [(char=? l #\\z) #\\b]\n        [else l]))\n    (rotate-letter-helper\
    \ l))\n  (define (rotate-string s)\n    (define (rotate-string-helper s)\n   \
    \   (cond\n        [(empty? s) empty]\n        [else (cons (rotate-letter (first\
    \ s)) (rotate-string-helper (rest s)))]))\n    (rotate-string", "  (define (rotate\
    \ s)\n    (string-append (substring s 2) (substring s 0 2)))\n  (define (encrypt-helper\
    \ s)\n    (if (string=? s \"\")\n        \"\"\n        (string-append (rotate\
    \ s) (encrypt-helper (substring s 1)))))\n  (encrypt-helper s))\n", "  (define\
    \ (helper s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (char-downcase\
    \ (car s)) (helper (cdr s)))]))\n  (define (encrypt-helper s)\n    (cond\n   \
    \   [(empty? s) empty]\n      [(char=? (car s) #\\a) (cons #\\c (encrypt-helper\
    \ (cdr s)))]\n      [(char=? (car s) #\\b) (cons #\\d (encrypt-helper (cdr s)))]\n\
    \      [(char=? (car s) #\\c) (cons #\\e (encrypt-helper (cdr s)))]\n      [(char=?\
    \ (car s) #\\d) (cons #\\f (encrypt-helper (cdr s)))]\n      [(char=? (car s)\
    \ #\\e) (cons #\\g (encrypt-helper (cdr s)))]\n      [(char=? (car s) #\\f) (cons\
    \ #\\h (encrypt-helper (cdr s)))]\n      [(char=? (car s) #\\g) (cons #\\i (encrypt-helper\
    \ (cdr s)))]\n      [(char=? (car s) #\\h) (cons #\\j (encrypt-helper (cdr s)))]\n\
    \      [(char=? (car s) #\\i) (cons #\\k (encrypt-helper (cdr s)))]\n      [(char=?\
    \ (car s) #\\j) (cons #\\l (encrypt-helper (cdr s)))]\n      [(char=? (car s)\
    \ #\\k) (cons #\\m (encrypt-helper (cdr s)))]\n      [(char=? (car s) #\\l) (cons\
    \ #\\n (encrypt-helper (cdr s)))]\n      [(char=? (car s) #\\m) (cons #\\o (encrypt-helper\
    \ (cdr s)))]\n      [(char=? (car s) #\\n) (cons #\\p (encrypt-helper (cdr s)))]\n\
    \      [(char=?", "  (define (rotate c)\n    (if (char=? c #\\z)\n        #\\\
    b\n        (if (char=? c #\\y)\n            #\\a\n            (integer->char (+\
    \ (char->integer c) 2)))))\n  (string-map rotate s))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (string-map rotate-char s))\n  (rotate-string s))\n", "  (define (shift\
    \ c)\n    (if (char=? c #\\z)\n        #\\b\n        (if (char=? c #\\y)\n   \
    \         #\\a\n            (integer->char (+ (char->integer c) 2)))))\n  (string-map\
    \ shift s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n\
    \        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (encrypt-helper s)\n    (cond\n      [(empty? s) empty]\n   \
    \   [else (cons (rotate-char (first s)) (encrypt-helper (rest s)))]))\n  (list->string\
    \ (encrypt-helper (string->list s))))\n", "  (define (rotate n)\n    (cond\n \
    \     [(= n 0) (string->list s)]\n      [else (cons (string-ref s (- (string-length\
    \ s) n)) (rotate (- n 1)))]))\n  (list->string (rotate (* 2 2))))\n", "  (let\
    \ ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n\
    \     (map\n      (lambda (c)\n        (list-ref alphabet (+ (list-index c alphabet)\
    \ (* 2 2))))\n      (string->list s)))))\n", "  (let ([alphabet (string->list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join (map (lambda (x)\n     \
    \                   (list-ref alphabet (+ x (* 2 2))))\n                     \
    \ (map char->integer (string->list s)))\n                 \"\")))\n", "  (define\
    \ (rotate s)\n    (string-append (substring s 2) (substring s 0 2)))\n  (define\
    \ (encrypt-helper s)\n    (if (string=? s \"\")\n        \"\"\n        (string-append\
    \ (rotate s) (encrypt-helper (substring s 1)))))\n  (encrypt-helper s))\n", " \
    \ (define (rotate s)\n    (string-append (substring s 2) (substring s 0 2)))\n\
    \  (define (encrypt-helper s)\n    (if (string=? s \"\")\n        \"\"\n     \
    \   (string-append (rotate s) (encrypt-helper (substring s 1)))))\n  (encrypt-helper\
    \ s))\n", "  (define (helper s)\n    (if (empty? s)\n        empty\n        (cons\
    \ (char-downcase (car s)) (helper (cdr s)))))\n  (define (helper2 s)\n    (if\
    \ (empty? s)\n        empty\n        (cons (char-upcase (car s)) (helper2 (cdr\
    \ s)))))\n  (define (helper3 s)\n    (if (empty? s)\n        empty\n        (cons\
    \ (char-downcase (car s)) (helper3 (cdr s)))))\n  (define (helper4 s)\n    (if\
    \ (empty? s)\n        empty\n        (cons (char-upcase (car s)) (helper4 (cdr\
    \ s)))))\n  (define (helper5 s)\n    (if (empty? s)\n        empty\n        (cons\
    \ (char-downcase (car s)) (helper5 (cdr s)))))\n  (define (helper6 s)\n    (if\
    \ (empty? s)\n        empty\n        (cons (char-upcase (car s)) (helper6 (cdr\
    \ s)))))\n  (define (helper7 s)\n    (if (empty? s)\n        empty\n        (cons\
    \ (char-downcase (car s)) (helper7 (cdr s)))))\n  (define (helper8 s)\n    (if\
    \ (empty? s)\n        empty\n        (cons (char-upcase (car s)) (helper8 (cdr\
    \ s)))))\n  (define (helper9 s)\n    (if (empty? s)\n        empty\n        (cons\
    \ (char-downcase (car s)) (helper9 (cdr s)))))\n  (define (helper10 s)\n    (if\
    \ (empty? s)\n        empty\n        (cons (char-upcase (car s)) (helper10 (cdr\
    \ s)))))\n  (define (helper11 s)\n    (if (empty? s)\n        empty\n        (cons\
    \ (char-downcase (car s)) (helper11 (cdr s)))))\n  (define (helper12 s)\n    (if\
    \ (empty? s)", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (if (and (char&lt;=? #\\a c) (char&lt;=? c #\\z))\n          (char-&gt;integer\
    \ c)\n          (rotate-char-helper (char-downcase c))))\n    (define (rotate-char-helper2\
    \ c)\n      (if (and (char&lt;=? #\\a c) (char&lt;=? c #\\z))\n          (integer-&gt;char\
    \ c)\n          (rotate-char-helper2 (char-upcase c))))\n    (rotate-char-helper2\
    \ (+ (rotate-char-helper c) 2)))\n  (string-map rotate-char s))\n</code>\nI am\
    \ getting the following error:\n<code>string-map: expects argument of type &lt;procedure&gt;;\
    \ given: #&lt;procedure:rotate-char&gt;\n</code>\nI am not sure what I am doing\
    \ wrong.\n\n\nA:\n\nYou're using <code>string-map</code> incorrectly. The first\
    \ argument is a procedure that takes a character and returns a character, not\
    \ a procedure that takes a string and returns a string.\nYou can fix this by changing\
    \ <code>rotate-char</code> to take a character and return a character.\n<code>(define\
    \ (rotate-char c)\n  (define (rotate-char-helper c)\n    (if (and (char&lt;=?\
    \ #\\a c) (char&lt;=? c #\\z))\n        (char-&gt;integer c)\n        (rotate-char-helper\
    \ (char-downcase c))))\n  (define (rotate-char-helper2 c)\n    (if (and (char&lt;=?\
    \ #\\a c) (char&lt;=? c #\\z))\n        (integer-&gt;char c)\n        (rotate-char-helper2\
    \ (char-upcase c))))\n  (rotate-char-helper2 (+ (rotate-char-helper c) 2)))",
  "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\
    \ (map (lambda (c) (list-ref alphabet (+ (char-&gt;integer c) (* 2 2)))) (string-&gt;list\
    \ s)))))\n</code>\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\\
    d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (cond\n      [(empty? s) empty]\n    \
    \  [else (cons (rotate-char (first s)) (rotate-string (rest s)))]))\n  (rotate-string\
    \ s))\n", "  (define (rotate-char c)\n    (integer->char (+ (char->integer c)\
    \ (* 2 2))))\n  (map rotate-char (string->list s)))\n", "  (define (rotate-char\
    \ c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n  (map rotate-char (string->list\
    \ s)))\n", "  (define (rotate-char c)\n    (integer->char (+ (char->integer c)\
    \ (* 2 2))))\n  (map rotate-char (string->list s)))\n", "  (define (encrypt-helper\
    \ s i)\n    (cond\n      [(= i (string-length s)) \"\"]\n      [else (string-append\
    \ (string (char-downcase (+ (char-downcase (string-ref s i)) 2)))\n          \
    \                 (encrypt-helper s (+ i 1)))]))\n  (encrypt-helper s 0))\n",
  "  (define (encrypt-helper s)\n    (if (empty? s)\n        empty\n        (cons\
    \ (encrypt-char (first s)) (encrypt-helper (rest s)))))\n  (list->string (encrypt-helper\
    \ (string->list s))))\n", "  (define (rotate s)\n    (string-append (substring\
    \ s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=? s\
    \ \"\")\n        \"\"\n        (string-append (string (rotate s))\n          \
    \             (encrypt-helper (substring s 1)))))\n  (encrypt-helper s))\n", " \
    \ (define (rotate-char c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n\
    \  (string-map rotate-char s))\n", "  (let ([s (string->list s)])\n    (map (lambda\
    \ (c)\n           (let ([c (char-downcase c)])\n             (if (char=? c #\\\
    z)\n                 #\\b\n                 (if (char=? c #\\y)\n            \
    \         #\\a\n                     (char-upcase (+ c 2))))))\n         s)))\n",
  "  (define (rotate-char c)\n    (let ([c (char-downcase c)])\n      (if (char-alphabetic?\
    \ c)\n          (let ([rotated (char-downcase (char+ c (* 2 2)))]\n          \
    \      [a (char-downcase (char-code #\\a))]\n                [z (char-downcase\
    \ (char-code #\\z))])\n            (if (char&gt;= rotated z)\n               \
    \ (char-&gt;integer (+ a (- rotated z)))\n                rotated))\n        \
    \  c)))\n  (string-&gt;list s))\n</code>\nI'm getting the error:\n<code>string-&gt;list:\
    \ expects argument of type &lt;string&gt;; given #&lt;procedure:rotate-char&gt;\n\
    </code>\nI'm not sure what I'm doing wrong. I'm trying to convert the string to\
    \ a list so that I can map the rotate-char function to each character in the string.\n\
    \n\nA:\n\nYou're missing a <code>map</code> call, and you're not returning the\
    \ result of <code>string-&gt;list</code>. Try this:\n<code>(define (encrypt s)\n\
    \  (define (rotate-char c)\n    (let ([c (char-downcase c)])\n      (if (char-alphabetic?\
    \ c)\n          (let ([rotated (char-downcase (char+ c (* 2 2)))]\n          \
    \      [a (char-downcase (char-code #\\a))]\n                [z (char-downcase\
    \ (char-code #\\z))])\n            (if (char&gt;= rotated z)\n               \
    \ (char-&gt;integer (+ a (- rotated z)))\n                rotated))\n        \
    \  c)))\n  (list-&gt;string (map rotate-char (string-&gt;list s))))\n</code>\n",
  "  (define (rotate-char c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n\
    \  (define (rotate-string s)\n    (if (empty? s)\n        \"\"\n        (string-append\
    \ (rotate-char (first s))\n                       (rotate-string (rest s)))))\n\
    \  (rotate-string s))\n", "  (string-map (lambda (c) (char (+ c (* 2 2)))) s))\n",
  "  (let ((alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")))\n    (string-join\n\
    \     (map (lambda (c)\n            (list-ref alphabet (+ (string-ci-&gt;index\
    \ c) (* 2 2))))\n          (string-&gt;list s)))))\n</code>\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (or (char=? c #\\a) (char=?\
    \ c #\\b))\n          #\\c\n          (rotate-char-helper (char-downcase (char-downcase\
    \ c)))))\n    (if (char-alphabetic? c)\n        (rotate-char-helper c)\n     \
    \   c))\n  (define (rotate-string s)\n    (if (empty? s)\n        \"\"\n     \
    \   (string-append (string (rotate-char (string-ref s 0)))\n                 \
    \      (rotate-string (substring s 1)))))\n  (rotate-string s))\n", "  (define\
    \ (rotate-char c)\n    (if (char=? c #\\z)\n        #\\b\n        (if (char=?\
    \ c #\\y)\n            #\\a\n            (integer->char (+ (char->integer c) 2)))))\n\
    \  (define (rotate-string s)\n    (string-map rotate-char s))\n  (rotate-string\
    \ s))\n", "  (define (rotate-char c)\n    (if (char-alphabetic? c)\n        (let\
    \ ((n (char->integer c)))\n          (integer->char (+ n (* 2 2))))\n      c))\n\
    \  (string-map rotate-char s))\n", "  (define (encrypt-helper s i)\n    (if (=\
    \ i (string-length s))\n        \"\"\n        (string-append (string (char-downcase\
    \ (+ (char-downcase (string-ref s i)) 2)))\n                       (encrypt-helper\
    \ s (+ i 1)))))\n  (encrypt-helper s 0))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (cond\n        [(char=? c #\\a) #\\c]\n      \
    \  [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c\
    \ #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n\
    \        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=?\
    \ c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\\
    m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=?\
    \ c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\\
    r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=?\
    \ c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\\
    w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=?\
    \ c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\\
    b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (rotate-char (first\
    \ s)) (rotate-string (rest s)))]))\n  (rotate-string s))\n", "  (define (rotate\
    \ s i)\n    (string-append (substring s i) (substring s 0 i)))\n  (rotate s (*\
    \ 2 2)))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-helper s)\n    (cond\n      [(empty? s) empty]\n\
    \      [else (cons (rotate (first s)) (encrypt-helper (rest s)))]))\n  (list->string\
    \ (encrypt-helper (string->list s))))\n", "  (define (rotate-char c)\n    (let\
    \ ([c (string-&gt;char c)])\n      (if (char&lt;=? #\\a c #\\z)\n          (char-&gt;string\
    \ (+ c (* 2 2)))\n          (char-&gt;string c))))\n  (string-join (map rotate-char\
    \ (string-&gt;list s))))\n", "  (define (rotate-char c)\n    (integer->char (+\
    \ (char->integer c) (* 2 2))))\n  (define (rotate-string s)\n    (if (empty? s)\n\
    \        \"\"\n        (string-append (string (rotate-char (string-ref s 0)))\n\
    \                       (rotate-string (substring s 1)))))\n  (rotate-string s))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n  \
    \      [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=?\
    \ c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\\
    g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=?\
    \ c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\\
    l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=?\
    \ c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\\
    q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=?\
    \ c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\\
    v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=?\
    \ c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\\
    a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (if (string-empty? s)\n        \"\"\n\
    \        (string-append (string (rotate-char (string-ref s 0)))\n            \
    \           (rotate-string (substring s 1)))))\n  (rotate-string s))\n", "  (let\
    \ ([s (string->list s)])\n    (map (lambda (c)\n           (let ([c (char-downcase\
    \ c)])\n             (if (char-alphabetic? c)\n                 (let ([c (+ c\
    \ (* 2 2))])\n                   (if (> c #\\z)\n                       (char-downcase\
    \ (+ c (- #\\a 1)))\n                       (char-downcase c)))\n            \
    \     c)))\n         s)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (define (rotate-char c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (string-map rotate-char s))\n", "  (define\
    \ (shift c)\n    (integer->char (+ c (* 2 2))))\n  (define (encrypt-helper s)\n\
    \    (if (empty? s)\n        empty\n        (cons (shift (char->integer (first\
    \ s)))\n              (encrypt-helper (rest s)))))\n  (list->string (encrypt-helper\
    \ (string->list s))))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\z)\n          #\\b\n          (if (char=? c #\\y)\n\
    \              #\\a\n              (if (char=? c #\\Z)\n                  #\\\
    B\n                  (if (char=? c #\\Y)\n                      #\\A\n       \
    \               (integer->char (+ (char->integer c) 2)))))))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (if (empty? s)\n        \"\"\n       \
    \ (string-append (string (rotate-char (string-ref s 0)))\n                   \
    \    (rotate-string (substring s 1)))))\n  (rotate-string s))\n", "  (define (rotate-char\
    \ c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n  (map rotate-char (string->list\
    \ s)))\n", "  (map (lambda (c)\n         (integer->char (+ c (* 2 2))))\n    \
    \   (string->list s)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\z)\n          #\\b\n          (if (char=? c #\\y)\n\
    \              #\\a\n              (if (char=? c #\\x)\n                  #\\\
    @\n                  (integer->char (+ (char->integer c) 2))))))\n    (if (char-alphabetic?\
    \ c)\n        (rotate-char-helper c)\n        c))\n  (map rotate-char s))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (string-append\n      (list (rotate-char\
    \ (string-ref s 0) 2))\n      (encrypt (substring s 1)))]))\n", "  (define (helper\
    \ s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase (char-downcase\
    \ (char-downcase (char-downcase (char-downcase (char-downcase (char-down", " \
    \ (define (encrypt-helper s)\n    (cond\n      [(empty? s) empty]\n      [else\
    \ (cons (encrypt-char (first s))\n                  (encrypt-helper (rest s)))]))\n\
    \  (list->string (encrypt-helper (string->list s))))\n", "  (define (rotate-char\
    \ c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n  (map rotate-char (string->list\
    \ s)))\n", "  (define (rotate-char c)\n    (let ([c (char-downcase c)])\n    \
    \  (if (char-alphabetic? c)\n          (let ([c (+ c (* 2 2))])\n            (if\
    \ (&gt; c #\\z)\n                (char-&gt;integer (char-downcase c) -26)\n  \
    \              (char-&gt;integer (char-downcase c))))\n          c)))\n  (string-&gt;list\
    \ s)\n  (map rotate-char s))\n", "  (define (rotate n s)\n    (if (empty? s)\n\
    \        empty\n        (cons (list-ref s n)\n              (rotate (modulo (+\
    \ n 2) (length s)) s))))\n  (string-join (rotate 2 (string->list s))))\n", " \
    \ (let ([s (string->list s)])\n    (map (lambda (c)\n           (let ([c (char-downcase\
    \ c)])\n             (if (char-alphabetic? c)\n                 (let ([c (+ c\
    \ (* 2 2))])\n                   (if (> c #\\z)\n                       (char-downcase\
    \ (- c 26))\n                     (char-downcase c)))\n               c)))\n \
    \        s)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\\
    d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (cond\n      [(empty? s) empty]\n    \
    \  [else (cons (rotate-char (first s)) (rotate-string (rest s)))]))\n  (rotate-string\
    \ s))\n", "  (define (rotate-string s n)\n    (string-append (substring s n) (substring\
    \ s 0 n)))\n  (define (rotate-char c n)\n    (integer->char (+ (char->integer\
    \ c) n)))\n  (define (rotate-char-list l n)\n    (map (lambda (c) (rotate-char\
    \ c n)) l))\n  (define (rotate-string-list l n)\n    (map (lambda (s) (rotate-string\
    \ s n)) l))\n  (define (rotate-string-list-list l n)\n    (map (lambda (s) (rotate-string-list\
    \ s n)) l))\n  (define (rotate-char-list-list l n)\n    (map (lambda (s) (rotate-char-list\
    \ s n)) l))\n  (define (rotate-char-list-list-list l n)\n    (map (lambda (s)\
    \ (rotate-char-list-list s n)) l))\n  (define (rotate-string-list-list-list l\
    \ n)\n    (map (lambda (s) (rotate-string-list-list s n)) l))\n  (define (rotate-char-list-list-list-list\
    \ l n)\n    (map (lambda (s) (rotate-char-list-list-list s n)) l))\n  (define\
    \ (rotate-string-list-list-list-list l n)\n    (map (lambda (s) (rotate-string-list-list-list\
    \ s n)) l))\n  (define (rotate-char-list-list-list-list-list l n)\n    (map (lambda\
    \ (s) (rotate-char-list-list-list-list s n)) l))\n  (define (rotate-string-list-list-list-list-list\
    \ l n)\n    (map (lambda (s) (rotate-string-list-list-list-list s n)) l))\n  (define\
    \ (rotate-char-list-list-list-list-list-list l n)\n    (map (lambda (s) (rotate-char-list-list-list",
  "  (let ([s (string->list s)])\n    (map (lambda (x)\n           (let ([x (char->integer\
    \ x)])\n             (integer->char (+ x (* 2 2)))))\n         s)))\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=?\
    \ c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\\
    e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (define (rotate-string-helper s)\n      (cond\n        [(empty? s) empty]\n\
    \        [else (cons (rotate-char (first s)) (rotate-string-helper (rest s)))]))\n\
    \    (rotate-string", "  (define (rotate-char c)\n    (integer->char (+ (char->integer\
    \ c) (* 2 2))))\n  (map rotate-char (string->list s)))\n", "  (define (rotate-char\
    \ c)\n    (let ([c (string-&gt;char c)])\n      (char-&gt;string (+ c (* 2 2)))))\n\
    \  (string-join (map rotate-char (string-&gt;list s)) \"\"))\n</code>\n", "  (define\
    \ (shift c)\n    (integer->char (+ c (* 2 2))))\n  (string-map shift s))\n", " \
    \ (string-map (lambda (c)\n                (let ((n (char->integer c)))\n    \
    \              (integer->char (+ n (* 2 2)))))\n              s))\n", "  (define\
    \ (encrypt-helper s i)\n    (cond\n      [(= i (string-length s)) \"\"]\n    \
    \  [else (string-append (string (char-downcase (+ (char-downcase (string-ref s\
    \ i)) 2)))\n                           (encrypt-helper s (+ i 1)))]))\n  (encrypt-helper\
    \ s 0))\n", "  (define (shift c)\n    (integer->char (+ (char->integer c) (* 2\
    \ 2))))\n  (map shift s))\n", "  (define (helper s)\n    (cond\n      [(empty?\
    \ s) empty]\n      [else (cons (char-downcase (char-downcase (car s) 2) 2) (helper\
    \ (cdr s)))]))\n  (list->string (helper (string->list s))))\n", "  (let ([alphabet\
    \ (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n     (map\n\
    \      (lambda (c)\n        (list-ref alphabet (+ (- (string-ci-&gt;char c) (string-ci-&gt;char\
    \ \"a\")) 2)))\n      (string-&gt;list s)))))\n</code>\n", "  (define (rotate\
    \ s)\n    (string-append (substring s 2) (substring s 0 2)))\n  (define (encrypt-helper\
    \ s)\n    (if (empty? s)\n        \"\"\n        (string-append (rotate (string-ref\
    \ s 0))\n                       (encrypt-helper (substring s 1)))))\n  (encrypt-helper\
    \ s))\n", "  (define (rotate c)\n    (let ((c (string-downcase c)))\n      (cond\n\
    \        ((char=? c #\\a) #\\c)\n        ((char=? c #\\b) #\\d)\n        ((char=?\
    \ c #\\c) #\\e)\n        ((char=? c #\\d) #\\f)\n        ((char=? c #\\e) #\\\
    g)\n        ((char=? c #\\f) #\\h)\n        ((char=? c #\\g) #\\i)\n        ((char=?\
    \ c #\\h) #\\j)\n        ((char=? c #\\i) #\\k)\n        ((char=? c #\\j) #\\\
    l)\n        ((char=? c #\\k) #\\m)\n        ((char=? c #\\l) #\\n)\n        ((char=?\
    \ c #\\m) #\\o)\n        ((char=? c #\\n) #\\p)\n        ((char=? c #\\o) #\\\
    q)\n        ((char=? c #\\p) #\\r)\n        ((char=? c #\\q) #\\s)\n        ((char=?\
    \ c #\\r) #\\t)\n        ((char=? c #\\s) #\\u)\n        ((char=? c #\\t) #\\\
    v)\n        ((char=? c #\\u) #\\w)\n        ((char=? c #\\v) #\\x)\n        ((char=?\
    \ c #\\w) #\\y)\n        ((char=? c #\\x) #\\z)\n        ((char=? c #\\y) #\\\
    a)\n        ((char=? c #\\z) #\\b)\n        (else c))))\n  (string-map rotate\
    \ s))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=? s \"\")\n        \"\
    \"\n        (string-append (rotate s) (encrypt-helper (substring s 1)))))\n  (encrypt-helper\
    \ s))\n", "  (define (rotate-char c)\n    (let ([c (char-downcase c)])\n     \
    \ (if (char-alphabetic? c)\n          (let ([n (char-&gt;integer c)])\n      \
    \      (integer-&gt;char (+ n (* 2 2))))\n          c)))\n  (string-&gt;list s))\n\
    </code>\nI'm getting an error on the last line of the code. I'm not sure what\
    \ I'm doing wrong.\n\n\nA:\n\nYou're missing a call to <code>list-&gt;string</code>\
    \ to convert the list of characters back to a string. Also, you need to call <code>rotate-char</code>\
    \ on each character in the string, so you need to use <code>map</code> to apply\
    \ the function to each element of the list.\n<code>(define (encrypt s)\n  (define\
    \ (rotate-char c)\n    (let ([c (char-downcase c)])\n      (if (char-alphabetic?\
    \ c)\n          (let ([n (char-&gt;integer c)])\n            (integer-&gt;char\
    \ (+ n (* 2 2))))\n          c)))\n  (list-&gt;string (map rotate-char (string-&gt;list\
    \ s))))\n</code>\n", "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-join (map (lambda (c)\n                        (list-ref alphabet\
    \ (+ (list-index c alphabet) (* 2 2))))\n                      (string->list s)))))\n",
  "  (define (rotate s)\n    (string-append (substring s 2) (substring s 0 2)))\n\
    \  (define (rotate-n s n)\n    (if (= n 0)\n        s\n        (rotate-n (rotate\
    \ s) (- n 1))))\n  (define (rotate-by-two s)\n    (rotate-n s 2))\n  (define (encrypt-helper\
    \ s)\n    (if (empty? s)\n        \"\"\n        (string-append (rotate-by-two\
    \ (string (car s)))\n                       (encrypt-helper (cdr s)))))\n  (encrypt-helper\
    \ (string->list s)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (or (char=? c #\\a) (char=? c #\\b))\n          (char-downcase\
    \ (char-upcase c))\n          (char-downcase (char-upcase (char-downcase (char-upcase\
    \ c))))))\n    (define (rotate-char-helper2 c)\n      (if (or (char=? c #\\a)\
    \ (char=? c #\\b))\n          (char-downcase (char-upcase c))\n          (char-downcase\
    \ (char-upcase (char-downcase (char-upcase (char-downcase (char-upcase c))))))))\n\
    \    (if (or (char=? c #\\a) (char=? c #\\b))\n        (rotate-char-helper c)\n\
    \        (rotate-char-helper2 c)))\n  (define (rotate-string s)\n    (if (empty?\
    \ s)\n        \"\"\n        (string-append (rotate-char (string-ref s 0)) (rotate-string\
    \ (substring s 1)))))\n  (rotate-string s))\n", "  (define (rotate c)\n    (cond\
    \ [(char=? c #\\a) #\\c]\n          [(char=? c #\\b) #\\d]\n          [(char=?\
    \ c #\\c) #\\e]\n          [(char=? c #\\d) #\\f]\n          [(char=? c #\\e)\
    \ #\\g]\n          [(char=? c #\\f) #\\h]\n          [(char=? c #\\g) #\\i]\n\
    \          [(char=? c #\\h) #\\j]\n          [(char=? c #\\i) #\\k]\n        \
    \  [(char=? c #\\j) #\\l]\n          [(char=? c #\\k) #\\m]\n          [(char=?\
    \ c #\\l) #\\n]\n          [(char=? c #\\m) #\\o]\n          [(char=? c #\\n)\
    \ #\\p]\n          [(char=? c #\\o) #\\q]\n          [(char=? c #\\p) #\\r]\n\
    \          [(char=? c #\\q) #\\s]\n          [(char=? c #\\r) #\\t]\n        \
    \  [(char=? c #\\s) #\\u]\n          [(char=? c #\\t) #\\v]\n          [(char=?\
    \ c #\\u) #\\w]\n          [(char=? c #\\v) #\\x]\n          [(char=? c #\\w)\
    \ #\\y]\n          [(char=? c #\\x) #\\z]\n          [(char=? c #\\y) #\\a]\n\
    \          [(char=? c #\\z) #\\b]\n          [else c]))\n  (string-map rotate\
    \ s))\n", "  (map (lambda (c)\n         (let ([n (char->integer c)])\n       \
    \    (integer->char (+ n (* 2 2)))))\n       s))\n", "  (define (helper s)\n \
    \   (if (empty? s)\n        empty\n        (cons (char-downcase (car s)) (helper\
    \ (cdr s)))))\n  (define (helper2 s)\n    (if (empty? s)\n        empty\n    \
    \    (cons (char-upcase (car s)) (helper2 (cdr s)))))\n  (define (helper3 s)\n\
    \    (if (empty? s)\n        empty\n        (cons (char-upcase (car s)) (helper3\
    \ (cdr s)))))\n  (define (helper4 s)\n    (if (empty? s)\n        empty\n    \
    \    (cons (char-downcase (car s)) (helper4 (cdr s)))))\n  (define (helper5 s)\n\
    \    (if (empty? s)\n        empty\n        (cons (char-downcase (car s)) (helper5\
    \ (cdr s)))))\n  (define (helper6 s)\n    (if (empty? s)\n        empty\n    \
    \    (cons (char-upcase (car s)) (helper6 (cdr s)))))\n  (define (helper7 s)\n\
    \    (if (empty? s)\n        empty\n        (cons (char-upcase (car s)) (helper7\
    \ (cdr s)))))\n  (define (helper8 s)\n    (if (empty? s)\n        empty\n    \
    \    (cons (char-downcase (car s)) (helper8 (cdr s)))))\n  (define (helper9 s)\n\
    \    (if (empty? s)\n        empty\n        (cons (char-downcase (car s)) (helper9\
    \ (cdr s)))))\n  (define (helper10 s)\n    (if (empty? s)\n        empty\n   \
    \     (cons (char-upcase (car s)) (helper10 (cdr s)))))\n  (define (helper11 s)\n\
    \    (if (empty? s)\n        empty\n        (cons (char-upcase (car s)) (helper11\
    \ (cdr s)))))\n  (define (helper12 s)\n    (if (empty? s)", "  (let ([alphabet\
    \ (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n     (map\n\
    \      (lambda (c)\n        (list-ref alphabet (+ (list-index c alphabet) (* 2\
    \ 2))))\n      (string->list s)))))\n", "  (define (rotate s)\n    (string-append\
    \ (substring s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=?\
    \ s \"\")\n        \"\"\n        (string-append (rotate s) (encrypt-helper (substring\
    \ s 1)))))\n  (encrypt-helper s))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (if (and (&lt;= #\\a c) (&lt;= c #\\z))\n    \
    \      (if (&lt; c #\\y)\n              (+ c 2)\n              (- c 24))\n   \
    \       c))\n    (rotate-char-helper c))\n  (define (rotate-string s)\n    (if\
    \ (string-empty? s)\n        \"\"\n        (string-append (string (rotate-char\
    \ (string-ref s 0)))\n                       (rotate-string (substring s 1)))))\n\
    \  (rotate-string s))\n</code>\nI am not sure if this is the most efficient way\
    \ to do it. I am also not sure if I should be using <code>string-ref</code> and\
    \ <code>string-append</code> or if there is a better way to do it.\n\n\nA:\n\n\
    I think this is a good solution.  I would suggest a few minor changes:\n\nUse\
    \ <code>string-&gt;list</code> and <code>list-&gt;string</code> to convert between\
    \ strings and lists of characters.  This is more idiomatic than using <code>string-ref</code>\
    \ and <code>string-append</code>.\nUse <code>string-map</code> to apply a function\
    \ to each character in a string.  This is more idiomatic than using <code>string-ref</code>\
    \ and <code>string-append</code>.\nUse <code>string-&gt;number</code> and <code>number-&gt;string</code>\
    \ to convert between strings and numbers.  This is more idiomatic than using <code>string-ref</code>\
    \ and <code>string-append</code>.\nUse <code>string-&gt;symbol</code> and <code>symbol-&gt;string</code>\
    \ to convert between strings and symbols.  This is more idiomatic than using <code>string-ref</code>\
    \ and <code>string-append</code>.\n\nHere is a revised version of your code:\n\
    <code>#lang racket\n", "  (string-append (string-append (substring s 0 1) (substring\
    \ s 1 2))\n                 (substring s 3)))\n", "  (let ([alphabet (string->list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join (map (lambda (c)\n     \
    \                   (list-ref alphabet (+ (string-index \"abcdefghijklmnopqrstuvwxyz\"\
    \ c) 2)))\n                      (string->list s)))))\n", "  (define (rotate n)\n\
    \    (if (zero? n)\n        s\n        (rotate (- n 1))\n        (string-append\
    \ (substring s -1) (substring s 0 -1))))\n  (rotate 2))\n", "  (define (encrypt-helper\
    \ s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (encrypt-char (first\
    \ s)) (encrypt-helper (rest s)))]))\n  (list->string (encrypt-helper (string->list\
    \ s))))\n", "  (string-append (string-append (substring s 0 1) (substring s 1\
    \ 2))\n                 (string-append (substring s 2 3) (substring s 3 4))))",
  "  (define (rotate-char c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n\
    \  (define (rotate-string s)\n    (if (empty? s)\n        \"\"\n        (string-append\
    \ (string (rotate-char (string-ref s 0)))\n                       (rotate-string\
    \ (substring s 1)))))\n  (rotate-string s))\n", "  (define (rotate-char c)\n \
    \   (integer->char (+ (char->integer c) (* 2 2))))\n  (map rotate-char (string->list\
    \ s)))\n", "  (define (rotate c)\n    (if (char=? c #\\a)\n        #\\c\n    \
    \    (if (char=? c #\\b)\n            #\\d\n            (if (char=? c #\\c)\n\
    \                #\\e\n                (if (char=? c #\\d)\n                 \
    \   #\\f\n                    (if (char=? c #\\e)\n                        #\\\
    g\n                        (if (char=? c #\\f)\n                            #\\\
    h\n                            (if (char=? c #\\g)\n                         \
    \       #\\i\n                                (if (char=? c #\\h)\n          \
    \                          #\\j\n                                    (if (char=?\
    \ c #\\i)\n                                        #\\k\n                    \
    \                    (if (char=? c #\\j)\n                                   \
    \         #\\l\n                                            (if (char=? c #\\\
    k)\n                                                #\\m\n                   \
    \                             (if (char=? c #\\l)\n                          \
    \                          #\\n\n                                            \
    \        (if (char=? c #\\m)\n                                               \
    \         #\\o\n                                                        (if (char=?\
    \ c #\\n)\n                                                            #\\p\n\
    \                                                            (if (char=? c #\\\
    o)\n                                                                #\\q\n   \
    \                                                             (if (char=? c #\\\
    p)\n                                                                    #\\r\n\
    \                                                                    (if (char=?\
    \ c #\\q)\n                                                                  \
    \      #\\s\n                                                                \
    \        (if (char=? c #\\r)\n                                               \
    \                             #\\t\n                                         \
    \                                   (if (char=? c #\\s)\n                    \
    \                                                            #\\u\n          \
    \                                                                      (if (char=?\
    \ c #\\t)\n                                                                  \
    \                  #\\v\n                                                    \
    \                                (if (char=? c #\\u)\n                       \
    \                                                                 #\\w\n     \
    \                                                                            \
    \       (if (char=? c #\\v)\n                                                \
    \                                            #\\x\n                          \
    \                                                                  (if (char=?\
    \ c #\\w)\n                                                ", "  (define (helper\
    \ s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase (car s))\
    \ (helper (cdr s)))))\n  (define (helper2 s)\n    (if (empty? s)\n        empty\n\
    \        (cons (char-upcase (car s)) (helper2 (cdr s)))))\n  (define (helper3\
    \ s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase (car s))\
    \ (helper3 (cdr s)))))\n  (define (helper4 s)\n    (if (empty? s)\n        empty\n\
    \        (cons (char-upcase (car s)) (helper4 (cdr s)))))\n  (define (helper5\
    \ s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase (car s))\
    \ (helper5 (cdr s)))))\n  (define (helper6 s)\n    (if (empty? s)\n        empty\n\
    \        (cons (char-upcase (car s)) (helper6 (cdr s)))))\n  (define (helper7\
    \ s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase (car s))\
    \ (helper7 (cdr s)))))\n  (define (helper8 s)\n    (if (empty? s)\n        empty\n\
    \        (cons (char-upcase (car s)) (helper8 (cdr s)))))\n  (define (helper9\
    \ s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase (car s))\
    \ (helper9 (cdr s)))))\n  (define (helper10 s)\n    (if (empty? s)\n        empty\n\
    \        (cons (char-upcase (car s)) (helper10 (cdr s)))))\n  (define (helper11\
    \ s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase (car s))\
    \ (helper11 (cdr s)))))\n  (define (helper12 s)\n    (if (empty? s)", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=?\
    \ c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\\
    e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (string-map rotate-char s))\n  (rotate-string s))\n", "  (define (rotate-char\
    \ c)\n    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\b) #\\d]\n\
    \      [(char=? c #\\c) #\\e]\n      [(char=? c #\\d) #\\f]\n      [(char=? c\
    \ #\\e) #\\g]\n      [(char=? c #\\f) #\\h]\n      [(char=? c #\\g) #\\i]\n  \
    \    [(char=? c #\\h) #\\j]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\\
    j) #\\l]\n      [(char=? c #\\k) #\\m]\n      [(char=? c #\\l) #\\n]\n      [(char=?\
    \ c #\\m) #\\o]\n      [(char=? c #\\n) #\\p]\n      [(char=? c #\\o) #\\q]\n\
    \      [(char=? c #\\p) #\\r]\n      [(char=? c #\\q) #\\s]\n      [(char=? c\
    \ #\\r) #\\t]\n      [(char=? c #\\s) #\\u]\n      [(char=? c #\\t) #\\v]\n  \
    \    [(char=? c #\\u) #\\w]\n      [(char=? c #\\v) #\\x]\n      [(char=? c #\\\
    w) #\\y]\n      [(char=? c #\\x) #\\z]\n      [(char=? c #\\y) #\\a]\n      [(char=?\
    \ c #\\z) #\\b]\n      [else c]))\n  (string-map rotate-char s))\n", "  (define\
    \ (rotate-char c)\n    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\\
    b) #\\d]\n      [(char=? c #\\c) #\\e]\n      [(char=? c #\\d) #\\f]\n      [(char=?\
    \ c #\\e) #\\g]\n      [(char=? c #\\f) #\\h]\n      [(char=? c #\\g) #\\i]\n\
    \      [(char=? c #\\h) #\\j]\n      [(char=? c #\\i) #\\k]\n      [(char=? c\
    \ #\\j) #\\l]\n      [(char=? c #\\k) #\\m]\n      [(char=? c #\\l) #\\n]\n  \
    \    [(char=? c #\\m) #\\o]\n      [(char=? c #\\n) #\\p]\n      [(char=? c #\\\
    o) #\\q]\n      [(char=? c #\\p) #\\r]\n      [(char=? c #\\q) #\\s]\n      [(char=?\
    \ c #\\r) #\\t]\n      [(char=? c #\\s) #\\u]\n      [(char=? c #\\t) #\\v]\n\
    \      [(char=? c #\\u) #\\w]\n      [(char=? c #\\v) #\\x]\n      [(char=? c\
    \ #\\w) #\\y]\n      [(char=? c #\\x) #\\z]\n      [(char=? c #\\y) #\\a]\n  \
    \    [(char=? c #\\z) #\\b]\n      [else c]))\n  (define (rotate-string s)\n \
    \   (if (string-empty? s)\n        \"\"\n        (string-append (string (rotate-char\
    \ (string-ref s 0)))\n                       (rotate-string (substring s 1)))))\n\
    \  (rotate-string s))\n", "  (define (rotate n)\n    (cond\n      [(= n 0) (string-ref\
    \ s 0)]\n      [(= n 1) (string-ref s 1)]\n      [(= n 2) (string-ref s 2)]\n\
    \      [(= n 3) (string-ref s 3)]\n      [(= n 4) (string-ref s 4)]\n      [(=\
    \ n 5) (string-ref s 5)]\n      [(= n 6) (string-ref s 6)]\n      [(= n 7) (string-ref\
    \ s 7)]\n      [(= n 8) (string-ref s 8)]\n      [(= n 9) (string-ref s 9)]\n\
    \      [(= n 10) (string-ref s 10)]\n      [(= n 11) (string-ref s 11)]\n    \
    \  [(= n 12) (string-ref s 12)]\n      [(= n 13) (string-ref s 13)]\n      [(=\
    \ n 14) (string-ref s 14)]\n      [(= n 15) (string-ref s 15)]\n      [(= n 16)\
    \ (string-ref s 16)]\n      [(= n 17) (string-ref s 17)]\n      [(= n 18) (string-ref\
    \ s 18)]\n      [(= n 19) (string-ref s 19)]\n      [(= n 20) (string-ref s 20)]\n\
    \      [(= n 21) (string-ref s 21)]\n      [(= n 22) (string-ref s 22)]\n    \
    \  [(= n 23) (string-ref s 23)]\n      [(= n 24) (string-ref s 24)]\n      [(=\
    \ n 25) (string-ref s 25)]\n      [(= n 26) (string-ref s 26)]\n      [(= n 27)\
    \ (string-ref s 27)]\n      [(= n 28) (string-ref s 28)]\n      [(= n 29) (string-ref\
    \ s 29)]\n      [(= n 30) (string-ref s 30)]\n      [(= n 31) (string-ref s 31)]\n\
    \      [(= n 32) (string-ref s 32)]\n      [(= n 33) (string-ref s 33)]\n    \
    \  [(= n 34) (string-ref s 34)]\n      [(= n 35) (string", "  (define (helper\
    \ s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (rotate-char (first\
    \ s) 2) (helper (rest s)))]))\n  (list->string (helper (string->list s))))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n  \
    \      [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=?\
    \ c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\\
    g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=?\
    \ c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\\
    l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=?\
    \ c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\\
    q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=?\
    \ c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\\
    v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=?\
    \ c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\\
    a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (if (string-empty? s)\n        \"\"\n\
    \        (string-append (string (rotate-char (string-ref s 0)))\n            \
    \           (rotate-string (substring s 1)))))\n  (rotate-string s))\n", "  (define\
    \ (rotate c)\n    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\b)\
    \ #\\d]\n      [(char=? c #\\c) #\\e]\n      [(char=? c #\\d) #\\f]\n      [(char=?\
    \ c #\\e) #\\g]\n      [(char=? c #\\f) #\\h]\n      [(char=? c #\\g) #\\i]\n\
    \      [(char=? c #\\h) #\\j]\n      [(char=? c #\\i) #\\k]\n      [(char=? c\
    \ #\\j) #\\l]\n      [(char=? c #\\k) #\\m]\n      [(char=? c #\\l) #\\n]\n  \
    \    [(char=? c #\\m) #\\o]\n      [(char=? c #\\n) #\\p]\n      [(char=? c #\\\
    o) #\\q]\n      [(char=? c #\\p) #\\r]\n      [(char=? c #\\q) #\\s]\n      [(char=?\
    \ c #\\r) #\\t]\n      [(char=? c #\\s) #\\u]\n      [(char=? c #\\t) #\\v]\n\
    \      [(char=? c #\\u) #\\w]\n      [(char=? c #\\v) #\\x]\n      [(char=? c\
    \ #\\w) #\\y]\n      [(char=? c #\\x) #\\z]\n      [(char=? c #\\y) #\\a]\n  \
    \    [(char=? c #\\z) #\\b]\n      [else c]))\n  (string-map rotate s))\n", " \
    \ (define (rotate-string s n)\n    (string-append (substring s n) (substring s\
    \ 0 n)))\n  (define (rotate-char c n)\n    (integer->char (+ (char->integer c)\
    \ n)))\n  (define (rotate-char-list l n)\n    (map (lambda (c) (rotate-char c\
    \ n)) l))\n  (define (rotate-string-list l n)\n    (map (lambda (s) (rotate-string\
    \ s n)) l))\n  (define (rotate-string-list-list l n)\n    (map (lambda (s) (rotate-string-list\
    \ s n)) l))\n  (define (rotate-char-list-list l n)\n    (map (lambda (s) (rotate-char-list\
    \ s n)) l))\n  (define (rotate-string-list-list-list l n)\n    (map (lambda (s)\
    \ (rotate-string-list-list s n)) l))\n  (define (rotate-char-list-list-list l\
    \ n)\n    (map (lambda (s) (rotate-char-list-list s n)) l))\n  (define (rotate-string-list-list-list-list\
    \ l n)\n    (map (lambda (s) (rotate-string-list-list-list s n)) l))\n  (define\
    \ (rotate-char-list-list-list-list l n)\n    (map (lambda (s) (rotate-char-list-list-list\
    \ s n)) l))\n  (define (rotate-string-list-list-list-list-list l n)\n    (map\
    \ (lambda (s) (rotate-string-list-list-list-list s n)) l))\n  (define (rotate-char-list-list-list-list-list\
    \ l n)\n    (map (lambda (s) (rotate-char-list-list-list-list s n)) l))\n  (define\
    \ (rotate-string-list-list-list-list-list-list l n)\n    (map (lambda (s) (rotate-string-list-list-list",
  "  (define (rotate n)\n    (cond\n      [(= n 0) (string->list s)]\n      [else\
    \ (rotate (- n 1))]))\n  (list->string (rotate 2)))\n", "  (let ([alphabet (string->list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join (map (lambda (c)\n     \
    \                   (list-ref alphabet (+ (list-index c alphabet) (* 2 2))))\n\
    \                      (string->list s)))))\n", "  (let ([alphabet (string->list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n     (map\n      (lambda\
    \ (c)\n        (list-ref alphabet (+ (list-index c alphabet) (* 2 2))))\n    \
    \  (string->list s)))))\n", "  (define (encrypt-helper s i)\n    (cond\n     \
    \ [(empty? s) empty]\n      [else (cons (rotate-char (first s) i) (encrypt-helper\
    \ (rest s) i))]))\n  (encrypt-helper s 2))\n", "  (string-map (lambda (c)\n  \
    \              (let ((n (char->integer c)))\n                  (integer->char\
    \ (+ n (* 2 2)))))\n              s))\n", "  (define (rotate n)\n    (if (= n\
    \ 0)\n        s\n        (rotate (- n 1))\n        (string-append (substring s\
    \ n) (substring s 0 n))))\n  (rotate 2))\n", "  (define (rotate n)\n    (cond\n\
    \      [(= n 0) #\\a]\n      [(= n 1) #\\b]\n      [(= n 2) #\\c]\n      [(= n\
    \ 3) #\\d]\n      [(= n 4) #\\e]\n      [(= n 5) #\\f]\n      [(= n 6) #\\g]\n\
    \      [(= n 7) #\\h]\n      [(= n 8) #\\i]\n      [(= n 9) #\\j]\n      [(= n\
    \ 10) #\\k]\n      [(= n 11) #\\l]\n      [(= n 12) #\\m]\n      [(= n 13) #\\\
    n]\n      [(= n 14) #\\o]\n      [(= n 15) #\\p]\n      [(= n 16) #\\q]\n    \
    \  [(= n 17) #\\r]\n      [(= n 18) #\\s]\n      [(= n 19) #\\t]\n      [(= n\
    \ 20) #\\u]\n      [(= n 21) #\\v]\n      [(= n 22) #\\w]\n      [(= n 23) #\\\
    x]\n      [(= n 24) #\\y]\n      [(= n 25) #\\z]))\n  (define (rotate-string s)\n\
    \    (define (rotate-string-helper s n)\n      (cond\n        [(empty? s) empty]\n\
    \        [else (cons (rotate (+ n (char-&gt;integer (car s))))\n             \
    \       (rotate-string-helper (cdr s) n))]))\n    (rotate-string-helper s 2))\n\
    \  (list-&gt;string (rotate-string (string-&gt;list s))))\n</code>\n", "  (define\
    \ (shift c)\n    (if (char=? c #\\z)\n        #\\b\n        (if (char=? c #\\\
    y)\n            #\\a\n            (integer->char (+ (char->integer c) 2)))))\n\
    \  (string-map shift s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\\
    d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (define (rotate-string-helper s)\n   \
    \   (cond\n        [(empty? s) empty]\n        [else (cons (rotate-char (first\
    \ s)) (rotate-string-helper (rest s)))]))\n    (rotate-string", "  (define (rotate-char\
    \ c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n  (define (rotate-string\
    \ s)\n    (if (string-empty? s)\n        \"\"\n        (string-append (string\
    \ (rotate-char (string-ref s 0)))\n                       (rotate-string (substring\
    \ s 1)))))\n  (rotate-string s))\n", "  (map (lambda (x)\n         (let ((x (string-&gt;number\
    \ (string x) 16)))\n           (number-&gt;string (+ x (* 2 2)) 16)))\n      \
    \ (string-&gt;list s)))\n</code>\n", "  (let ((alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\"\
    )))\n    (string-join\n     (map\n      (lambda (c)\n        (list-ref alphabet\n\
    \                  (+ 2 (* 2 (list-index (char-downcase c) alphabet)))))\n   \
    \   (string->list s)))))\n", "  (define (rotate-char c)\n    (let ([c (string-&gt;char\
    \ c)])\n      (char-&gt;string (+ c (* 2 2)))))\n  (string-join (map rotate-char\
    \ (string-&gt;list s)) \"\"))\n</code>\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (cond\n        [(char=? c #\\a) #\\c]\n      \
    \  [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c\
    \ #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n\
    \        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=?\
    \ c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\\
    m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=?\
    \ c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\\
    r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=?\
    \ c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\\
    w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=?\
    \ c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\\
    b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (if (string-empty? s)\n        \"\"\n        (string-append (string\
    \ (rotate-char (string-ref s 0)))\n                       (rotate-string (substring\
    \ s 1)))))\n  (rotate-string s))\n", "  (let ([s (string->list s)])\n    (map\
    \ (lambda (x) (integer->char (+ x (* 2 2)))) s)))\n", "  (define (rotate s)\n\
    \    (string-append (substring s 2) (substring s 0 2)))\n  (define (rotate-n s\
    \ n)\n    (if (= n 0)\n        s\n        (rotate-n (rotate s) (- n 1))))\n  (define\
    \ (encrypt-helper s)\n    (if (empty? s)\n        \"\"\n        (string-append\
    \ (rotate-n (string (car s)) 2)\n                       (encrypt-helper (cdr s)))))\n\
    \  (encrypt-helper (string->list s)))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (cond\n        [(char=? c #\\a) #\\c]\n      \
    \  [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c\
    \ #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n\
    \        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=?\
    \ c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\\
    m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=?\
    \ c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\\
    r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=?\
    \ c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\\
    w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=?\
    \ c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\\
    b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (string-map rotate-char s))\n  (rotate-string s))\n", "  (define (encrypt-helper\
    \ s i)\n    (if (= i (string-length s))\n        \"\"\n        (string-append\
    \ (string (char-downcase (+ (char-upcase (string-ref s i)) 2)))\n            \
    \           (encrypt-helper s (+ i 1)))))\n  (encrypt-helper s 0))\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=?\
    \ c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\\
    e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (define (rotate-string-helper s)\n      (cond\n        [(empty? s) empty]\n\
    \        [else (cons (rotate-char (first s)) (rotate-string-helper (rest s)))]))\n\
    \    (rotate-string", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\\
    d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (cond\n      [(empty? s) empty]\n    \
    \  [else (cons (rotate-char (first s)) (rotate-string (rest s)))]))\n  (rotate-string\
    \ s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n   \
    \   (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n  \
    \      [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (define (rotate-string-helper s)\n   \
    \   (cond\n        [(empty? s) empty]\n        [else (cons (rotate-char (first\
    \ s)) (rotate-string-helper (rest s)))]))\n    (rotate-string", "  (define (rotate\
    \ c)\n    (let ((c (string-&gt;char c)))\n      (char-&gt;string (+ c (* 2 2)))))\n\
    \  (string-join (map rotate (string-&gt;list s)) \"\"))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (cons (rotate-char (first s) 2)\n           (encrypt\
    \ (rest s)))]))\n", "  (let ((alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\"\
    )))\n    (string-join (map (lambda (x)\n                        (if (char-alphabetic?\
    \ x)\n                            (list-ref alphabet (+ (char-downcase x) 2))\n\
    \                            x))\n                      (string->list s)))))\n",
  "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n\
    \     (map\n      (lambda (c)\n        (list-ref alphabet (+ (list-index c alphabet)\
    \ (* 2 2))))\n      (string->list s)))))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (cond\n        [(char=? c #\\a) #\\c]\n      \
    \  [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c\
    \ #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n\
    \        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=?\
    \ c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\\
    m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=?\
    \ c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\\
    r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=?\
    \ c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\\
    w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=?\
    \ c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\\
    b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (define (rotate-string-helper s)\n      (cond\n        [(empty? s) empty]\n\
    \        [else (cons (rotate-char (first s)) (rotate-string-helper (rest s)))]))\n\
    \    (rotate-string", "  (define (rotate n)\n    (if (= n 0)\n        s\n    \
    \    (rotate (- n 1))\n        (string-append (substring s (- n 1)) (substring\
    \ s 0 (- n 1)))))\n  (rotate 2))\n", "  (define (rotate s)\n    (string-append\
    \ (substring s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (empty?\
    \ s)\n        \"\"\n        (string-append (rotate (string-ref s 0)) (encrypt-helper\
    \ (substring s 1)))))\n  (encrypt-helper s))\n", "  (map (lambda (c) (char (+\
    \ c (* 2 2)))) s))\n", "  (define (rotate s)\n    (string-append (substring s\
    \ 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=? s \"\
    \")\n        \"\"\n        (string-append (string (char-downcase (char-add (string-ref\
    \ s 0) 2)))\n                       (encrypt-helper (substring s 1)))))\n  (encrypt-helper\
    \ (rotate s)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\z)\n          #\\b\n          (if (char=? c #\\y)\n\
    \              #\\a\n              (if (char=? c #\\x)\n                  #\\\
    @\n                  (if (char=? c #\\w)\n                      #\\?)\n      \
    \            (if (char=? c #\\v)\n                      #\\>\n               \
    \       (if (char=? c #\\u)\n                          #\\=\n                \
    \          (if (char=? c #\\t)\n                              #\\<\n         \
    \                     (if (char=? c #\\s)\n                                  #\\\
    ;\n                                  (if (char=? c #\\r)\n                   \
    \                   #\\:\n                                      (if (char=? c\
    \ #\\q)\n                                          #\\9\n                    \
    \                      (if (char=? c #\\p)\n                                 \
    \             #\\8\n                                              (if (char=?\
    \ c #\\o)\n                                                  #\\7\n          \
    \                                        (if (char=? c #\\n)\n               \
    \                                       #\\6\n                               \
    \                       (if (char=? c #\\m)\n                                \
    \                          #\\5\n                                            \
    \              (if (char=? c #\\l)\n                                         \
    \                     #\\4\n                                                 \
    \             (if (char=? c #\\k)\n                                          \
    \                        #\\3\n                                              \
    \                    (if (char=? c #\\j)\n                                   \
    \                                   #\\2\n                                   \
    \                                   (if (char=? c #\\i)\n                    \
    \                                                      #\\1\n                \
    \                                                          (if (char=? c #\\h)\n\
    \                                                                            \
    \  #\\0\n                                                                    \
    \          (if (char=? c #\\g)\n                                             \
    \                                     #\\/\n                                 \
    \                                                 (if (char=? c #\\f)\n      \
    \                                                                            \
    \    #\\.)\n                                                                 \
    \                 (if (char=? c #\\e)\n                                      \
    \                                                #\\,\n                      \
    \                                                                (if (", "  (define\
    \ (helper s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (rotate-char\
    \ (first s) 2) (helper (rest s)))]))\n  (list->string (helper (string->list s))))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n  \
    \      [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=?\
    \ c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\\
    g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=?\
    \ c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\\
    l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=?\
    \ c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\\
    q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=?\
    \ c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\\
    v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=?\
    \ c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\\
    a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (if (string-empty? s)\n        \"\"\n\
    \        (string-append (string (rotate-char (string-ref s 0)))\n            \
    \           (rotate-string (substring s 1)))))\n  (rotate-string s))\n", "  (let\
    \ ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n\
    \     (map\n      (lambda (c)\n        (let ([i (string-index \"abcdefghijklmnopqrstuvwxyz\"\
    \ (string c))])\n          (if (not i)\n              c\n              (list-ref\
    \ alphabet (+ i (* 2 2))))))\n      (string->list s)))))\n", "  (define (shift-char\
    \ c)\n    (integer->char (+ c (* 2 2))))\n  (define (shift-string s)\n    (if\
    \ (empty? s)\n        empty\n        (cons (shift-char (char->integer (first s)))\n\
    \              (shift-string (rest s)))))\n  (list->string (shift-string (string->list\
    \ s))))\n", "  (define (rotate-char c)\n    (integer->char (+ (char->integer c)\
    \ (* 2 2))))\n  (map rotate-char (string->list s)))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (or (char=? c #\\a) (char=?\
    \ c #\\A))\n          (if (char=? c #\\a)\n              #\\c\n              #\\\
    C)\n          (if (or (char=? c #\\b) (char=? c #\\B))\n              (if (char=?\
    \ c #\\b)\n                  #\\d\n                  #\\D)\n              (if\
    \ (or (char=? c #\\c) (char=? c #\\C))\n                  (if (char=? c #\\c)\n\
    \                      #\\e\n                      #\\E)\n                  (if\
    \ (or (char=? c #\\d) (char=? c #\\D))\n                      (if (char=? c #\\\
    d)\n                          #\\f\n                          #\\F)\n        \
    \              (if (or (char=? c #\\e) (char=? c #\\E))\n                    \
    \      (if (char=? c #\\e)\n                              #\\g\n             \
    \                 #\\G)\n                          (if (or (char=? c #\\f) (char=?\
    \ c #\\F))\n                              (if (char=? c #\\f)\n              \
    \                    #\\h\n                                  #\\H)\n         \
    \                     (if (or (char=? c #\\g) (char=? c #\\G))\n             \
    \                     (if (char=? c #\\g)\n                                  \
    \    #\\i\n                                      #\\I)\n                     \
    \             (if (or (char=? c #\\h) (char=? c #\\H))\n                     \
    \                 (if (char=? c #\\h)\n                                      \
    \    #\\j\n                                          #\\J)\n                 \
    \                     (if (or (char=? c #\\i) (char=? c #\\I))\n             \
    \                             (if (char=? c #\\i)\n                          \
    \                    #\\k\n                                              #\\K)\n\
    \                                          (if (or (char=? c #\\j) (char=? c #\\\
    J))\n                                ", "  (define (shift c)\n    (let ([c (string-&gt;char\
    \ c)])\n      (if (char&lt;=? #\\a c #\\z)\n          (char-&gt;string (+ c (*\
    \ 2 2)))\n          (char-&gt;string c))))\n  (string-join (map shift (string-&gt;list\
    \ s))))\n</code>\n", "  (define (helper s)\n    (if (empty? s)\n        '()\n\
    \        (cons (char-downcase (car s)) (helper (cdr s)))))\n  (define (rotate\
    \ s)\n    (if (empty? s)\n        '()\n        (cons (char-downcase (car s)) (rotate\
    \ (cdr s)))))\n  (define (rotate-helper s)\n    (if (empty? s)\n        '()\n\
    \        (cons (char-downcase (car s)) (rotate-helper (cdr s)))))\n  (define (rotate-helper-helper\
    \ s)\n    (if (empty? s)\n        '()\n        (cons (char-downcase (car s)) (rotate-helper-helper\
    \ (cdr s)))))\n  (define (rotate-helper-helper-helper s)\n    (if (empty? s)\n\
    \        '()\n        (cons (char-downcase (car s)) (rotate-helper-helper-helper\
    \ (cdr s)))))\n  (define (rotate-helper-helper-helper-helper s)\n    (if (empty?\
    \ s)\n        '()\n        (cons (char-downcase (car s)) (rotate-helper-helper-helper-helper\
    \ (cdr s)))))\n  (define (rotate-helper-helper-helper-helper-helper s)\n    (if\
    \ (empty? s)\n        '()\n        (cons (char-downcase (car s)) (rotate-helper-helper-helper-helper-helper\
    \ (cdr s)))))\n  (define (rotate-helper-helper-helper-helper-helper-helper s)\n\
    \    (if (empty? s)\n        '()\n        (cons (char-downcase (car s)) (rotate-helper-helper-helper-helper-helper-helper\
    \ (cdr s)))))\n  (define (rotate-helper-helper-helper-helper-helper-helper-helper\
    \ s)\n    (if", "  (define (rotate-char c)\n    (integer->char (+ (char->integer\
    \ c) (* 2 2))))\n  (map rotate-char (string->list s)))\n", "  (define (rotate\
    \ c)\n    (let ((code (char->integer c)))\n      (integer->char (+ code (* 2 2)))))\n\
    \  (string-map rotate s))\n", "  (define (rotate-char c)\n    (cond\n      [(char=?\
    \ c #\\a) #\\c]\n      [(char=? c #\\b) #\\d]\n      [(char=? c #\\c) #\\e]\n\
    \      [(char=? c #\\d) #\\f]\n      [(char=? c #\\e) #\\g]\n      [(char=? c\
    \ #\\f) #\\h]\n      [(char=? c #\\g) #\\i]\n      [(char=? c #\\h) #\\j]\n  \
    \    [(char=? c #\\i) #\\k]\n      [(char=? c #\\j) #\\l]\n      [(char=? c #\\\
    k) #\\m]\n      [(char=? c #\\l) #\\n]\n      [(char=? c #\\m) #\\o]\n      [(char=?\
    \ c #\\n) #\\p]\n      [(char=? c #\\o) #\\q]\n      [(char=? c #\\p) #\\r]\n\
    \      [(char=? c #\\q) #\\s]\n      [(char=? c #\\r) #\\t]\n      [(char=? c\
    \ #\\s) #\\u]\n      [(char=? c #\\t) #\\v]\n      [(char=? c #\\u) #\\w]\n  \
    \    [(char=? c #\\v) #\\x]\n      [(char=? c #\\w) #\\y]\n      [(char=? c #\\\
    x) #\\z]\n      [(char=? c #\\y) #\\a]\n      [(char=? c #\\z) #\\b]\n      [else\
    \ c]))\n  (define (rotate-string s)\n    (string-map rotate-char s))\n  (rotate-string\
    \ s))\n", "  (define (encrypt-helper s i)\n    (cond\n      [(= i (string-length\
    \ s)) \"\"]\n      [else (string-append (string (char-downcase (+ (char-downcase\
    \ (string-ref s i)) 2)))\n                           (encrypt-helper s (+ i 1)))]))\n\
    \  (encrypt-helper s 0))\n", "  (define (encrypt-helper s)\n    (cond\n      [(empty?\
    \ s) empty]\n      [else (cons (encrypt-char (first s)) (encrypt-helper (rest\
    \ s)))]))\n  (list->string (encrypt-helper (string->list s))))\n", "  (define\
    \ (shift-char c)\n    (integer->char (+ c (* 2 2))))\n  (string-map shift-char\
    \ s))\n", "  (define (rotate-char c)\n    (let ([c (string-&gt;char c)])\n   \
    \   (char-&gt;string (+ c (* 2 2)))))\n  (map rotate-char (string-&gt;list s)))\n",
  "  (define (rotate-char c)\n    (let ([c (string-&gt;char c)])\n      (cond\n  \
    \      [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=?\
    \ c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\\
    g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=?\
    \ c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\\
    l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=?\
    \ c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\\
    q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=?\
    \ c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\\
    v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=?\
    \ c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\\
    a]\n        [(char=? c #\\z) #\\b]\n        [else c])))\n  (string-join (map rotate-char\
    \ (string-&gt;list s))))\n</code>\n", "  (map (lambda (c)\n         (let ((n (char->integer\
    \ c)))\n           (integer->char (+ n (* 2 2)))))\n       s))\n", "  (map (lambda\
    \ (c)\n         (let ([c (string-&gt;char c)])\n           (if (char&lt;= #\\\
    a c #\\z)\n               (char-&gt;string (+ c (* 2 2)))\n               (char-&gt;string\
    \ c))))\n       (string-&gt;list s)))\n</code>\n", "  (define (encrypt-helper\
    \ s i)\n    (if (= i (string-length s))\n        \"\"\n        (string-append\
    \ (string (char-downcase (string-ref s i)))\n                       (encrypt-helper\
    \ s (+ i 1)))))\n  (encrypt-helper s 0))\n", "  (define (helper s i)\n    (cond\n\
    \      [(empty? s) empty]\n      [(= i (string-length s)) empty]\n      [else\
    \ (cons (string-ref s i) (helper s (+ i 1)))]))\n  (define (helper2 lst)\n   \
    \ (cond\n      [(empty? lst) empty]\n      [else (cons (integer->char (+ (char->integer\
    \ (car lst)) 2)) (helper2 (cdr lst)))]))\n  (helper2 (helper s 0)))\n", "  (define\
    \ (encrypt-helper s)\n    (if (empty? s)\n        empty\n        (cons (encrypt-char\
    \ (first s))\n              (encrypt-helper (rest s)))))\n  (list->string (encrypt-helper\
    \ (string->list s))))\n", "  (define (helper s)\n    (cond\n      [(empty? s)\
    \ empty]\n      [else (cons (rotate-char (first s) 2) (helper (rest s)))]))\n\
    \  (list->string (helper (string->list s))))\n", "  (define (rotate-char c)\n\
    \    (let ([c (char-downcase c)])\n      (if (char-alphabetic? c)\n          (let\
    \ ([n (char-&gt;integer c)])\n            (integer-&gt;char (+ n (* 2 2))))\n\
    \          c)))\n  (string-&gt;list s))\n</code>\nI get the following error:\n\
    <code>string-&gt;list: expects argument of type &lt;string&gt;; given '(#\\l #\\\
    m)\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou need to use <code>list-&gt;string</code>\
    \ instead of <code>string-&gt;list</code> at the end of your code.\n", "  (define\
    \ (encrypt-helper s)\n    (if (empty? s)\n        empty\n        (cons (encrypt-char\
    \ (first s))\n              (encrypt-helper (rest s)))))\n  (list->string (encrypt-helper\
    \ (string->list s))))\n", "  (define (rotate-char c)\n    (let ([c (string-&gt;char\
    \ c)])\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b)\
    \ #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n    \
    \    [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=?\
    \ c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\\
    k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=?\
    \ c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\\
    p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=?\
    \ c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\\
    u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=?\
    \ c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\\
    z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else\
    \ c])))\n  (string-join (map rotate-char (string-&gt;list s))))\n</code>\n", " \
    \ (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=?\
    \ c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n\
    \              (if (char=? c #\\c)\n                  #\\e\n                 \
    \ (if (char=? c #\\d)\n                      #\\f\n                      (if (char=?\
    \ c #\\e)\n                          #\\g\n                          (if (char=?\
    \ c #\\f)\n                              #\\h\n                              (if\
    \ (char=? c #\\g)\n                                  #\\i\n                  \
    \                (if (char=? c #\\h)\n                                      #\\\
    j\n                                      (if (char=? c #\\i)\n               \
    \                           #\\k\n                                          (if\
    \ (char=? c #\\j)\n                                              #\\l\n      \
    \                                        (if (char=? c #\\k)\n               \
    \                                   #\\m\n                                   \
    \               (if (char=? c #\\l)\n                                        \
    \              #\\n\n                                                      (if\
    \ (char=? c #\\m)\n                                                          #\\\
    o\n                                                          (if (char=? c #\\\
    n)\n                                                              #\\p\n     \
    \                                                         (if (char=? c #\\o)\n\
    \                                                                  #\\q\n    \
    \                                                              (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n  (map rotate-char (string->list\
    \ s)))\n", "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n\
    \    (string-join\n     (map\n      (lambda (c)\n        (list-ref alphabet (+\
    \ (string-index c alphabet) (* 2 2))))\n      (string->list s)))))\n", "  (let\
    \ ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n\
    \     (map (lambda (c)\n            (list-ref alphabet\n                     \
    \ (+ (- (string-ci-&gt;char c)\n                            (string-ci-&gt;char\
    \ \"a\"))\n                         (* 2 2))))\n          (string-&gt;list s)))))\n\
    </code>\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
