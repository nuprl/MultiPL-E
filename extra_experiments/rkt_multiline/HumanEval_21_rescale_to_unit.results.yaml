language: rkt
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max)\n    (if (null? numbers)\n  \
    \      '()\n        (cons (/ (- (car numbers) min) (- max min))\n            \
    \  (rescale_to_unit_iter (cdr numbers) min max))))\n  (rescale_to_unit_iter numbers\
    \ (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate rescale_to_unit))\n    (check-equal? (candidate (list\
    \ 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9))\
    \ (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list\
    \ 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0\
    \ 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0\
    \ 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else (cons (/ (- (first numbers) min) (- max min))\n\
    \                  (rescale_to_unit_helper (rest numbers) min max))]))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define min (apply min numbers))\n  (define max (apply max numbers))\n  (define\
    \ range (- max min))\n  (map (lambda (x) (/ (- x min) range)) numbers))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:18:4\n\
    \nmin: undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:19:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:20:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:21:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:22:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else (cons (/ (- (first numbers) min) (- max min))\n\
    \                  (rescale_to_unit_helper (rest numbers) min max))]))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (\u03BB (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min)) (rescale-helper (cdr numbers)\
    \ min max))))\n  (rescale-helper numbers (apply min numbers) (apply max numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max)\n    (if (null? numbers)\n  \
    \      '()\n        (cons (/ (- (car numbers) min) (- max min))\n            \
    \  (rescale_to_unit_iter (cdr numbers) min max))))\n  (rescale_to_unit_iter numbers\
    \ (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate rescale_to_unit))\n    (check-equal? (candidate (list\
    \ 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9))\
    \ (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list\
    \ 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0\
    \ 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0\
    \ 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max result)\n    (if (null? numbers)\n\
    \        result\n        (let ([number (car numbers)])\n          (rescale_to_unit_iter\
    \ (cdr numbers)\n                                (if (< number min) number min)\n\
    \                                (if (> number max) number max)\n            \
    \                    (cons (/ (- number min) (- max min)) result)))))\n  (reverse\
    \ (rescale_to_unit_iter numbers (car numbers) (car numbers) '())))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:23:4

    actual:     ''(+nan.0 +inf.0)

    expected:   ''(0.0 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:24:4

    actual:     ''(+nan.0 -inf.0)

    expected:   ''(1.0 0.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:25:4

    actual:     ''(+nan.0 +inf.0 2.0 1.5 1.3333333333333333)

    expected:   ''(0.0 0.25 0.5 0.75 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:26:4

    actual:     ''(+nan.0 -inf.0 4.0 0.5 0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:27:4

    actual:     ''(+nan.0 -inf.0 4.0 0.5 0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    '
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else (cons (/ (- (first numbers) min) (- max min))\n\
    \                  (rescale_to_unit_helper (rest numbers) min max))]))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define min (apply min numbers))\n  (define max (apply max numbers))\n  (define\
    \ range (- max min))\n  (map (lambda (x) (/ (- x min) range)) numbers))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:18:4\n\
    \nmin: undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:19:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:20:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:21:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:22:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let ((min (apply min numbers))\n        (max (apply max numbers)))\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (\u03BB (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min)) (rescale-helper (cdr numbers)\
    \ min max))))\n  (rescale-helper numbers (apply min numbers) (apply max numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [scale (/ 1.0 (- max min))])\n    (map (lambda (x) (* scale (- x min))) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min-number (apply min numbers)]\n         [max-number (apply max numbers)]\n\
    \         [range (- max-number min-number)])\n    (map (lambda (x) (/ (- x min-number)\
    \ range)) numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [scale (/ (- 1.0) (- max min))])\n    (map (lambda (x) (* scale (- x min)))\
    \ numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n\
    \    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:18:4

    actual:     ''(-0.0 -1.0)

    expected:   ''(0.0 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:19:4

    actual:     ''(-1.0 -0.0)

    expected:   ''(1.0 0.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:20:4

    actual:     ''(-0.0 -0.25 -0.5 -0.75 -1.0)

    expected:   ''(0.0 0.25 0.5 0.75 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:21:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:22:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    '
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [scale (/ 1.0 (- max min))])\n    (map (lambda (x) (* scale (- x min))) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [scale (/ 1.0 (- max min))])\n    (map (lambda (x) (* scale (- x min))) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (n)\n           (/ (- n min) delta))\n\
    \         numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [scale (/ (- 1.0) (- max min))])\n    (map (lambda (x) (* scale (- x min)))\
    \ numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n\
    \    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:18:4

    actual:     ''(-0.0 -1.0)

    expected:   ''(0.0 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:19:4

    actual:     ''(-1.0 -0.0)

    expected:   ''(1.0 0.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:20:4

    actual:     ''(-0.0 -0.25 -0.5 -0.75 -1.0)

    expected:   ''(0.0 0.25 0.5 0.75 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:21:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:22:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    '
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max scaled)\n    (if (null? numbers)\n\
    \        scaled\n        (rescale_to_unit_iter (cdr numbers)\n               \
    \               (min min (car numbers))\n                              (max max\
    \ (car numbers))\n                              (append scaled (list (/ (- (car\
    \ numbers) min) (- max min)))))))\n  (rescale_to_unit_iter numbers (car numbers)\
    \ (car numbers) '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0\
    \ 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list\
    \ 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0\
    \ 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0\
    \ 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0pwka9c.rkt:22:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmph0pwka9c.rkt:23:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 100.0\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmph0pwka9c.rkt:24:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0pwka9c.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmph0pwka9c.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ give"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max result)\n    (if (null? numbers)\n\
    \        result\n        (let* ([n (car numbers)]\n               [r (/ (- n min)\
    \ (- max min))])\n          (rescale_to_unit_iter (cdr numbers) min max (cons\
    \ r result)))))\n  (let* ([min (apply min numbers)]\n         [max (apply max\
    \ numbers)])\n    (reverse (rescale_to_unit_iter numbers min max '()))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [scale (/ 1.0 (- max min))])\n    (map (lambda (x) (* scale (- x min))) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define min (apply min numbers))\n  (define max (apply max numbers))\n  (define\
    \ range (- max min))\n  (map (lambda (x) (/ (- x min) range)) numbers))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:18:4\n\
    \nmin: undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:19:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:20:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:21:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:22:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-to-unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale-to-unit-helper (cdr numbers) min max))))\n  (rescale-to-unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [scale (/ (- 1.0) (- max min))])\n    (map (lambda (n) (* scale (- n min)))\
    \ numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n\
    \    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdqfba2if.rkt:18:4

    actual:     ''(-0.0 -1.0)

    expected:   ''(0.0 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdqfba2if.rkt:19:4

    actual:     ''(-1.0 -0.0)

    expected:   ''(1.0 0.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdqfba2if.rkt:20:4

    actual:     ''(-0.0 -0.25 -0.5 -0.75 -1.0)

    expected:   ''(0.0 0.25 0.5 0.75 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdqfba2if.rkt:21:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdqfba2if.rkt:22:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    '
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max result)\n    (if (null? numbers)\n\
    \        result\n        (let* ([current (car numbers)]\n               [new-min\
    \ (if (< current min) current min)]\n               [new-max (if (> current max)\
    \ current max)])\n          (rescale_to_unit_iter (cdr numbers) new-min new-max\
    \ (cons (/ (- current min) (- max min)) result)))))\n  (reverse (rescale_to_unit_iter\
    \ numbers (car numbers) (car numbers) '())))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqwtzwt17.rkt:22:4

    actual:     ''(+nan.0 +inf.0)

    expected:   ''(0.0 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqwtzwt17.rkt:23:4

    actual:     ''(+nan.0 -inf.0)

    expected:   ''(1.0 0.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqwtzwt17.rkt:24:4

    actual:     ''(+nan.0 +inf.0 2.0 1.5 1.3333333333333333)

    expected:   ''(0.0 0.25 0.5 0.75 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqwtzwt17.rkt:25:4

    actual:     ''(+nan.0 -inf.0 4.0 0.5 0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqwtzwt17.rkt:26:4

    actual:     ''(+nan.0 -inf.0 4.0 0.5 0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    '
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [scale (/ 1.0 (- max min))])\n    (map (lambda (x) (* scale (- x min))) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max)\n    (if (null? numbers)\n  \
    \      '()\n        (cons (/ (- (car numbers) min) (- max min))\n            \
    \  (rescale_to_unit_iter (cdr numbers) min max))))\n  (rescale_to_unit_iter numbers\
    \ (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate rescale_to_unit))\n    (check-equal? (candidate (list\
    \ 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9))\
    \ (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list\
    \ 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0\
    \ 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0\
    \ 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (n) (/ (- n min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max result)\n    (cond [(empty? numbers)\
    \ result]\n          [else (rescale_to_unit_iter (rest numbers)\n            \
    \                          (min (first numbers) min)\n                       \
    \               (max (first numbers) max)\n                                  \
    \    (append result (list (/ (- (first numbers) min) (- max min)))))]))\n  (rescale_to_unit_iter\
    \ numbers (first numbers) (first numbers) '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7t9n2r1.rkt:21:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpy7t9n2r1.rkt:22:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 100.0\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpy7t9n2r1.rkt:23:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7t9n2r1.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpy7t9n2r1.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ give"
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define min (apply min numbers))\n  (define max (apply max numbers))\n  (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj23m5ffs.rkt:17:4\n\
    \nmin: undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj23m5ffs.rkt:18:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj23m5ffs.rkt:19:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj23m5ffs.rkt:20:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj23m5ffs.rkt:21:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [scale (/ (- 1.0) (- max min))])\n    (map (lambda (x) (* scale (- x min)))\
    \ numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n\
    \    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:18:4

    actual:     ''(-0.0 -1.0)

    expected:   ''(0.0 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:19:4

    actual:     ''(-1.0 -0.0)

    expected:   ''(1.0 0.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:20:4

    actual:     ''(-0.0 -0.25 -0.5 -0.75 -1.0)

    expected:   ''(0.0 0.25 0.5 0.75 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:21:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:22:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    '
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max result)\n    (if (null? numbers)\n\
    \        result\n        (let ([number (car numbers)])\n          (rescale_to_unit_iter\
    \ (cdr numbers)\n                                (if (< number min) number min)\n\
    \                                (if (> number max) number max)\n            \
    \                    (cons (/ (- number min) (- max min)) result)))))\n  (reverse\
    \ (rescale_to_unit_iter numbers (car numbers) (car numbers) '())))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:23:4

    actual:     ''(+nan.0 +inf.0)

    expected:   ''(0.0 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:24:4

    actual:     ''(+nan.0 -inf.0)

    expected:   ''(1.0 0.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:25:4

    actual:     ''(+nan.0 +inf.0 2.0 1.5 1.3333333333333333)

    expected:   ''(0.0 0.25 0.5 0.75 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:26:4

    actual:     ''(+nan.0 -inf.0 4.0 0.5 0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:27:4

    actual:     ''(+nan.0 -inf.0 4.0 0.5 0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    '
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min)) (rescale-helper (cdr numbers)\
    \ min max))))\n  (rescale-helper numbers (apply min numbers) (apply max numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max result)\n    (if (null? numbers)\n\
    \        result\n        (rescale_to_unit_iter (cdr numbers)\n               \
    \               (min min (car numbers))\n                              (max max\
    \ (car numbers))\n                              (append result (list (/ (- (car\
    \ numbers) min) (- max min)))))))\n  (rescale_to_unit_iter numbers (car numbers)\
    \ (car numbers) '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0\
    \ 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list\
    \ 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0\
    \ 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0\
    \ 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_zpxtd5.rkt:22:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpg_zpxtd5.rkt:23:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 100.0\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpg_zpxtd5.rkt:24:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_zpxtd5.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpg_zpxtd5.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 12.0\n--------------------\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (n) (/ (- n min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (n) (/ (- n min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else (cons (/ (- (first numbers) min) (- max min))\n\
    \                  (rescale_to_unit_helper (rest numbers) min max))]))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else (cons (/ (- (first numbers) min) (- max min))\n\
    \                  (rescale_to_unit_helper (rest numbers) min max))]))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (n) (/ (- n min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [scale (/ (- 1.0) (- max min))])\n    (map (lambda (x) (* scale (- x min)))\
    \ numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n\
    \    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:18:4

    actual:     ''(-0.0 -1.0)

    expected:   ''(0.0 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:19:4

    actual:     ''(-1.0 -0.0)

    expected:   ''(1.0 0.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:20:4

    actual:     ''(-0.0 -0.25 -0.5 -0.75 -1.0)

    expected:   ''(0.0 0.25 0.5 0.75 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:21:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:22:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    '
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max result)\n    (if (null? numbers)\n\
    \        result\n        (let ([number (car numbers)])\n          (rescale_to_unit_iter\
    \ (cdr numbers)\n                                (if (< number min) number min)\n\
    \                                (if (> number max) number max)\n            \
    \                    (cons (/ (- number min) (- max min)) result)))))\n  (reverse\
    \ (rescale_to_unit_iter numbers (car numbers) (car numbers) '())))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:23:4

    actual:     ''(+nan.0 +inf.0)

    expected:   ''(0.0 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:24:4

    actual:     ''(+nan.0 -inf.0)

    expected:   ''(1.0 0.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:25:4

    actual:     ''(+nan.0 +inf.0 2.0 1.5 1.3333333333333333)

    expected:   ''(0.0 0.25 0.5 0.75 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:26:4

    actual:     ''(+nan.0 -inf.0 4.0 0.5 0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbr1x6zl4.rkt:27:4

    actual:     ''(+nan.0 -inf.0 4.0 0.5 0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    '
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [scale (/ (- 1.0) (- max min))])\n    (map (lambda (x) (* scale (- x min)))\
    \ numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n\
    \    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:18:4

    actual:     ''(-0.0 -1.0)

    expected:   ''(0.0 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:19:4

    actual:     ''(-1.0 -0.0)

    expected:   ''(1.0 0.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:20:4

    actual:     ''(-0.0 -0.25 -0.5 -0.75 -1.0)

    expected:   ''(0.0 0.25 0.5 0.75 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:21:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:22:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    '
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max result)\n    (if (null? numbers)\n\
    \        result\n        (rescale_to_unit_iter (cdr numbers)\n               \
    \               (min min (car numbers))\n                              (max max\
    \ (car numbers))\n                              (append result (list (/ (- (car\
    \ numbers) min) (- max min)))))))\n  (rescale_to_unit_iter numbers (car numbers)\
    \ (car numbers) '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0\
    \ 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list\
    \ 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0\
    \ 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0\
    \ 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_zpxtd5.rkt:22:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpg_zpxtd5.rkt:23:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 100.0\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpg_zpxtd5.rkt:24:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_zpxtd5.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpg_zpxtd5.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 12.0\n--------------------\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define min (apply min numbers))\n  (define max (apply max numbers))\n  (define\
    \ range (- max min))\n  (map (lambda (x) (/ (- x min) range)) numbers))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:18:4\n\
    \nmin: undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:19:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:20:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:21:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:22:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max result)\n    (if (null? numbers)\n\
    \        result\n        (let ([n (car numbers)])\n          (rescale_to_unit_iter\
    \ (cdr numbers)\n                                (if (< n min) n min)\n      \
    \                          (if (> n max) n max)\n                            \
    \    (cons (/ (- n min) (- max min)) result)))))\n  (reverse (rescale_to_unit_iter\
    \ numbers (car numbers) (car numbers) '())))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk0fmoxwl.rkt:23:4

    actual:     ''(+nan.0 +inf.0)

    expected:   ''(0.0 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk0fmoxwl.rkt:24:4

    actual:     ''(+nan.0 -inf.0)

    expected:   ''(1.0 0.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk0fmoxwl.rkt:25:4

    actual:     ''(+nan.0 +inf.0 2.0 1.5 1.3333333333333333)

    expected:   ''(0.0 0.25 0.5 0.75 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk0fmoxwl.rkt:26:4

    actual:     ''(+nan.0 -inf.0 4.0 0.5 0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk0fmoxwl.rkt:27:4

    actual:     ''(+nan.0 -inf.0 4.0 0.5 0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    '
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max result)\n    (cond\n      [(empty?\
    \ numbers) result]\n      [else\n       (define first (first numbers))\n     \
    \  (define rest (rest numbers))\n       (define scaled-first (/ (- first min)\
    \ (- max min)))\n       (rescale_to_unit_iter rest min max (append result (list\
    \ scaled-first)))]))\n  (rescale_to_unit_iter numbers (min numbers) (max numbers)\
    \ (list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n\
    \    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3r4ict9k.rkt:23:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(2.0 49.9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3r4ict9k.rkt:24:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(100.0 49.9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3r4ict9k.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3r4ict9k.rkt:26:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(2.0 1.0 5.0 3.0 4.0)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3r4ict9k.rkt:27:4\n\nmin:\
    \ contract violation\n  expected: real?\n  given: '(12.0 11.0 15.0 13.0 14.0)\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale-helper numbers min max)\n    (if (null? numbers)\n        '()\n\
    \        (cons (/ (- (car numbers) min) (- max min))\n              (rescale-helper\
    \ (cdr numbers) min max))))\n  (rescale-helper numbers (apply min numbers) (apply\
    \ max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max result)\n    (if (null? numbers)\n\
    \        result\n        (let* ([n (car numbers)]\n               [new-n (/ (-\
    \ n min) (- max min))])\n          (rescale_to_unit_iter (cdr numbers) min max\
    \ (append result (list new-n))))))\n  (rescale_to_unit_iter numbers (apply min\
    \ numbers) (apply max numbers) '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate rescale_to_unit))\n    (check-equal? (candidate (list\
    \ 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9))\
    \ (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list\
    \ 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0\
    \ 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0\
    \ 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max result)\n    (cond [(empty? numbers)\
    \ (reverse result)]\n          [else (rescale_to_unit_iter (rest numbers)\n  \
    \                                    (min (first numbers) min)\n             \
    \                         (max (first numbers) max)\n                        \
    \              (cons (/ (- (first numbers) min) (- max min)) result))]))\n  (rescale_to_unit_iter\
    \ numbers (first numbers) (first numbers) (list)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjf9teufc.rkt:21:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpjf9teufc.rkt:22:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 100.0\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpjf9teufc.rkt:23:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjf9teufc.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpjf9teufc.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ give"
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define min (apply min numbers))\n  (define max (apply max numbers))\n  (define\
    \ range (- max min))\n  (map (lambda (x) (/ (- x min) range)) numbers))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:18:4\n\
    \nmin: undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:19:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:20:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:21:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2cgv9c4q.rkt:22:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (define (rescale_to_unit_iter numbers min max)\n    (if (null? numbers)\n  \
    \      '()\n        (cons (/ (- (car numbers) min) (- max min))\n            \
    \  (rescale_to_unit_iter (cdr numbers) min max))))\n  (rescale_to_unit_iter numbers\
    \ (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate rescale_to_unit))\n    (check-equal? (candidate (list\
    \ 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9))\
    \ (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list\
    \ 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0\
    \ 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0\
    \ 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [scale (/ (- 1.0) (- max min))])\n    (map (lambda (x) (* scale (- x min)))\
    \ numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n\
    \    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:18:4

    actual:     ''(-0.0 -1.0)

    expected:   ''(0.0 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:19:4

    actual:     ''(-1.0 -0.0)

    expected:   ''(1.0 0.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:20:4

    actual:     ''(-0.0 -0.25 -0.5 -0.75 -1.0)

    expected:   ''(0.0 0.25 0.5 0.75 1.0)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:21:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp79ihiqft.rkt:22:4

    actual:     ''(-0.25 -0.0 -1.0 -0.5 -0.75)

    expected:   ''(0.25 0.0 1.0 0.5 0.75)

    --------------------

    '
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n(list 0.0 0.25 0.5 0.75 1.0)|#\n(define (rescale_to_unit numbers)\n \
    \ (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n     \
    \    [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219001
