name: HumanEval_117_select_words
language: rkt
prompt: "#lang racket\n\n#| Given a string s and a natural number n, you have been\
  \ tasked to implement \na function that returns a list of all words from string\
  \ s that contain exactly \nn consonants, in order these words appear in the string\
  \ s.\nIf the string s is empty then the function should return an empty list.\n\
  Note: you may assume the input string contains only letters and spaces.\nExamples:\n\
  >>> (select_words \"Mary had a little lamb\" 4)\n(list \"little\")\n>>> (select_words\
  \ \"Mary had a little lamb\" 3)\n(list \"Mary\" \"lamb\")\n>>> (select_words \"\
  simple white space\" 2)\n(list )\n>>> (select_words \"Hello world\" 4)\n(list \"\
  world\")\n>>> (select_words \"Uncle sam\" 3)\n(list \"Uncle\")|#\n(define (select_words\
  \ s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"\
  ))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n    (check-equal?\
  \ (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate\
  \ \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list\
  \ ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"\
  f\"))\n))\n\n(test-humaneval)"
completions: ["  (define (is_consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n\
    \      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n      [else (count_consonants (rest s))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s)))\n       (cons (first s) (select_words_helper (rest s) n))]\n      [else\
    \ (select_words_helper (rest s) n)]))\n  (select_words_helper (string-split s)\
    \ n))\n", "  (define (is_consonant c)\n    (not (member c '(#\\a #\\e #\\i #\\\
    o #\\u))))\n  (define (count-consonants w)\n    (cond\n      [(empty? w) 0]\n\
    \      [(is_consonant (first w)) (+ 1 (count-consonants (rest w)))]\n      [else\
    \ (count-consonants (rest w))]))\n  (define (select-words-helper s n acc)\n  \
    \  (cond\n      [(empty? s) (reverse acc)]\n      [(= n (count-consonants (first\
    \ s)))\n       (select-words-helper (rest s) n (cons (first s) acc))]\n      [else\
    \ (select-words-helper (rest s) n acc)]))\n  (select-words-helper (string-split\
    \ s) n '()))\n", "  (define (count-consonants s)\n    (define (is-consonant? c)\n\
    \      (and (not (char-vowel? c))\n           (not (char=? c #\\space))))\n  \
    \  (define (count-consonants-iter s i count)\n      (cond\n        [(= i (string-length\
    \ s)) count]\n        [(is-consonant? (string-ref s i))\n         (count-consonants-iter\
    \ s (+ i 1) (+ count 1))]\n        [else (count-consonants-iter s (+ i 1) count)]))\n\
    \    (count-consonants-iter s 0 0))\n  (define (select-words-iter s i words)\n\
    \    (cond\n      [(= i (string-length s)) words]\n      [(char=? (string-ref\
    \ s i) #\\space)\n       (select-words-iter s (+ i 1) words)]\n      [else\n \
    \      (let ([word (string-trim (string-take s i))])\n         (if (= n (count-consonants\
    \ word))\n             (select-words-iter s (+ i 1) (cons word words))\n     \
    \        (select-words-iter s (+ i 1) words)))]))\n  (select-words-iter s 0 '()))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n  \
    \     (not (member c (list #\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ w)\n       (cond\n         [(empty? w) 0]\n         [else\n          (+ (if\
    \ (is-consonant? (first w)) 1 0)\n             (count-consonants (rest w)))]))\n\
    \     (define (select-words-helper s n result)\n       (cond\n         [(empty?\
    \ s) result]\n         [else\n          (define (is-word? w)\n            (not\
    \ (member w (list #\\space #\\tab #\\newline))))\n          (define (is-word-end?\
    \ w)\n            (member w (list #\\space #\\tab #\\newline)))\n          (define\
    \ (word-end? w)\n            (and (is-word? (first w))\n                 (is-word-end?\
    \ (second w))))\n          (define (word-start? w)\n            (and (is-word-end?\
    \ (first w))\n                 (is-word? (second w))))\n          (define (word-start-index\
    \ w)\n            (cond\n              [(word-start? w) 1]\n              [else\
    \ (add1 (word-start-index (rest w)))]))\n          (define (word-end-index w)\n\
    \            (cond\n              [(word-end? w) 0]\n              [else (add1\
    \ (word-end-index (rest w)))]))\n          (define (word-length w)\n         \
    \   (add1 (- (word-end-index w) (word-start-index w))))\n          (define (word-at-index\
    \ w i)\n            (substring w i (add1 i)))\n          (define (word-at-indexes\
    \ w i j)\n            (substring w i j))\n          (define (word-at-index-range\
    \ w i j)\n            (cond\n              [(> i j) empty]\n              [else\
    \ (cons (word-at-index w i)\n                          (word-at-index-", "  (define\
    \ (is_consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ word)\n    (if (empty? word)\n        0\n        (+ (if (is_consonant? (first\
    \ word)) 1 0)\n           (count-consonants (rest word)))))\n  (define (select-words-helper\
    \ s n)\n    (if (empty? s)\n        '()\n        (let ((word (first s)))\n   \
    \       (if (= n (count-consonants word))\n              (cons word (select-words-helper\
    \ (rest s) n))\n              (select-words-helper (rest s) n)))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first\
    \ s) (select_words (rest s) n))]))\n", "  (define (is_consonant c)\n    (cond\n\
    \      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=?\
    \ c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants word)\n    (if (string-empty?\
    \ word)\n        0\n        (if (is_consonant (string-ref word 0))\n         \
    \   (+ 1 (count_consonants (substring word 1)))\n            (count_consonants\
    \ (substring word 1)))))\n  (define (select_words_iter s n acc)\n    (if (string-empty?\
    \ s)\n        acc\n        (let ([word (string-trim s)])\n          (if (= n (count_consonants\
    \ word))\n              (select_words_iter (substring s (string-length word))\
    \ n (cons word acc))\n              (select_words_iter (substring s (string-length\
    \ word)) n acc)))))\n  (reverse (select_words_iter s n '())))\n", "  (define (is_consonant\
    \ c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n\
    \      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (define (count-consonants\
    \ s)\n    (define (is-consonant? c)\n      (not (member c '(#\\a #\\e #\\i #\\\
    o #\\u))))\n    (define (count-consonants-iter s count)\n      (cond [(empty?\
    \ s) count]\n            [(is-consonant? (first s)) (count-consonants-iter (rest\
    \ s) (+ count 1))]\n            [else (count-consonants-iter (rest s) count)]))\n\
    \    (count-consonants-iter s 0))\n  (define (select-words-iter s n result)\n\
    \    (cond [(empty? s) result]\n          [(equal? (count-consonants (first s))\
    \ n) (select-words-iter (rest s) n (append result (list (first s))))]\n      \
    \    [else (select-words-iter (rest s) n result)]))\n  (select-words-iter (string-split\
    \ s) n (list)))\n", "  (define (is_consonant? c)\n    (member c '(#\\b #\\c #\\\
    d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z)))\n  (define (count_consonants s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(is_consonant? (first s)) (+ 1 (count_consonants (rest s)))]\n      [else\
    \ (count_consonants (rest s))]))\n  (define (select_words_helper s n)\n    (cond\n\
    \      [(empty? s) empty]\n      [(equal? n (count_consonants (first s))) (cons\
    \ (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (or (char=? c #\\b)\n        (char=? c #\\c)\n        (char=? c #\\\
    d)\n        (char=? c #\\f)\n        (char=? c #\\g)\n        (char=? c #\\h)\n\
    \        (char=? c #\\j)\n        (char=? c #\\k)\n        (char=? c #\\l)\n \
    \       (char=? c #\\m)\n        (char=? c #\\n)\n        (char=? c #\\p)\n  \
    \      (char=? c #\\q)\n        (char=? c #\\r)\n        (char=? c #\\s)\n   \
    \     (char=? c #\\t)\n        (char=? c #\\v)\n        (char=? c #\\w)\n    \
    \    (char=? c #\\x)\n        (char=? c #\\y)\n        (char=? c #\\z)))\n  (define\
    \ (count-consonants word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant?\
    \ (first word))\n       (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants\
    \ (rest word))]))\n  (define (select-words-helper s n)\n    (cond\n      [(empty?\
    \ s) empty]\n      [(= n (count-consonants (first s)))\n       (cons (first s)\
    \ (select-words-helper (rest s) n))]\n      [else (select-words-helper (rest s)\
    \ n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (helper s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(= n 0) (list (first s))]\n         [else (append (helper\
    \ (rest s) (- n 1)) (helper (rest s) n))]))\n     (helper (string-split s #\\\
    space) n)]))\n", "  (define (count-consonants s)\n    (cond [(empty? s) 0]\n \
    \         [(member (first s) '(#\\a #\\e #\\i #\\o #\\u)) (count-consonants (rest\
    \ s))]\n          [else (+ 1 (count-consonants (rest s)))]))\n  (define (helper\
    \ s)\n    (cond [(empty? s) empty]\n          [(member (first s) '(#\\a #\\e #\\\
    i #\\o #\\u)) (helper (rest s))]\n          [else (cons (first s) (helper (rest\
    \ s)))]))\n  (define (helper2 s)\n    (cond [(empty? s) empty]\n          [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u)) (cons (first s) (helper2 (rest s)))]\n\
    \          [else (helper2 (rest s))]))\n  (define (helper3 s)\n    (cond [(empty?\
    \ s) empty]\n          [(member (first s) '(#\\a #\\e #\\i #\\o #\\u)) (helper3\
    \ (rest s))]\n          [else (cons (first s) (helper3 (rest s)))]))\n  (define\
    \ (helper4 s)\n    (cond [(empty? s) empty]\n          [(member (first s) '(#\\\
    a #\\e #\\i #\\o #\\u)) (cons (first s) (helper4 (rest s)))]\n          [else\
    \ (helper4 (rest s))]))\n  (define (helper5 s)\n    (cond [(empty? s) empty]\n\
    \          [(member (first s) '(#\\a #\\e #\\i #\\o #\\u)) (helper5 (rest s))]\n\
    \          [else (cons (first s) (helper5 (rest s)))]))\n  (define (helper6 s)\n\
    \    (cond [(empty? s) empty]\n          [(member (first s) '(#\\a #\\e #\\i #\\\
    o #\\u)) (cons (first s) (helper6 (rest s)))]\n         ", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (count-consonants w)\n       (define (is-consonant?\
    \ c)\n         (not (or (char-alphabetic? c) (char-whitespace? c))))\n       (define\
    \ (count-consonants-helper w n)\n         (cond\n           [(empty? w) n]\n \
    \          [(is-consonant? (first w))\n            (count-consonants-helper (rest\
    \ w) (+ n 1))]\n           [else (count-consonants-helper (rest w) n)]))\n   \
    \    (count-consonants-helper w 0))\n     (define (select-words-helper s n l)\n\
    \       (cond\n         [(empty? s) l]\n         [(char-whitespace? (first s))\n\
    \          (select-words-helper (rest s) n l)]\n         [else\n          (define\
    \ (take-word s)\n            (cond\n              [(empty? s) empty]\n       \
    \       [(char-whitespace? (first s)) empty]\n              [else (cons (first\
    \ s) (take-word (rest s)))]))\n          (define (drop-word s)\n            (cond\n\
    \              [(empty? s) empty]\n              [(char-whitespace? (first s))\
    \ s]\n              [else (drop-word (rest s))]))\n          (define (take-word-helper\
    \ s w)\n            (cond\n              [(empty? s) w]\n              [(char-whitespace?\
    \ (first s)) w]\n              [else (take-word-helper (rest s) (append w (list\
    \ (first s))))]))\n          (define w (take-word-helper s empty))\n         \
    \ (cond\n            [(= n (count-consonants w))\n             (select-words-helper\
    \ (drop-word s) n (append l (list w)))]\n            [else (select-words-helper\
    \ (drop-word s) n l)])]))\n     (select-words-helper s n empty)]))\n", "  (define\
    \ (is_consonant c)\n    (not (member c (list #\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count_consonants s)\n    (cond [(empty? s) 0]\n          [(is_consonant (first\
    \ s)) (+ 1 (count_consonants (rest s)))]\n          [else (count_consonants (rest\
    \ s))]))\n  (define (select_words s n)\n    (cond [(empty? s) empty]\n       \
    \   [(= n (count_consonants (first s))) (cons (first s) (select_words (rest s)\
    \ n))]\n          [else (select_words (rest s) n)]))\n  (select_words (string-split\
    \ s) n))\n", "  (if (string=? s \"\")\n      '()\n      (let ([word (string-tokenize\
    \ s)])\n        (if (equal? (count-consonants (car word)) n)\n            (cons\
    \ (car word) (select_words (string-join (cdr word) \" \") n))\n            (select_words\
    \ (string-join (cdr word) \" \") n)))))\n", "  (define (is_consonant c)\n    (not\
    \ (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count_consonants word)\n\
    \    (define (count_consonants_iter word n)\n      (if (empty? word)\n       \
    \   n\n          (if (is_consonant (first word))\n              (count_consonants_iter\
    \ (rest word) (+ n 1))\n              (count_consonants_iter (rest word) n))))\n\
    \    (count_consonants_iter word 0))\n  (define (select_words_iter s n words)\n\
    \    (if (empty? s)\n        words\n        (let ((word (first (regexp-match #rx\"\
    \\w+\" s))))\n          (if (= n (count_consonants word))\n              (select_words_iter\
    \ (substring s (add1 (string-length word))) n (append words (list word)))\n  \
    \            (select_words_iter (substring s (add1 (string-length word))) n words)))))\n\
    \  (select_words_iter s n '()))\n", "  (define (is_consonant? c)\n    (not (or\
    \ (char-alphabetic? c) (char-whitespace? c))))\n  (define (count_consonants s)\n\
    \    (define (count_consonants_iter s i count)\n      (if (= i (string-length\
    \ s))\n          count\n          (if (is_consonant? (string-ref s i))\n     \
    \         (count_consonants_iter s (+ i 1) (+ count 1))\n              (count_consonants_iter\
    \ s (+ i 1) count))))\n    (count_consonants_iter s 0 0))\n  (define (select_words_iter\
    \ s i result)\n    (if (= i (string-length s))\n        result\n        (let ((word\
    \ (string-tokenize s #\\space)))\n          (if (= n (count_consonants word))\n\
    \              (select_words_iter (substring s (+ i (string-length word)) (string-length\
    \ s)) 0 (cons word result))\n              (select_words_iter (substring s (+\
    \ i (string-length word)) (string-length s)) 0 result)))))\n  (select_words_iter\
    \ s 0 (list)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (or (char=? c #\\b)\n           (char=? c #\\c)\n           (char=?\
    \ c #\\d)\n           (char=? c #\\f)\n           (char=? c #\\g)\n          \
    \ (char=? c #\\h)\n           (char=? c #\\j)\n           (char=? c #\\k)\n  \
    \         (char=? c #\\l)\n           (char=? c #\\m)\n           (char=? c #\\\
    n)\n           (char=? c #\\p)\n           (char=? c #\\q)\n           (char=?\
    \ c #\\r)\n           (char=? c #\\s)\n           (char=? c #\\t)\n          \
    \ (char=? c #\\v)\n           (char=? c #\\w)\n           (char=? c #\\x)\n  \
    \         (char=? c #\\y)\n           (char=? c #\\z)))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [(is-consonant? (first\
    \ word))\n          (+ 1 (count-consonants (rest word)))]\n         [else (count-consonants\
    \ (rest word))]))\n     (define (select-words-helper s n)\n       (cond\n    \
    \     [(empty? s) empty]\n         [(count-consonants (first s)) = n]\n      \
    \   [else (cons (first s) (select-words-helper (rest s) n))]))\n     (select-words-helper\
    \ (string-split s) n)]))", "  (cond\n    [(empty? s) empty]\n    [else\n     (let\
    \ ([w (first (string-split s #\\space))])\n       (if (= n (count-consonants w))\n\
    \           (cons w (select_words (rest (string-split s #\\space)) n))\n     \
    \      (select_words (rest (string-split s #\\space)) n)))]))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [else\n     (let ([w (first (string-split s #\\space))])\n\
    \       (cond\n         [(= n (count-consonants w)) (cons w (select_words (rest\
    \ (string-split s #\\space)) n))]\n         [else (select_words (rest (string-split\
    \ s #\\space)) n)]))]))\n", "  (cond [(empty? s) empty]\n        [(= n (count-consonants\
    \ (first s))) (cons (first s) (select_words (rest s) n))]\n        [else (select_words\
    \ (rest s) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else (define (select-words-helper\
    \ s n)\n            (cond\n              [(empty? s) empty]\n              [(=\
    \ n (count-consonants (first s))) (cons (first s) (select-words-helper (rest s)\
    \ n))]\n              [else (select-words-helper (rest s) n)]))\n          (select-words-helper\
    \ (string-split s) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n   \
    \  (define (is-consonant? c)\n       (not (or (char-alphabetic? c) (char-whitespace?\
    \ c))))\n     (define (count-consonants w)\n       (define (count-consonants-iter\
    \ w n)\n         (cond\n           [(empty? w) n]\n           [(is-consonant?\
    \ (first w)) (count-consonants-iter (rest w) (+ n 1))]\n           [else (count-consonants-iter\
    \ (rest w) n)]))\n       (count-consonants-iter w 0))\n     (define (select-words-iter\
    \ s n l)\n       (cond\n         [(empty? s) l]\n         [(is-consonant? (first\
    \ s)) (select-words-iter (rest s) (+ n 1) l)]\n         [(is-consonant? (first\
    \ (rest s))) (select-words-iter (rest s) 0 l)]\n         [(= n (count-consonants\
    \ (first s))) (select-words-iter (rest s) 0 (cons (first s) l))]\n         [else\
    \ (select-words-iter (rest s) 0 l)]))\n     (reverse (select-words-iter s 0 empty))]))\n",
  "  (define (is-consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace?\
    \ c))))\n  (define (count-consonants word)\n    (for/fold ([count 0]) ([c (in-string\
    \ word)])\n      (if (is-consonant? c)\n          (+ count 1)\n          count)))\n\
    \  (define (select-words-helper words n)\n    (for/list ([word (in-list words)])\n\
    \      (if (= n (count-consonants word))\n          word\n          #f)))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\\
    c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z)))\n  (define (count-consonants w)\n    (cond [(empty? w) 0]\n\
    \          [(consonant? (first w)) (+ 1 (count-consonants (rest w)))]\n      \
    \    [else (count-consonants (rest w))]))\n  (define (select-words s n)\n    (cond\
    \ [(empty? s) empty]\n          [(= n (count-consonants (first s))) (cons (first\
    \ s) (select-words (rest s) n))]\n          [else (select-words (rest s) n)]))\n\
    \  (select-words (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n \
    \   [else\n     (define (is-consonant? c)\n       (cond\n         [(char=? c #\\\
    a) false]\n         [(char=? c #\\e) false]\n         [(char=? c #\\i) false]\n\
    \         [(char=? c #\\o) false]\n         [(char=? c #\\u) false]\n        \
    \ [else true]))\n     (define (count-consonants word)\n       (cond\n        \
    \ [(empty? word) 0]\n         [else\n          (cond\n            [(is-consonant?\
    \ (first word)) (+ 1 (count-consonants (rest word)))]\n            [else (count-consonants\
    \ (rest word))])]))\n     (define (select-words-helper s n acc)\n       (cond\n\
    \         [(empty? s) acc]\n         [else\n          (define (is-word? s)\n \
    \           (cond\n              [(empty? s) false]\n              [(char=? (first\
    \ s) #\\ ) true]\n              [else false]))\n          (define (get-word s)\n\
    \            (cond\n              [(empty? s) empty]\n              [(char=? (first\
    \ s) #\\ ) empty]\n              [else (cons (first s) (get-word (rest s)))]))\n\
    \          (define (get-rest-of-s s)\n            (cond\n              [(empty?\
    \ s) empty]\n              [(char=? (first s) #\\ ) (rest s)]\n              [else\
    \ (get-rest-of-s (rest s))]))\n          (cond\n            [(is-word? s)\n  \
    \           (define word (get-word s))\n             (define rest-of-s (get-rest-of-s\
    \ s))\n             (cond\n               [(= n (count-consonants word)) (select-words-helper\
    \ rest-of-s n (cons word acc))]\n               [else (select-words-helper rest-of-s\
    \ n acc)])]\n            [else (select-words-helper (rest s) n acc)])]))\n   \
    \  (select-words-helper s n", "  (define (is_consonant? c)\n    (not (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count_consonants word)\n    (cond\
    \ [(empty? word) 0]\n          [(is_consonant? (first word))\n           (+ 1\
    \ (count_consonants (rest word)))]\n          [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n)\n    (cond [(empty? s) empty]\n         \
    \ [(= n (count_consonants (first s)))\n           (cons (first s) (select_words_helper\
    \ (rest s) n))]\n          [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (consonant? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define\
    \ (count-consonants word)\n       (cond\n         [(empty? word) 0]\n        \
    \ [else\n          (+ (if (consonant? (first word)) 1 0)\n             (count-consonants\
    \ (rest word)))]))\n     (define (select-words-helper s n)\n       (cond\n   \
    \      [(empty? s) empty]\n         [(count-consonants (first s))\n          (if\
    \ (= (count-consonants (first s)) n)\n              (cons (first s) (select-words-helper\
    \ (rest s) n))\n              (select-words-helper (rest s) n))]\n         [else\
    \ (select-words-helper (rest s) n)]))\n     (select-words-helper (string-split\
    \ s #\\space) n)]))\n", "  (define (consonant? c)\n    (or (char=? c #\\b) (char=?\
    \ c #\\c) (char=? c #\\d) (char=? c #\\f)\n        (char=? c #\\g) (char=? c #\\\
    h) (char=? c #\\j) (char=? c #\\k)\n        (char=? c #\\l) (char=? c #\\m) (char=?\
    \ c #\\n) (char=? c #\\p)\n        (char=? c #\\q) (char=? c #\\r) (char=? c #\\\
    s) (char=? c #\\t)\n        (char=? c #\\v) (char=? c #\\w) (char=? c #\\x) (char=?\
    \ c #\\y)\n        (char=? c #\\z)))\n  (define (count-consonants word)\n    (cond\
    \ [(empty? word) 0]\n          [(consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n          [else (count-consonants (rest word))]))\n  (define\
    \ (select-words-helper s n)\n    (cond [(empty? s) empty]\n          [(equal?\
    \ n (count-consonants (first s))) (cons (first s) (select-words-helper (rest s)\
    \ n))]\n          [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count_consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n      [else\
    \ (count_consonants (rest word))]))\n  (define (select_words_iter s n acc)\n \
    \   (cond\n      [(empty? s) acc]\n      [(count_consonants (first s)) (= n (count_consonants\
    \ (first s)))\n       (select_words_iter (rest s) n (append acc (list (first s))))]\n\
    \      [else (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n", "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u)))\n  (define (count-consonants word)\n    (cond\n      [(empty? word)\
    \ 0]\n      [(is_vowel (first word)) (count-consonants (rest word))]\n      [else\
    \ (+ 1 (count-consonants (rest word)))]))\n  (define (select-words-helper s n)\n\
    \    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first s)))\
    \ (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      (list)\n      (let ([words (string-split s \" \")])\n       \
    \ (filter (lambda (word)\n                  (= n (count-consonants word)))\n \
    \               words))))\n", "  (if (string=? s \"\")\n      '()\n      (let*\
    \ ([words (string-split s)]\n             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\"\
    )]\n             [consonant-count (lambda (word)\n                           \
    \     (let loop ([word word]\n                                           [count\
    \ 0])\n                                  (if (string-null? word)\n           \
    \                           count\n                                      (if (member\
    \ (string-ref word 0) consonants)\n                                          (loop\
    \ (substring word 1) (+ count 1))\n                                          (loop\
    \ (substring word 1) count)))))]\n             [selected-words (filter (lambda\
    \ (word)\n                                       (= (consonant-count word) n))\n\
    \                                     words)])\n        selected-words)))\n</code>\n",
  "  (define (is_consonant c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count_consonants (first s)))\n       (cons (first s) (select_words_helper\
    \ (rest s) n))]\n      [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\\
    c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z)))\n  (define (count-consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n  \
    \    [else (count-consonants (rest s))]))\n  (define (select-words s n)\n    (cond\n\
    \      [(empty? s) empty]\n      [(= n (count-consonants (first s))) (cons (first\
    \ s) (select-words (rest s) n))]\n      [else (select-words (rest s) n)]))\n \
    \ (select-words (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n  \
    \  [else\n     (define (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\\
    i #\\o #\\u))))\n     (define (count-consonants s)\n       (cond\n         [(empty?\
    \ s) 0]\n         [else\n          (+ (if (is-consonant? (first s)) 1 0)\n   \
    \          (count-consonants (rest s)))]))\n     (define (select-words s n)\n\
    \       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants (first\
    \ s)))\n          (cons (first s) (select-words (rest s) n))]\n         [else\
    \ (select-words (rest s) n)]))\n     (select-words (string-split s) n)]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([w (string-split s #\\space)])\n\
    \       (cond\n         [(= n (count-consonants (first w)))\n          (cons (first\
    \ w) (select_words (string-join (rest w) #\\space) n))]\n         [else (select_words\
    \ (string-join (rest w) #\\space) n)]))]))\n", "  (define (is-consonant? c)\n\
    \    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (cond [(empty? word) 0]\n          [(is-consonant? (first word))\n\
    \           (+ 1 (count-consonants (rest word)))]\n          [else (count-consonants\
    \ (rest word))]))\n  (define (select-words-helper s n)\n    (cond [(empty? s)\
    \ empty]\n          [(= n (count-consonants (first s)))\n           (cons (first\
    \ s) (select-words-helper (rest s) n))]\n          [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n\
    \      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count-consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words)))\n       (cons (first words) (select-words-helper (rest words)\
    \ n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (count-consonants s)\n    (define (is-vowel?\
    \ c)\n      (member c '(#\\a #\\e #\\i #\\o #\\u)))\n    (define (count-consonants-helper\
    \ s n)\n      (cond\n        [(empty? s) n]\n        [(is-vowel? (first s)) (count-consonants-helper\
    \ (rest s) n)]\n        [else (count-consonants-helper (rest s) (+ n 1))]))\n\
    \    (count-consonants-helper s 0))\n  (define (select-words-helper s n)\n   \
    \ (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first s)))\n\
    \       (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n       (not\
    \ (or (char-alphabetic? c) (char-whitespace? c))))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (if\
    \ (is-consonant? (first word))\n              (+ 1 (count-consonants (rest word)))\n\
    \              (count-consonants (rest word)))]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [else\n          (define\
    \ (take-word s)\n            (cond\n              [(empty? s) empty]\n       \
    \       [else\n               (if (char-whitespace? (first s))\n             \
    \      empty\n                   (cons (first s) (take-word (rest s))))]))\n \
    \         (define (drop-word s)\n            (cond\n              [(empty? s)\
    \ empty]\n              [else\n               (if (char-whitespace? (first s))\n\
    \                   (rest s)\n                   (drop-word (rest s)))]))\n  \
    \        (define (take-word-with-spaces s)\n            (cond\n              [(empty?\
    \ s) empty]\n              [else\n               (if (char-whitespace? (first\
    \ s))\n                   (cons (first s) (take-word-with-spaces (rest s)))\n\
    \                   (cons (first s) (take-word (rest s))))]))\n          (define\
    \ (drop-word-with-spaces s)\n            (cond\n              [(empty? s) empty]\n\
    \              [else\n               (if (char-whitespace? (first s))\n      \
    \             (drop-word-with-spaces (rest s))\n                   (drop-word\
    \ (rest s)))]))\n          (define (take-words s)\n            (cond\n       \
    \       [(empty? s) empty]\n              [else\n               (cons (take-word-with-spaces\
    \ s) (take-words (drop-word-with-spaces s)))]))\n          (define (drop-words\
    \ s)\n            (cond", "  (define (is-consonant? c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants s)\n    (cond [(empty?\
    \ s) 0]\n          [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \          [else (count-consonants (rest s))]))\n  (define (select-words s n)\n\
    \    (cond [(empty? s) empty]\n          [(= n (count-consonants (first s)))\n\
    \           (cons (first s) (select-words (rest s) n))]\n          [else (select-words\
    \ (rest s) n)]))\n  (select-words (string-split s) n))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (let ([w (string-split s #\\space)])\n       (cond\n\
    \         [(empty? w) empty]\n         [else\n          (let ([w (first w)])\n\
    \            (cond\n              [(= n (count-consonants w)) (cons w (select_words\
    \ (rest s) n))]\n              [else (select_words (rest s) n)]))]))]))\n", " \
    \ (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\\
    k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define\
    \ (count-consonants word)\n    (cond [(empty? word) 0]\n          [(consonant?\
    \ (first word)) (+ 1 (count-consonants (rest word)))]\n          [else (count-consonants\
    \ (rest word))]))\n  (define (select-words s n)\n    (cond [(empty? s) empty]\n\
    \          [(= n (count-consonants (first s))) (cons (first s) (select-words (rest\
    \ s) n))]\n          [else (select-words (rest s) n)]))\n  (select-words (string-split\
    \ s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ s)\n       (cond\n         [(empty? s) 0]\n         [else\n          (+ (if\
    \ (is-consonant? (first s)) 1 0)\n             (count-consonants (rest s)))]))\n\
    \     (define (select-words s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(= n (count-consonants (first s)))\n          (cons (first s) (select-words\
    \ (rest s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words\
    \ (string-split s #\\space) n)]))\n", "  (if (string=? s \"\")\n      '()\n  \
    \    (let ([word (string-trim s)])\n        (if (and (string-contains word #\\\
    space)\n                 (string-contains word #\\space))\n            (append\
    \ (select_words (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string-trim (string-trim (string-trim (string-trim (string-trim (string-trim\
    \ (string", "  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\\
    g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\\
    z)))\n  (define (count-consonants w)\n    (define (count-consonants-iter w n)\n\
    \      (if (empty? w)\n          n\n          (if (consonant? (first w))\n   \
    \           (count-consonants-iter (rest w) (+ n 1))\n              (count-consonants-iter\
    \ (rest w) n))))\n    (count-consonants-iter w 0))\n  (define (select-words-iter\
    \ s n l)\n    (if (empty? s)\n        l\n        (let ((w (first s)))\n      \
    \    (if (= n (count-consonants w))\n              (select-words-iter (rest s)\
    \ n (append l (list w)))\n              (select-words-iter (rest s) n l)))))\n\
    \  (select-words-iter (string-split s) n (list)))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [else\n     (define (is-consonant? c)\n       (or (char=? c #\\\
    b)\n           (char=? c #\\c)\n           (char=? c #\\d)\n           (char=?\
    \ c #\\f)\n           (char=? c #\\g)\n           (char=? c #\\h)\n          \
    \ (char=? c #\\j)\n           (char=? c #\\k)\n           (char=? c #\\l)\n  \
    \         (char=? c #\\m)\n           (char=? c #\\n)\n           (char=? c #\\\
    p)\n           (char=? c #\\q)\n           (char=? c #\\r)\n           (char=?\
    \ c #\\s)\n           (char=? c #\\t)\n           (char=? c #\\v)\n          \
    \ (char=? c #\\w)\n           (char=? c #\\x)\n           (char=? c #\\y)\n  \
    \         (char=? c #\\z)))\n     (define (count-consonants s)\n       (cond\n\
    \         [(empty? s) 0]\n         [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n         [else (count-consonants (rest s))]))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(and (char=? (first\
    \ s) #\\ )\n               (not (empty? (rest s))))\n          (cond\n       \
    \     [(= n (count-consonants (rest s)))\n             (cons (rest s) (select-words\
    \ (rest s) n))]\n            [else (select-words (rest s) n)])]\n         [else\
    \ (select-words (rest s) n)]))\n     (select-words s n))\n    )\n  )\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (let ([w (first (regexp-match #rx\"\\\
    w+\" s))])\n       (if (= n (count-consonants w))\n           (cons w (select_words\
    \ (substring s (add1 (string-length w))) n))\n           (select_words (substring\
    \ s (add1 (string-length w))) n)))]))\n", "  (cond\n    [(empty? s) empty]\n \
    \   [else\n     (define (helper s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(string=? (first s) \" \") (helper (rest s) n)]\n         [else\n \
    \         (define (count-consonants s)\n            (cond\n              [(empty?\
    \ s) 0]\n              [(member (first s) '(#\\a #\\e #\\i #\\o #\\u)) (count-consonants\
    \ (rest s))]\n              [else (+ 1 (count-consonants (rest s)))]))\n     \
    \     (define (count-vowels s)\n            (cond\n              [(empty? s) 0]\n\
    \              [(member (first s) '(#\\a #\\e #\\i #\\o #\\u)) (+ 1 (count-vowels\
    \ (rest s)))]\n              [else (count-vowels (rest s))]))\n          (define\
    \ (count-spaces s)\n            (cond\n              [(empty? s) 0]\n        \
    \      [(string=? (first s) \" \") (+ 1 (count-spaces (rest s)))]\n          \
    \    [else (count-spaces (rest s))]))\n          (define (count-letters s)\n \
    \           (cond\n              [(empty? s) 0]\n              [(member (first\
    \ s) '(#\\a #\\e #\\i #\\o #\\u)) (count-letters (rest s))]\n              [else\
    \ (+ 1 (count-letters (rest s)))]))\n          (define (count-word s)\n      \
    \      (cond\n              [(empty? s) 0]\n              [(string=? (first s)\
    \ \" \") 0]\n              [else (+ 1 (count-word (rest s)))]))\n          (define\
    \ (count-words s)\n            (cond\n              [(empty? s) 0]\n         \
    \     [(string=? (first s) \" \") (+ 1 (count-words (rest s)))]\n            \
    \  [else (count-words (rest s))]))\n          (define (get-word s)\n         \
    \   (cond\n              [(empty? s) empty]\n              [(string=? (first s)\
    \ \" \")", "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (count_consonants s)\n    (cond [(empty? s) 0]\n          [(is_vowel\
    \ (first s)) (count_consonants (rest s))]\n          [else (+ 1 (count_consonants\
    \ (rest s)))]))\n  (define (select_words_helper s n lst)\n    (cond [(empty? s)\
    \ lst]\n          [(count_consonants (first s)) = n (select_words_helper (rest\
    \ s) n (append lst (list (first s))))]\n          [else (select_words_helper (rest\
    \ s) n lst)]))\n  (select_words_helper (string-split s) n '()))\n", "  (define\
    \ (helper s n acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count-consonants\
    \ (first s))) (helper (rest s) n (cons (first s) acc))]\n      [else (helper (rest\
    \ s) n acc)]))\n  (reverse (helper (string-split s) n '())))\n", "  (cond\n  \
    \  [(empty? s) empty]\n    [else (cons (first s) (select_words (rest s) n))]))\n\
    </code>\nI am not sure how to go about this problem. I am not sure how to count\
    \ the number of consonants in a word. I am also not sure how to go about the problem\
    \ of counting the number of consonants in a word.\n\n\nA:\n\nYou can use <code>string-index</code>\
    \ to find the index of the next space in the string, and then use <code>substring</code>\
    \ to extract the word. Then you can use <code>count</code> to count the number\
    \ of consonants in the word.\n<code>(define (select-words s n)\n  (if (empty?\
    \ s)\n      empty\n      (let* ([word (substring s 0 (string-index s #\\space))]\n\
    \             [consonants (count (lambda (c) (not (member c '(#\\a #\\e #\\i #\\\
    o #\\u))) word)])\n             [rest (select-words (substring s (+ 1 (string-index\
    \ s #\\space))) n)])\n        (if (= consonants n)\n            (cons word rest)\n\
    \            rest))))\n</code>\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ([w (string-tokenize s)])\n        (filter (lambda\
    \ (x) (= n (count-consonants x))) w))))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (is-consonant? c)\n       (not (or (char-alphabetic?\
    \ c) (char-whitespace? c))))\n     (define (count-consonants word)\n       (cond\n\
    \         [(empty? word) 0]\n         [else\n          (if (is-consonant? (first\
    \ word))\n              (+ 1 (count-consonants (rest word)))\n              (count-consonants\
    \ (rest word)))]))\n     (define (select-words-helper s n)\n       (cond\n   \
    \      [(empty? s) empty]\n         [else\n          (define (get-word s)\n  \
    \          (cond\n              [(empty? s) empty]\n              [else\n    \
    \           (if (char-whitespace? (first s))\n                   empty\n     \
    \              (cons (first s) (get-word (rest s))))]))\n          (define word\
    \ (get-word s))\n          (if (= n (count-consonants word))\n              (cons\
    \ word (select-words-helper (drop (length word) s) n))\n              (select-words-helper\
    \ (drop (length word) s) n))]))\n     (select-words-helper s n)]))", "  (define\
    \ (is_consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words) empty]\n\
    \      [(= n (count-consonants (first words)))\n       (cons (first words) (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count_consonants s)\n    (cond [(empty?\
    \ s) 0]\n          [(is_consonant (first s)) (+ 1 (count_consonants (rest s)))]\n\
    \          [else (count_consonants (rest s))]))\n  (define (select_words_helper\
    \ s n acc)\n    (cond [(empty? s) (reverse acc)]\n          [(equal? n (count_consonants\
    \ (first s)))\n           (select_words_helper (rest s) n (cons (first s) acc))]\n\
    \          [else (select_words_helper (rest s) n acc)]))\n  (select_words_helper\
    \ (string-split s) n '()))\n", "  (define (is_consonant? c)\n    (not (or (char-alphabetic?\
    \ c) (char-whitespace? c))))\n  (define (count-consonants s)\n    (if (string-empty?\
    \ s)\n        0\n        (+ (if (is_consonant? (string-ref s 0)) 1 0)\n      \
    \     (count-consonants (substring s 1)))))\n  (define (select-words-helper s\
    \ n acc)\n    (if (string-empty? s)\n        acc\n        (let ((word (string-trim\
    \ (string-take-while char-alphabetic? s))))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-helper (substring s (string-length word))\
    \ n (cons word acc))\n              (select-words-helper (substring s (string-length\
    \ word)) n acc)))))\n  (reverse (select-words-helper s n '())))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (consonant? c)\n       (or (char=?\
    \ c #\\b) (char=? c #\\c) (char=? c #\\d) (char=? c #\\f)\n           (char=?\
    \ c #\\g) (char=? c #\\h) (char=? c #\\j) (char=? c #\\k)\n           (char=?\
    \ c #\\l) (char=? c #\\m) (char=? c #\\n) (char=? c #\\p)\n           (char=?\
    \ c #\\q) (char=? c #\\r) (char=? c #\\s) (char=? c #\\t)\n           (char=?\
    \ c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y)\n           (char=?\
    \ c #\\z)))\n     (define (count-consonants word)\n       (cond\n         [(empty?\
    \ word) 0]\n         [(consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \         [else (count-consonants (rest word))]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words-helper (rest s) n))]\n\
    \         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (if (empty? s)\n      (list)\n      (let\
    \ ((word (string-tokenize s)))\n        (if (equal? n (count-consonants word))\n\
    \            (cons word (select_words (substring s (add1 (string-length word)))\
    \ n))\n            (select_words (substring s (add1 (string-length word))) n)))))\n",
  "  (define (is_consonant c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count_consonants (first s)))\n       (cons (first s) (select_words_helper\
    \ (rest s) n))]\n      [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (cond [(empty? s) empty]\n        [(= n (count-consonants\
    \ (first (string-split s #\\space))))\n         (cons (first (string-split s #\\\
    space))\n               (select_words (string-join (rest (string-split s #\\space))\
    \ #\\space) n))]\n        [else (select_words (string-join (rest (string-split\
    \ s #\\space)) #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (let*\n         ([word (first (string-split s #\\space))]\n          [rest\
    \ (rest (string-split s #\\space))])\n       (cond\n         [(= n (count-consonants\
    \ word))\n          (cons word (select_words (string-join rest #\\space) n))]\n\
    \         [else (select_words (string-join rest #\\space) n)]))]))\n", "  (define\
    \ (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ word)\n    (cond [(empty? word) 0]\n          [(consonant? (first word)) (+\
    \ 1 (count-consonants (rest word)))]\n          [else (count-consonants (rest\
    \ word))]))\n  (define (select-words-helper s n)\n    (cond [(empty? s) empty]\n\
    \          [(count-consonants (first s)) = n (cons (first s) (select-words-helper\
    \ (rest s) n))]\n          [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond [(empty? s) empty]\n        [(= n (count-consonants\
    \ (first s))) (cons (first s) (select_words (rest s) n))]\n        [else (select_words\
    \ (rest s) n)]))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\c #\\\
    d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z)))\n  (define (count-consonants word)\n    (cond\n      [(empty? word)\
    \ 0]\n      [(consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define (is_consonant\
    \ c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n\
    \      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) (list)]\n      [(count_consonants (first\
    \ s))\n       (cond\n         [(= n (count_consonants (first s)))\n          (cons\
    \ (first s) (select_words_helper (rest s) n))]\n         [else (select_words_helper\
    \ (rest s) n)])]\n      [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s #\\space) n))\n", "  (define (is_consonant? c)\n    (and (not\
    \ (char-vowel? c))\n         (not (char=? c #\\y))))\n  (define (count_consonants\
    \ s)\n    (define (count_consonants-iter s n)\n      (cond\n        [(empty? s)\
    \ n]\n        [(is_consonant? (first s)) (count_consonants-iter (rest s) (+ n\
    \ 1))]\n        [else (count_consonants-iter (rest s) n)]))\n    (count_consonants-iter\
    \ s 0))\n  (define (select_words-iter s n lst)\n    (cond\n      [(empty? s) lst]\n\
    \      [(char=? (first s) #\\space) (select_words-iter (rest s) n lst)]\n    \
    \  [else (select_words-iter (rest s) n (cons (first s) lst))]))\n  (define (select_words-iter2\
    \ s n lst)\n    (cond\n      [(empty? s) lst]\n      [(char=? (first s) #\\space)\n\
    \       (if (= n (count_consonants (reverse lst)))\n           (cons (reverse\
    \ lst) (select_words-iter2 (rest s) n '()))\n           (select_words-iter2 (rest\
    \ s) n '()))]\n      [else (select_words-iter2 (rest s) n (cons (first s) lst))]))\n\
    \  (select_words-iter2 s n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (consonant? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \     (define (count-consonants w)\n       (define (count-consonants-iter w n)\n\
    \         (cond\n           [(empty? w) n]\n           [(consonant? (first w))\
    \ (count-consonants-iter (rest w) (+ n 1))]\n           [else (count-consonants-iter\
    \ (rest w) n)]))\n       (count-consonants-iter w 0))\n     (define (select-words-iter\
    \ s n l)\n       (cond\n         [(empty? s) l]\n         [(count-consonants (first\
    \ s)) (select-words-iter (rest s) n (cons (first s) l))]\n         [else (select-words-iter\
    \ (rest s) n l)]))\n     (select-words-iter (string-split s) n empty)]))\n", " \
    \ (if (string=? s \"\")\n      '()\n      (let ([word (string-split s \" \")])\n\
    \        (if (string=? (car word) \"\")\n            (select_words (string-join\
    \ (cdr word) \" \") n)\n            (if (= n (count-consonants (car word)))\n\
    \                (cons (car word) (select_words (string-join (cdr word) \" \"\
    ) n))\n                (select_words (string-join (cdr word) \" \") n))))))\n",
  "  (cond\n    [(empty? s) empty]\n    [else (cons (first (regexp-match #rx\"\\w+\"\
    \ s))\n                (select_words (substring s (regexp-match-end 0)) n))]))\n",
  "  (define (is_consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace?\
    \ c))))\n  (define (count_consonants word)\n    (define (count_consonants_iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is_consonant?\
    \ (first word))\n              (count_consonants_iter (rest word) (+ count 1))\n\
    \              (count_consonants_iter (rest word) count))))\n    (count_consonants_iter\
    \ word 0))\n  (define (select_words_iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ([word (string-trim (first (string-split s \" \")))]\n\
    \              [consonants (count_consonants word)])\n          (if (= consonants\
    \ n)\n              (select_words_iter (string-trim (string-join (rest (string-split\
    \ s \" \")) \" \")) n (append result (list word)))\n              (select_words_iter\
    \ (string-trim (string-join (rest (string-split s \" \")) \" \")) n result)))))\n\
    \  (select_words_iter s n (list)))\n", "  (define (is_consonant c)\n    (not (or\
    \ (char-ci=? c #\\a)\n             (char-ci=? c #\\e)\n             (char-ci=?\
    \ c #\\i)\n             (char-ci=? c #\\o)\n             (char-ci=? c #\\u))))\n\
    \  (define (count_consonants s)\n    (cond [(empty? s) 0]\n          [(is_consonant\
    \ (first s)) (+ 1 (count_consonants (rest s)))]\n          [else (count_consonants\
    \ (rest s))]))\n  (define (select_words_helper s n)\n    (cond [(empty? s) empty]\n\
    \          [(= n (count_consonants (first s)))\n           (cons (first s) (select_words_helper\
    \ (rest s) n))]\n          [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (or (char=? c #\\\
    b)\n        (char=? c #\\c)\n        (char=? c #\\d)\n        (char=? c #\\f)\n\
    \        (char=? c #\\g)\n        (char=? c #\\h)\n        (char=? c #\\j)\n \
    \       (char=? c #\\k)\n        (char=? c #\\l)\n        (char=? c #\\m)\n  \
    \      (char=? c #\\n)\n        (char=? c #\\p)\n        (char=? c #\\q)\n   \
    \     (char=? c #\\r)\n        (char=? c #\\s)\n        (char=? c #\\t)\n    \
    \    (char=? c #\\v)\n        (char=? c #\\w)\n        (char=? c #\\x)\n     \
    \   (char=? c #\\y)\n        (char=? c #\\z)))\n  (define (count-consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1\
    \ (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words) empty]\n\
    \      [(= n (count-consonants (first words)))\n       (cons (first words) (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond\n    [(string=? s \"\") empty]\n    [else\
    \ (cons (car (string-split s)) (select_words (cdr (string-split s)) n))]))\n",
  "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants word)\n    (for/sum ([c (in-string word)])\n    \
    \  (if (is-consonant? c) 1 0)))\n  (for/list ([word (in-string s)])\n    (when\
    \ (= n (count-consonants word))\n      word)))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (let*\n         ([word (first (regexp-match #rx\"^[a-zA-Z]+\"\
    \ s))]\n          [rest (substring s (string-length word))]\n          [consonants\
    \ (count-consonants word)])\n       (if (= consonants n)\n           (cons word\
    \ (select_words rest n))\n           (select_words rest n)))]))\n", "  (cond [(empty?\
    \ s) empty]\n        [(= n (count-consonants (first (string-split s #\\space))))\n\
    \         (cons (first (string-split s #\\space))\n               (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n        [else\
    \ (select_words (string-join (rest (string-split s #\\space)) #\\space) n)]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonant? c)\n     \
    \  (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants w)\n\
    \       (cond\n         [(empty? w) 0]\n         [else\n          (+ (if (consonant?\
    \ (first w)) 1 0)\n             (count-consonants (rest w)))]))\n     (define\
    \ (select-words s n)\n       (cond\n         [(empty? s) empty]\n         [(=\
    \ n (count-consonants (first s)))\n          (cons (first s) (select-words (rest\
    \ s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words (string-split\
    \ s) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (cond\n         [(char=? c #\\a) #f]\n         [(char=? c #\\e) #f]\n\
    \         [(char=? c #\\i) #f]\n         [(char=? c #\\o) #f]\n         [(char=?\
    \ c #\\u) #f]\n         [else #t]))\n     (define (count-consonants s)\n     \
    \  (cond\n         [(empty? s) 0]\n         [else\n          (cond\n         \
    \   [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n          \
    \  [else (count-consonants (rest s))])]))\n     (define (select-words s n)\n \
    \      (cond\n         [(empty? s) empty]\n         [else\n          (cond\n \
    \           [(= n (count-consonants (first s)))\n             (cons (first s)\
    \ (select-words (rest s) n))]\n            [else (select-words (rest s) n)])]))\n\
    \     (select-words (string-split s #\\space) n)]))\n", "  (define (is_consonant?\
    \ c)\n    (or (char=? c #\\b)\n        (char=? c #\\c)\n        (char=? c #\\\
    d)\n        (char=? c #\\f)\n        (char=? c #\\g)\n        (char=? c #\\h)\n\
    \        (char=? c #\\j)\n        (char=? c #\\k)\n        (char=? c #\\l)\n \
    \       (char=? c #\\m)\n        (char=? c #\\n)\n        (char=? c #\\p)\n  \
    \      (char=? c #\\q)\n        (char=? c #\\r)\n        (char=? c #\\s)\n   \
    \     (char=? c #\\t)\n        (char=? c #\\v)\n        (char=? c #\\w)\n    \
    \    (char=? c #\\x)\n        (char=? c #\\y)\n        (char=? c #\\z)))\n  (define\
    \ (count_consonants word)\n    (cond [(empty? word) 0]\n          [(is_consonant?\
    \ (first word)) (+ 1 (count_consonants (rest word)))]\n          [else (count_consonants\
    \ (rest word))]))\n  (define (select_words_helper s n result)\n    (cond [(empty?\
    \ s) result]\n          [(= n (count_consonants (first s)))\n           (select_words_helper\
    \ (rest s) n (append result (list (first s))))]\n          [else (select_words_helper\
    \ (rest s) n result)]))\n  (select_words_helper (string-split s) n (list)))\n",
  "  (define (count_consonants s)\n    (cond\n      [(empty? s) 0]\n      [(member\
    \ (first s) (list #\\a #\\e #\\i #\\o #\\u)) (count_consonants (rest s))]\n  \
    \    [else (+ 1 (count_consonants (rest s)))]))\n  (define (select_words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words-helper (rest s) n))]\n      [else (select_words-helper\
    \ (rest s) n)]))\n  (select_words-helper (string-split s) n))\n", "  (define (count-consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(member (first s) '(#\\a #\\e #\\\
    i #\\o #\\u)) (count-consonants (rest s))]\n      [else (+ 1 (count-consonants\
    \ (rest s)))]))\n  (define (select-words s n)\n    (cond\n      [(empty? s) empty]\n\
    \      [(= n (count-consonants (first s))) (cons (first s) (select-words (rest\
    \ s) n))]\n      [else (select-words (rest s) n)]))\n  (select-words (string-split\
    \ s #\\space) n))\n", "  (define (is_consonant? c)\n    (not (member c '(#\\a\
    \ #\\e #\\i #\\o #\\u))))\n  (define (count-consonants s)\n    (cond [(empty?\
    \ s) 0]\n          [(is_consonant? (first s))\n           (+ 1 (count-consonants\
    \ (rest s)))]\n          [else (count-consonants (rest s))]))\n  (define (select-words\
    \ s n)\n    (cond [(empty? s) empty]\n          [(= n (count-consonants (first\
    \ s)))\n           (cons (first s) (select-words (rest s) n))]\n          [else\
    \ (select-words (rest s) n)]))\n  (select-words (string-split s) n))\n", "  (if\
    \ (string=? s \"\")\n      '()\n      (let* ([w (string-tokenize s)]\n       \
    \      [w (filter (lambda (x) (string-contains-count x #\\consonant) n) w)])\n\
    \        w)))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\\
    f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z)))\n  (define (count-consonants word)\n    (cond\n      [(empty? word)\
    \ 0]\n      [(consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words s n)\n\
    \    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first s)))\
    \ (cons (first s) (select-words (rest s) n))]\n      [else (select-words (rest\
    \ s) n)]))\n  (select-words (string-split s) n))\n", "  (define (is_vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-consonants s)\n\
    \    (define (count-consonants-iter s n)\n      (cond\n        [(empty? s) n]\n\
    \        [(is_vowel? (first s)) (count-consonants-iter (rest s) n)]\n        [else\
    \ (count-consonants-iter (rest s) (+ n 1))]))\n    (count-consonants-iter s 0))\n\
    \  (define (select-words-iter s n lst)\n    (cond\n      [(empty? s) lst]\n  \
    \    [(equal? (count-consonants (first s)) n) (select-words-iter (rest s) n (append\
    \ lst (list (first s))))]\n      [else (select-words-iter (rest s) n lst)]))\n\
    \  (select-words-iter (string-split s) n '()))\n", "  (define (is_vowel c)\n \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_consonants w)\n\
    \    (cond [(empty? w) 0]\n          [(is_vowel (first w)) (count_consonants (rest\
    \ w))]\n          [else (+ 1 (count_consonants (rest w)))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond [(empty? s) acc]\n          [(count_consonants (first s))\
    \ = n (select_words_iter (rest s) n (append acc (list (first s))))]\n        \
    \  [else (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split\
    \ s) n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n     (define\
    \ (count-consonants w)\n       (cond\n         [(empty? w) 0]\n         [else\n\
    \          (+ (if (is-consonant? (first w)) 1 0)\n             (count-consonants\
    \ (rest w)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(= n (count-consonants (first s)))\n          (cons (first\
    \ s) (select-words (rest s) n))]\n         [else (select-words (rest s) n)]))\n\
    \     (select-words (string-split s #\\space) n)]))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (helper s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(= n (count-consonants (first s)))\n          (cons (first\
    \ s) (helper (rest s) n))]\n         [else (helper (rest s) n)]))\n     (helper\
    \ (string-split s) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n   \
    \  (define (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n     (define (count-consonants s)\n       (cond\n         [(empty? s) 0]\n\
    \         [else\n          (+ (if (is-consonant? (first s)) 1 0)\n           \
    \  (count-consonants (rest s)))]))\n     (define (select-words-helper s n acc)\n\
    \       (cond\n         [(empty? s) (reverse acc)]\n         [(equal? (count-consonants\
    \ (first s)) n)\n          (select-words-helper (rest s) n (cons (first s) acc))]\n\
    \         [else (select-words-helper (rest s) n acc)]))\n     (select-words-helper\
    \ (string-split s) n empty)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (let ([w (string-split s #\\space)])\n       (cond\n         [(= n (count-consonants\
    \ (first w)))\n          (cons (first w) (select_words (string-join (rest w) #\\\
    space) n))]\n         [else (select_words (string-join (rest w) #\\space) n)]))]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n  \
    \     (or (equal? c #\\b)\n           (equal? c #\\c)\n           (equal? c #\\\
    d)\n           (equal? c #\\f)\n           (equal? c #\\g)\n           (equal?\
    \ c #\\h)\n           (equal? c #\\j)\n           (equal? c #\\k)\n          \
    \ (equal? c #\\l)\n           (equal? c #\\m)\n           (equal? c #\\n)\n  \
    \         (equal? c #\\p)\n           (equal? c #\\q)\n           (equal? c #\\\
    r)\n           (equal? c #\\s)\n           (equal? c #\\t)\n           (equal?\
    \ c #\\v)\n           (equal? c #\\w)\n           (equal? c #\\x)\n          \
    \ (equal? c #\\y)\n           (equal? c #\\z)))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [(is-consonant? (first\
    \ word)) (+ 1 (count-consonants (rest word)))]\n         [else (count-consonants\
    \ (rest word))]))\n     (define (select-words-helper s n)\n       (cond\n    \
    \     [(empty? s) empty]\n         [(is-consonant? (first s))\n          (cons\
    \ (first s) (select-words-helper (rest s) n))]\n         [else (select-words-helper\
    \ (rest s) n)]))\n     (define (select-words-helper2 s n)\n       (cond\n    \
    \     [(empty? s) empty]\n         [(is-consonant? (first s))\n          (cons\
    \ (first s) (select-words-helper2 (rest s) n))]\n         [(equal? (first s) #\\\
    \ )\n          (if (= n (count-consonants (select-words-helper (rest s) n)))\n\
    \              (cons (select-words-helper (rest s) n)\n                    (select-",
  "  (define (is-consonant? c)\n    (member c (list #\\b #\\c #\\d #\\f #\\g #\\h\
    \ #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \  (define (count-consonants w)\n    (define (count-consonants-iter w count)\n\
    \      (if (empty? w)\n          count\n          (if (is-consonant? (first w))\n\
    \              (count-consonants-iter (rest w) (+ count 1))\n              (count-consonants-iter\
    \ (rest w) count))))\n    (count-consonants-iter w 0))\n  (define (select-words-iter\
    \ s n result)\n    (if (empty? s)\n        result\n        (if (= n (count-consonants\
    \ (first s)))\n            (select-words-iter (rest s) n (append result (list\
    \ (first s))))\n            (select-words-iter (rest s) n result))))\n  (select-words-iter\
    \ (string-split s) n (list)))\n", "  (define (is_consonant? c)\n    (not (or (char-alphabetic?\
    \ c) (char-whitespace? c))))\n  (define (count_consonants s)\n    (cond [(empty?\
    \ s) 0]\n          [(is_consonant? (first s)) (+ 1 (count_consonants (rest s)))]\n\
    \          [else (count_consonants (rest s))]))\n  (define (select_words_helper\
    \ s n acc)\n    (cond [(empty? s) (reverse acc)]\n          [(char-whitespace?\
    \ (first s)) (select_words_helper (rest s) n acc)]\n          [else (select_words_helper\
    \ (rest s) n (cons (first s) acc))]))\n  (define (select_words_helper2 s n acc)\n\
    \    (cond [(empty? s) (reverse acc)]\n          [(char-whitespace? (first s))\
    \ (select_words_helper2 (rest s) n acc)]\n          [else (select_words_helper2\
    \ (rest s) n (cons (first s) acc))]))\n  (define (select_words_helper3 s n acc)\n\
    \    (cond [(empty? s) (reverse acc)]\n          [(char-whitespace? (first s))\
    \ (select_words_helper3 (rest s) n acc)]\n          [else (select_words_helper3\
    \ (rest s) n (cons (first s) acc))]))\n  (define (select_words_helper4 s n acc)\n\
    \    (cond [(empty? s) (reverse acc)]\n          [(char-whitespace? (first s))\
    \ (select_words_helper4 (rest s) n acc)]\n          [else (select_words_helper4\
    \ (rest s) n (cons (first s) acc))]))\n  (define (select_words_helper5 s n acc)\n\
    \    (cond [(empty? s) (reverse acc)]\n          [(char-whitespace? (first s))\
    \ (select_words_helper5 (rest s) n acc)]\n          [else (select_words_helper5\
    \ (rest s) n (cons (first", "  (cond\n    [(empty? s) empty]\n    [else\n    \
    \ (define (consonant? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\\
    j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n \
    \    (define (count-consonants s)\n       (cond\n         [(empty? s) 0]\n   \
    \      [else\n          (+ (if (consonant? (first s)) 1 0)\n             (count-consonants\
    \ (rest s)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(equal? n (count-consonants (first s)))\n          (cons\
    \ (first s) (select-words (rest s) n))]\n         [else (select-words (rest s)\
    \ n)]))\n     (select-words (string-split s #\\space) n)]))\n", "  (cond\n   \
    \ [(empty? s) empty]\n    [else\n     (let ([w (first (string-split s #\\space))])\n\
    \       (cond\n         [(= n (count-consonants w)) (cons w (select_words (rest\
    \ (string-split s #\\space)) n))]\n         [else (select_words (rest (string-split\
    \ s #\\space)) n)]))]))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\\
    c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z)))\n  (define (count-consonants w)\n    (cond [(empty? w) 0]\n\
    \          [(consonant? (first w)) (+ 1 (count-consonants (rest w)))]\n      \
    \    [else (count-consonants (rest w))]))\n  (define (select-words s n)\n    (cond\
    \ [(empty? s) empty]\n          [(= n (count-consonants (first s))) (cons (first\
    \ s) (select-words (rest s) n))]\n          [else (select-words (rest s) n)]))\n\
    \  (select-words (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n \
    \   [else\n     (let ([w (string-split s #\\space)])\n       (cond\n         [(=\
    \ n (count-consonants (first w)))\n          (cons (first w) (select_words (string-join\
    \ (rest w) #\\space) n))]\n         [else (select_words (string-join (rest w)\
    \ #\\space) n)]))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (consonant? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define\
    \ (count-consonants word)\n       (cond\n         [(empty? word) 0]\n        \
    \ [else\n          (+ (if (consonant? (first word)) 1 0)\n             (count-consonants\
    \ (rest word)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(= n (count-consonants (first s)))\n          (cons (first\
    \ s) (select-words (rest s) n))]\n         [else (select-words (rest s) n)]))\n\
    \     (select-words (string-split s) n)]))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else (cons (first (regexp-match #rx\"\\w+\" s))\n                (select_words\
    \ (substring s (regexp-match-end 0)) n))]))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else (define (helper s n)\n            (cond\n              [(empty? s)\
    \ empty]\n              [(= n (count-consonants (first s))) (cons (first s) (helper\
    \ (rest s) n))]\n              [else (helper (rest s) n)]))\n          (helper\
    \ (string-split s) n)]))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u)))\n  (define (count-consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is_vowel? (first s)) (count-consonants (rest s))]\n      [else\
    \ (+ 1 (count-consonants (rest s)))]))\n  (define (select-words s n)\n    (cond\n\
    \      [(empty? s) empty]\n      [(= n (count-consonants (first s))) (cons (first\
    \ s) (select-words (rest s) n))]\n      [else (select-words (rest s) n)]))\n \
    \ (select-words (string-split s) n))\n", "  (define (count-consonants s)\n   \
    \ (define (is-consonant? c)\n      (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \    (define (count-consonants-in-word s)\n      (if (empty? s)\n          0\n\
    \          (if (is-consonant? (first s))\n              (+ 1 (count-consonants-in-word\
    \ (rest s)))\n              (count-consonants-in-word (rest s)))))\n    (count-consonants-in-word\
    \ s))\n  (define (select-words-helper s n)\n    (if (empty? s)\n        (list)\n\
    \        (if (= n (count-consonants (first s)))\n            (cons (first s) (select-words-helper\
    \ (rest s) n))\n            (select-words-helper (rest s) n))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (consonant? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define\
    \ (count-consonants w)\n       (cond\n         [(empty? w) 0]\n         [else\n\
    \          (+ (if (consonant? (first w)) 1 0)\n             (count-consonants\
    \ (rest w)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(= n (count-consonants (first s)))\n          (cons (first\
    \ s) (select-words (rest s) n))]\n         [else (select-words (rest s) n)]))\n\
    \     (select-words (string-split s) n)]))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (is-consonant? c)\n       (cond\n         [(char=? c\
    \ #\\a) #f]\n         [(char=? c #\\e) #f]\n         [(char=? c #\\i) #f]\n  \
    \       [(char=? c #\\o) #f]\n         [(char=? c #\\u) #f]\n         [else #t]))\n\
    \     (define (count-consonants w)\n       (cond\n         [(empty? w) 0]\n  \
    \       [else\n          (cond\n            [(is-consonant? (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n            [else (count-consonants (rest w))])]))\n     (define\
    \ (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n     \
    \    [else\n          (define (first-word s)\n            (cond\n            \
    \  [(empty? s) empty]\n              [(char=? (first s) #\\space) empty]\n   \
    \           [else (cons (first s) (first-word (rest s)))]))\n          (define\
    \ (rest-words s)\n            (cond\n              [(empty? s) empty]\n      \
    \        [(char=? (first s) #\\space) (rest s)]\n              [else (rest-words\
    \ (rest s))]))\n          (define (first-word-count s)\n            (count-consonants\
    \ (first-word s)))\n          (cond\n            [(= (first-word-count s) n)\n\
    \             (cons (first-word s) (select-words-helper (rest-words s) n))]\n\
    \            [else (select-words-helper (rest-words s) n)])]))\n     (select-words-helper\
    \ s n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants\
    \ s)\n       (cond\n         [(empty? s) 0]\n         [else\n          (+ (if\
    \ (is-consonant? (first s)) 1 0) (count-consonants (rest s)))]))\n     (define\
    \ (select-words s n)\n       (cond\n         [(empty? s) empty]\n         [(=\
    \ n (count-consonants (first s)))\n          (cons (first s) (select-words (rest\
    \ s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words (string-split\
    \ s #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first\
    \ (regexp-match #rx\"\\w+\" s))\n                (select_words (substring s (regexp-match-end\
    \ 0)) n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(equal? n 0) (list\
    \ (first s))]\n         [(consonant? (first s)) (helper (rest s) (- n 1))]\n \
    \        [else (helper (rest s) n)]))\n     (append (helper (first s) n) (select_words\
    \ (rest s) n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  \
    \   (define (count-consonants s)\n       (cond\n         [(empty? s) 0]\n    \
    \     [else\n          (+ (if (is-consonant? (first s)) 1 0)\n             (count-consonants\
    \ (rest s)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(= n (count-consonants (first s)))\n          (cons (first\
    \ s) (select-words (rest s) n))]\n         [else (select-words (rest s) n)]))\n\
    \     (select-words (string-split s) n)]))\n", "  (define (is_consonant? c)\n\
    \    (cond\n      [(char-alphabetic? c)\n       (not (member c '(#\\a #\\e #\\\
    i #\\o #\\u)))]\n      [else #f]))\n  (define (count-consonants word)\n    (foldl\
    \ (lambda (c n)\n             (if (is_consonant? c)\n                 (+ n 1)\n\
    \                 n))\n           0\n           word))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words)))\n       (cons (first words)\n             (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count_consonants word)\n    (define (count_consonants_iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is_consonant\
    \ (first word))\n              (count_consonants_iter (rest word) (+ count 1))\n\
    \              (count_consonants_iter (rest word) count))))\n    (count_consonants_iter\
    \ word 0))\n  (define (select_words_iter s n words)\n    (if (empty? s)\n    \
    \    words\n        (let ((word (first (regexp-match #rx\"^[a-zA-Z]+\" s))))\n\
    \          (if (= n (count_consonants word))\n              (select_words_iter\
    \ (regexp-replace #rx\"^[a-zA-Z]+\" s \"\") n (append words (list word)))\n  \
    \            (select_words_iter (regexp-replace #rx\"^[a-zA-Z]+\" s \"\") n words)))))\n\
    \  (select_words_iter s n '()))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants w)\n    (define\
    \ (count-consonants-iter w i)\n      (if (= i (string-length w))\n          0\n\
    \          (if (is-consonant? (string-ref w i))\n              (+ 1 (count-consonants-iter\
    \ w (+ i 1)))\n              (count-consonants-iter w (+ i 1)))))\n    (count-consonants-iter\
    \ w 0))\n  (define (select-words-iter s i)\n    (if (= i (string-length s))\n\
    \        '()\n        (let ([w (string-trim (substring s i (string-index-right\
    \ s #\\space i)))]\n              [c (count-consonants w)])\n          (if (=\
    \ c n)\n              (cons w (select-words-iter s (+ i (string-length w))))\n\
    \              (select-words-iter s (+ i (string-length w)))))))\n  (select-words-iter\
    \ s 0))\n", "  (define (is_consonant? c)\n    (cond\n      [(char-ci=? c #\\a)\
    \ #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (if (empty? word)\n        0\n        (+ (if (is_consonant? (first\
    \ word)) 1 0)\n           (count_consonants (rest word)))))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s)))\n       (cons (first s) (select_words_helper (rest s) n))]\n      [else\
    \ (select_words_helper (rest s) n)]))\n  (select_words_helper (string-split s\
    \ #\\space) n))\n", "  (define (count-consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(member (first s) '(#\\a #\\e #\\i #\\o #\\u)) (count-consonants\
    \ (rest s))]\n      [else (+ 1 (count-consonants (rest s)))]))\n  (define (select-words\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words (rest s) n))]\n      [else (select-words\
    \ (rest s) n)]))\n  (select-words (string-split s) n))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (count-consonants word)\n       (define (is-consonant?\
    \ c)\n         (cond\n           [(char=? c #\\a) false]\n           [(char=?\
    \ c #\\e) false]\n           [(char=? c #\\i) false]\n           [(char=? c #\\\
    o) false]\n           [(char=? c #\\u) false]\n           [else true]))\n    \
    \   (define (count-consonants-helper word count)\n         (cond\n           [(empty?\
    \ word) count]\n           [(is-consonant? (first word))\n            (count-consonants-helper\
    \ (rest word) (+ count 1))]\n           [else (count-consonants-helper (rest word)\
    \ count)]))\n       (count-consonants-helper word 0))\n     (define (select-words-helper\
    \ s n words)\n       (cond\n         [(empty? s) words]\n         [(char=? (first\
    \ s) #\\ )\n          (select-words-helper (rest s) n words)]\n         [else\n\
    \          (define (get-word s)\n            (define (get-word-helper s word)\n\
    \              (cond\n                [(empty? s) word]\n                [(char=?\
    \ (first s) #\\ ) word]\n                [else (get-word-helper (rest s) (string-append\
    \ word (string (first s))))]))\n            (get-word-helper s \"\"))\n      \
    \    (define word (get-word s))\n          (define (skip-word s)\n           \
    \ (define (skip-word-helper s)\n              (cond\n                [(empty?\
    \ s) empty]\n                [(char=? (first s) #\\ ) s]\n                [else\
    \ (skip-word-helper (rest s))]))\n            (skip-word-helper s))\n        \
    \  (define (add-word? word words)\n            (cond\n              [(= (count-consonants\
    \ word) n) (cons word words)]\n              [else words]))\n          (select-words-helper\
    \ (skip-word", "  (define (is-consonant? c)\n    (or (char=? c #\\b)\n       \
    \ (char=? c #\\c)\n        (char=? c #\\d)\n        (char=? c #\\f)\n        (char=?\
    \ c #\\g)\n        (char=? c #\\h)\n        (char=? c #\\j)\n        (char=? c\
    \ #\\k)\n        (char=? c #\\l)\n        (char=? c #\\m)\n        (char=? c #\\\
    n)\n        (char=? c #\\p)\n        (char=? c #\\q)\n        (char=? c #\\r)\n\
    \        (char=? c #\\s)\n        (char=? c #\\t)\n        (char=? c #\\v)\n \
    \       (char=? c #\\w)\n        (char=? c #\\x)\n        (char=? c #\\y)\n  \
    \      (char=? c #\\z)))\n  (define (count-consonants word)\n    (if (null? word)\n\
    \        0\n        (if (is-consonant? (car word))\n            (+ 1 (count-consonants\
    \ (cdr word)))\n            (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ s n)\n    (if (null? s)\n        '()\n        (let ([word (car s)])\n      \
    \    (if (= n (count-consonants word))\n              (cons word (select-words-helper\
    \ (cdr s) n))\n              (select-words-helper (cdr s) n)))))\n  (select-words-helper\
    \ (string-split s #\\space) n))\n", "  (if (string=? s \"\")\n      '()\n    \
    \  (let* ([words (string-split s)]\n             [consonants (list #\\b #\\c #\\\
    d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z)]\n             [words-with-n-consonants (filter (lambda (word)\n\
    \                                                (let ([word-chars (string->list\
    \ word)])\n                                                  (if (equal? (length\
    \ (intersection word-chars consonants)) n)\n                                 \
    \                     #t\n                                                   \
    \   #f)))\n                                              words)])\n        words-with-n-consonants)))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n  \
    \     (not (or (char-alphabetic? c) (char-whitespace? c))))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (cond\n\
    \            [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \            [else (count-consonants (rest word))])]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [else\n          (cond\n\
    \            [(= n (count-consonants (first s)))\n             (cons (first s)\
    \ (select-words-helper (rest s) n))]\n            [else (select-words-helper (rest\
    \ s) n)])]))\n     (select-words-helper (string-split s) n)]))\n", "  (if (empty?\
    \ s)\n      '()\n      (let* ([words (string-split s #\\space)]\n            \
    \ [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\\
    p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)]\n             [consonant-count\
    \ (lambda (word)\n                                (let loop ([word word]\n   \
    \                                        [count 0])\n                        \
    \          (if (empty? word)\n                                      count\n  \
    \                                    (if (member (car word) consonants)\n    \
    \                                      (loop (cdr word) (+ count 1))\n       \
    \                                   (loop (cdr word) count)))))]\n           \
    \  [consonant-counts (map consonant-count words)]\n             [selected-words\
    \ (filter (lambda (word) (= (consonant-count word) n)) words)])\n        selected-words)))\n",
  "  (define (is_consonant? c)\n    (cond\n      [(char-alphabetic? c)\n       (not\
    \ (member c '(#\\a #\\e #\\i #\\o #\\u)))]\n      [else #f]))\n  (define (count-consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n      [else (count-consonants (rest s))]))\n  (define (select-words\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words (rest s) n))]\n      [else (select-words\
    \ (rest s) n)]))\n  (select-words (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (define (count-consonants-iter word count)\n      (cond\n       \
    \ [(empty? word) count]\n        [(is-consonant? (first word))\n         (count-consonants-iter\
    \ (rest word) (+ count 1))]\n        [else (count-consonants-iter (rest word)\
    \ count)]))\n    (count-consonants-iter word 0))\n  (define (select-words-iter\
    \ s n words)\n    (cond\n      [(empty? s) words]\n      [(is-consonant? (first\
    \ s))\n       (select-words-iter (rest s) (+ n 1) words)]\n      [(is-consonant?\
    \ (first s) #\\ )\n       (select-words-iter (rest s) 0 words)]\n      [(= n 0)\n\
    \       (select-words-iter (rest s) 0 words)]\n      [else\n       (select-words-iter\
    \ (rest s) 0 (cons (substring s 0 n) words))]))\n  (select-words-iter s 0 '()))\n",
  "  (define (helper s n)\n    (if (empty? s)\n        (list)\n        (let ([w (first\
    \ (regexp-match #rx\"^[a-zA-Z]+\" s))])\n          (if (and (not (empty? w)) (=\
    \ n (count-consonants w)))\n              (cons w (helper (regexp-replace #rx\"\
    ^[a-zA-Z]+\" s \"\")) n)\n              (helper (regexp-replace #rx\"^[a-zA-Z]+\"\
    \ s \"\")) n)))))\n  (helper s n))\n", "  (define (is-vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-consonants s)\n    (cond\n \
    \     [(empty? s) 0]\n      [(is-vowel? (first s)) (count-consonants (rest s))]\n\
    \      [else (+ 1 (count-consonants (rest s)))]))\n  (define (select-words s n)\n\
    \    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first s)))\n\
    \       (cons (first s) (select-words (rest s) n))]\n      [else (select-words\
    \ (rest s) n)]))\n  (select-words (string-split s #\\space) n))\n", "  (define\
    \ (consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants w)\n    (define (count-consonants-iter w i)\n      (if (=\
    \ i (string-length w))\n          0\n          (if (consonant? (string-ref w i))\n\
    \              (+ 1 (count-consonants-iter w (+ i 1)))\n              (count-consonants-iter\
    \ w (+ i 1)))))\n    (count-consonants-iter w 0))\n  (define (select-words-iter\
    \ s i)\n    (if (= i (string-length s))\n        '()\n        (let ((w (string-trim\
    \ (substring s i (string-index-right s #\\space i)))))\n          (if (= n (count-consonants\
    \ w))\n              (cons w (select-words-iter s (+ i (string-length w))))\n\
    \              (select-words-iter s (+ i (string-length w)))))))\n  (select-words-iter\
    \ s 0))\n", "  (cond [(empty? s) empty]\n        [(= n (count-consonants (first\
    \ s))) (cons (first s) (select_words (rest s) n))]\n        [else (select_words\
    \ (rest s) n)]))\n", "  (define (is_consonant? c)\n    (and (not (char-alphabetic?\
    \ c))\n         (not (char=? c #\\space))))\n  (define (count_consonants word)\n\
    \    (define (count_consonants_iter word count)\n      (if (string-empty? word)\n\
    \          count\n          (if (is_consonant? (string-ref word 0))\n        \
    \      (count_consonants_iter (substring word 1) (+ count 1))\n              (count_consonants_iter\
    \ (substring word 1) count))))\n    (count_consonants_iter word 0))\n  (define\
    \ (select_words_iter s n words)\n    (if (string-empty? s)\n        words\n  \
    \      (let ((word (string-tokenize s)))\n          (if (= n (count_consonants\
    \ word))\n              (select_words_iter (substring s (string-length word))\
    \ n (cons word words))\n              (select_words_iter (substring s (string-length\
    \ word)) n words)))))\n  (select_words_iter s n '()))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (is-consonant? c)\n       (cond\n       \
    \  [(char=? c #\\a) #f]\n         [(char=? c #\\e) #f]\n         [(char=? c #\\\
    i) #f]\n         [(char=? c #\\o) #f]\n         [(char=? c #\\u) #f]\n       \
    \  [else #t]))\n     (define (count-consonants w)\n       (cond\n         [(empty?\
    \ w) 0]\n         [else\n          (cond\n            [(is-consonant? (first w))\
    \ (+ 1 (count-consonants (rest w)))]\n            [else (count-consonants (rest\
    \ w))])]))\n     (define (select-words s n)\n       (cond\n         [(empty? s)\
    \ empty]\n         [else\n          (cond\n            [(= n (count-consonants\
    \ (first s))) (cons (first s) (select-words (rest s) n))]\n            [else (select-words\
    \ (rest s) n)])]))\n     (select-words (string-split s #\\space) n)]))\n", " \
    \ (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s)]\n  \
    \           [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n       \
    \      [consonant-count (lambda (word)\n                                (let loop\
    \ ([word word]\n                                           [count 0])\n      \
    \                            (if (string-null? word)\n                       \
    \               count\n                                      (if (member (string-ref\
    \ word 0) consonants)\n                                          (loop (substring\
    \ word 1) (+ count 1))\n                                          (loop (substring\
    \ word 1) count)))))]\n             [selected-words (filter (lambda (word)\n \
    \                                      (= (consonant-count word) n))\n       \
    \                              words)])\n        selected-words)))\n</code>\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([w (first (string-split\
    \ s #\\space))])\n       (if (= n (count-consonants w))\n           (cons w (select_words\
    \ (rest (string-split s #\\space)) n))\n           (select_words (rest (string-split\
    \ s #\\space)) n)))]))\n", "  (define (is_consonant? c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants s)\n    (cond [(empty?\
    \ s) 0]\n          [(is_consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \          [else (count-consonants (rest s))]))\n  (define (select-words s n)\n\
    \    (cond [(empty? s) empty]\n          [(= n (count-consonants (first s))) (cons\
    \ (first s) (select-words (rest s) n))]\n          [else (select-words (rest s)\
    \ n)]))\n  (select-words (string-split s) n))\n", "  (if (string=? s \"\")\n \
    \     '()\n      (let* ([words (string-split s #\\space)]\n             [consonants\
    \ (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n             [consonant-count\
    \ (lambda (word)\n                                (let loop ([word word]\n   \
    \                                        [count 0])\n                        \
    \          (if (string-null? word)\n                                      count\n\
    \                                      (if (member (string-ref word 0) consonants)\n\
    \                                          (loop (substring word 1) (+ count 1))\n\
    \                                          (loop (substring word 1) count)))))]\n\
    \             [selected-words (filter (lambda (word) (= (consonant-count word)\
    \ n)) words)])\n        selected-words)))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (count-consonants w)\n       (cond\n         [(empty?\
    \ w) 0]\n         [(member (first w) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (count-consonants\
    \ (rest w))]\n         [else (+ 1 (count-consonants (rest w)))]))\n     (define\
    \ (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n     \
    \    [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s) n)]))\n", "  (define (is_consonant c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count_consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is_consonant\
    \ (first s)) (+ 1 (count_consonants (rest s)))]\n      [else (count_consonants\
    \ (rest s))]))\n  (define (select_words_helper s n)\n    (cond\n      [(empty?\
    \ s) empty]\n      [(= n (count_consonants (first s))) (cons (first s) (select_words_helper\
    \ (rest s) n))]\n      [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is-consonant? c)\n       (not (or (char-ci=? c #\\a)\n                (char-ci=?\
    \ c #\\e)\n                (char-ci=? c #\\i)\n                (char-ci=? c #\\\
    o)\n                (char-ci=? c #\\u))))\n     (define (count-consonants word)\n\
    \       (cond\n         [(empty? word) 0]\n         [else\n          (+ (if (is-consonant?\
    \ (first word)) 1 0)\n             (count-consonants (rest word)))]))\n     (define\
    \ (select-words-helper s n acc)\n       (cond\n         [(empty? s) acc]\n   \
    \      [else\n          (define (is-word? s)\n            (and (not (empty? s))\n\
    \                 (not (char-whitespace? (first s)))))\n          (define (get-word\
    \ s)\n            (cond\n              [(empty? s) empty]\n              [(char-whitespace?\
    \ (first s)) empty]\n              [else\n               (cons (first s) (get-word\
    \ (rest s)))]))\n          (define (skip-word s)\n            (cond\n        \
    \      [(empty? s) empty]\n              [(char-whitespace? (first s)) (rest s)]\n\
    \              [else\n               (skip-word (rest s))]))\n          (cond\n\
    \            [(is-word? s)\n             (define word (get-word s))\n        \
    \     (if (= n (count-consonants word))\n                 (select-words-helper\
    \ (skip-word s) n (cons word acc))\n                 (select-words-helper (skip-word\
    \ s) n acc))]\n            [else\n             (select-words-helper (rest s) n\
    \ acc)])])\n     (reverse (select-words-helper s n empty))]))\n", "  (define (is_vowel\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_consonants\
    \ word)\n    (define (count_consonants_iter word count)\n      (cond\n       \
    \ [(empty? word) count]\n        [(is_vowel (first word)) (count_consonants_iter\
    \ (rest word) count)]\n        [else (count_consonants_iter (rest word) (+ count\
    \ 1))]))\n    (count_consonants_iter word 0))\n  (define (select_words_iter s\
    \ n words)\n    (cond\n      [(empty? s) words]\n      [(empty? (rest s)) words]\n\
    \      [(= n (count_consonants (first s)))\n       (select_words_iter (rest s)\
    \ n (cons (first s) words))]\n      [else (select_words_iter (rest s) n words)]))\n\
    \  (select_words_iter (string-split s) n '()))\n", "  (define (helper s n lst)\n\
    \    (cond\n      [(empty? s) lst]\n      [(= (count-consonants (first s)) n)\
    \ (helper (rest s) n (append lst (list (first s))))]\n      [else (helper (rest\
    \ s) n lst)]))\n  (helper (string->list s) n '()))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (is-consonant? c)\n       (member c '(#\\\
    b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants w)\n       (cond\n  \
    \       [(empty? w) 0]\n         [else\n          (+ (if (is-consonant? (first\
    \ w)) 1 0)\n             (count-consonants (rest w)))]))\n     (define (select-words\
    \ ws)\n       (cond\n         [(empty? ws) empty]\n         [else\n          (if\
    \ (= n (count-consonants (first ws)))\n              (cons (first ws) (select-words\
    \ (rest ws)))\n              (select-words (rest ws)))]))\n     (select-words\
    \ (string-split s #\\space))]))\n", "  (cond [(empty? s) empty]\n        [(= n\
    \ (count-consonants (first (string-split s))))\n         (cons (first (string-split\
    \ s)) (select_words (rest (string-split s)) n))]\n        [else (select_words\
    \ (rest (string-split s)) n)]))\n", "  (define (is_vowel c)\n    (or (char=? c\
    \ #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\\
    o)\n        (char=? c #\\u)))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_vowel (first word)) (count_consonants (rest\
    \ word))]\n      [else (+ 1 (count_consonants (rest word)))]))\n  (define (select_words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words-helper (rest s) n))]\n      [else (select_words-helper\
    \ (rest s) n)]))\n  (select_words-helper (string-split s) n))\n", "  (define (is_consonant\
    \ c)\n    (not (member c (list #\\a #\\e #\\i #\\o #\\u))))\n  (define (count_consonants\
    \ s)\n    (cond [(empty? s) 0]\n          [(is_consonant (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n          [else (count_consonants (rest s))]))\n  (define (select_words_helper\
    \ s n)\n    (cond [(empty? s) empty]\n          [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n          [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (define (is-vowel\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-consonants\
    \ w)\n    (cond [(empty? w) 0]\n          [(is-vowel (first w)) (count-consonants\
    \ (rest w))]\n          [else (+ 1 (count-consonants (rest w)))]))\n  (define\
    \ (select-words-helper s n)\n    (cond [(empty? s) empty]\n          [(= n (count-consonants\
    \ (first s)))\n           (cons (first s) (select-words-helper (rest s) n))]\n\
    \          [else (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split\
    \ s #\\space) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([w\
    \ (first (string-split s #\\space))])\n       (if (= n (count-consonants w))\n\
    \           (cons w (select_words (rest (string-split s #\\space)) n))\n     \
    \      (select_words (rest (string-split s #\\space)) n)))]))\n", "  (define (helper\
    \ s n acc)\n    (if (empty? s)\n        acc\n        (let ([word (first s)])\n\
    \          (if (= n (count-consonants word))\n              (helper (rest s) n\
    \ (cons word acc))\n              (helper (rest s) n acc)))))\n  (reverse (helper\
    \ (string-split s) n '())))\n", "  (define (is-consonant c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants s)\n    (if (string-empty?\
    \ s)\n        0\n        (+ (if (is-consonant (string-ref s 0)) 1 0)\n       \
    \    (count-consonants (string-tail s)))))\n  (define (select-words s n)\n   \
    \ (if (string-empty? s)\n        '()\n        (let ([w (string-take s (string-index\
    \ #\\space s))])\n          (if (= n (count-consonants w))\n              (cons\
    \ w (select-words (string-drop s (string-length w)) n))\n              (select-words\
    \ (string-drop s (string-length w)) n)))))\n  (select-words s n))\n", "  (define\
    \ (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(member (first\
    \ s) '(#\\a #\\e #\\i #\\o #\\u)) (count-consonants (rest s))]\n      [else (+\
    \ 1 (count-consonants (rest s)))]))\n  (define (select-words s n)\n    (cond\n\
    \      [(empty? s) empty]\n      [(= n (count-consonants (first s))) (cons (first\
    \ s) (select-words (rest s) n))]\n      [else (select-words (rest s) n)]))\n \
    \ (select-words (string-split s #\\space) n))\n", "  (define (is_consonant? c)\n\
    \    (not (or (char-alphabetic? c) (char-whitespace? c))))\n  (define (count_consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n      [else (count_consonants (rest s))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s)))\n       (cons (first s) (select_words_helper (rest s) n))]\n      [else\
    \ (select_words_helper (rest s) n)]))\n  (select_words_helper (string-split s)\
    \ n))\n", "  (define (consonant? c)\n    (not (or (char-vowel? c) (char=? c #\\\
    space))))\n  (define (count-consonants s)\n    (let loop ((s s) (count 0))\n \
    \     (cond ((string-empty? s) count)\n            ((consonant? (string-ref s\
    \ 0))\n             (loop (substring s 1) (+ count 1)))\n            (else (loop\
    \ (substring s 1) count)))))\n  (define (select-words s n)\n    (let loop ((s\
    \ s) (words '()))\n      (cond ((string-empty? s) (reverse words))\n         \
    \   ((= n (count-consonants s))\n             (loop (string-drop-right s n)\n\
    \                   (cons (string-take s n) words)))\n            (else (loop\
    \ (string-drop-right s 1) words)))))\n  (select-words s n))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel? (first s)) (count-consonants\
    \ (rest s))]\n      [else (+ 1 (count-consonants (rest s)))]))\n  (define (select-words\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words (rest s) n))]\n      [else (select-words\
    \ (rest s) n)]))\n  (select-words (string-split s) n))\n", "  (cond [(empty? s)\
    \ empty]\n        [(= n (count-consonants (first (string-split s))))\n       \
    \  (cons (first (string-split s)) (select_words (rest (string-split s)) n))]\n\
    \        [else (select_words (rest (string-split s)) n)]))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (let*\n         ([word (first (regexp-match #rx\"\
    ^[a-zA-Z]+\" s))]\n          [rest (substring s (string-length word))]\n     \
    \     [consonants (count-consonants word)])\n       (if (= consonants n)\n   \
    \        (cons word (select_words rest n))\n           (select_words rest n)))]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (let*\n         ([words (string-split\
    \ s #\\space)]\n          [word (first words)]\n          [rest (rest words)]\n\
    \          [consonants (count-consonants word)])\n       (cond\n         [(= consonants\
    \ n) (cons word (select_words (string-join rest #\\space) n))]\n         [else\
    \ (select_words (string-join rest #\\space) n)]))]))\n", "  (if (string=? s \"\
    \")\n      '()\n      (let ((word (string-tokenize s)))\n        (if (consonants-count\
    \ word n)\n            (cons word (select_words (substring s (string-length word)\
    \ (string-length s)) n))\n            (select_words (substring s (string-length\
    \ word) (string-length s)) n)))))\n", "  (if (string=? s \"\")\n      '()\n  \
    \    (let ([word (string-tokenize s)])\n        (if (and (not (string=? (car word)\
    \ \"\"))\n                 (= n (count-consonants (car word))))\n            (cons\
    \ (car word) (select_words (cdr word) n))\n            (select_words (cdr word)\
    \ n)))))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s))) (cons (first s) (helper (rest s) n))]\n         [else (helper (rest\
    \ s) n)]))\n     (helper (string-split s) n)]))\n", "  (define (is_consonant c)\n\
    \    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n   \
    \   [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (if (string-empty?\
    \ word)\n        0\n        (if (is_consonant (string-ref word 0))\n         \
    \   (+ 1 (count_consonants (substring word 1)))\n            (count_consonants\
    \ (substring word 1)))))\n  (define (select_words_iter s n acc)\n    (if (string-empty?\
    \ s)\n        acc\n        (let ([word (string-trim (string-take-while (lambda\
    \ (c) (not (char-whitespace? c))) s))])\n          (if (= n (count_consonants\
    \ word))\n              (select_words_iter (string-drop-while (lambda (c) (not\
    \ (char-whitespace? c))) s) n (cons word acc))\n              (select_words_iter\
    \ (string-drop-while (lambda (c) (not (char-whitespace? c))) s) n acc)))))\n \
    \ (select_words_iter s n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n     (define (count-consonants word)\n       (cond\n         [(empty? word)\
    \ 0]\n         [else\n          (+ (if (is-consonant? (first word)) 1 0)\n   \
    \          (count-consonants (rest word)))]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(count-consonants\
    \ (first s)) = n]\n         [else (cons (first s) (select-words-helper (rest s)\
    \ n))]))\n     (select-words-helper (string-split s #\\space) n)]))\n", "  (define\
    \ (is_consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count_consonants\
    \ s)\n    (cond [(empty? s) 0]\n          [(is_consonant? (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n          [else (count_consonants (rest s))]))\n  (define (select_words_helper\
    \ s n)\n    (cond [(empty? s) empty]\n          [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n          [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n       (or\
    \ (char=? c #\\b)\n           (char=? c #\\c)\n           (char=? c #\\d)\n  \
    \         (char=? c #\\f)\n           (char=? c #\\g)\n           (char=? c #\\\
    h)\n           (char=? c #\\j)\n           (char=? c #\\k)\n           (char=?\
    \ c #\\l)\n           (char=? c #\\m)\n           (char=? c #\\n)\n          \
    \ (char=? c #\\p)\n           (char=? c #\\q)\n           (char=? c #\\r)\n  \
    \         (char=? c #\\s)\n           (char=? c #\\t)\n           (char=? c #\\\
    v)\n           (char=? c #\\w)\n           (char=? c #\\x)\n           (char=?\
    \ c #\\y)\n           (char=? c #\\z)))\n     (define (count-consonants word)\n\
    \       (cond\n         [(empty? word) 0]\n         [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n         [else (count-consonants (rest\
    \ word))]))\n     (define (select-words-helper s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (define (is_consonant c)\n    (member\
    \ c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count_consonants s)\n    (cond\
    \ [(empty? s) 0]\n          [(is_consonant (first s)) (+ 1 (count_consonants (rest\
    \ s)))]\n          [else (count_consonants (rest s))]))\n  (define (select_words_iter\
    \ s n result)\n    (cond [(empty? s) result]\n          [(is_consonant (first\
    \ s)) (select_words_iter (rest s) (+ 1 n) result)]\n          [(= n 0) (select_words_iter\
    \ (rest s) 0 (cons (first s) result))]\n          [else (select_words_iter (rest\
    \ s) (- n 1) result)]))\n  (select_words_iter s 0 '()))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (count-consonants word)\n       (cond\n \
    \        [(empty? word) 0]\n         [(member (first word) '(#\\a #\\e #\\i #\\\
    o #\\u)) (count-consonants (rest word))]\n         [else (+ 1 (count-consonants\
    \ (rest word)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(= n (count-consonants (first s)))\n          (cons (first\
    \ s) (select-words (rest s) n))]\n         [else (select-words (rest s) n)]))\n\
    \     (select-words (string-split s) n)]))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (count-consonants word)\n       (cond\n         [(empty?\
    \ word) 0]\n         [(consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \         [else (count-consonants (rest word))]))\n     (define (consonant? c)\n\
    \       (member c (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (word-list\
    \ s)\n       (cond\n         [(empty? s) empty]\n         [(char=? (first s) #\\\
    \ ) (word-list (rest s))]\n         [else (cons (take-while (compose not char=?\
    \ #\\ ) s) (word-list (drop-while (compose not char=? #\\ ) s)))]))\n     (define\
    \ (select-words s n)\n       (cond\n         [(empty? s) empty]\n         [(=\
    \ n (count-consonants (first s))) (cons (first s) (select-words (rest s) n))]\n\
    \         [else (select-words (rest s) n)]))\n     (select-words (word-list s)\
    \ n)]))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i\
    \ #\\o #\\u))))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (cond\n        [(empty? word) count]\n        [(is-consonant?\
    \ (first word))\n         (count-consonants-iter (rest word) (+ count 1))]\n \
    \       [else (count-consonants-iter (rest word) count)]))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (cond\n      [(empty?\
    \ s) result]\n      [(equal? n (count-consonants (first s)))\n       (select-words-iter\
    \ (rest s) n (append result (list (first s))))]\n      [else (select-words-iter\
    \ (rest s) n result)]))\n  (select-words-iter (string-split s) n '()))\n", " \
    \ (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants word)\n    (for/sum ([c (in-string word)])\n    \
    \  (if (is-consonant? c) 1 0)))\n  (define (select-words-helper words n)\n   \
    \ (cond [(empty? words) empty]\n          [(= n (count-consonants (first words)))\n\
    \           (cons (first words) (select-words-helper (rest words) n))]\n     \
    \     [else (select-words-helper (rest words) n)]))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([w (word\
    \ (first s))])\n       (if (and (not (empty? w)) (= n (count-consonants w)))\n\
    \           (cons w (select_words (rest s) n))\n           (select_words (rest\
    \ s) n)))]))\n", "  (define (is-consonant? c)\n    (and (not (member c '(#\\a\
    \ #\\e #\\i #\\o #\\u)))\n         (not (char-whitespace? c))))\n  (define (count-consonants\
    \ word)\n    (for/sum ([c (in-string word)])\n      (if (is-consonant? c) 1 0)))\n\
    \  (for/list ([word (in-string s)])\n    (if (= n (count-consonants word))\n \
    \       word)))\n", "  (define (is_consonant c)\n    (not (or (char-alphabetic?\
    \ c) (char-whitespace? c))))\n  (define (count_consonants word)\n    (define (count_consonants_iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is_consonant\
    \ (first word))\n              (count_consonants_iter (rest word) (+ count 1))\n\
    \              (count_consonants_iter (rest word) count))))\n    (count_consonants_iter\
    \ word 0))\n  (define (select_words_iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ([word (string-trim (string-take s (string-index s\
    \ #\\space)))]\n              [rest (string-trim (string-drop s (string-index\
    \ s #\\space)))])\n          (if (= n (count_consonants word))\n             \
    \ (select_words_iter rest n (append result (list word)))\n              (select_words_iter\
    \ rest n result)))))\n  (select_words_iter s n '()))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (let*\n         ([word (first (string-split s #\\\
    space))]\n          [rest (rest (string-split s #\\space))])\n       (if (= n\
    \ (count-consonants word))\n           (cons word (select_words (string-join rest\
    \ #\\space) n))\n           (select_words (string-join rest #\\space) n)))]))\n",
  "  (cond [(empty? s) empty]\n        [(= n (count-consonants (first (string-split\
    \ s))))\n         (cons (first (string-split s)) (select_words (rest (string-split\
    \ s)) n))]\n        [else (select_words (rest (string-split s)) n)]))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-consonants\
    \ word)\n    (define (count-consonants-iter word count)\n      (cond\n       \
    \ [(empty? word) count]\n        [(is-vowel? (first word)) (count-consonants-iter\
    \ (rest word) count)]\n        [else (count-consonants-iter (rest word) (+ count\
    \ 1))]))\n    (count-consonants-iter word 0))\n  (define (select-words-iter s\
    \ n words)\n    (cond\n      [(empty? s) words]\n      [(empty? (rest s)) words]\n\
    \      [(= n (count-consonants (first s)))\n       (select-words-iter (rest s)\
    \ n (cons (first s) words))]\n      [else (select-words-iter (rest s) n words)]))\n\
    \  (select-words-iter (string-split s) n '()))\n", "  (define (is_consonant c)\n\
    \    (member c (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\\
    p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count_consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_consonant (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n      [else (count_consonants (rest s))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (cond\n      [(char-alphabetic? c)\n       (not (member c '(#\\a #\\\
    e #\\i #\\o #\\u)))]\n      [else #f]))\n  (define (count-consonants word)\n \
    \   (cond\n      [(empty? word) 0]\n      [else\n       (+ (if (is-consonant?\
    \ (first word)) 1 0)\n          (count-consonants (rest word)))]))\n  (define\
    \ (select-words-helper words n)\n    (cond\n      [(empty? words) empty]\n   \
    \   [(= n (count-consonants (first words)))\n       (cons (first words) (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (for/sum ([c\
    \ (in-string word)])\n      (if (is-consonant? c) 1 0)))\n  (for/list ([word (in-string\
    \ s)])\n    (if (= n (count-consonants word))\n        word)))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (let ([w (first (string-split s #\\space))])\n\
    \       (if (= n (count-consonants w))\n           (cons w (select_words (rest\
    \ (string-split s #\\space)) n))\n           (select_words (rest (string-split\
    \ s #\\space)) n)))]))\n", "  (if (string=? s \"\")\n      '()\n      (let* ([words\
    \ (string-split s)]\n             [consonants (string-filter (lambda (c) (not\
    \ (member c '(#\\a #\\e #\\i #\\o #\\u)))))]\n             [word-consonants (map\
    \ (lambda (w) (consonants w)) words)]\n             [word-consonant-count (map\
    \ (lambda (w) (string-length w)) word-consonants)]\n             [selected-words\
    \ (filter (lambda (w) (= n (string-length w))) word-consonants)])\n        selected-words)))\n",
  "  (cond [(empty? s) empty]\n        [(= n (count-consonants (first s)))\n     \
    \    (cons (first s) (select_words (rest s) n))]\n        [else (select_words\
    \ (rest s) n)]))\n", "  (define (is_consonant? c)\n    (not (member c '(#\\a #\\\
    e #\\i #\\o #\\u))))\n  (define (count_consonants s)\n    (cond [(empty? s) 0]\n\
    \          [(is_consonant? (first s))\n           (+ 1 (count_consonants (rest\
    \ s)))]\n          [else (count_consonants (rest s))]))\n  (define (select_words_helper\
    \ s n acc)\n    (cond [(empty? s) acc]\n          [(equal? n (count_consonants\
    \ (first s)))\n           (select_words_helper (rest s) n (append acc (list (first\
    \ s))))]\n          [else (select_words_helper (rest s) n acc)]))\n  (select_words_helper\
    \ (string-split s) n (list)))\n", "  (cond\n    [(empty? s) empty]\n    [else\
    \ (cons (first s) (select_words (rest s) n))]))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [else\n     (let ([w (first (string-split s #\\space))])\n     \
    \  (if (= n (count-consonants w))\n           (cons w (select_words (rest (string-split\
    \ s #\\space)) n))\n           (select_words (rest (string-split s #\\space))\
    \ n)))]))\n", "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n  (define (count_consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is_vowel\
    \ (first s)) (count_consonants (rest s))]\n      [else (+ 1 (count_consonants\
    \ (rest s)))]))\n  (define (select_words_iter s n result)\n    (cond\n      [(empty?\
    \ s) result]\n      [(is_vowel (first s)) (select_words_iter (rest s) n result)]\n\
    \      [else (select_words_iter (rest s) n (cons (first s) result))]))\n  (define\
    \ (select_words_iter2 s n result)\n    (cond\n      [(empty? s) result]\n    \
    \  [(is_vowel (first s)) (select_words_iter2 (rest s) n result)]\n      [else\
    \ (select_words_iter2 (rest s) n (cons (first s) result))]))\n  (define (select_words_iter3\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(is_vowel (first s))\
    \ (select_words_iter3 (rest s) n result)]\n      [else (select_words_iter3 (rest\
    \ s) n (cons (first s) result))]))\n  (define (select_words_iter4 s n result)\n\
    \    (cond\n      [(empty? s) result]\n      [(is_vowel (first s)) (select_words_iter4\
    \ (rest s) n result)]\n      [else (select_words_iter4 (rest s) n (cons (first\
    \ s) result))]))\n  (define (select_words_iter5 s n result)\n    (cond\n     \
    \ [(empty? s) result]\n      [(is_vowel (first s)) (select_words_iter5 (rest s)\
    \ n result)]\n      [else (select_words_iter5 (rest s) n (cons (first s) result))]))\n\
    \  (define (select_words_iter6 s n result)", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (is-consonant? c)\n       (not (member c '(#\\a #\\e\
    \ #\\i #\\o #\\u))))\n     (define (count-consonants word)\n       (cond\n   \
    \      [(empty? word) 0]\n         [else\n          (+ (if (is-consonant? (first\
    \ word)) 1 0)\n             (count-consonants (rest word)))]))\n     (define (select-words-helper\
    \ s n result)\n       (cond\n         [(empty? s) result]\n         [else\n  \
    \        (define (is-word? w)\n            (and (not (empty? w))\n           \
    \      (not (char=? (first w) #\\space))))\n          (define (get-word s)\n \
    \           (cond\n              [(empty? s) empty]\n              [(char=? (first\
    \ s) #\\space) empty]\n              [else (cons (first s) (get-word (rest s)))]))\n\
    \          (define (drop-word s)\n            (cond\n              [(empty? s)\
    \ empty]\n              [(char=? (first s) #\\space) (rest s)]\n             \
    \ [else (drop-word (rest s))]))\n          (define word (get-word s))\n      \
    \    (if (and (is-word? word)\n                   (= n (count-consonants word)))\n\
    \              (select-words-helper (drop-word s) n (cons word result))\n    \
    \          (select-words-helper (drop-word s) n result)))]))\n     (select-words-helper\
    \ s n empty)]))\n", "  (define (is_consonant? c)\n    (member c '(#\\b #\\c #\\\
    d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z)))\n  (define (count_consonants w)\n    (cond\n      [(empty? w) 0]\n\
    \      [(is_consonant? (first w)) (+ 1 (count_consonants (rest w)))]\n      [else\
    \ (count_consonants (rest w))]))\n  (define (select_words_helper s n lst)\n  \
    \  (cond\n      [(empty? s) lst]\n      [(count_consonants (first s)) (select_words_helper\
    \ (rest s) n (append lst (list (first s))))]\n      [else (select_words_helper\
    \ (rest s) n lst)]))\n  (select_words_helper (string-split s) n '()))\n", "  (define\
    \ (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper s n result)\n    (cond\n      [(empty? s) result]\n\
    \      [(count-consonants (first s)) = n (select-words-helper (rest s) n (append\
    \ result (list (first s))))]\n      [else (select-words-helper (rest s) n result)]))\n\
    \  (select-words-helper (string-split s) n (list)))\n", "  (define (is_consonant\
    \ c)\n    (not (or (char-ci=? c #\\a) (char-ci=? c #\\e) (char-ci=? c #\\i) (char-ci=?\
    \ c #\\o) (char-ci=? c #\\u))))\n  (define (count_consonants w)\n    (cond [(empty?\
    \ w) 0]\n          [(is_consonant (first w)) (+ 1 (count_consonants (rest w)))]\n\
    \          [else (count_consonants (rest w))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond [(empty? s) acc]\n          [(equal? n (count_consonants\
    \ (first s))) (select_words_iter (rest s) n (append acc (list (first s))))]\n\
    \          [else (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([w\
    \ (string-split s #\\space)])\n       (filter (\u03BB (x) (= n (count-consonants\
    \ x))) w))]))\n", "  (define (is_consonant? c)\n    (cond [(char-ci=? c #\\a)\
    \ #f]\n          [(char-ci=? c #\\e) #f]\n          [(char-ci=? c #\\i) #f]\n\
    \          [(char-ci=? c #\\o) #f]\n          [(char-ci=? c #\\u) #f]\n      \
    \    [else #t]))\n  (define (count_consonants word)\n    (cond [(empty? word)\
    \ 0]\n          [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n\
    \          [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond [(empty? s) empty]\n          [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n          [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s #\\space) n))\n", " \
    \ (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is-consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s)))]\n      [else (count-consonants\
    \ (rest s))]))\n  (define (select-words s n)\n    (cond\n      [(empty? s) empty]\n\
    \      [(= n (count-consonants (first s)))\n       (cons (first s) (select-words\
    \ (rest s) n))]\n      [else (select-words (rest s) n)]))\n  (select-words (string-split\
    \ s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (not (member c (list #\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ w)\n       (cond\n         [(empty? w) 0]\n         [else\n          (+ (if\
    \ (is-consonant? (first w)) 1 0)\n             (count-consonants (rest w)))]))\n\
    \     (define (select-words s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [else\n          (define (select-words-helper s n)\n            (cond\n\
    \              [(empty? s) empty]\n              [else\n               (define\
    \ (select-words-helper-helper s n)\n                 (cond\n                 \
    \  [(empty? s) empty]\n                   [else\n                    (cond\n \
    \                     [(= n (count-consonants (first s)))\n                  \
    \     (cons (first s) (select-words-helper-helper (rest s) n))]\n            \
    \          [else\n                       (select-words-helper-helper (rest s)\
    \ n)])]))\n               (cons (select-words-helper-helper (first s) n)\n   \
    \                  (select-words-helper (rest s) n))]))\n          (select-words-helper\
    \ (string-split s) n)]))\n     (select-words (string-split s) n)]))\n</code>\n\
    I'm not sure if I'm doing this right, but I'm trying to make a function that takes\
    \ a string and a number, and returns a list of all words from the string that\
    \ contain exactly the number of consonants. I'm not sure if I'm using the right\
    \ functions, but I'm trying to use <code>string-split</code> to split the string\
    \ into a list of words, and then I'm trying to use <code>count-consonants</code>\
    \ to count the number of consonants in each word, and then I'm trying to use <code>select-words</code>\
    \ to select the words that contain exactly the number of consonants. I'm not sure\
    \ if I'm doing this right, but I'm trying to use", "  (if (empty? s)\n      (list)\n\
    \      (let ([words (string-split s)])\n        (filter (lambda (word)\n     \
    \             (= n (count-consonants word)))\n                words))))\n", " \
    \ (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n \
    \      (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ w)\n       (cond\n         [(empty? w) 0]\n         [else\n          (+ (if\
    \ (is-consonant? (first w)) 1 0)\n             (count-consonants (rest w)))]))\n\
    \     (define (select-words s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(= n (count-consonants (first s)))\n          (cons (first s) (select-words\
    \ (rest s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words\
    \ (string-split s) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n   \
    \  (define (consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \     (define (count-consonants w)\n       (define (count-consonants-iter w count)\n\
    \         (cond\n           [(empty? w) count]\n           [(consonant? (first\
    \ w))\n            (count-consonants-iter (rest w) (+ count 1))]\n           [else\
    \ (count-consonants-iter (rest w) count)]))\n       (count-consonants-iter w 0))\n\
    \     (define (select-words-iter s n result)\n       (cond\n         [(empty?\
    \ s) result]\n         [(equal? n (count-consonants (first s)))\n          (select-words-iter\
    \ (rest s) n (append result (list (first s))))]\n         [else (select-words-iter\
    \ (rest s) n result)]))\n     (select-words-iter (string-split s) n empty)]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n  \
    \     (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (+\
    \ (if (is-consonant? (first word)) 1 0)\n             (count-consonants (rest\
    \ word)))]))\n     (define (select-word word)\n       (and (not (empty? word))\n\
    \            (= n (count-consonants word))))\n     (define (select-words-in-word\
    \ word)\n       (cond\n         [(empty? word) empty]\n         [else\n      \
    \    (if (select-word word)\n              (cons word (select-words-in-word (rest\
    \ word)))\n              (select-words-in-word (rest word)))]))\n     (define\
    \ (select-words-in-sentence sentence)\n       (cond\n         [(empty? sentence)\
    \ empty]\n         [else\n          (append (select-words-in-word (first sentence))\n\
    \                  (select-words-in-sentence (rest sentence)))]))\n     (select-words-in-sentence\
    \ (string-split s #\\space))]))\n", "  (define (is_consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count_consonants word)\n    (cond\
    \ [(empty? word) 0]\n          [(is_consonant? (first word))\n           (+ 1\
    \ (count_consonants (rest word)))]\n          [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n words)\n    (cond [(empty? s) words]\n     \
    \     [(equal? n (count_consonants (first words)))\n           (select_words_iter\
    \ (rest s) n (cons (first words) words))]\n          [else (select_words_iter\
    \ (rest s) n words)]))\n  (select_words_iter (string-split s) n '()))\n", "  (define\
    \ (is_consonant? c)\n    (not (or (char-ci=? c #\\a)\n             (char-ci=?\
    \ c #\\e)\n             (char-ci=? c #\\i)\n             (char-ci=? c #\\o)\n\
    \             (char-ci=? c #\\u))))\n  (define (count-consonants word)\n    (define\
    \ (count-consonants-iter word count)\n      (if (empty? word)\n          count\n\
    \          (if (is_consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ([word (regexp-match #rx\"^[a-zA-Z]+\"\
    \ s)])\n          (if (and (not (empty? word))\n                   (= n (count-consonants\
    \ (first word))))\n              (select-words-iter (regexp-replace #rx\"^[a-zA-Z]+\"\
    \ s \"\") n (append result (list (first word))))\n              (select-words-iter\
    \ (regexp-replace #rx\"^[a-zA-Z]+\" s \"\") n result)))))\n  (select-words-iter\
    \ s n (list)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let*\n \
    \        ([words (string-split s #\\space)]\n          [consonants (string-filter\
    \ (lambda (c) (not (member c '(#\\a #\\e #\\i #\\o #\\u)))))]\n          [result\
    \ (filter (lambda (w) (= n (string-length (consonants w)))) words)])\n       result)]))\n",
  "  (define (is_consonant? c)\n    (and (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n         (not (char-whitespace? c))))\n  (define (count-consonants s)\n\
    \    (cond [(empty? s) 0]\n          [(is_consonant? (first s))\n           (+\
    \ 1 (count-consonants (rest s)))]\n          [else (count-consonants (rest s))]))\n\
    \  (define (select-words s n)\n    (cond [(empty? s) empty]\n          [(is_consonant?\
    \ (first s))\n           (cond [(= n (count-consonants s))\n                 \
    \ (cons s (select-words (rest s) n))]\n                 [else (select-words (rest\
    \ s) n)])]\n          [else (select-words (rest s) n)]))\n  (select-words (string-split\
    \ s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (helper (rest s) n))]\n         [else\
    \ (helper (rest s) n)]))\n     (helper (string-split s) n)]))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [else\n     (let ([word (first (regexp-match #rx\"\
    \\w+\" s))])\n       (if (= n (count-consonants word))\n           (cons word\
    \ (select_words (substring s (add1 (string-length word))) n))\n           (select_words\
    \ (substring s (add1 (string-length word))) n)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
