name: HumanEval_47_median
language: rkt
prompt: "#lang racket\n\n#| Return median of elements in the list l.\n>>> (median\
  \ (list 3 1 2 4 5))\n3\n>>> (median (list -10 4 6 1000 10 20))\n15.0|#\n(define\
  \ (median l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
  \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
  \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n \
  \   (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
  \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
completions: ["  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l n)\n    (cond\n      [(empty? l) (error\
    \ \"median: empty list\")]\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first\
    \ l) (second l)) 2)]\n      [(= n 3) (/ (+ (first l) (second l) (third l)) 3)]\n\
    \      [else (median-helper (rest l) (- n 1))]))\n  (median-helper (sort l <)\
    \ (length l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) 0]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l n)\n \
    \   (cond [(= n 0) (car l)]\n          [(= n 1) (/ (+ (car l) (car (cdr l))) 2)]\n\
    \          [(= n 2) (/ (+ (car l) (car (cdr l)) (car (cdr (cdr l)))) 3)]\n   \
    \       [else (median-helper (cdr l) (- n 1))]))\n  (median-helper (sort l <)\
    \ (quotient (length l) 2)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) 0]\n          [(empty? (rest l)) (first l)]\n          [(= (length l) 2)\
    \ (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest (rest\
    \ l)))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n  \
    \  (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n          [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort l)\n    (cond\
    \ [(empty? l) empty]\n          [else (insert (first l) (sort (rest l)))]))\n\
    \  (define (insert x l)\n    (cond [(empty? l) (list x)]\n          [(< x (first\
    \ l)) (cons x l)]\n          [else (cons (first l) (insert x (rest l)))]))\n \
    \ (define (middle l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l))\
    \ (first l)]\n          [(empty? (rest (rest l))) (first l)]\n          [else\
    \ (middle (rest l))]))\n  (define (middle-two l)\n    (cond [(empty? l) empty]\n\
    \          [(empty? (rest l)) empty]\n          [(empty? (rest (rest l))) empty]\n\
    \          [(empty? (rest (rest (rest l)))) (list (first l) (first (rest l)))]\n\
    \          [else (middle-two (rest l))]))\n  (cond [(empty? l) empty]\n      \
    \  [(empty? (rest l)) (first l)]\n        [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n        [else (define sorted (sort l))\n         \
    \     (cond [(empty? (rest (rest (rest l)))) (middle sorted)]\n              \
    \      [else (define m (middle-two sorted))\n                          (/ (+ (first\
    \ m) (first (rest m))) 2)])]))\n", "  (define (median-helper l n)\n    (cond\n\
    \      [(empty? l) 0]\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l) (- n 1))]))\n  (median-helper\
    \ l (length l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (sort l)\n    (cond [(empty? l) empty]\n       \
    \   [else (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond\
    \ [(empty? l) (list x)]\n          [(< x (first l)) (cons x l)]\n          [else\
    \ (cons (first l) (insert x (rest l)))]))\n  (define (length l)\n    (cond [(empty?\
    \ l) 0]\n          [else (+ 1 (length (rest l)))]))\n  (define (nth l n)\n   \
    \ (cond [(empty? l) (error \"nth: index out of range\")]\n          [(= n 0) (first\
    \ l)]\n          [else (nth (rest l) (- n 1))]))\n  (define (even? n)\n    (=\
    \ (remainder n 2) 0))\n  (define (odd? n)\n    (not (even? n)))\n  (define (half\
    \ n)\n    (/ n 2))\n  (define (nth-from-end l n)\n    (nth l (- (length l) n)))\n\
    \  (define (nth-from-start l n)\n    (nth l n))\n  (define (even-length? l)\n\
    \    (even? (length l)))\n  (define (odd-length? l)\n    (odd? (length l)))\n\
    \  (define (median-of-even-length l)\n    (/ (+ (nth-from-start l (half (length\
    \ l)))\n          (nth-from-end l (half (length l))))\n       2.0))\n  (define\
    \ (median-of-odd-length l)\n    (nth-from-start l (half (length l))))\n  (cond\
    \ [(empty? l) (error \"median: empty list\")]\n        [(even-length? l) (median-of-even-length\
    \ (sort l))]\n        [(odd-length? l) (median-of-odd-length (sort l))]))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (merge-sort l)\n    (define (merge l1 l2)\n      (cond [(empty? l1) l2]\n\
    \            [(empty? l2) l1]\n            [(< (first l1) (first l2))\n      \
    \       (cons (first l1) (merge (rest l1) l2))]\n            [else\n         \
    \    (cons (first l2) (merge l1 (rest l2)))]))\n    (define (split l)\n      (cond\
    \ [(empty? l) (values empty empty)]\n            [(empty? (rest l)) (values (list\
    \ (first l)) empty)]\n            [else\n             (let ([l1 (list (first l))]\n\
    \                   [l2 (list (second l))])\n               (for ([x (rest (rest\
    \ l))])\n                 (if (odd? (length l1))\n                     (set! l2\
    \ (cons x l2))\n                     (set! l1 (cons x l1))))\n               (values\
    \ l1 l2))]))\n    (define (merge-sort-iter l)\n      (cond [(empty? l) empty]\n\
    \            [(empty? (rest l)) l]\n            [else\n             (let-values\
    \ ([(l1 l2) (split l)])\n               (merge (merge-sort-iter l1) (merge-sort-iter\
    \ l2)))]))\n    (merge-sort-iter l))\n  (define (median-iter l)\n    (cond [(empty?\
    \ l) (error \"median: empty list\")]\n            [(empty? (rest l)) (first l)]\n\
    \            [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n     \
    \       [else\n             (median-iter (rest l))]))\n  (median-iter (merge-sort\
    \ l)))\n", "  (define (median-helper l n)\n    (cond [(= n 0) (car l)]\n     \
    \     [(= n 1) (/ (+ (car l) (car (cdr l))) 2)]\n          [(= n 2) (car (cdr\
    \ l))]\n          [else (median-helper (cdr l) (- n 2))]))\n  (median-helper (sort\
    \ l <) (quotient (length l) 2)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(= (length l) 1) (first l)]\n      [(= (length l)\
    \ 2) (/ (+ (first l) (second l)) 2)]\n      [else\n       (define (split l)\n\
    \         (define (split-helper l1 l2)\n           (cond\n             [(empty?\
    \ l) (values l1 l2)]\n             [else (split-helper (append l1 (list (first\
    \ l))) (rest l))]))\n         (split-helper empty l))\n       (define (merge l1\
    \ l2)\n         (cond\n           [(empty? l1) l2]\n           [(empty? l2) l1]\n\
    \           [(< (first l1) (first l2)) (cons (first l1) (merge (rest l1) l2))]\n\
    \           [else (cons (first l2) (merge l1 (rest l2)))]))\n       (define (merge-sort\
    \ l)\n         (cond\n           [(empty? l) empty]\n           [(= (length l)\
    \ 1) l]\n           [else\n            (define (merge-sort-helper l1 l2)\n   \
    \           (merge (merge-sort l1) (merge-sort l2)))\n            (merge-sort-helper\
    \ (first (split l)) (second (split l)))]))\n       (define (median-helper-helper\
    \ l)\n         (cond\n           [(empty? l) 0]\n           [(= (length l) 1)\
    \ (first l)]\n           [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n \
    \          [else (median-helper-helper (rest l))]))\n       (median-helper-helper\
    \ (merge-sort l)))]))\n  (median-helper l))\n", "  (let ([sorted (sort l <)])\n\
    \    (if (even? (length sorted))\n        (/ (+ (list-ref sorted (/ (length sorted)\
    \ 2))\n              (list-ref sorted (- (/ (length sorted) 2) 1)))\n        \
    \   2)\n        (list-ref sorted (/ (length sorted) 2)))))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n\
    \          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n       \
    \   [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define\
    \ (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first\
    \ l)]\n          [(< (first l) (second l))\n           (median-helper (cons (first\
    \ l) (rest (rest l))))]\n          [else (median-helper (cons (second l) (rest\
    \ (rest l))))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n     \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort\
    \ l)\n    (cond [(empty? l) empty]\n          [else (insert (first l) (sort (rest\
    \ l)))]))\n  (define (insert n l)\n    (cond [(empty? l) (list n)]\n         \
    \ [(<= n (first l)) (cons n l)]\n          [else (cons (first l) (insert n (rest\
    \ l)))]))\n  (define (middle l)\n    (cond [(empty? l) empty]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (first\
    \ (rest l))) 2)]\n          [else (middle (rest l))]))\n  (middle (sort l)))\n",
  "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n       (define\
    \ (insert x l)\n         (cond\n           [(empty? l) (list x)]\n           [(<\
    \ x (first l)) (cons x l)]\n           [else (cons (first l) (insert x (rest l)))]))\n\
    \       (insert (first l) (sort (rest l)))]))\n  (define (middle l)\n    (cond\n\
    \      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (middle\
    \ (rest l))]))\n  (define (average x y)\n    (/ (+ x y) 2))\n  (cond\n    [(empty?\
    \ l) empty]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l)))\
    \ (average (first l) (first (rest l)))]\n    [else (middle (sort l))]))\n", " \
    \ (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n       (define\
    \ pivot (first l))\n       (define (sort-helper l pivot)\n         (cond\n   \
    \        [(empty? l) empty]\n           [(< (first l) pivot)\n            (cons\
    \ (first l) (sort-helper (rest l) pivot))]\n           [else\n            (cons\
    \ pivot (sort-helper (rest l) (first l)))]))\n       (append (sort-helper (rest\
    \ l) pivot) (list pivot))]))\n  (define (nth-element l n)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(= n 0) (first l)]\n      [else (nth-element (rest l) (- n\
    \ 1))]))\n  (define (length l)\n    (cond\n      [(empty? l) 0]\n      [else (+\
    \ 1 (length (rest l)))]))\n  (define (middle l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [(= (length l) 1) (first l)]\n      [else\n       (define (middle-helper\
    \ l n)\n         (cond\n           [(empty? l) empty]\n           [(= n 0) (first\
    \ l)]\n           [else (middle-helper (rest l) (- n 1))]))\n       (middle-helper\
    \ l (/ (length l) 2))]))\n  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(= (length l) 1) (first l)]\n      [(= (length l) 2) (/ (+\
    \ (first l) (second l)) 2)]\n      [else\n       (define (median-helper-helper\
    \ l)\n         (cond\n           [(empty? l) empty]\n           [(= (length l)\
    \ 1) (first l)]\n           [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n\
    \           [else\n            (define (median-helper-helper-helper l)\n     \
    \         (cond\n                [(empty? l) empty]\n                [(= (length\
    \ l) 1) (first l", "  (let ([sorted (sort l <)])\n    (if (odd? (length sorted))\n\
    \        (list-ref sorted (quotient (length sorted) 2))\n        (/ (+ (list-ref\
    \ sorted (quotient (length sorted) 2))\n              (list-ref sorted (quotient\
    \ (length sorted) 2 1)))\n           2.0))))\n", "  (define (median-helper l n)\n\
    \    (cond\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [(= n 3) (median (list (first l) (second l) (third l))))\n  \
    \    [else\n       (define (median-helper2 l n)\n         (cond\n           [(=\
    \ n 1) (first l)]\n           [(= n 2) (/ (+ (first l) (second l)) 2)]\n     \
    \      [(= n 3) (median (list (first l) (second l) (third l))))\n           [else\n\
    \            (define (median-helper3 l n)\n              (cond\n             \
    \   [(= n 1) (first l)]\n                [(= n 2) (/ (+ (first l) (second l))\
    \ 2)]\n                [(= n 3) (median (list (first l) (second l) (third l))))\n\
    \                [else\n                 (define (median-helper4 l n)\n      \
    \             (cond\n                     [(= n 1) (first l)]\n              \
    \       [(= n 2) (/ (+ (first l) (second l)) 2)]\n                     [(= n 3)\
    \ (median (list (first l) (second l) (third l))))\n                     [else\n\
    \                      (define (median-helper5 l n)\n                        (cond\n\
    \                          [(= n 1) (first l)]\n                          [(=\
    \ n 2) (/ (+ (first l) (second l)) 2)]\n                          [(= n 3) (median\
    \ (list (first l) (second l) (third l))))\n                          [else\n \
    \                          (define (median-helper6 l n)\n                    \
    \         (cond\n                               [(= n 1) (first l)]\n        \
    \                       [(= n 2) (/ (+ (first l) (second l)) 2)]\n           \
    \                    [(= n 3) (median (list (first l) (second l) (third l))))\n\
    \                               [else\n                                (define\
    \ (median-helper7 l n)\n                                  (cond\n            \
    \                        [(= n 1) (first l)]\n                               \
    \     [(= n 2) (/ (+ (first l) (", "  (define (median-helper l)\n    (cond\n \
    \     [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (let ((sorted (sort l <)))\n  \
    \  (if (even? (length sorted))\n        (/ (+ (list-ref sorted (/ (length sorted)\
    \ 2))\n              (list-ref sorted (- (/ (length sorted) 2) 1)))\n        \
    \   2)\n        (list-ref sorted (/ (length sorted) 2)))))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort l)\n    (cond\
    \ [(empty? l) empty]\n          [else (insert (first l) (sort (rest l)))]))\n\
    \  (define (insert x l)\n    (cond [(empty? l) (list x)]\n          [(< x (first\
    \ l)) (cons x l)]\n          [else (cons (first l) (insert x (rest l)))]))\n \
    \ (define (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (first\
    \ (rest l))) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (sort l)\n    (cond [(empty? l) empty]\n       \
    \   [else (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond\
    \ [(empty? l) (list x)]\n          [(< x (first l)) (cons x l)]\n          [else\
    \ (cons (first l) (insert x (rest l)))]))\n  (define (length l)\n    (cond [(empty?\
    \ l) 0]\n          [else (+ 1 (length (rest l)))]))\n  (define (nth n l)\n   \
    \ (cond [(empty? l) empty]\n          [(= n 0) (first l)]\n          [else (nth\
    \ (- n 1) (rest l))]))\n  (define (middle l)\n    (cond [(empty? l) empty]\n \
    \         [(= 1 (length l)) (first l)]\n          [else (nth (/ (length l) 2)\
    \ l)]))\n  (define (middle-2 l)\n    (cond [(empty? l) empty]\n          [(= 2\
    \ (length l)) (first l)]\n          [else (nth (/ (length l) 2) l)]))\n  (cond\
    \ [(empty? l) empty]\n        [(= 1 (length l)) (first l)]\n        [(= 2 (length\
    \ l)) (/ (+ (first l) (second l)) 2)]\n        [else (cond [(= (modulo (length\
    \ l) 2) 0)\n                     (/ (+ (middle l) (middle-2 l)) 2)]\n        \
    \            [else (middle l)])]))\n", "  (define (median-helper l n)\n    (cond\n\
    \      [(empty? l) (error \"empty list\")]\n      [(= n 1) (first l)]\n      [(=\
    \ n 2) (/ (+ (first l) (second l)) 2)]\n      [(= n 3)\n       (cond\n       \
    \  [(<= (first l) (second l) (third l)) (second l)]\n         [(<= (first l) (third\
    \ l) (second l)) (second l)]\n         [(<= (second l) (first l) (third l)) (first\
    \ l)]\n         [(<= (second l) (third l) (first l)) (first l)]\n         [(<=\
    \ (third l) (first l) (second l)) (first l)]\n         [(<= (third l) (second\
    \ l) (first l)) (second l)])]\n      [else\n       (median-helper (rest l) (-\
    \ n 1))]))\n  (median-helper l (length l)))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n         \
    \ [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort l)\n    (cond\
    \ [(empty? l) empty]\n          [else (insert (first l) (sort (rest l)))]))\n\
    \  (define (insert x l)\n    (cond [(empty? l) (list x)]\n          [(< x (first\
    \ l)) (cons x l)]\n          [else (cons (first l) (insert x (rest l)))]))\n \
    \ (define (length l)\n    (cond [(empty? l) 0]\n          [else (+ 1 (length (rest\
    \ l)))]))\n  (define (nth n l)\n    (cond [(= n 0) (first l)]\n          [else\
    \ (nth (- n 1) (rest l))]))\n  (define (even? n)\n    (= (remainder n 2) 0))\n\
    \  (define (odd? n)\n    (not (even? n)))\n  (define (half n)\n    (/ n 2))\n\
    \  (define (nth-from-end n l)\n    (nth (- (length l) n) l))\n  (define (nth-from-start\
    \ n l)\n    (nth n l))\n  (define (middle l)\n    (cond [(even? (length l))\n\
    \           (cons (nth-from-start (half (length l)) l)\n                 (nth-from-end\
    \ (half (length l)) l))]\n          [else (list (nth-from-start (half (length\
    \ l)) l))]))\n  (define (average l)\n    (/ (apply + l) (length l)))\n  (cond\
    \ [(empty? l) 0]\n        [(even? (length l)) (average (middle l))]\n        [else\
    \ (nth-from-start (half (length l)) (sort l))]))\n", "  (define (median-helper\
    \ l n)\n    (cond\n      [(= n 1) (car l)]\n      [(= n 2) (/ (+ (car l) (cadr\
    \ l)) 2)]\n      [(= n 3) (car (sort l <))]\n      [else (median-helper (sort\
    \ l <) (- n 1))]))\n  (median-helper l (length l)))\n", "  (define (median-helper\
    \ l n)\n    (if (= n 1)\n        (car l)\n        (if (= n 2)\n            (/\
    \ (+ (car l) (cadr l)) 2)\n            (if (= n 3)\n                (if (< (car\
    \ l) (cadr l))\n                    (if (< (cadr l) (caddr l))\n             \
    \           (cadr l)\n                        (if (< (car l) (caddr l))\n    \
    \                        (caddr l)\n                            (car l)))\n  \
    \                  (if (< (car l) (caddr l))\n                        (car l)\n\
    \                        (if (< (cadr l) (caddr l))\n                        \
    \    (caddr l)\n                            (cadr l))))\n                (median-helper\
    \ (cdr l) (- n 1))))))\n  (median-helper l (length l)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l1 l2)\n    (if (null? l1)\n        (car l2)\n        (median-helper (cdr l1)\
    \ (cdr l2))))\n  (define (sort l)\n    (if (null? l)\n        '()\n        (let\
    \ ((pivot (car l)))\n          (append (sort (filter (lambda (x) (< x pivot))\
    \ (cdr l)))\n                  (list pivot)\n                  (sort (filter (lambda\
    \ (x) (>= x pivot)) (cdr l)))))))\n  (define (length l)\n    (if (null? l)\n \
    \       0\n        (+ 1 (length (cdr l)))))\n  (define (nth l n)\n    (if (= n\
    \ 0)\n        (car l)\n        (nth (cdr l) (- n 1))))\n  (define (filter pred\
    \ l)\n    (if (null? l)\n        '()\n        (if (pred (car l))\n           \
    \ (cons (car l) (filter pred (cdr l)))\n            (filter pred (cdr l)))))\n\
    \  (define (append l1 l2)\n    (if (null? l1)\n        l2\n        (cons (car\
    \ l1) (append (cdr l1) l2))))\n  (define (car l)\n    (if (null? l)\n        (error\
    \ \"car: empty list\")\n        (car l)))\n  (define (cdr l)\n    (if (null? l)\n\
    \        (error \"cdr: empty list\")\n        (cdr l)))\n  (define (null? l)\n\
    \    (eq? l '()))\n  (define (eq? a b)\n    (if (and (pair? a) (pair? b))\n  \
    \      (and (eq? (car a) (car b)) (eq? (cdr a) (cdr b)))\n        (eqv? a b)))\n\
    \  (define (pair? x)\n    (and (not (null? x)) (not (atom? x))))\n  (define (atom?\
    \ x)\n    (or (null? x) (not (pair? x))))\n ", "  (define (median-helper l n)\n\
    \    (cond [(empty? l) 0]\n          [(= n (/ (length l) 2)) (first l)]\n    \
    \      [else (median-helper (rest l) (+ n 1))]))\n  (cond [(empty? l) 0]\n   \
    \     [(= (length l) 1) (first l)]\n        [(= (length l) 2) (/ (+ (first l)\
    \ (second l)) 2)]\n        [else (median-helper (sort l <) 0)]))\n", "  (define\
    \ (median-helper l n)\n    (cond [(empty? l) 0]\n          [(= n 1) (first l)]\n\
    \          [(= n 2) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper\
    \ (rest l) (- n 1))]))\n  (median-helper l (length l)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l1\
    \ l2)\n    (if (empty? l1)\n        (first l2)\n        (median-helper (rest l1)\
    \ (cons (first l1) (rest l2)))))\n  (define (median-helper2 l1 l2)\n    (if (empty?\
    \ l1)\n        (first l2)\n        (median-helper2 (rest l1) (cons (first l1)\
    \ (rest l2)))))\n  (define (median-helper3 l1 l2)\n    (if (empty? l1)\n     \
    \   (first l2)\n        (median-helper3 (rest l1) (cons (first l1) (rest l2)))))\n\
    \  (define (median-helper4 l1 l2)\n    (if (empty? l1)\n        (first l2)\n \
    \       (median-helper4 (rest l1) (cons (first l1) (rest l2)))))\n  (define (median-helper5\
    \ l1 l2)\n    (if (empty? l1)\n        (first l2)\n        (median-helper5 (rest\
    \ l1) (cons (first l1) (rest l2)))))\n  (define (median-helper6 l1 l2)\n    (if\
    \ (empty? l1)\n        (first l2)\n        (median-helper6 (rest l1) (cons (first\
    \ l1) (rest l2)))))\n  (define (median-helper7 l1 l2)\n    (if (empty? l1)\n \
    \       (first l2)\n        (median-helper7 (rest l1) (cons (first l1) (rest l2)))))\n\
    \  (define (median-helper8 l1 l2)\n    (if (empty? l1)\n        (first l2)\n \
    \       (median-helper8 (rest l1) (cons (first l1) (rest l2)))))\n  (define (median-helper9\
    \ l1 l2)\n    (if (empty? l1)\n        (first l2)\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l\
    \ n)\n    (cond\n      [(empty? l) (error \"median: empty list\")]\n      [(=\
    \ n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [(= n\
    \ 3) (/ (+ (first l) (second l) (third l)) 3)]\n      [else (median-helper (rest\
    \ l) (- n 1))]))\n  (median-helper (sort l <) (length l)))\n", "  (define (median-helper\
    \ l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n\
    \  (/ (median-helper l) (length l)))\n", "  (let ([sorted (sort l <)])\n    (if\
    \ (even? (length sorted))\n        (/ (+ (list-ref sorted (/ (length sorted) 2))\n\
    \              (list-ref sorted (- (/ (length sorted) 2) 1)))\n           2)\n\
    \        (list-ref sorted (/ (length sorted) 2)))))\n", "  (define (median-helper\
    \ l n)\n    (cond\n      [(empty? l) (error \"empty list\")]\n      [(= n 1) (first\
    \ l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [(= n 3) (/ (+ (first\
    \ l) (second l) (third l)) 3)]\n      [else (median-helper (rest l) (- n 1))]))\n\
    \  (median-helper (sort l <) (length l)))\n", "  (cond\n    [(empty? l) (error\
    \ \"Empty list\")]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (second l)) 2)]\n    [else (median (sort l <))]))\n", " \
    \ (define (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l n)\n    (cond [(empty? l) 0]\n\
    \          [(= n (/ (length l) 2)) (first l)]\n          [else (median-helper\
    \ (rest l) (+ n 1))]))\n  (median-helper (sort l <) 0))\n", "  (define (median-helper\
    \ l n)\n    (cond\n      [(empty? l) (error \"median: empty list\")]\n      [(=\
    \ n 0) (first l)]\n      [(= n 1) (/ (+ (first l) (first (rest l))) 2)]\n    \
    \  [else (median-helper (rest l) (- n 1))]))\n  (median-helper l (quotient (length\
    \ l) 2)))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n   \
    \       [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l n)\n    (cond\n\
    \      [(empty? l) 0]\n      [(= n (/ (length l) 2)) (first l)]\n      [else (median-helper\
    \ (rest l) (+ n 1))]))\n  (median-helper (sort l <) 0))\n", "  (define (sort-list\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [else (insert (first l) (sort-list\
    \ (rest l)))]))\n  (define (insert n l)\n    (cond\n      [(empty? l) (list n)]\n\
    \      [(< n (first l)) (cons n l)]\n      [else (cons (first l) (insert n (rest\
    \ l)))]))\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n    \
    \  [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort-list l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n\
    \          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l n)\n    (cond [(=\
    \ n 0) (car l)]\n          [(= n 1) (/ (+ (car l) (car (cdr l))) 2)]\n       \
    \   [(even? n) (/ (+ (median-helper l (/ n 2))\n                           (median-helper\
    \ (cdr (cdr (cdr (cdr l)))) (/ n 2)))\n                        2)]\n         \
    \ [else (median-helper (cdr (cdr l)) (/ (- n 1) 2))]))\n  (median-helper l (length\
    \ l)))\n", "  (define (median-helper l n)\n    (if (= n 1)\n        (car l)\n\
    \        (if (= n 2)\n            (/ (+ (car l) (cadr l)) 2)\n            (if\
    \ (even? n)\n                (/ (+ (median-helper l (/ n 2)) (median-helper (cdr\
    \ (drop l (/ n 2))) (/ n 2))) 2)\n                (median-helper l (/ (+ n 1)\
    \ 2))))))\n  (median-helper l (length l)))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n     \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n\
    \          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n       \
    \   [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define\
    \ (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l))\
    \ (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l lst)\n    (cond\n      [(empty? l) (first lst)]\n  \
    \    [(empty? (rest l)) (/ (+ (first lst) (first l)) 2)]\n      [else (median-helper\
    \ (rest l) (cons (first l) lst))]))\n  (median-helper l (list)))\n", "  (define\
    \ (median-helper l n)\n    (cond [(empty? l) 0]\n          [(= n (/ (length l)\
    \ 2)) (first l)]\n          [else (median-helper (rest l) (+ n 1))]))\n  (cond\
    \ [(empty? l) 0]\n        [(= (length l) 1) (first l)]\n        [(= (length l)\
    \ 2) (/ (+ (first l) (second l)) 2)]\n        [else (median-helper (sort l <)\
    \ 0)]))\n", "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n  \
    \    [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n\
    \    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n\
    \      [else (cons (first l) (insert x (rest l)))]))\n  (define (middle l)\n \
    \   (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n   \
    \   [else (middle (rest l))]))\n  (define (even? l)\n    (cond\n      [(empty?\
    \ l) #f]\n      [(empty? (rest l)) #f]\n      [else (even? (rest (rest l)))]))\n\
    \  (define (average x y)\n    (/ (+ x y) 2))\n  (cond\n    [(empty? l) empty]\n\
    \    [(even? l) (average (middle l) (middle (rest l)))]\n    [else (middle l)]))\n",
  "  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n        (/ (+ (list-ref\
    \ sorted (/ (length sorted) 2))\n              (list-ref sorted (- (/ (length\
    \ sorted) 2) 1)))\n           2)\n        (list-ref sorted (/ (length sorted)\
    \ 2)))))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l n)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(= n 0) (first l)]\n      [else (median-helper (rest l) (- n 1))]))\n\
    \  (define (length l)\n    (cond\n      [(empty? l) 0]\n      [else (+ 1 (length\
    \ (rest l)))]))\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (odd?\
    \ n)\n    (not (even? n)))\n  (define (half n)\n    (/ n 2))\n  (define (double\
    \ n)\n    (* n 2))\n  (define (sum l)\n    (cond\n      [(empty? l) 0]\n     \
    \ [else (+ (first l) (sum (rest l)))]))\n  (define (average l)\n    (/ (sum l)\
    \ (length l)))\n  (cond\n    [(empty? l) 0]\n    [(even? (length l)) (average\
    \ (list (median-helper l (half (length l))) (median-helper l (double (half (length\
    \ l))))))]\n    [(odd? (length l)) (median-helper l (half (length l)))]))\n</code>\n",
  "  (define (median-helper l acc)\n    (if (null? l)\n        (if (even? (length\
    \ acc))\n            (/ (+ (list-ref acc (/ (length acc) 2))\n               \
    \     (list-ref acc (+ (/ (length acc) 2) 1)))\n               2)\n          \
    \  (list-ref acc (/ (length acc) 2)))\n        (median-helper (cdr l) (insert-sorted\
    \ (car l) acc))))\n  (median-helper l '()))\n", "  (define (median-helper l n)\n\
    \    (cond\n      [(empty? l) 0]\n      [(= n (/ (length l) 2)) (first l)]\n \
    \     [else (median-helper (rest l) (+ n 1))]))\n  (median-helper (sort l <) 0))\n",
  "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n      [else (insert\
    \ (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n    (cond\n    \
    \  [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n      [else (cons\
    \ (first l) (insert x (rest l)))]))\n  (define (middle l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (middle (rest l))]))\n\
    \  (define (middle-two l)\n    (cond\n      [(empty? l) empty]\n      [(empty?\
    \ (rest l)) empty]\n      [(empty? (rest (rest l))) empty]\n      [(empty? (rest\
    \ (rest (rest l)))) (list (first l) (first (rest l)))]\n      [else (middle-two\
    \ (rest l))]))\n  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (first\
    \ l)]\n    [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n \
    \   [else\n     (cond\n       [(odd? (length l)) (middle (sort-list l))]\n   \
    \    [else (/ (+ (first (middle-two (sort-list l))) (first (rest (middle-two (sort-list\
    \ l))))) 2)])]))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n\
    \          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l n)\n    (cond [(=\
    \ n 1) (car l)]\n          [(= n 2) (/ (+ (car l) (cadr l)) 2)]\n          [(=\
    \ n 3) (car l)]\n          [else (median-helper (cdr l) (- n 1))]))\n  (median-helper\
    \ l (length l)))\n", "  (define (median-helper l n)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l) (- n 1))]))\n  (median-helper l (length\
    \ l)))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n      \
    \  (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n",
  "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n      [else (insert\
    \ (first l) (sort-list (rest l)))]))\n  (define (insert n l)\n    (cond\n    \
    \  [(empty? l) (list n)]\n      [(< n (first l)) (cons n l)]\n      [else (cons\
    \ (first l) (insert n (rest l)))]))\n  (define (middle l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) empty]\n      [(empty? (rest (rest l)))\
    \ (first l)]\n      [else (middle (rest l))]))\n  (define (average a b)\n    (/\
    \ (+ a b) 2))\n  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (first\
    \ l)]\n    [(empty? (rest (rest l))) (average (first l) (second l))]\n    [else\
    \ (average (middle (sort-list l)) (middle (rest (sort-list l))))]))\n", "  (define\
    \ (median-helper l n)\n    (if (zero? n)\n        (car l)\n        (if (= n 1)\n\
    \            (/ (+ (car l) (cadr l)) 2)\n            (median-helper (cdr l) (-\
    \ n 2)))))\n  (median-helper (sort l <) (quotient (length l) 2)))\n", "  (define\
    \ (sort l)\n    (cond [(empty? l) empty]\n          [else (insert (first l) (sort\
    \ (rest l)))]))\n  (define (insert x l)\n    (cond [(empty? l) (list x)]\n   \
    \       [(< x (first l)) (cons x l)]\n          [else (cons (first l) (insert\
    \ x (rest l)))]))\n  (define (median-of-sorted l)\n    (if (empty? l)\n      \
    \  0\n        (if (even? (length l))\n            (/ (+ (list-ref l (/ (length\
    \ l) 2))\n                  (list-ref l (- (/ (length l) 2) 1)))\n           \
    \    2)\n            (list-ref l (/ (length l) 2)))))\n  (median-of-sorted (sort\
    \ l)))\n", "  (define (sort-list l)\n    (cond [(empty? l) empty]\n          [else\
    \ (insert (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n    (cond\
    \ [(empty? l) (list x)]\n          [(< x (first l)) (cons x l)]\n          [else\
    \ (cons (first l) (insert x (rest l)))]))\n  (define (median-helper l)\n    (cond\
    \ [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n          [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n          [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort-list l)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n         \
    \ [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l\
    \ l-len)\n    (cond [(empty? l) 0]\n          [(= l-len 1) (first l)]\n      \
    \    [(= l-len 2) (/ (+ (first l) (second l)) 2)]\n          [(= l-len 3) (first\
    \ l)]\n          [else (median-helper (rest l) (- l-len 1))]))\n  (median-helper\
    \ l (length l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n \
    \ (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (sort l)\n    (cond\n \
    \     [(empty? l) empty]\n      [else\n       (define (insert x l)\n         (cond\n\
    \           [(empty? l) (list x)]\n           [(< x (first l)) (cons x l)]\n \
    \          [else (cons (first l) (insert x (rest l)))]))\n       (insert (first\
    \ l) (sort (rest l)))]))\n  (define (middle l)\n    (if (empty? (rest l))\n  \
    \      (first l)\n        (/ (+ (first l) (first (rest l))) 2)))\n  (middle (sort\
    \ l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(= (length l) 1) (first l)]\n      [(= (length l) 2) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else\n       (let* ([mid (/ (length l) 2)]\n    \
    \          [left (take l mid)]\n              [right (drop l mid)])\n        \
    \ (if (< (first left) (first right))\n             (median-helper (append left\
    \ (list (first right))))\n             (median-helper (append (list (first left))\
    \ right))))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l\
    \ n)\n    (cond\n      [(empty? l) (error \"median: empty list\")]\n      [(=\
    \ n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [(= n\
    \ 3)\n       (let ([a (first l)]\n             [b (second l)]\n             [c\
    \ (third l)])\n         (cond\n           [(< a b)\n            (cond\n      \
    \        [(< b c) b]\n              [(< a c) c]\n              [else a])]\n  \
    \         [(< b c)\n            (cond\n              [(< a c) a]\n           \
    \   [(< b c) c]\n              [else b])]\n           [else\n            (cond\n\
    \              [(< a b) a]\n              [(< a c) c]\n              [else b])]))]\n\
    \      [else\n       (let ([a (first l)]\n             [b (second l)]\n      \
    \       [c (third l)])\n         (cond\n           [(< a b)\n            (cond\n\
    \              [(< b c) (median-helper (rest l) (- n 1))]\n              [(< a\
    \ c) (median-helper (rest (rest l)) (- n 2))]\n              [else (median-helper\
    \ (rest (rest (rest l))) (- n 3))])]\n           [(< b c)\n            (cond\n\
    \              [(< a c) (median-helper (rest (rest (rest l))) (- n 3))]\n    \
    \          [(< b c) (median-helper (rest (rest l)) (- n 2))]\n              [else\
    \ (median-helper (rest l) (- n 1))])]\n           [else\n            (cond\n \
    \             [(< a b) (median-helper (rest (rest (rest l))) (- n 3))]\n     \
    \         [(< a c) (median-helper (rest (rest l)) (- n 2))]\n              [else\
    \ (median-helper (rest l) (- n 1))])]))]))\n  (median-helper l (length l)))\n",
  "  (define (median-helper l n)\n    (cond\n      [(= n 1) (car l)]\n      [(= n\
    \ 2) (/ (+ (car l) (cadr l)) 2)]\n      [(even? n)\n       (/ (+ (median-helper\
    \ l (/ n 2))\n             (median-helper (drop l (/ n 2)) (/ n 2)))\n       \
    \   2)]\n      [else\n       (median-helper (drop l (/ n 2)) (+ (/ n 2) 1))]))\n\
    \  (median-helper l (length l)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) 0]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l n)\n    (cond\n\
    \      [(= n 0) 0]\n      [(= n 1) (car l)]\n      [(= n 2) (/ (+ (car l) (cadr\
    \ l)) 2)]\n      [(= n 3) (car (sort l <))]\n      [else (median-helper (sort\
    \ l <) (- n 2))]))\n  (median-helper l (length l)))\n", "  (define (sort-list\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [else (insert (first l) (sort-list\
    \ (rest l)))]))\n  (define (insert e l)\n    (cond\n      [(empty? l) (list e)]\n\
    \      [(< e (first l)) (cons e l)]\n      [else (cons (first l) (insert e (rest\
    \ l)))]))\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort-list l)))\n", "  (define (median-helper l n)\n    (cond [(empty? l) (error\
    \ \"median: empty list\")]\n          [(= 1 n) (first l)]\n          [(= 2 n)\
    \ (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l) (-\
    \ n 1))]))\n  (median-helper l (length l)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n         \
    \ [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort l)\n    (cond\
    \ [(empty? l) empty]\n          [else (insert (first l) (sort (rest l)))]))\n\
    \  (define (insert x l)\n    (cond [(empty? l) (list x)]\n          [(< x (first\
    \ l)) (cons x l)]\n          [else (cons (first l) (insert x (rest l)))]))\n \
    \ (define (even? n) (= (remainder n 2) 0))\n  (define (middle l)\n    (if (even?\
    \ (length l))\n        (/ (+ (list-ref l (/ (length l) 2))\n              (list-ref\
    \ l (- (/ (length l) 2) 1)))\n           2)\n        (list-ref l (/ (length l)\
    \ 2))))\n  (middle (sort l)))\n", "  (define (median-helper l n)\n    (cond [(empty?\
    \ l) 0]\n          [(= n (/ (length l) 2)) (first l)]\n          [else (median-helper\
    \ (rest l) (+ n 1))]))\n  (median-helper (sort l <) 0))\n", "  (define (sort-list\
    \ l)\n    (cond [(empty? l) empty]\n          [else (insert (first l) (sort-list\
    \ (rest l)))]))\n  (define (insert x l)\n    (cond [(empty? l) (list x)]\n   \
    \       [(< x (first l)) (cons x l)]\n          [else (cons (first l) (insert\
    \ x (rest l)))]))\n  (define (length l)\n    (cond [(empty? l) 0]\n          [else\
    \ (+ 1 (length (rest l)))]))\n  (define (nth-element l n)\n    (cond [(empty?\
    \ l) empty]\n          [(= n 0) (first l)]\n          [else (nth-element (rest\
    \ l) (- n 1))]))\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (odd?\
    \ n)\n    (not (even? n)))\n  (define (half n)\n    (/ n 2))\n  (define (nth-element-from-end\
    \ l n)\n    (nth-element l (- (length l) n)))\n  (define (median-of-odd-length-list\
    \ l)\n    (nth-element l (half (length l))))\n  (define (median-of-even-length-list\
    \ l)\n    (/ (+ (nth-element-from-end l 1) (nth-element-from-end l 2)) 2))\n \
    \ (cond [(empty? l) empty]\n        [(odd? (length l)) (median-of-odd-length-list\
    \ (sort-list l))]\n        [else (median-of-even-length-list (sort-list l))]))\n",
  "  (define (median-iter l n)\n    (if (empty? l)\n        n\n        (median-iter\
    \ (rest l)\n                     (if (even? (length l))\n                    \
    \     (+ (first l) n)\n                         n))))\n  (/ (median-iter l 0)\n\
    \     (if (even? (length l))\n         2\n         1)))\n", "  (define (median-helper\
    \ l n)\n    (cond\n      [(empty? l) (error \"median: empty list\")]\n      [(=\
    \ n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [(= n\
    \ 3) (/ (+ (first l) (second l) (third l)) 3)]\n      [else (median-helper (rest\
    \ l) (- n 1))]))\n  (median-helper (sort l <) (length l)))\n", "  (define (median-helper\
    \ l n)\n    (cond\n      [(empty? l) 0]\n      [(= n (/ (length l) 2)) (first\
    \ l)]\n      [else (median-helper (rest l) (+ n 1))]))\n  (median-helper (sort\
    \ l <) 0))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n  \
    \        [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) 0]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (let ([sorted (sort l <)])\n    (if (even?\
    \ (length sorted))\n        (/ (+ (list-ref sorted (/ (length sorted) 2))\n  \
    \            (list-ref sorted (+ (/ (length sorted) 2) 1)))\n           2)\n \
    \       (list-ref sorted (/ (length sorted) 2)))))\n", "  (define (median-helper\
    \ l n)\n    (cond [(empty? l) 0]\n          [(= n 1) (first l)]\n          [(=\
    \ n 2) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l)\
    \ (- n 1))]))\n  (median-helper l (length l)))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n         \
    \ [(even? (length l))\n           (/ (+ (median-helper (take (quotient (length\
    \ l) 2) l))\n                  (median-helper (drop (quotient (length l) 2) l)))\n\
    \              2)]\n          [else (median-helper (drop (quotient (length l)\
    \ 2) l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n\
    \  (/ (median-helper l) (length l)))\n", "  (define (sort l)\n    (cond [(empty?\
    \ l) empty]\n          [else (insert (first l) (sort (rest l)))]))\n  (define\
    \ (insert n l)\n    (cond [(empty? l) (list n)]\n          [(<= n (first l)) (cons\
    \ n l)]\n          [else (cons (first l) (insert n (rest l)))]))\n  (define (middle\
    \ l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n\
    \          [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n \
    \         [else (middle (rest l))]))\n  (middle (sort l)))\n", "  (define (median-helper\
    \ l n)\n    (cond\n      [(empty? l) 0]\n      [(= n 1) (first l)]\n      [(=\
    \ n 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l) (-\
    \ n 1))]))\n  (median-helper l (length l)))\n", "  (define (median-helper l n)\n\
    \    (cond\n      [(= n 0) (car l)]\n      [(= n 1) (/ (+ (car l) (cadr l)) 2)]\n\
    \      [(= n 2) (cadr l)]\n      [else (median-helper (cdr l) (- n 2))]))\n  (median-helper\
    \ (sort l <) (length l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else\n       (define (split l)\n         (cond\n\
    \           [(empty? l) (list empty empty)]\n           [(empty? (rest l)) (list\
    \ (list (first l)) empty)]\n           [else\n            (define (split-helper\
    \ l1 l2)\n              (cond\n                [(empty? l1) (list l2 empty)]\n\
    \                [(empty? (rest l1)) (list (cons (first l1) l2) (rest l1))]\n\
    \                [else (split-helper (rest l1) (cons (first l1) l2))]))\n    \
    \        (split-helper l empty)]))\n       (define (merge l1 l2)\n         (cond\n\
    \           [(empty? l1) l2]\n           [(empty? l2) l1]\n           [(< (first\
    \ l1) (first l2)) (cons (first l1) (merge (rest l1) l2))]\n           [else (cons\
    \ (first l2) (merge l1 (rest l2)))]))\n       (define (merge-sort l)\n       \
    \  (cond\n           [(empty? l) empty]\n           [(empty? (rest l)) l]\n  \
    \         [else\n            (define (merge-sort-helper l1 l2)\n             \
    \ (merge (merge-sort l1) (merge-sort l2)))\n            (merge-sort-helper (first\
    \ (split l)) (second (split l)))]))\n       (define (median-helper-helper l)\n\
    \         (cond\n           [(empty? l) 0]\n           [(empty? (rest l)) (first\
    \ l)]\n           [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n        \
    \   [else (median-helper-helper (rest l))]))\n       (median-helper-helper (merge-sort\
    \ l))]))\n  (median-hel", "  (define (median-helper l)\n    (if (null? l)\n  \
    \      0\n        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l)\
    \ (length l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n\
    \          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l n)\n    (cond\n\
    \      [(= n 1) (car l)]\n      [(= n 2) (/ (+ (car l) (cadr l)) 2)]\n      [(=\
    \ n 3) (car (sort l <))]\n      [else (median-helper (sort l <) (- n 1))]))\n\
    \  (median-helper l (length l)))\n", "  (define (sort l)\n    (if (null? l)\n\
    \        '()\n        (append (sort (filter (lambda (x) (< x (car l))) (cdr l)))\n\
    \                (list (car l))\n                (sort (filter (lambda (x) (>=\
    \ x (car l))) (cdr l))))))\n  (define (middle l)\n    (if (null? l)\n        '()\n\
    \        (if (null? (cdr l))\n            (car l)\n            (middle (cdr l)))))\n\
    \  (define (average x y)\n    (/ (+ x y) 2))\n  (if (null? l)\n      0\n     \
    \ (if (even? (length l))\n          (average (middle l) (middle (cdr l)))\n  \
    \        (middle l))))\n", "  (define (median-helper l n)\n    (if (= n 1)\n \
    \       (car l)\n        (if (= n 2)\n            (/ (+ (car l) (cadr l)) 2)\n\
    \            (if (odd? n)\n                (median-helper (cdr l) (- n 1))\n \
    \               (/ (+ (median-helper l (/ n 2)) (median-helper (cdr l) (/ n 2)))\
    \ 2)))))\n  (median-helper l (length l)))\n", "  (define (median-helper l n)\n\
    \    (cond\n      [(empty? l) (error \"median: empty list\")]\n      [(= n 1)\
    \ (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [(= n 3) (first\
    \ l)]\n      [else (median-helper (rest l) (- n 2))]))\n  (median-helper l (length\
    \ l)))\n", "  (define (median-helper l n)\n    (if (= n 0)\n        (car l)\n\
    \        (if (= n 1)\n            (/ (+ (car l) (cadr l)) 2)\n            (median-helper\
    \ (cdr l) (- n 2)))))\n  (median-helper (sort l <) (quotient (length l) 2)))\n",
  "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n       (define\
    \ (insert x l)\n         (cond\n           [(empty? l) (list x)]\n           [(<\
    \ x (first l)) (cons x l)]\n           [else (cons (first l) (insert x (rest l)))]))\n\
    \       (insert (first l) (sort (rest l)))]))\n  (define (middle l)\n    (cond\n\
    \      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (middle\
    \ (rest l))]))\n  (define (middle-two l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) empty]\n      [(empty? (rest (rest l))) empty]\n   \
    \   [(empty? (rest (rest (rest l)))) (list (first l) (second l))]\n      [else\
    \ (middle-two (rest l))]))\n  (define (average l)\n    (/ (+ (first l) (second\
    \ l)) 2))\n  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (first l)]\n\
    \    [(empty? (rest (rest l))) (first l)]\n    [else\n     (define sorted (sort\
    \ l))\n     (cond\n       [(empty? (rest (rest (rest l)))) (first sorted)]\n \
    \      [(empty? (rest (rest (rest (rest l))))) (average (middle-two sorted))]\n\
    \       [else (middle sorted)])]))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (merge-sort l)\n    (define\
    \ (merge l1 l2)\n      (cond\n        [(empty? l1) l2]\n        [(empty? l2) l1]\n\
    \        [(< (first l1) (first l2)) (cons (first l1) (merge (rest l1) l2))]\n\
    \        [else (cons (first l2) (merge l1 (rest l2)))]))\n    (define (merge-sort-iter\
    \ l)\n      (cond\n        [(empty? l) empty]\n        [(empty? (rest l)) l]\n\
    \        [else\n         (let* ([l1 (merge-sort-iter (take l (/ (length l) 2)))]\n\
    \                [l2 (merge-sort-iter (drop l (/ (length l) 2)))])\n         \
    \  (merge l1 l2))]))\n    (merge-sort-iter l))\n  (define (median-iter l)\n  \
    \  (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n    \
    \  [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else\
    \ (median-iter (rest l))]))\n  (median-iter (merge-sort l)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper\
    \ (rest (rest l)))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort\
    \ l)\n    (if (null? l)\n        '()\n        (append (sort (filter (lambda (x)\
    \ (< x (car l))) (cdr l)))\n                (list (car l))\n                (sort\
    \ (filter (lambda (x) (>= x (car l))) (cdr l))))))\n  (define (middle l)\n   \
    \ (if (null? l)\n        '()\n        (if (null? (cdr l))\n            (car l)\n\
    \            (middle (cdr l)))))\n  (if (null? l)\n      0\n      (if (even? (length\
    \ l))\n          (/ (+ (middle (sort l)) (middle (cdr (sort l)))) 2)\n       \
    \   (middle (sort l)))))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) 0]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (let ([sorted (sort l <)])\n    (if (even?\
    \ (length sorted))\n        (/ (+ (list-ref sorted (/ (length sorted) 2))\n  \
    \             (list-ref sorted (- (/ (length sorted) 2) 1)))\n           2)\n\
    \        (list-ref sorted (/ (length sorted) 2)))))\n", "  (define (median-helper\
    \ l n)\n    (cond\n      [(empty? l) 0]\n      [(= n 0) (first l)]\n      [else\
    \ (median-helper (rest l) (- n 1))]))\n  (define (median-helper2 l n)\n    (cond\n\
    \      [(empty? l) 0]\n      [(= n 0) (first l)]\n      [else (median-helper2\
    \ (rest l) (- n 1))]))\n  (define (length l)\n    (cond\n      [(empty? l) 0]\n\
    \      [else (+ 1 (length (rest l)))]))\n  (define (sort l)\n    (cond\n     \
    \ [(empty? l) empty]\n      [else (insert (first l) (sort (rest l)))]))\n  (define\
    \ (insert n l)\n    (cond\n      [(empty? l) (list n)]\n      [(< n (first l))\
    \ (cons n l)]\n      [else (cons (first l) (insert n (rest l)))]))\n  (define\
    \ (even? n)\n    (= (remainder n 2) 0))\n  (define (odd? n)\n    (not (even? n)))\n\
    \  (define (half n)\n    (/ n 2))\n  (define (double n)\n    (* n 2))\n  (define\
    \ (length l)\n    (cond\n      [(empty? l) 0]\n      [else (+ 1 (length (rest\
    \ l)))]))\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\
    \ (insert (first l) (sort (rest l)))]))\n  (define (insert n l)\n    (cond\n \
    \     [(empty? l) (list n)]\n      [(< n (first l)) (cons n l)]\n      [else (cons\
    \ (first l) (insert n (rest l)))]))\n  (define (even? n)\n    (= (remainder n\
    \ 2) 0))\n  (define (odd? n)\n    (not (even? n)))\n  (define (half n)\n    (/\
    \ n 2))\n  (define (double n)\n    (* n 2))", "  (define (median-helper l l1 l2)\n\
    \    (cond [(empty? l) (if (empty? l1) (first l2) (if (empty? l2) (first l1) (/\
    \ (+ (first l1) (first l2)) 2))))\n          [(< (first l) (first l1)) (median-helper\
    \ (rest l) l1 (cons (first l) l2))]\n          [(> (first l) (first l1)) (median-helper\
    \ (rest l) (cons (first l) l1) l2)]\n          [else (median-helper (rest l) (cons\
    \ (first l) l1) l2)]))\n  (median-helper l empty empty))\n", "  (define (median-helper\
    \ l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n\
    \  (/ (median-helper l) (length l)))\n", "  (define (median-helper l n)\n    (if\
    \ (= n 0)\n        (car l)\n        (if (= n 1)\n            (/ (+ (car l) (cadr\
    \ l)) 2)\n            (median-helper (cdr l) (- n 2)))))\n  (median-helper (sort\
    \ l <) (quotient (length l) 2)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l n)\n \
    \   (cond\n      [(empty? l) (error \"empty list\")]\n      [(= n 1) (first l)]\n\
    \      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [(even? n)\n       (/ (+\
    \ (median-helper (rest l) (/ n 2))\n             (median-helper (rest (rest l))\
    \ (/ n 2)))\n          2)]\n      [else (median-helper (rest l) (- n 1))]))\n\
    \  (median-helper l (length l)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n  (/\
    \ (median-helper l) (length l)))\n", "  (define (median-helper l n)\n    (cond\
    \ [(empty? l) (error \"empty list\")]\n          [(= n 1) (first l)]\n       \
    \   [(= n 2) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest\
    \ l) (- n 1))]))\n  (median-helper l (length l)))\n", "  (define (median-helper\
    \ l n)\n    (cond [(empty? l) (error \"median: empty list\")]\n          [(= n\
    \ 1) (first l)]\n          [(= n 2) (/ (+ (first l) (second l)) 2)]\n        \
    \  [(even? n)\n           (median-helper (rest l) (/ n 2))]\n          [else\n\
    \           (median-helper (rest l) (- (/ n 2) 1))]))\n  (median-helper l (length\
    \ l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n   \
    \   [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l acc)\n    (cond [(empty? l) acc]\n          [(empty?\
    \ (rest l)) (acc + (first l))]\n          [else (median-helper (rest l) (+ acc\
    \ (first l)))]))\n  (/ (median-helper l 0) (length l)))\n", "  (define (sort l)\n\
    \    (cond\n      [(empty? l) empty]\n      [else\n       (define (insert x l)\n\
    \         (cond\n           [(empty? l) (list x)]\n           [(< x (first l))\
    \ (cons x l)]\n           [else (cons (first l) (insert x (rest l)))]))\n    \
    \   (insert (first l) (sort (rest l)))]))\n  (define (middle l)\n    (cond\n \
    \     [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (middle\
    \ (rest l))]))\n  (define (average x y)\n    (/ (+ x y) 2))\n  (cond\n    [(empty?\
    \ l) empty]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l)))\
    \ (average (first l) (second l))]\n    [else (middle (sort l))]))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l))\
    \ (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n\
    \      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", " \
    \ (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(even? (length l))\n           (/ (+ (first l) (first\
    \ (rest l))) 2)]\n          [else (first (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l n)\n    (cond\n      [(empty? l) 0]\n\
    \      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n \
    \     [else (median-helper (rest l) (- n 1))]))\n  (median-helper l (length l)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (sort-list l)\n    (if (null? l)\n        '()\n      \
    \  (insert (car l) (sort-list (cdr l)))))\n  (define (insert x l)\n    (if (null?\
    \ l)\n        (list x)\n        (if (<= x (car l))\n            (cons x l)\n \
    \           (cons (car l) (insert x (cdr l))))))\n  (define (median-helper l)\n\
    \    (if (null? l)\n        0\n        (if (null? (cdr l))\n            (car l)\n\
    \            (/ (+ (car l) (car (cdr l))) 2))))\n  (median-helper (sort-list l)))\n",
  "  (define (median-helper l n)\n    (cond\n      [(empty? l) (error \"median: empty\
    \ list\")]\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [(= n 3) (/ (+ (first l) (second l) (third l)) 3)]\n      [else\
    \ (median-helper (rest l) (- n 1))]))\n  (median-helper (sort l <) (length l)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (insert-in-order x l)\n    (cond [(empty? l) (list x)]\n          [(<=\
    \ x (first l)) (cons x l)]\n          [else (cons (first l) (insert-in-order x\
    \ (rest l)))]))\n  (define (insertion-sort l)\n    (if (empty? l)\n        empty\n\
    \        (insert-in-order (first l) (insertion-sort (rest l)))))\n  (define (median-of-sorted\
    \ l)\n    (if (empty? l)\n        0\n        (if (empty? (rest l))\n         \
    \   (first l)\n            (/ (+ (first l) (second l)) 2))))\n  (median-of-sorted\
    \ (insertion-sort l)))\n", "  (cond [(empty? l) 0]\n        [(empty? (rest l))\
    \ (first l)]\n        [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n\
    \        [else (median (rest l))]))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n  (/\
    \ (median-helper l) (length l)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n        \
    \  [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l n)\n    (cond [(empty? l) (error \"median: empty list\")]\n          [(= n\
    \ 1) (first l)]\n          [(= n 2) (/ (+ (first l) (second l)) 2)]\n        \
    \  [(= n 3) (first l)]\n          [else (median-helper (rest l) (- n 1))]))\n\
    \  (median-helper l (length l)))\n", "  (define (median-helper l n)\n    (cond\
    \ [(empty? l) 0]\n          [(= n 1) (first l)]\n          [(= n 2) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l) (- n 1))]))\n  (median-helper\
    \ l (length l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n\
    \          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (if (null?\
    \ l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper\
    \ l) (length l)))\n", "  (define (median-helper l n)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(= n (/ (length l) 2)) (first l)]\n      [else (median-helper\
    \ (rest l) (+ n 1))]))\n  (median-helper (sort l <) 0))\n", "  (define (median-helper\
    \ l)\n    (if (empty? l)\n        0\n        (+ (first l) (median-helper (rest\
    \ l)))))\n  (/ (median-helper l) (length l)))\n", "  (define (median-helper l)\n\
    \    (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n\
    \  (/ (median-helper l) (length l)))\n", "  (define (sort l)\n    (cond\n    \
    \  [(empty? l) empty]\n      [else\n       (define (insert x l)\n         (cond\n\
    \           [(empty? l) (list x)]\n           [(< x (first l)) (cons x l)]\n \
    \          [else (cons (first l) (insert x (rest l)))]))\n       (insert (first\
    \ l) (sort (rest l)))]))\n  (define (length l)\n    (cond\n      [(empty? l) 0]\n\
    \      [else (+ 1 (length (rest l)))]))\n  (define (nth n l)\n    (cond\n    \
    \  [(= n 0) (first l)]\n      [else (nth (- n 1) (rest l))]))\n  (define (half\
    \ l)\n    (quotient (length l) 2))\n  (define (even? n)\n    (= (remainder n 2)\
    \ 0))\n  (define (sorted l)\n    (cond\n      [(empty? l) true]\n      [(empty?\
    \ (rest l)) true]\n      [(< (first l) (first (rest l))) (sorted (rest l))]\n\
    \      [else false]))\n  (define (median-of-sorted l)\n    (cond\n      [(even?\
    \ (length l))\n       (/ (+ (nth (half l) l) (nth (- (half l) 1) l)) 2)]\n   \
    \   [else (nth (half l) l)]))\n  (median-of-sorted (sort l)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l n)\n    (cond\n      [(= n 1) (car l)]\n      [(= n 2) (/ (+ (car l) (cadr\
    \ l)) 2)]\n      [(= n 3) (car (sort l <))]\n      [else (median-helper (sort\
    \ l <) (- n 1))]))\n  (median-helper l (length l)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n      [else\n       (let\
    \ ([mid (quotient (length l) 2)])\n         (median-helper (list (list-ref l mid)\n\
    \                              (list-ref l (- mid 1))\n                      \
    \        (list-ref l (- mid 2))\n                              (list-ref l (+\
    \ mid 1))\n                              (list-ref l (+ mid 2))))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (sort l)\n    (cond [(empty? l) empty]\n       \
    \   [else (insert (first l) (sort (rest l)))]))\n  (define (insert e l)\n    (cond\
    \ [(empty? l) (list e)]\n          [(< e (first l)) (cons e l)]\n          [else\
    \ (cons (first l) (insert e (rest l)))]))\n  (define (middle l)\n    (if (empty?\
    \ (rest l))\n        (first l)\n        (/ (+ (first l) (first (rest l))) 2)))\n\
    \  (if (empty? l)\n      empty\n      (middle (sort l))))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n          [else\n  \
    \         (let* ([m (/ (length l) 2)]\n                  [l1 (take l m)]\n   \
    \               [l2 (drop l m)])\n             (if (< (first l1) (first l2))\n\
    \                 (median-helper l1)\n                 (median-helper l2)))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (sort-list l)\n    (cond [(empty?\
    \ l) empty]\n          [else (insert (first l) (sort-list (rest l)))]))\n  (define\
    \ (insert x l)\n    (cond [(empty? l) (list x)]\n          [(< x (first l)) (cons\
    \ x l)]\n          [else (cons (first l) (insert x (rest l)))]))\n  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort-list l)))\n", "  (define\
    \ (sort l)\n    (cond [(empty? l) empty]\n          [else (insert (first l) (sort\
    \ (rest l)))]))\n  (define (insert x l)\n    (cond [(empty? l) (list x)]\n   \
    \       [(< x (first l)) (cons x l)]\n          [else (cons (first l) (insert\
    \ x (rest l)))]))\n  (define (middle l)\n    (cond [(empty? l) empty]\n      \
    \    [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (first (rest l))) 2)]\n          [else (middle (rest l))]))\n  (middle\
    \ (sort l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n\
    \      [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l)\
    \ (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l n)\n    (cond\n      [(empty? l)\
    \ (error \"empty list\")]\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first\
    \ l) (second l)) 2)]\n      [(= n 3) (/ (+ (first l) (second l) (third l)) 3)]\n\
    \      [else (median-helper (rest l) (- n 1))]))\n  (median-helper (sort l <)\
    \ (length l)))\n", "  (define (median-helper l n)\n    (cond\n      [(empty? l)\
    \ (error \"median: empty list\")]\n      [(= n 1) (first l)]\n      [(= n 2) (/\
    \ (+ (first l) (second l)) 2)]\n      [(= n 3) (/ (+ (first l) (second l) (third\
    \ l)) 3)]\n      [else (median-helper (rest l) (- n 1))]))\n  (median-helper (sort\
    \ l <) (length l)))\n", "  (define (sort l)\n    (cond [(empty? l) empty]\n  \
    \        [else (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n\
    \    (cond [(empty? l) (list x)]\n          [(< x (first l)) (cons x l)]\n   \
    \       [else (cons (first l) (insert x (rest l)))]))\n  (define (middle l)\n\
    \    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n     \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      \
    \    [else (middle (rest l))]))\n  (middle (sort l)))\n", "  (define (median-helper\
    \ l)\n    (define (median-helper-helper l)\n      (if (null? l)\n          0\n\
    \          (+ (car l) (median-helper-helper (cdr l)))))\n    (/ (median-helper-helper\
    \ l) (length l)))\n  (define (median-helper-2 l)\n    (if (null? l)\n        0\n\
    \        (if (= (length l) 1)\n            (car l)\n            (median-helper\
    \ (cdr l)))))\n  (median-helper-2 (sort l <)))\n", "  (define (median-iter l i)\n\
    \    (cond [(empty? l) (error \"median: empty list\")]\n          [(= i (/ (length\
    \ l) 2)) (first l)]\n          [else (median-iter (rest l) (+ i 1))]))\n  (median-iter\
    \ (sort l <) 0))\n", "  (define (sort l)\n    (cond [(empty? l) empty]\n     \
    \     [else (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n  \
    \  (cond [(empty? l) (list x)]\n          [(< x (first l)) (cons x l)]\n     \
    \     [else (cons (first l) (insert x (rest l)))]))\n  (define (middle l)\n  \
    \  (if (empty? (rest l))\n        (first l)\n        (middle (rest l))))\n  (define\
    \ (even? l)\n    (if (empty? (rest l))\n        #f\n        (even? (rest l))))\n\
    \  (define (average x y)\n    (/ (+ x y) 2))\n  (if (even? (sort l))\n      (average\
    \ (middle (sort l)) (middle (rest (sort l))))\n      (middle (sort l))))\n", " \
    \ (define (median-helper l m)\n    (cond [(empty? l) m]\n          [(= (length\
    \ l) 1) (/ (+ (first l) m) 2)]\n          [else (median-helper (rest l) (first\
    \ l))]))\n  (median-helper (sort l <) 0))\n", "  (define (sort-list l)\n    (cond\
    \ [(empty? l) empty]\n          [else (insert (first l) (sort-list (rest l)))]))\n\
    \  (define (insert x l)\n    (cond [(empty? l) (list x)]\n          [(< x (first\
    \ l)) (cons x l)]\n          [else (cons (first l) (insert x (rest l)))]))\n \
    \ (define (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (first\
    \ (rest l))) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort-list l)))\n", "  (define (median-helper l n)\n    (cond\n      [(= n 0)\
    \ (first l)]\n      [(= n 1) (/ (+ (first l) (second l)) 2)]\n      [(= n 2) (second\
    \ l)]\n      [else (median-helper (rest l) (- n 1))]))\n  (median-helper (sort\
    \ l <) (quotient (length l) 2)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n  (/\
    \ (median-helper l) (length l)))\n", "  (define (sort l)\n    (cond [(empty? l)\
    \ empty]\n          [else (insert (first l) (sort (rest l)))]))\n  (define (insert\
    \ x l)\n    (cond [(empty? l) (list x)]\n          [(< x (first l)) (cons x l)]\n\
    \          [else (cons (first l) (insert x (rest l)))]))\n  (define (length l)\n\
    \    (cond [(empty? l) 0]\n          [else (+ 1 (length (rest l)))]))\n  (define\
    \ (nth n l)\n    (cond [(zero? n) (first l)]\n          [else (nth (- n 1) (rest\
    \ l))]))\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (odd? n)\n\
    \    (not (even? n)))\n  (define (half n)\n    (/ n 2))\n  (define (nth-median\
    \ l)\n    (cond [(even? (length l))\n           (/ (+ (nth (half (length l)) l)\n\
    \                 (nth (- (half (length l)) 1) l))\n              2)]\n      \
    \    [else (nth (half (length l)) l)]))\n  (nth-median (sort l)))\n", "  (cond\n\
    \    [(empty? l) (error \"Empty list\")]\n    [(empty? (rest l)) (first l)]\n\
    \    [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n    [else (median\
    \ (sort < l))]))\n", "  (define (median-helper l n)\n    (cond [(empty? l) (error\
    \ \"median: empty list\")]\n          [(= n 1) (first l)]\n          [(= n 2)\
    \ (/ (+ (first l) (second l)) 2)]\n          [(= n 3) (/ (+ (first l) (second\
    \ l) (third l)) 3)]\n          [else (median-helper (rest l) (- n 1))]))\n  (median-helper\
    \ (sort l <) (length l)))\n", "  (define (sort l)\n    (cond [(empty? l) empty]\n\
    \          [else (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n\
    \    (cond [(empty? l) (list x)]\n          [(< x (first l)) (cons x l)]\n   \
    \       [else (cons (first l) (insert x (rest l)))]))\n  (define (middle l)\n\
    \    (if (empty? (rest l))\n        (first l)\n        (middle (rest l))))\n \
    \ (define (even? l)\n    (if (empty? (rest l))\n        #f\n        (even? (rest\
    \ l))))\n  (define (average x y)\n    (/ (+ x y) 2))\n  (if (even? (sort l))\n\
    \      (average (middle (sort l)) (middle (rest (sort l))))\n      (middle (sort\
    \ l))))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n  \
    \    [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else\n       (let ([mid (quotient (length l) 2)])\n        \
    \ (median-helper (list (list-ref l mid)\n                              (list-ref\
    \ l (- mid 1))\n                              (list-ref l (- mid 2))\n       \
    \                       (list-ref l (+ mid 1))\n                             \
    \ (list-ref l (+ mid 2))))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l n)\n    (cond [(empty? l) (error \"median: empty list\")]\n          [(= n\
    \ 1) (first l)]\n          [(= n 2) (/ (+ (first l) (second l)) 2)]\n        \
    \  [(= n 3) (/ (+ (first l) (second l) (third l)) 3)]\n          [else (median-helper\
    \ (rest l) (- n 1))]))\n  (median-helper (sort l <) (length l)))\n", "  (define\
    \ (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l))\
    \ (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (cond [(empty? l) 0]\n        [(empty? (rest l)) (first l)]\n        [(= (length\
    \ l) 2) (/ (+ (first l) (second l)) 2)]\n        [else (median (rest (rest l)))]))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (sorted-list l)\n    (cond [(empty? l) empty]\n      \
    \    [(empty? (rest l)) l]\n          [else (insert (first l) (sorted-list (rest\
    \ l)))]))\n  (define (insert e l)\n    (cond [(empty? l) (list e)]\n         \
    \ [(< e (first l)) (cons e l)]\n          [else (cons (first l) (insert e (rest\
    \ l)))]))\n  (define (middle l)\n    (cond [(empty? l) empty]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (first l)]\n     \
    \     [else (middle (rest l))]))\n  (define (middle-two l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) empty]\n          [(empty? (rest (rest\
    \ l))) (list (first l) (first (rest l)))]\n          [else (middle-two (rest l))]))\n\
    \  (cond [(empty? l) empty]\n        [(empty? (rest l)) (first l)]\n        [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n        [else (cond\
    \ [(even? (length l)) (/ (+ (first (middle-two (sorted-list l))) (first (rest\
    \ (middle-two (sorted-list l))))) 2)]\n                    [else (first (middle\
    \ (sorted-list l)))])]))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) (error \"empty list\")]\n          [(empty? (rest l)) (first l)]\n      \
    \    [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort < l)))\n", "  (define (median-helper\
    \ l n)\n    (cond\n      [(empty? l) 0]\n      [(= n 1) (first l)]\n      [(=\
    \ n 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l) (-\
    \ n 1))]))\n  (median-helper l (length l)))\n", "  (define (sort l)\n    (cond\
    \ [(empty? l) empty]\n          [else (insert (first l) (sort (rest l)))]))\n\
    \  (define (insert x l)\n    (cond [(empty? l) (list x)]\n          [(< x (first\
    \ l)) (cons x l)]\n          [else (cons (first l) (insert x (rest l)))]))\n \
    \ (define (middle l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l))\
    \ (first l)]\n          [else (middle (rest l))]))\n  (define (length l)\n   \
    \ (cond [(empty? l) 0]\n          [else (+ 1 (length (rest l)))]))\n  (define\
    \ (even? n)\n    (= (remainder n 2) 0))\n  (define (odd? n)\n    (not (even? n)))\n\
    \  (define (first-half l)\n    (cond [(empty? l) empty]\n          [(odd? (length\
    \ l)) (first l)]\n          [else (first-half (rest l))]))\n  (define (second-half\
    \ l)\n    (cond [(empty? l) empty]\n          [(odd? (length l)) (rest l)]\n \
    \         [else (second-half (rest l))]))\n  (define (average x y)\n    (/ (+\
    \ x y) 2))\n  (cond [(empty? l) empty]\n        [(odd? (length l)) (middle (sort\
    \ l))]\n        [else (average (middle (first-half (sort l)))\n              \
    \         (middle (second-half (sort l))))]))\n", "  (define (median-helper l\
    \ n)\n    (cond [(empty? l) (error \"median: empty list\")]\n          [(= n 1)\
    \ (first l)]\n          [(= n 2) (/ (+ (first l) (second l)) 2)]\n          [(odd?\
    \ n) (median-helper (rest l) (- n 1))]\n          [else (/ (+ (median-helper l\
    \ (/ n 2))\n                     (median-helper (drop l (/ n 2)) (/ n 2)))\n \
    \                 2)]))\n  (median-helper l (length l)))\n", "  (define (sort\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [else\n       (define (insert\
    \ x l)\n         (cond\n           [(empty? l) (list x)]\n           [(< x (first\
    \ l)) (cons x l)]\n           [else (cons (first l) (insert x (rest l)))]))\n\
    \       (insert (first l) (sort (rest l)))]))\n  (define (middle l)\n    (cond\n\
    \      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (middle\
    \ (rest l))]))\n  (define (average x y)\n    (/ (+ x y) 2))\n  (cond\n    [(empty?\
    \ l) empty]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l)))\
    \ (average (first l) (first (rest l)))]\n    [else (middle (sort l))]))\n", " \
    \ (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n  \
    \    [else\n       (median-helper (sort < l))]))\n  (median-helper l))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
