name: HumanEval_115_max_fill
language: rkt
prompt: "#lang racket\n\n#| You are given a rectangular grid of wells. Each row represents\
  \ a single well,\nand each 1 in a row represents a single unit of water.\nEach well\
  \ has a corresponding bucket that can be used to extract water from it, \nand all\
  \ buckets have the same capacity.\nYour task is to use the buckets to empty the\
  \ wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\n\
  >>> (max_fill (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1)\n6\nExample\
  \ 2:\n>>> (max_fill (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1\
  \ 1 1)) 2)\n5\nExample 3:\n>>> (max_fill (list (list 0 0 0) (list 0 0 0)) 5)\n0\n\
  Constraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1\
  \ <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10|#\n\
  (define (max_fill grid capacity)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_fill))\n\
  \    (check-equal? (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1))\
  \ 1) 6)\n    (check-equal? (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list\
  \ 1 1 1 1) (list 0 1 1 1)) 2) 5)\n    (check-equal? (candidate (list (list 0 0 0)\
  \ (list 0 0 0)) 5) 0)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1\
  \ 1 1 1)) 2) 4)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1 1 1 1))\
  \ 9) 2)\n))\n\n(test-humaneval)"
completions: ["  (define (fill-row row)\n    (let loop ([i 0] [j 0] [water 0])\n \
    \     (cond [(= i (length row)) water]\n            [(= j capacity) (loop (+ i\
    \ 1) 0 water)]\n            [(= (list-ref row i) 1) (loop i (+ j 1) (+ water 1))]\n\
    \            [else (loop i (+ j 1) water)])))\n  (define (fill-grid grid)\n  \
    \  (let loop ([i 0] [water 0])\n      (cond [(= i (length grid)) water]\n    \
    \        [else (loop (+ i 1) (+ (fill-row (list-ref grid i)) water))])))\n  (fill-grid\
    \ grid))\n", "  (define (fill-wells wells)\n    (cond [(empty? wells) 0]\n   \
    \       [(= (sum (first wells)) capacity) (add1 (fill-wells (rest wells)))]\n\
    \          [else (fill-wells (rest wells))]))\n  (fill-wells grid))\n", "  (define\
    \ (fill-row row)\n    (let loop ([i 0] [water 0])\n      (cond [(= i (length row))\
    \ water]\n            [(= (list-ref row i) 1) (loop (+ i 1) (+ water capacity))]\n\
    \            [else (loop (+ i 1) water)])))\n  (define (fill-grid grid)\n    (let\
    \ loop ([i 0] [water 0])\n      (cond [(= i (length grid)) water]\n          \
    \  [else (loop (+ i 1) (+ (fill-row (list-ref grid i)) water))])))\n  (fill-grid\
    \ grid))\n", "  (define (max-row row)\n    (apply max row))\n  (define (min-row\
    \ row)\n    (apply min row))\n  (define (max-col col)\n    (apply max col))\n\
    \  (define (min-col col)\n    (apply min col))\n  (define (max-row-col row col)\n\
    \    (max (max-row row) (max-col col)))\n  (define (min-row-col row col)\n   \
    \ (min (min-row row) (min-col col)))\n  (define (max-row-col-cap row col cap)\n\
    \    (min (max-row-col row col) cap))\n  (define (min-row-col-cap row col cap)\n\
    \    (min (min-row-col row col) cap))\n  (define (max-fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (+ (max-fill-helper (cdr grid) capacity)\n\
    \           (max-row-col-cap (car grid) (transpose grid) capacity))))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (define (fill-wells wells)\n      (if (null? wells)\n\
    \          0\n          (if (equal? (car wells) 1)\n              (+ capacity\
    \ (fill-wells (cdr wells)))\n              (fill-wells (cdr wells)))))\n    (fill-wells\
    \ row))\n  (define (fill-grid grid)\n    (if (null? grid)\n        0\n       \
    \ (+ (fill-row (car grid)) (fill-grid (cdr grid)))))\n  (fill-grid grid))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (define (fill-cell cell)\n      (cond\n        [(=\
    \ cell 0) 0]\n        [(= cell capacity) capacity]\n        [else cell]))\n  \
    \  (map fill-cell row))\n  (define (fill-grid grid)\n    (map fill-row grid))\n\
    \  (define (max-fill-row row)\n    (define (max-fill-cell cell)\n      (cond\n\
    \        [(= cell 0) 0]\n        [(= cell capacity) capacity]\n        [else capacity]))\n\
    \    (map max-fill-cell row))\n  (define (max-fill-grid grid)\n    (map max-fill-row\
    \ grid))\n  (define (sum-grid grid)\n    (apply + (map sum grid)))\n  (define\
    \ (sum-row row)\n    (apply + row))\n  (define (sum-cell cell)\n    (cond\n  \
    \    [(= cell 0) 0]\n      [(= cell capacity) capacity]\n      [else capacity]))\n\
    \  (define (sum-grid grid)\n    (apply + (map sum-row grid)))\n  (define (sum-row\
    \ row)\n    (apply + (map sum-cell row)))\n  (define (sum-cell cell)\n    (cond\n\
    \      [(= cell 0) 0]\n      [(= cell capacity) capacity]\n      [else capacity]))\n\
    \  (define (sum-grid grid)\n    (apply + (map sum-row grid)))\n  (define (sum-row\
    \ row)\n    (apply + (map sum-cell row)))\n  (define (sum-cell cell)\n    (cond\n\
    \      [(= cell 0) 0]\n      [(= cell capacity) capacity]\n      [else capacity]))\n\
    \  (define (sum-grid grid)\n    (apply + (map sum-row grid)))\n  (define (sum-row\
    \ row)\n    (apply + (map sum-cell row)))\n  (define (sum-cell cell)\n    (cond\n\
    \      [(= cell 0) 0]\n      [(= cell capacity) capacity]\n      [else capacity]))\n\
    \  (define (sum-grid grid)\n    (apply + (map sum-row grid)))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= capacity (first grid)) (add1 (max-fill-helper\
    \ (rest grid) capacity))]\n        [(> capacity (first grid)) (max-fill-helper\
    \ (rest grid) (- capacity (first grid)))]\n        [else (max-fill-helper (rest\
    \ grid) capacity)]))\n    (max-fill-helper-helper (reverse grid) capacity))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \      ]))\n  (max-fill-helper grid capacity))\n", "  (define (fill-row row)\n\
    \    (define (fill-cell cell)\n      (cond [(= cell 0) 0]\n            [(> cell\
    \ capacity) capacity]\n            [else cell]))\n    (apply + (map fill-cell\
    \ row)))\n  (apply + (map fill-row grid)))\n", "  (define (fill-row row)\n   \
    \ (define (fill-cell cell)\n      (cond\n        [(= cell 0) 0]\n        [(= cell\
    \ capacity) capacity]\n        [else (add1 (fill-cell (sub1 cell)))]))\n    (apply\
    \ + (map fill-cell row)))\n  (apply + (map fill-row grid)))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (define (fill-cell cell)\n      (if (zero? cell)\n\
    \          0\n          capacity))\n    (apply + (map fill-cell row)))\n  (apply\
    \ + (map fill-row grid)))\n", "  (define (max-fill-helper grid capacity)\n   \
    \ (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n          [else (max (max-fill-helper (rest grid) capacity)\n\
    \                     (max-fill-helper (rest grid) (- capacity (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (fill-row row)\n    (define\
    \ (fill-cell cell)\n      (if (zero? cell)\n          0\n          capacity))\n\
    \    (apply + (map fill-cell row)))\n  (apply + (map fill-row grid)))\n", "  (define\
    \ (fill-row row)\n    (let ([filled (filter (lambda (x) (= x 1)) row)])\n    \
    \  (if (null? filled)\n          0\n          (ceiling (/ (apply + filled) capacity))))\n\
    \  (apply + (map fill-row grid)))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty?\
    \ grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \        [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n        [(=\
    \ capacity (first grid)) (max-fill-helper (rest grid) capacity)]\n        [(>\
    \ capacity (first grid)) (max-fill-helper (rest grid) (- capacity (first grid)))]\n\
    \        [else (max-fill-helper (rest grid) capacity)]))\n    (define (max-fill-helper-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper-helper (rest grid) capacity)]\n        [(= capacity\
    \ 0) (max-fill-helper-helper (rest grid) capacity)]\n        [(= capacity (first\
    \ grid)) (max-fill-helper-helper (rest grid) capacity)]\n        [(> capacity\
    \ (first grid)) (max-fill-helper-helper (rest grid) (- capacity (first grid)))]\n\
    \        [else (max-fill-helper-helper (rest grid) capacity)]))\n    (cond\n \
    \     [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n      [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n\
    \      [(= capacity (first grid)) (max-fill-helper (rest grid) capacity)]\n  \
    \    [(> capacity (first grid)) (max-fill-helper (rest grid) (- capacity (first\
    \ grid)))]\n      [else (max-fill-helper (rest grid) capacity)]))\n  (define (max-fill-helper-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n      [(= capacity (first grid", "  (define (fill-row\
    \ row)\n    (define (fill-well well)\n      (if (zero? well)\n          0\n  \
    \        capacity))\n    (apply + (map fill-well row)))\n  (apply + (map fill-row\
    \ grid)))\n", "  (define (fill-row row capacity)\n    (define (fill-cell cell\
    \ capacity)\n      (if (zero? cell)\n          capacity\n          (if (zero?\
    \ capacity)\n              0\n              (fill-cell (sub1 cell) (sub1 capacity)))))\n\
    \    (foldl + 0 (map (lambda (cell) (fill-cell cell capacity)) row)))\n  (foldl\
    \ + 0 (map (lambda (row) (fill-row row capacity)) grid)))\n", "  (define (fill-row\
    \ row)\n    (define (fill-cell cell)\n      (if (zero? cell)\n          0\n  \
    \        capacity))\n    (apply + (map fill-cell row)))\n  (apply + (map fill-row\
    \ grid)))\n", "  (define (max_fill-helper grid capacity)\n    (let loop ([grid\
    \ grid] [capacity capacity] [count 0])\n      (cond [(empty? grid) count]\n  \
    \          [(empty? (first grid)) (loop (rest grid) capacity count)]\n       \
    \     [(= capacity 0) (loop (rest grid) capacity count)]\n            [(= capacity\
    \ (first grid)) (loop (rest grid) capacity (+ count 1))]\n            [(> capacity\
    \ (first grid)) (loop (rest grid) (- capacity (first grid)) (+ count 1))]\n  \
    \          [else (loop (rest grid) capacity (+ count 1))])))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty? grid)\
    \ 0]\n        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \        [(and (empty? (rest grid)) (not (empty? (first grid))))\n         (+\
    \ capacity (max-fill-helper-helper (rest grid) capacity))]\n        [(and (not\
    \ (empty? (rest grid))) (not (empty? (first grid))))\n         (+ capacity (max-fill-helper-helper\
    \ (rest grid) capacity))]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (define (fill-cell cell)\n      (if (zero? cell)\n\
    \          0\n          capacity))\n    (apply + (map fill-cell row)))\n  (apply\
    \ + (map fill-row grid)))\n", "  (define (fill-wells wells)\n    (define (fill-well\
    \ well)\n      (define (fill-bucket bucket)\n        (if (empty? bucket)\n   \
    \         (cons 0 bucket)\n            (cons 1 bucket)))\n      (define (fill-buckets\
    \ buckets)\n        (if (empty? buckets)\n            (cons (fill-bucket (first\
    \ well)) '())\n            (cons (fill-bucket (first well)) (fill-buckets (rest\
    \ buckets)))))\n      (fill-buckets well))\n    (if (empty? wells)\n        '()\n\
    \        (cons (fill-well (first wells)) (fill-wells (rest wells)))))\n  (define\
    \ (fill-buckets buckets)\n    (define (fill-bucket bucket)\n      (if (empty?\
    \ bucket)\n          (cons 0 bucket)\n          (cons (first bucket) (fill-bucket\
    \ (rest bucket)))))\n    (if (empty? buckets)\n        '()\n        (cons (fill-bucket\
    \ (first buckets)) (fill-buckets (rest buckets)))))\n  (define (count-buckets\
    \ buckets)\n    (if (empty? buckets)\n        0\n        (+ (first buckets) (count-buckets\
    \ (rest buckets)))))\n  (define (count-wells wells)\n    (if (empty? wells)\n\
    \        0\n        (+ (count-buckets (first wells)) (count-wells (rest wells)))))\n\
    \  (count-wells (fill-buckets (fill-wells grid))))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (max (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (+ (count (first grid) 1)\n                   (max-fill-helper (rest\
    \ grid) capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (define (fill-cell cell)\n      (cond\n        [(=\
    \ cell 0) 0]\n        [(= cell capacity) capacity]\n        [else cell]))\n  \
    \  (map fill-cell row))\n  (define (fill-grid grid)\n    (map fill-row grid))\n\
    \  (define (sum-grid grid)\n    (apply + (map sum grid)))\n  (define (sum-row\
    \ row)\n    (apply + row))\n  (define (sum-cell cell)\n    (if (= cell 0) 0 cell))\n\
    \  (define (sum-grid grid)\n    (apply + (map sum-row grid)))\n  (define (sum-row\
    \ row)\n    (apply + (map sum-cell row)))\n  (define (sum-cell cell)\n    (if\
    \ (= cell 0) 0 cell))\n  (define (sum-grid grid)\n    (apply + (map sum-row grid)))\n\
    \  (define (sum-row row)\n    (apply + (map sum-cell row)))\n  (define (sum-cell\
    \ cell)\n    (if (= cell 0) 0 cell))\n  (define (sum-grid grid)\n    (apply +\
    \ (map sum-row grid)))\n  (define (sum-row row)\n    (apply + (map sum-cell row)))\n\
    \  (define (sum-cell cell)\n    (if (= cell 0) 0 cell))\n  (define (sum-grid grid)\n\
    \    (apply + (map sum-row grid)))\n  (define (sum-row row)\n    (apply + (map\
    \ sum-cell row)))\n  (define (sum-cell cell)\n    (if (= cell 0) 0 cell))\n  (define\
    \ (sum-grid grid)\n    (apply + (map sum-row grid)))\n  (define (sum-row row)\n\
    \    (apply + (map sum-cell row)))\n  (define (sum-cell cell)\n    (if (= cell\
    \ 0) 0 cell))\n  (define (sum-grid grid)\n    (apply + (map sum-row grid)))\n\
    \  (define (sum-row row)\n    (apply + (map sum-cell row)))\n  (define (sum-cell",
  "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let* ([row (car grid)]\n               [max-fill-row (max-fill-row row\
    \ capacity)])\n          (+ max-fill-row (max-fill-helper (cdr grid) capacity)))))\n\
    \  (define (max-fill-row row capacity)\n    (if (null? row)\n        0\n     \
    \   (let* ([unit (car row)]\n               [max-fill-unit (max-fill-unit unit\
    \ capacity)])\n          (+ max-fill-unit (max-fill-row (cdr row) capacity)))))\n\
    \  (define (max-fill-unit unit capacity)\n    (if (= unit 0)\n        0\n    \
    \    capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity row)\n      (cond\n        [(empty? grid) capacity]\n        [(empty?\
    \ (first grid)) (max-fill-helper-helper (rest grid) capacity (+ row 1))]\n   \
    \     [(= capacity 0) (max-fill-helper-helper (rest grid) capacity (+ row 1))]\n\
    \        [(= capacity 1) (max-fill-helper-helper (rest grid) capacity (+ row 1))]\n\
    \        [(= (first (first grid)) 0) (max-fill-helper-helper (rest grid) capacity\
    \ (+ row 1))]\n        [(= (first (first grid)) 1) (max-fill-helper-helper (rest\
    \ grid) (- capacity 1) (+ row 1))]))\n    (max-fill-helper-helper grid capacity\
    \ 0))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid\
    \ capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else\n       (let* ([row (first\
    \ grid)]\n              [row-length (length row)]\n              [row-capacity\
    \ (min capacity row-length)]\n              [row-filled (fill-row row row-capacity)])\n\
    \         (+ row-capacity (max-fill-helper (rest grid) capacity)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (cond [(empty? grid) 0]\n    \
    \        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n    \
    \        [(>= capacity (first (first grid))) (max-fill-helper-helper (rest grid)\
    \ (- capacity (first (first grid))))]\n            [else (max-fill-helper-helper\
    \ (rest grid) capacity)]))\n    (max-fill-helper-helper grid capacity))\n  (define\
    \ (max-fill-helper-2 grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper-2 (rest grid) capacity)]\n          [(>= capacity\
    \ (first (first grid))) (max-fill-helper-2 (rest grid) (- capacity (first (first\
    \ grid))))]\n          [else (max-fill-helper-2 (rest grid) capacity)]))\n  (define\
    \ (max-fill-helper-3 grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper-3 (rest grid) capacity)]\n          [(>= capacity\
    \ (first (first grid))) (max-fill-helper-3 (rest grid) (- capacity (first (first\
    \ grid))))]\n          [else (max-fill-helper-3 (rest grid) capacity)]))\n  (define\
    \ (max-fill-helper-4 grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper-4 (rest grid) capacity)]\n          [(>= capacity\
    \ (first (first grid))) (max-fill-helper-4 (rest grid) (- capacity (first (first\
    \ grid))))]\n          [else (max-fill-helper-4 (rest grid) capacity)]))\n  (define\
    \ (max-fill-helper-5 grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper-5 (rest grid) capacity)]\n          [(>= capacity\
    \ (first (first grid", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (define (fill-col col)\n      (if (zero? col)\n \
    \         0\n          (if (zero? (vector-ref row col))\n              (fill-col\
    \ (sub1 col))\n              (if (>= capacity (vector-ref row col))\n        \
    \          (begin\n                    (vector-set! row col 0)\n             \
    \       (add1 (fill-col (sub1 col))))\n                  (begin\n            \
    \        (vector-set! row col (- (vector-ref row col) capacity))\n           \
    \         capacity)))))\n    (fill-col (vector-length row)))\n  (define (fill-grid\
    \ grid)\n    (if (null? grid)\n        0\n        (add1 (fill-grid (cdr grid))\
    \ (fill-row (car grid)))))\n  (fill-grid grid))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let ((row (car grid))\n\
    \              (rest (cdr grid)))\n          (if (null? row)\n              (max-fill-helper\
    \ rest capacity)\n              (let ((first (car row))\n                    (rest\
    \ (cdr row)))\n                (if (= first 0)\n                    (max-fill-helper\
    \ (cons rest (cdr grid)) capacity)\n                    (let ((new-capacity (-\
    \ capacity first)))\n                      (if (< new-capacity 0)\n          \
    \                (max-fill-helper (cons (cons 0 rest) (cdr grid)) capacity)\n\
    \                          (max-fill-helper (cons rest (cdr grid)) new-capacity)))))))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(null? grid) 0]\n      [(null? (car grid)) 0]\n      [else\
    \ (+ (max-fill-helper (cdr grid) capacity)\n               (max-fill-helper (cdr\
    \ grid) (- capacity (car (car grid)))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max-fill-helper (rest grid) capacity)\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first grid))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first grid)))))]))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(zero? capacity) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(zero? (first (first grid))) (max-fill-helper-helper\
    \ (rest grid) capacity)]\n        [else (+ 1 (max-fill-helper-helper (rest grid)\
    \ (- capacity 1)))]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity row)\n      (cond\n        [(empty? grid)\
    \ 0]\n        [(empty? (first grid)) (max-fill-helper-helper (rest grid) capacity\
    \ (+ row 1))]\n        [(= capacity 0) (max-fill-helper-helper (rest grid) capacity\
    \ (+ row 1))]\n        [(= (first (first grid)) 0) (max-fill-helper-helper (rest\
    \ grid) capacity (+ row 1))]\n        [else (max-fill-helper-helper (rest grid)\
    \ (- capacity 1) (+ row 1))]))\n    (max-fill-helper-helper grid capacity 0))\n\
    \  (max-fill-helper grid capacity))\n", "  (let loop ((grid grid) (capacity capacity)\
    \ (count 0))\n    (cond\n      [(empty? grid) count]\n      [(empty? (first grid))\
    \ (loop (rest grid) capacity count)]\n      [(= capacity 0) (loop (rest grid)\
    \ capacity (+ count 1))]\n      [else\n       (let loop2 ((grid grid) (capacity\
    \ capacity) (count count))\n         (cond\n           [(empty? grid) count]\n\
    \           [(empty? (first grid)) (loop2 (rest grid) capacity count)]\n     \
    \      [(= capacity 0) (loop2 (rest grid) capacity (+ count 1))]\n           [(=\
    \ (first (first grid)) 1) (loop2 (rest grid) (- capacity 1) (+ count 1))]\n  \
    \         [else (loop2 (rest grid) capacity count)]))])))\n", "  (define (fill-wells\
    \ wells capacity)\n    (define (fill-well well capacity)\n      (define (fill-row\
    \ row capacity)\n        (if (empty? row)\n            0\n            (if (and\
    \ (not (empty? capacity)) (first row))\n                (add1 (fill-row (rest\
    \ row) (rest capacity)))\n                (fill-row (rest row) capacity))))\n\
    \      (fill-row well capacity))\n    (if (empty? wells)\n        0\n        (add1\
    \ (fill-wells (rest wells) capacity) (fill-well (first wells) capacity))))\n \
    \ (fill-wells grid capacity))\n", "  (define (fill-row row)\n    (define (fill-wells\
    \ wells)\n      (cond [(empty? wells) 0]\n            [(= (first wells) 1) 1]\n\
    \            [else 0]))\n    (apply + (map fill-wells row)))\n  (define (fill-grid\
    \ grid)\n    (cond [(empty? grid) 0]\n          [else (+ (fill-row (first grid))\
    \ (fill-grid (rest grid)))]))\n  (define (fill-wells-with-capacity wells capacity)\n\
    \    (cond [(empty? wells) 0]\n          [(= (first wells) 1) capacity]\n    \
    \      [else 0]))\n  (define (fill-row-with-capacity row capacity)\n    (apply\
    \ + (map (lambda (x) (fill-wells-with-capacity x capacity)) row)))\n  (define\
    \ (fill-grid-with-capacity grid capacity)\n    (cond [(empty? grid) 0]\n     \
    \     [else (+ (fill-row-with-capacity (first grid) capacity) (fill-grid-with-capacity\
    \ (rest grid) capacity))]))\n  (- (fill-grid-with-capacity grid capacity) (fill-grid\
    \ grid)))\n", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (let loop ((grid grid) (capacity capacity) (count 0))\n    (cond\n      [(empty?\
    \ grid) count]\n      [(empty? (first grid)) (loop (rest grid) capacity count)]\n\
    \      [(empty? (rest grid)) (loop (rest grid) capacity count)]\n      [(>= capacity\
    \ (first grid)) (loop (rest grid) capacity count)]\n      [else (loop (rest grid)\
    \ capacity (+ count 1))])))\n", "  (define (fill-row row)\n    (define (fill-wells\
    \ wells)\n      (cond\n        [(empty? wells) 0]\n        [(= (first wells) 0)\
    \ (fill-wells (rest wells))]\n        [(= (first wells) 1) (add1 (fill-wells (rest\
    \ wells)))]))\n    (fill-wells row))\n  (define (fill-grid grid)\n    (cond\n\
    \      [(empty? grid) 0]\n      [else (add1 (fill-grid (rest grid)))]))\n  (define\
    \ (fill-wells-in-row row)\n    (cond\n      [(empty? row) 0]\n      [(= (first\
    \ row) 0) (fill-wells-in-row (rest row))]\n      [(= (first row) 1) (add1 (fill-wells-in-row\
    \ (rest row)))]))\n  (define (fill-wells-in-grid grid)\n    (cond\n      [(empty?\
    \ grid) 0]\n      [else (add1 (fill-wells-in-grid (rest grid)))]))\n  (define\
    \ (fill-wells-in-grid-with-capacity grid capacity)\n    (cond\n      [(empty?\
    \ grid) 0]\n      [else (add1 (fill-wells-in-grid-with-capacity (rest grid) capacity))]))\n\
    \  (define (fill-wells-in-row-with-capacity row capacity)\n    (cond\n      [(empty?\
    \ row) 0]\n      [(= (first row) 0) (fill-wells-in-row-with-capacity (rest row)\
    \ capacity)]\n      [(= (first row) 1) (add1 (fill-wells-in-row-with-capacity\
    \ (rest row) capacity))]))\n  (define (fill-row-with-capacity row capacity)\n\
    \    (define (fill-wells-with-capacity wells capacity)\n      (cond\n        [(empty?\
    \ wells) 0]\n        [(= (first wells) 0) (fill-wells-with-capacity (rest wells)\
    \ capacity)]\n        [(= (first wells) 1) (add1 (fill-wells-with-capacity (rest\
    \ wells) capacity))]", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (cond ((empty? grid) 0)\n    \
    \        ((empty? (first grid)) (max-fill-helper (rest grid) capacity))\n    \
    \        ((= capacity 0) (max-fill-helper (rest grid) capacity))\n           \
    \ ((= (first (first grid)) 0) (max-fill-helper-helper (rest grid) capacity))\n\
    \            (else (add1 (max-fill-helper-helper (rest grid) (sub1 capacity))))))\n\
    \    (max-fill-helper-helper grid capacity)))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let ([row (car grid)])\n          (if (null? row)\n              0\n \
    \             (let ([row-max (apply max row)])\n                (+ row-max (max-fill-helper\
    \ (cdr grid) capacity)))))))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n\
    \      (define (max-fill-helper-helper-helper grid capacity)\n        (define\
    \ (max-fill-helper-helper-helper-helper grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-row row capacity)\n\
    \      (define (max-fill-cell cell capacity)\n        (cond\n          [(zero?\
    \ cell) 0]\n          [(zero? capacity) 0]\n          [else (add1 (max-fill-cell\
    \ (sub1 cell) (sub1 capacity)))]))\n      (apply max (map max-fill-cell row)))\n\
    \    (apply + (map (lambda (row) (max-fill-row row capacity)) grid)))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [else (max (max-fill-helper (rest grid) capacity)\n               \
    \      (max-fill-helper (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [else (max (max-fill-helper (rest grid) capacity)\n               \
    \      (max-fill-helper (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (fill-row row)\n    (define (fill-wells wells)\n\
    \      (cond [(empty? wells) 0]\n            [(= (first wells) 1) (add1 (fill-wells\
    \ (rest wells)))]\n            [else (fill-wells (rest wells))]))\n    (define\
    \ (fill-buckets buckets)\n      (cond [(empty? buckets) 0]\n            [(= (first\
    \ buckets) capacity) (add1 (fill-buckets (rest buckets)))]\n            [else\
    \ (fill-buckets (rest buckets))]))\n    (add1 (fill-wells row) (fill-buckets row)))\n\
    \  (define (fill-grid grid)\n    (cond [(empty? grid) 0]\n          [else (add1\
    \ (fill-row (first grid)) (fill-grid (rest grid)))]))\n  (fill-grid grid))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (let ([filled (map (lambda (x) (if (zero? x) 0 capacity))\
    \ row)])\n      (let ([remaining (apply min filled)])\n        (map (lambda (x)\
    \ (- x remaining)) filled))))\n  (let ([filled (map fill-row grid)])\n    (let\
    \ ([remaining (apply min (map sum filled))])\n      (apply + (map (lambda (x)\
    \ (- x remaining)) (map sum filled))))))\n", "  (define (max-fill-helper grid\
    \ capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (cond [(empty? row) 0]\n          [(= (first row)\
    \ 1) capacity]\n          [else (fill-row (rest row))]))\n  (define (fill-rows\
    \ rows)\n    (cond [(empty? rows) 0]\n          [else (+ (fill-row (first rows))\
    \ (fill-rows (rest rows)))]))\n  (fill-rows grid))\n", "  (define (fill-row row)\n\
    \    (define (fill-cell cell)\n      (if (zero? cell)\n          0\n         \
    \ capacity))\n    (apply + (map fill-cell row)))\n  (apply + (map fill-row grid)))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n\
    \       (define (fill-row row capacity)\n         (cond\n           [(empty? row)\
    \ capacity]\n           [(zero? (first row)) (fill-row (rest row) capacity)]\n\
    \           [(zero? capacity) 0]\n           [else (fill-row (rest row) (- capacity\
    \ 1))]))\n       (+ 1 (max-fill-helper (rest grid) (fill-row (first grid) capacity)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-wells wells)\n    (cond [(empty? wells) 0]\n          [(empty?\
    \ (rest wells)) (first wells)]\n          [else (max (first wells) (second wells))]))\n\
    \  (define (fill-grid grid)\n    (cond [(empty? grid) 0]\n          [else (+ (fill-wells\
    \ (first grid)) (fill-grid (rest grid)))]))\n  (define (fill-buckets buckets)\n\
    \    (cond [(empty? buckets) 0]\n          [else (+ capacity (fill-buckets (rest\
    \ buckets)))]))\n  (define (fill-grid-buckets grid buckets)\n    (cond [(empty?\
    \ grid) 0]\n          [else (+ (fill-wells (first grid)) (fill-buckets buckets)\
    \ (fill-grid-buckets (rest grid) buckets))]))\n  (define (fill-grid-buckets-capacity\
    \ grid buckets capacity)\n    (cond [(empty? grid) 0]\n          [else (+ (fill-wells\
    \ (first grid)) (fill-buckets buckets) (fill-grid-buckets-capacity (rest grid)\
    \ buckets capacity))]))\n  (define (fill-grid-buckets-capacity-times grid buckets\
    \ capacity times)\n    (cond [(empty? grid) 0]\n          [else (+ (fill-wells\
    \ (first grid)) (fill-buckets buckets) (fill-grid-buckets-capacity-times (rest\
    \ grid) buckets capacity times))]))\n  (define (fill-grid-buckets-capacity-times-height\
    \ grid buckets capacity times height)\n    (cond [(empty? grid) 0]\n         \
    \ [else (+ (fill-wells (first grid)) (fill-buckets buckets) (fill-grid-buckets-capacity-times-height\
    \ (rest grid) buckets capacity times height))]))\n  (define (fill-grid-buckets-capacity-times-height-width\
    \ grid buckets capacity times height width)\n    (cond [(empty? grid) 0]\n   \
    \       [else (+ (fill-wells (first grid)) (fill-buckets buckets) (fill-grid-buckets-capacity-times-height-width\
    \ (rest grid) buckets capacity times height width))]))\n  (define (fill-grid-buckets-",
  "  (define (fill-row row)\n    (define (fill-cell cell)\n      (if (zero? cell)\n\
    \          0\n          capacity))\n    (apply + (map fill-cell row)))\n  (apply\
    \ + (map fill-row grid)))\n", "  (define (fill-row row)\n    (if (null? row)\n\
    \        0\n        (if (car row)\n            (if (null? (cdr row))\n       \
    \         1\n                (+ 1 (fill-row (cdr row))))\n            (fill-row\
    \ (cdr row)))))\n  (define (fill-grid grid)\n    (if (null? grid)\n        0\n\
    \        (+ (fill-row (car grid)) (fill-grid (cdr grid)))))\n  (define (fill-wells\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (if (null? (car grid))\n\
    \            (fill-wells (cdr grid) capacity)\n            (if (<= (fill-row (car\
    \ grid)) capacity)\n                (fill-wells (cdr grid) capacity)\n       \
    \         (+ (fill-row (car grid)) (fill-wells (cdr grid) capacity))))))\n  (if\
    \ (null? grid)\n      0\n      (if (null? (car grid))\n          (max_fill (cdr\
    \ grid) capacity)\n          (+ (fill-wells grid capacity) (max_fill (cdr grid)\
    \ capacity)))))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [else (max (count (first grid)) (max-fill-helper (rest grid) capacity))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty?\
    \ grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \        [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n        [(=\
    \ capacity (count (first grid) 1)) (max-fill-helper (rest grid) capacity)]\n \
    \       [else\n         (max (max-fill-helper-helper (rest grid) capacity)\n \
    \             (max-fill-helper-helper (rest grid) (- capacity (count (first grid)\
    \ 1))))]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-inner\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(= capacity 0) 0]\n\
    \        [(= capacity (first grid)) (add1 (max-fill-helper (rest grid) capacity))]\n\
    \        [(> capacity (first grid)) (max-fill-helper (rest grid) (- capacity (first\
    \ grid)))]\n        [else (max-fill-helper (rest grid) capacity)]))\n    (max-fill-helper-inner\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [else (+ (max-fill-helper\
    \ (rest grid) capacity)\n                   (min capacity (first (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (fill-row row)\n    (define\
    \ (fill-well row-index well-index)\n      (if (or (null? row) (null? (car row)))\n\
    \          0\n          (if (and (not (null? (cdr row))) (= (car row) (car (cdr\
    \ row))))\n              (fill-well row-index (+ well-index 1))\n            \
    \  (if (= (car row) 1)\n                  (if (> well-index capacity)\n      \
    \                (+ (fill-well row-index 0) capacity)\n                      (+\
    \ (fill-well row-index 0) well-index))\n                  (fill-well row-index\
    \ 0)))))\n    (fill-well row-index 0))\n  (define (fill-grid grid)\n    (if (null?\
    \ grid)\n        0\n        (+ (fill-row (car grid)) (fill-grid (cdr grid)))))\n\
    \  (fill-grid grid))\n", "  (define (max-fill-helper grid capacity)\n    (cond\
    \ [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (max (max-fill-helper (rest grid) capacity)\n  \
    \                   (max-fill-helper (rest grid) (- capacity (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (if (empty? grid)\n        0\n        (let ([row (first grid)])\n       \
    \   (if (empty? row)\n              (max-fill-helper (rest grid) capacity)\n \
    \             (let ([water (first row)])\n                (if (zero? water)\n\
    \                    (max-fill-helper (rest grid) capacity)\n                \
    \    (let ([water-to-fill (- capacity water)])\n                      (+ water-to-fill\
    \ (max-fill-helper (rest grid) capacity)))))))))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= capacity (count-ones (first grid))) (add1\
    \ (max-fill-helper (rest grid) capacity))]\n        [(> capacity (count-ones (first\
    \ grid))) (max-fill-helper (rest grid) (- capacity (count-ones (first grid))))]\n\
    \        [else (add1 (max-fill-helper (rest grid) (- capacity (count-ones (first\
    \ grid)))))]))\n    (max-fill-helper-helper (reverse grid) capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (fill-row row)\n    (define (fill-cell cell)\n\
    \      (cond\n        [(= cell 0) 0]\n        [(> cell capacity) capacity]\n \
    \       [else cell]))\n    (map fill-cell row))\n  (define (fill-grid grid)\n\
    \    (map fill-row grid))\n  (define (lower-buckets grid)\n    (map (lambda (row)\
    \ (map (lambda (cell) (- cell 1)) row)) grid))\n  (define (bucket-count grid)\n\
    \    (apply + (map (lambda (row) (apply + row)) grid)))\n  (define (lower-buckets-until-empty\
    \ grid)\n    (define (lower-buckets-until-empty-helper grid count)\n      (cond\n\
    \        [(= (bucket-count grid) 0) count]\n        [else (lower-buckets-until-empty-helper\
    \ (lower-buckets grid) (+ count 1))]))\n    (lower-buckets-until-empty-helper\
    \ grid 0))\n  (lower-buckets-until-empty (fill-grid grid)))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (define (fill-cell cell)\n      (if (zero? cell)\n\
    \          0\n          capacity))\n    (apply + (map fill-cell row)))\n  (apply\
    \ + (map fill-row grid)))\n", "  (define (fill-row row)\n    (cond\n      [(empty?\
    \ row) 0]\n      [(= capacity (count 1 row)) capacity]\n      [else (min capacity\
    \ (count 1 row))]))\n  (define (fill-grid grid)\n    (cond\n      [(empty? grid)\
    \ 0]\n      [else (+ (fill-row (first grid)) (fill-grid (rest grid)))]))\n  (fill-grid\
    \ grid))\n", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= capacity (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(> capacity (first grid)) (max-fill-helper\
    \ (rest grid) (- capacity (first grid)))]\n        [else (max-fill-helper (rest\
    \ grid) capacity)]))\n    (define (max-fill-helper-helper-helper grid capacity)\n\
    \      (cond\n        [(empty? grid) 0]\n        [(empty? (first grid)) (max-fill-helper-helper\
    \ (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper-helper (rest\
    \ grid) capacity)]\n        [(= capacity (first grid)) (max-fill-helper-helper\
    \ (rest grid) capacity)]\n        [(> capacity (first grid)) (max-fill-helper-helper\
    \ (rest grid) (- capacity (first grid)))]\n        [else (max-fill-helper-helper\
    \ (rest grid) capacity)]))\n    (cond\n      [(empty? grid) 0]\n      [(empty?\
    \ (first grid)) (max-fill-helper-helper (rest grid) capacity)]\n      [(= capacity\
    \ 0) (max-fill-helper-helper (rest grid) capacity)]\n      [(= capacity (first\
    \ grid)) (max-fill-helper-helper (rest grid) capacity)]\n      [(> capacity (first\
    \ grid)) (max-fill-helper-helper (rest grid) (- capacity (first grid)))]\n   \
    \   [else (max-fill-helper-helper (rest grid) capacity)]))\n  (define (max-fill-helper-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [(= capacity 0) (max-fill-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= capacity (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(> capacity (first grid)) (max-fill-helper\
    \ (rest grid) (- capacity (first grid)))]\n        [else (max-fill-helper (rest\
    \ grid) capacity)]))\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n      [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n      [(= capacity (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [(> capacity (first grid)) (max-fill-helper (rest grid)\
    \ (- capacity (first grid)))]\n      [else (max-fill-helper (rest grid) capacity)]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity row-index)\n      (if (= row-index\
    \ (length grid))\n          0\n          (let ([row (list-ref grid row-index)])\n\
    \            (+ (max-fill-helper-helper grid capacity (+ row-index 1))\n     \
    \          (if (or (empty? row) (= (length row) capacity))\n                 \
    \  0\n                   (let ([water-in-row (count (lambda (x) (= x 1)) row)])\n\
    \                     (if (> water-in-row capacity)\n                        \
    \ capacity\n                         water-in-row)))))))\n    (max-fill-helper-helper\
    \ grid capacity 0))\n  (max-fill-helper grid capacity))", "  (define (fill-row\
    \ row)\n    (define (fill-wells wells)\n      (cond [(empty? wells) 0]\n     \
    \       [(= (first wells) 0) (fill-wells (rest wells))]\n            [(>= capacity\
    \ (first wells)) (add1 (fill-wells (rest wells)))]\n            [else (add1 (fill-wells\
    \ (rest wells)))]))\n    (fill-wells row))\n  (define (fill-grid grid)\n    (cond\
    \ [(empty? grid) 0]\n          [else (add1 (fill-row (first grid)) (fill-grid\
    \ (rest grid)))]))\n  (fill-grid grid))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (+ (count (first grid) 1) (max-fill-helper (rest grid) capacity))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (fill-row row)\n    (let loop\
    \ ([i 0] [water 0])\n      (cond [(= i (length row)) water]\n            [(= (list-ref\
    \ row i) 1)\n             (loop (+ i 1) (+ water capacity))]\n            [else\
    \ (loop (+ i 1) water)])))\n  (define (fill-grid grid)\n    (let loop ([i 0] [water\
    \ 0])\n      (cond [(= i (length grid)) water]\n            [else (loop (+ i 1)\
    \ (+ (fill-row (list-ref grid i)) water))])))\n  (fill-grid grid))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n\
    \      (cond [(empty? grid) 0]\n            [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n            [(= capacity (first (first grid))) (max-fill-helper\
    \ (rest grid) capacity)]\n            [(> capacity (first (first grid))) (max-fill-helper\
    \ (rest grid) (- capacity (first (first grid))))]\n            [else (max-fill-helper\
    \ (rest grid) capacity)]))\n    (max-fill-helper-helper grid capacity))\n  (define\
    \ (max-fill-helper-2 grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper-2 (rest grid) capacity)]\n          [(= capacity\
    \ (first (first grid))) (max-fill-helper-2 (rest grid) capacity)]\n          [(>\
    \ capacity (first (first grid))) (max-fill-helper-2 (rest grid) (- capacity (first\
    \ (first grid))))]\n          [else (max-fill-helper-2 (rest grid) capacity)]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (sum-row row)\n    (apply +\
    \ row))\n  (define (sum-grid grid)\n    (apply + (map sum-row grid)))\n  (define\
    \ (fill-row row capacity)\n    (define (fill-cell cell capacity)\n      (if (&gt;\
    \ cell capacity)\n          capacity\n          cell))\n    (map fill-cell row\
    \ capacity))\n  (define (fill-grid grid capacity)\n    (map (lambda (row) (fill-row\
    \ row capacity)) grid))\n  (define (count-row row)\n    (apply + (map (lambda\
    \ (cell) (if (= cell 1) 1 0)) row)))\n  (define (count-grid grid)\n    (apply\
    \ + (map count-row grid)))\n  (define (count-water grid)\n    (define (count-water-row\
    \ row)\n      (apply + (map (lambda (cell) (if (&gt; cell 0) 1 0)) row)))\n  \
    \  (apply + (map count-water-row grid)))\n  (define (fill-water grid capacity)\n\
    \    (define (fill-water-row row capacity)\n      (define (fill-water-cell cell\
    \ capacity)\n        (if (&gt; cell capacity)\n            (- cell capacity)\n\
    \            0))\n      (map fill-water-cell row capacity))\n    (map (lambda\
    \ (row) (fill-water-row row capacity)) grid))\n  (define (fill-water-grid grid\
    \ capacity)\n    (define (fill-water-grid-row row capacity)\n      (define (fill-water-grid-cell\
    \ cell capacity)\n        (if (&gt; cell capacity)\n            capacity\n   \
    \         cell))\n      (map fill-water-grid-cell row capacity))\n    (map (lambda\
    \ (row) (fill-water-grid-row row capacity)) grid))\n  (define (fill-water-grid-row\
    \ row capacity)\n    (define (fill-water-grid-cell cell capacity)\n      (if (&gt;\
    \ cell capacity)\n          capacity\n          cell))\n    (map fill-water-grid-cell\
    \ row capacity))\n  (define (fill-water-grid grid capacity)\n    (map (lambda\
    \ (row) (fill-water-grid-row row capacity))", "  (define (max-fill-helper grid\
    \ capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (define (fill-bucket row capacity)\n\
    \                  (cond [(empty? row) capacity]\n                        [(=\
    \ (first row) 1) (fill-bucket (rest row) (- capacity 1))]\n                  \
    \      [else (fill-bucket (rest row) capacity)]))\n                (+ (max-fill-helper\
    \ (rest grid) (fill-bucket (first grid) capacity))\n                   (if (=\
    \ capacity 0) 1 0))]))\n  (max-fill-helper grid capacity))\n", "  (define (fill-row\
    \ row)\n    (define (fill-well well)\n      (if (zero? well)\n          0\n  \
    \        capacity))\n    (apply + (map fill-well row)))\n  (apply + (map fill-row\
    \ grid)))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty?\
    \ grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \      [else (max (max-fill-helper (rest grid) capacity)\n                 (max-fill-helper\
    \ (rest grid) (- capacity (first (first grid)))))\n      ]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [else (max (count (first grid)) (max-fill-helper (rest grid) capacity))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (helper grid capacity)\n  \
    \  (if (empty? grid)\n        0\n        (let* ([first-row (first grid)]\n   \
    \            [first-row-sum (apply + first-row)]\n               [first-row-max\
    \ (apply max first-row)]\n               [first-row-min (apply min first-row)]\n\
    \               [first-row-diff (- first-row-max first-row-min)])\n          (if\
    \ (zero? first-row-sum)\n              (helper (rest grid) capacity)\n       \
    \       (if (> first-row-sum capacity)\n                  (+ (helper (rest grid)\
    \ capacity) capacity)\n                  (+ (helper (rest grid) capacity) first-row-sum))))))\n\
    \  (helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n  \
    \  (define (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (define (fill-wells wells)\n      (cond [(empty?\
    \ wells) 0]\n            [(= (first wells) 0) (fill-wells (rest wells))]\n   \
    \         [(>= capacity (first wells))\n             (add1 (fill-wells (rest wells)))]\n\
    \            [else (add1 (fill-wells (rest wells)))]))\n    (fill-wells row))\n\
    \  (define (fill-grid grid)\n    (cond [(empty? grid) 0]\n          [else (add1\
    \ (fill-row (first grid)) (fill-grid (rest grid)))]))\n  (fill-grid grid))\n",
  "  (define (fill-row row)\n    (define (fill-cell cell)\n      (if (equal? cell\
    \ 1)\n          capacity\n          0))\n    (apply + (map fill-cell row)))\n\
    \  (apply + (map fill-row grid)))\n", "  (define (max-row-fill row)\n    (define\
    \ (max-row-fill-iter row acc)\n      (cond\n        [(empty? row) acc]\n     \
    \   [(= (first row) 1) (max-row-fill-iter (rest row) (+ acc capacity))]\n    \
    \    [else (max-row-fill-iter (rest row) acc)]))\n    (max-row-fill-iter row 0))\n\
    \  (define (max-fill-iter grid acc)\n    (cond\n      [(empty? grid) acc]\n  \
    \    [else (max-fill-iter (rest grid) (+ acc (max-row-fill (first grid))))]))\n\
    \  (max-fill-iter grid 0))\n```\n\n## Day 3:\n\n```racket\n#lang racket\n", " \
    \ (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (if (null? grid)\n          0\n          (let* ([row (car\
    \ grid)]\n                 [row-sum (apply + row)]\n                 [row-max\
    \ (apply max row)])\n            (if (> row-sum capacity)\n                (+\
    \ row-max (max-fill-helper-helper (cdr grid) capacity))\n                (+ row-sum\
    \ (max-fill-helper-helper (cdr grid) capacity))))))\n    (max-fill-helper-helper\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (fill grid\
    \ capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (fill\
    \ (rest grid) capacity)]\n          [(= capacity 0) (add1 (fill (rest grid) capacity))]\n\
    \          [else (fill (rest grid) (sub1 capacity))]))\n  (fill grid capacity))\n",
  "  (define (fill-row row)\n    (define (fill-wells wells)\n      (cond [(empty?\
    \ wells) 0]\n            [(= (first wells) 1) capacity]\n            [else 0]))\n\
    \    (apply + (map fill-wells row)))\n  (apply + (map fill-row grid)))\n", " \
    \ (define (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n \
    \       (let* ([row (car grid)]\n               [max-in-row (apply max row)]\n\
    \               [max-in-grid (apply max (map (lambda (x) (apply max x)) grid))])\n\
    \          (if (> max-in-row max-in-grid)\n              (max-fill-helper (cdr\
    \ grid) capacity)\n              (+ (max-in-row capacity)\n                 (max-fill-helper\
    \ (map (lambda (x) (map (lambda (y) (- y capacity)) x)) grid) capacity))))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first (first grid)))))])\n\
    \    )\n  (max-fill-helper grid capacity)\n  )", "  (define (max-fill-helper grid\
    \ capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (cond\n\
    \        [(empty? grid) 0]\n        [(= capacity 0) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(= capacity 1) (add1\
    \ (max-fill-helper (rest grid) capacity))]\n        [else (max (max-fill-helper\
    \ (rest grid) capacity)\n                   (add1 (max-fill-helper-helper (rest\
    \ grid) (sub1 capacity))))]))\n    (max-fill-helper-helper grid capacity))\n \
    \ (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (cond [(empty? grid)\
    \ 0]\n            [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \            [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n       \
    \     [(= (first (first grid)) 0) (max-fill-helper-helper (rest grid) capacity)]\n\
    \            [else (max-fill-helper-helper (rest grid) (- capacity 1))]))\n  \
    \  (max-fill-helper-helper grid capacity))\n  (max-fill-helper grid capacity))\n",
  "  (define (fill-row row)\n    (define (fill-cell cell)\n      (cond\n        [(=\
    \ cell 0) 0]\n        [(= cell capacity) capacity]\n        [else (+ cell (fill-cell\
    \ (- cell 1)))]))\n    (apply + (map fill-cell row)))\n  (apply + (map fill-row\
    \ grid)))\n", "  (define (fill-row row capacity)\n    (define (fill-cell cell\
    \ capacity)\n      (if (zero? capacity)\n          0\n          (if (zero? cell)\n\
    \              0\n              (add1 (fill-cell (sub1 cell) (sub1 capacity))))))\n\
    \    (if (zero? capacity)\n        0\n        (add1 (fill-row (cdr row) (sub1\
    \ capacity))\n              (fill-cell (car row) capacity))))\n  (if (zero? capacity)\n\
    \      0\n      (add1 (max_fill (cdr grid) capacity)\n            (fill-row (car\
    \ grid) capacity))))\n", "  (define (max-fill-helper grid capacity)\n    (cond\
    \ [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n\
    \          [else (max (max-fill-helper (rest grid) capacity)\n               \
    \      (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n    \
    \       ]))\n  (max-fill-helper grid capacity))\n", "  (define (fill-row row)\n\
    \    (define (fill-cell cell)\n      (if (zero? cell)\n          0\n         \
    \ capacity))\n    (apply + (map fill-cell row)))\n  (apply + (map fill-row grid)))\n",
  "  (define (fill-row row)\n    (let loop ([i 0] [water 0])\n      (cond\n      \
    \  [(= i (length row)) water]\n        [(= (list-ref row i) 1) (loop (+ i 1) (+\
    \ water capacity))]\n        [else (loop (+ i 1) water)])))\n  (define (fill-grid\
    \ grid)\n    (let loop ([i 0] [water 0])\n      (cond\n        [(= i (length grid))\
    \ water]\n        [else (loop (+ i 1) (+ water (fill-row (list-ref grid i))))])))\n\
    \  (fill-grid grid))\n", "  (define (fill-row row)\n    (define (fill-wells wells)\n\
    \      (cond [(empty? wells) 0]\n            [(= (first wells) 0) (fill-wells\
    \ (rest wells))]\n            [(= (first wells) 1) (add1 (fill-wells (rest wells)))]))\n\
    \    (fill-wells row))\n  (define (fill-grid grid)\n    (cond [(empty? grid) 0]\n\
    \          [else (add1 (fill-grid (rest grid)) (fill-row (first grid)))]))\n \
    \ (fill-grid grid))\n", "  (define (max-fill-helper grid capacity)\n    (cond\
    \ [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n\
    \          [else (max (max-fill-helper (rest grid) capacity)\n               \
    \      (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n    \
    \       ]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let ([row (car grid)])\n\
    \          (if (null? row)\n              0\n              (let ([water (car row)])\n\
    \                (if (zero? water)\n                    (max-fill-helper (cdr\
    \ grid) capacity)\n                    (let ([water-left (sub1 water)])\n    \
    \                  (if (zero? water-left)\n                          (add1 (max-fill-helper\
    \ (cdr grid) capacity))\n                          (let ([water-to-fill (min capacity\
    \ water-left)])\n                            (add1 (max-fill-helper (cons (cons\
    \ water-to-fill (cdr row)) (cdr grid)) capacity)))))))))))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (max (first grid) (max-fill-helper (rest grid) capacity))]))\n  (define\
    \ (fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (fill-helper (rest grid) capacity)]\n          [else (min (first\
    \ grid) capacity)]))\n  (define (fill-grid grid capacity)\n    (cond [(empty?\
    \ grid) '()]\n          [(empty? (first grid)) (cons '() (fill-grid (rest grid)\
    \ capacity))]\n          [else (cons (list (- (first grid) (fill-helper grid capacity)))\n\
    \                       (fill-grid (rest grid) capacity))]))\n  (define (max-fill-grid\
    \ grid capacity)\n    (cond [(empty? grid) '()]\n          [(empty? (first grid))\
    \ (cons '() (max-fill-grid (rest grid) capacity))]\n          [else (cons (list\
    \ (- (first grid) (max-fill-helper grid capacity)))\n                       (max-fill-grid\
    \ (rest grid) capacity))]))\n  (define (count-grid grid)\n    (cond [(empty? grid)\
    \ 0]\n          [(empty? (first grid)) (count-grid (rest grid))]\n          [else\
    \ (+ (first grid) (count-grid (rest grid)))]))\n  (define (count-max-grid grid)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (count-max-grid\
    \ (rest grid))]\n          [else (+ (first grid) (count-max-grid (rest grid)))]))\n\
    \  (define (fill-helper-grid grid capacity)\n    (cond [(empty? grid) '()]\n \
    \         [(empty? (first grid)) (cons '() (fill-helper-grid (rest grid) capacity))]\n\
    \          [else (cons (list (fill-helper grid capacity))\n                  \
    \     (fill-helper-grid (rest grid) capacity))]))\n  (define", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else (max (max-fill-helper (rest\
    \ grid) capacity)\n                 (max-fill-helper (rest grid) (- capacity (first\
    \ (first grid)))))\n      ]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (fill-row row)\n    (define (fill-cell cell)\n      (if (zero? cell)\n     \
    \     0\n          capacity))\n    (apply + (map fill-cell row)))\n  (apply +\
    \ (map fill-row grid)))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-wells grid capacity)\n    (cond\n      [(empty? grid) 0]\n    \
    \  [(empty? (first grid)) (fill-wells (rest grid) capacity)]\n      [else\n  \
    \     (define (fill-well well capacity)\n         (cond\n           [(empty? well)\
    \ capacity]\n           [(= capacity 0) capacity]\n           [(= (first well)\
    \ 1) (fill-well (rest well) (- capacity 1))]\n           [else (fill-well (rest\
    \ well) capacity)]))\n       (+ (fill-well (first grid) capacity)\n          (fill-wells\
    \ (rest grid) capacity))]))\n  (fill-wells grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (define (fill-well well)\n      (if (zero? well)\n\
    \          0\n          capacity))\n    (apply + (map fill-well row)))\n  (apply\
    \ + (map fill-row grid)))\n", "  (define (max-fill-helper grid capacity)\n   \
    \ (define (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty?\
    \ grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \        [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n        [(=\
    \ capacity (first grid)) (max-fill-helper (rest grid) capacity)]\n        [(>\
    \ capacity (first grid)) (max-fill-helper (rest grid) (- capacity (first grid)))]\n\
    \        [else (max-fill-helper (rest grid) capacity)]))\n    (max-fill-helper-helper\
    \ grid capacity))\n  (define (max-fill-helper-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n\
    \      [(= capacity (first grid)) (max-fill-helper (rest grid) capacity)]\n  \
    \    [(> capacity (first grid)) (max-fill-helper (rest grid) (- capacity (first\
    \ grid)))]\n      [else (max-fill-helper (rest grid) capacity)]))\n  (max-fill-helper-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (cond [(empty? grid) 0]\n              [(empty? (first\
    \ grid)) (max-fill-helper-helper-helper (rest grid) capacity)]\n             \
    \ [(> capacity (first (first grid))) (max-fill-helper-helper-helper (rest grid)\
    \ (- capacity (first (first grid))))]\n              [else (max-fill-helper-helper-helper\
    \ (rest grid) capacity)]))\n      (max-fill-helper-helper-helper grid capacity))\n\
    \    (max-fill-helper-helper grid capacity))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (max (first grid) (max-fill-helper (rest grid) capacity))]))\n  (define\
    \ (max-fill-helper2 grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper2 (rest grid) capacity)]\n          [else (min\
    \ (first grid) (max-fill-helper2 (rest grid) capacity))]))\n  (define (max-fill-helper3\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper3 (rest grid) capacity)]\n          [else (max (first grid)\
    \ (max-fill-helper3 (rest grid) capacity))]))\n  (define (max-fill-helper4 grid\
    \ capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper4\
    \ (rest grid) capacity)]\n          [else (min (first grid) (max-fill-helper4\
    \ (rest grid) capacity))]))\n  (define (max-fill-helper5 grid capacity)\n    (cond\
    \ [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper5 (rest\
    \ grid) capacity)]\n          [else (max (first grid) (max-fill-helper5 (rest\
    \ grid) capacity))]))\n  (define (max-fill-helper6 grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper6 (rest grid) capacity)]\n\
    \          [else (min (first grid) (max-fill-helper6 (rest grid) capacity))]))\n\
    \  (define (max-fill-helper7 grid capacity)\n    (cond [(empty? grid) 0]\n   \
    \       [(empty? (first grid)) (max-fill-helper7 (rest grid) capacity)]\n    \
    \      [else (max (first grid) (max-fill-hel", "  (define (fill-row row)\n   \
    \ (define (fill-cell cell)\n      (if (zero? cell)\n          0\n          capacity))\n\
    \    (apply + (map fill-cell row)))\n  (apply + (map fill-row grid)))\n", "  (define\
    \ (max-row-fill row)\n    (define (max-fill-helper row acc)\n      (if (null?\
    \ row)\n          acc\n          (if (zero? (car row))\n              (max-fill-helper\
    \ (cdr row) acc)\n              (max-fill-helper (cdr row) (+ acc 1)))))\n   \
    \ (max-fill-helper row 0))\n  (define (max-fill-helper grid acc)\n    (if (null?\
    \ grid)\n        acc\n        (max-fill-helper (cdr grid) (+ acc (max-row-fill\
    \ (car grid))))))\n  (max-fill-helper grid 0))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (max (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-inner grid\
    \ capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= capacity (first grid)) (add1 (max-fill-helper\
    \ (rest grid) capacity))]\n        [(> capacity (first grid)) (max-fill-helper\
    \ (rest grid) (- capacity (first grid)))]\n        [else (max-fill-helper (rest\
    \ grid) capacity)]))\n    (max-fill-helper-inner grid capacity))\n  (max-fill-helper\
    \ grid capacity))", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (max (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (max (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (let loop ([grid grid] [capacity capacity] [count 0])\n    (cond [(empty? grid)\
    \ count]\n          [else (let ([row (first grid)])\n                  (cond [(empty?\
    \ row) (loop (rest grid) capacity count)]\n                        [else (let\
    \ ([water (first row)])\n                                (cond [(= water 0) (loop\
    \ (rest grid) capacity count)]\n                                      [else (loop\
    \ (rest grid) (- capacity water) (+ count 1))]))]))])))\n", "  (define (fill-row\
    \ row)\n    (define (fill-wells wells)\n      (cond ((null? wells) 0)\n      \
    \      ((= (car wells) 1) capacity)\n            (else 0)))\n    (apply + (map\
    \ fill-wells row)))\n  (apply + (map fill-row grid)))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [else (+ (count (first grid)\
    \ 1)\n                   (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (if (null? grid)\n          0\n\
    \          (if (null? (car grid))\n              (max-fill-helper-helper (cdr\
    \ grid) capacity)\n              (if (null? (cdr grid))\n                  (if\
    \ (car (car grid))\n                      1\n                      0)\n      \
    \            (if (and (car (car grid))\n                           (not (car (cadr\
    \ grid))))\n                      (max-fill-helper-helper (cdr grid) capacity)\n\
    \                      (if (and (car (car grid))\n                           \
    \    (car (cadr grid)))\n                          (max-fill-helper-helper (cdr\
    \ grid) capacity)\n                          (if (and (not (car (car grid)))\n\
    \                                   (car (cadr grid)))\n                     \
    \         (max-fill-helper-helper (cdr grid) capacity)\n                     \
    \         (if (and (not (car (car grid)))\n                                  \
    \     (not (car (cadr grid))))\n                                  (max-fill-helper-helper\
    \ (cdr grid) capacity)\n                                  (error \"Error\")))))))))\n\
    \    (max-fill-helper-helper grid capacity)))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (max (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (max (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (fill-row row)\n    (define (fill-cell cell)\n      (cond\n        [(=\
    \ cell 0) 0]\n        [(= cell capacity) capacity]\n        [else (add1 (fill-cell\
    \ (sub1 cell)))]))\n    (apply + (map fill-cell row)))\n  (apply + (map fill-row\
    \ grid)))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid)\
    \ 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [else (+ capacity (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [else (+ (count (first grid) 1) (max-fill-helper (rest grid) capacity))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (max (max-fill-helper (rest grid) capacity)\n\
    \                     (max-fill-helper (rest grid) (- capacity (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (fill-row row)\n    (let loop\
    \ ([row row] [filled 0])\n      (if (null? row)\n          filled\n          (let\
    \ ([buckets (min (count (lambda (x) (= x 1)) row) capacity)])\n            (loop\
    \ (drop row buckets) (+ filled buckets))))))\n  (apply + (map fill-row grid)))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= (first (first grid)) 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [else (max (max-fill-helper (rest grid) capacity)\n\
    \                   (max-fill-helper-helper (rest grid) (- capacity 1)))]))\n\
    \    (max-fill-helper-helper grid capacity))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (max (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= (first (first grid)) 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [else\n         (max (max-fill-helper (rest\
    \ grid) capacity)\n              (max-fill-helper-helper (rest grid) (- capacity\
    \ 1)))]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-inner\
    \ grid capacity)\n      (define (max-fill-helper-inner-inner grid capacity)\n\
    \        (define (max-fill-helper-inner-inner-inner grid capacity)\n         \
    \ (define (max-fill-helper-inner-inner-inner-inner grid capacity)\n          \
    \  (define (max-fill-helper-inner-inner-inner-inner-inner grid capacity)\n   \
    \           (define (max-fill-helper-inner-inner-inner-inner-inner-inner grid\
    \ capacity)\n                (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                  (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                    (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                      (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                        (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                          (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                            (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                              (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                                (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                                  (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner",
  "  (define (fill-row row capacity)\n    (cond [(empty? row) capacity]\n        \
    \  [(= (first row) 0) (fill-row (rest row) capacity)]\n          [(> capacity\
    \ 0) (fill-row (rest row) (- capacity 1))]\n          [else capacity]))\n  (define\
    \ (fill-grid grid capacity)\n    (cond [(empty? grid) capacity]\n          [else\
    \ (fill-grid (rest grid) (fill-row (first grid) capacity))]))\n  (fill-grid grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= (first (first grid)) 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [else (max (max-fill-helper (rest grid) capacity)\n\
    \                   (max-fill-helper-helper (rest grid) (- capacity 1)))]))\n\
    \    (max-fill-helper-helper grid capacity))\n  (max-fill-helper grid capacity))\n",
  "  (let loop ((grid grid) (count 0))\n    (cond\n      [(empty? grid) count]\n \
    \     [(empty? (car grid)) (loop (cdr grid) count)]\n      [else (loop (cdr grid)\
    \ (+ count (fill (car grid) capacity)))])))\n", "  (define (max-fill-helper grid\
    \ capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (+ (max-fill-helper (rest grid) capacity)\n\
    \                   (min capacity (first (first grid))))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty? grid)\
    \ 0]\n        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \        [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n        [(=\
    \ capacity (first grid)) (max-fill-helper (rest grid) capacity)]\n        [(>\
    \ capacity (first grid)) (max-fill-helper (rest grid) (- capacity (first grid)))]\n\
    \        [else (max-fill-helper (rest grid) capacity)]))\n    (define (empty?\
    \ lst)\n      (cond\n        [(empty? lst) true]\n        [(zero? (first lst))\
    \ (empty? (rest lst))]\n        [else false]))\n    (define (max-fill-helper-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper-helper-helper (rest grid) capacity)]\n        [(= capacity\
    \ 0) (max-fill-helper-helper-helper (rest grid) capacity)]\n        [(= capacity\
    \ (first grid)) (max-fill-helper-helper-helper (rest grid) capacity)]\n      \
    \  [(> capacity (first grid)) (max-fill-helper-helper-helper (rest grid) (- capacity\
    \ (first grid)))]\n        [else (max-fill-helper-helper-helper (rest grid) capacity)]))\n\
    \    (define (empty? lst)\n      (cond\n        [(empty? lst) true]\n        [(zero?\
    \ (first lst)) (empty? (rest lst))]\n        [else false]))\n    (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper-helper-helper-helper (rest grid) capacity)]\n      \
    \  [(= capacity 0) (max-fill-helper-helper-helper", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n\
    \       (define (fill-bucket row)\n         (cond\n           [(empty? row) 0]\n\
    \           [(empty? (rest row)) (first row)]\n           [else\n            (define\
    \ (fill-bucket-helper row capacity)\n              (cond\n                [(empty?\
    \ row) capacity]\n                [(empty? (rest row)) capacity]\n           \
    \     [else\n                 (define (fill-bucket-helper-helper row capacity)\n\
    \                   (cond\n                     [(empty? row) capacity]\n    \
    \                 [(empty? (rest row)) capacity]\n                     [else\n\
    \                      (cond\n                        [(= (first row) 1)\n   \
    \                      (cond\n                           [(> capacity 0)\n   \
    \                         (fill-bucket-helper-helper (rest row) (- capacity 1))]\n\
    \                           [else\n                            (fill-bucket-helper-helper\
    \ (rest row) capacity)])]\n                        [else\n                   \
    \      (fill-bucket-helper-helper (rest row) capacity)])]))\n                \
    \ (fill-bucket-helper-helper row capacity)]))\n            (fill-bucket-helper\
    \ row capacity))]))\n       (+ (fill-bucket (first grid))\n          (max-fill-helper\
    \ (rest grid) capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [else (max\
    \ (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= capacity (count (first grid) 1)) (add1 (max-fill-helper\
    \ (rest grid) capacity))]\n        [(> capacity (count (first grid) 1)) (max-fill-helper\
    \ (rest grid) (- capacity (count (first grid) 1)))]\n        [else (max-fill-helper\
    \ (rest grid) capacity)]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (+ (count (first grid) 1)\n                   (max-fill-helper (rest\
    \ grid) capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-row-fill\
    \ row)\n    (define (helper row acc)\n      (cond [(empty? row) acc]\n       \
    \     [(= (first row) 1) (helper (rest row) (+ acc capacity))]\n            [else\
    \ (helper (rest row) acc)]))\n    (helper row 0))\n  (define (max-fill-helper\
    \ grid acc)\n    (cond [(empty? grid) acc]\n          [else (max-fill-helper (rest\
    \ grid) (+ acc (max-row-fill (first grid))))]))\n  (max-fill-helper grid 0))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (max (first grid) (max-fill-helper (rest grid) capacity))]))\n  (define\
    \ (max-fill-helper2 grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper2 (rest grid) capacity)]\n          [else (min\
    \ capacity (max-fill-helper2 (rest grid) capacity))]))\n  (define (max-fill-helper3\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper3 (rest grid) capacity)]\n          [else (max (first grid)\
    \ (max-fill-helper3 (rest grid) capacity))]))\n  (define (max-fill-helper4 grid\
    \ capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper4\
    \ (rest grid) capacity)]\n          [else (min capacity (max-fill-helper4 (rest\
    \ grid) capacity))]))\n  (define (max-fill-helper5 grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper5 (rest grid) capacity)]\n\
    \          [else (max (first grid) (max-fill-helper5 (rest grid) capacity))]))\n\
    \  (define (max-fill-helper6 grid capacity)\n    (cond [(empty? grid) 0]\n   \
    \       [(empty? (first grid)) (max-fill-helper6 (rest grid) capacity)]\n    \
    \      [else (min capacity (max-fill-helper6 (rest grid) capacity))]))\n  (define\
    \ (max-fill-helper7 grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper7 (rest grid) capacity)]\n          [else (max\
    \ (first grid) (max-fill-helper7 (rest grid) capacity))]", "  (define (fill-row\
    \ row)\n    (define (fill-wells wells)\n      (if (null? wells)\n          0\n\
    \          (let ([well (car wells)])\n            (if (zero? well)\n         \
    \       (fill-wells (cdr wells))\n                (add1 (fill-wells (cdr wells)))))))\n\
    \    (fill-wells row))\n  (define (fill-grid grid)\n    (if (null? grid)\n   \
    \     0\n        (add1 (fill-grid (cdr grid)))))\n  (define (fill-wells-in-row\
    \ row)\n    (if (null? row)\n        0\n        (add1 (fill-wells-in-row (cdr\
    \ row)))))\n  (define (fill-wells-in-grid grid)\n    (if (null? grid)\n      \
    \  0\n        (add1 (fill-wells-in-grid (cdr grid)))))\n  (define (fill-wells-in-grid-with-capacity\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (add1 (fill-wells-in-grid-with-capacity\
    \ (cdr grid) capacity))))\n  (define (fill-wells-in-row-with-capacity row capacity)\n\
    \    (if (null? row)\n        0\n        (add1 (fill-wells-in-row-with-capacity\
    \ (cdr row) capacity))))\n  (define (fill-wells-in-row-with-capacity-and-row row\
    \ capacity)\n    (if (null? row)\n        0\n        (add1 (fill-wells-in-row-with-capacity-and-row\
    \ (cdr row) capacity))))\n  (define (fill-wells-in-grid-with-capacity-and-row\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (add1 (fill-wells-in-grid-with-capacity-and-row\
    \ (cdr grid) capacity))))\n  (define (fill-wells-in-grid-with-capacity-and-row-and-grid\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (add1 (fill", "  (define\
    \ (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n\
    \      (cond [(empty? grid) 0]\n            [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n            [(>= capacity (first (first grid)))\n  \
    \           (max-fill-helper-helper (rest grid) (- capacity (first (first grid))))]\n\
    \            [else\n             (max-fill-helper-helper (rest grid) capacity)]))\n\
    \    (max-fill-helper-helper grid capacity))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [else (max (first grid) (max-fill-helper (rest grid) capacity))]))\n  (define\
    \ (max-fill-helper2 grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper2 (rest grid) capacity)]\n          [else (max\
    \ (first grid) (max-fill-helper2 (rest grid) capacity))]))\n  (define (max-fill-helper3\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper3 (rest grid) capacity)]\n          [else (max (first grid)\
    \ (max-fill-helper3 (rest grid) capacity))]))\n  (define (max-fill-helper4 grid\
    \ capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper4\
    \ (rest grid) capacity)]\n          [else (max (first grid) (max-fill-helper4\
    \ (rest grid) capacity))]))\n  (define (max-fill-helper5 grid capacity)\n    (cond\
    \ [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper5 (rest\
    \ grid) capacity)]\n          [else (max (first grid) (max-fill-helper5 (rest\
    \ grid) capacity))]))\n  (define (max-fill-helper6 grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper6 (rest grid) capacity)]\n\
    \          [else (max (first grid) (max-fill-helper6 (rest grid) capacity))]))\n\
    \  (define (max-fill-helper7 grid capacity)\n    (cond [(empty? grid) 0]\n   \
    \       [(empty? (first grid)) (max-fill-helper7 (rest grid) capacity)]\n    \
    \      [else (max (first grid) (max-fill-hel", "  (let loop ((grid grid) (capacity\
    \ capacity) (count 0))\n    (cond ((null? grid) count)\n          ((null? (car\
    \ grid)) (loop (cdr grid) capacity count))\n          ((= capacity 0) (loop (cdr\
    \ grid) capacity (+ count 1)))\n          ((= (car (car grid)) 0) (loop (cdr grid)\
    \ capacity count))\n          (else (loop (cdr grid) (- capacity 1) count)))))\n",
  "  (define (fill-row row)\n    (define (fill-well well)\n      (if (zero? well)\n\
    \          0\n          capacity))\n    (apply + (map fill-well row)))\n  (apply\
    \ + (map fill-row grid)))\n", "  (let loop ((grid grid) (capacity capacity) (count\
    \ 0))\n    (cond\n      [(empty? grid) count]\n      [(empty? (first grid)) (loop\
    \ (rest grid) capacity count)]\n      [(>= capacity (count-ones (first grid)))\n\
    \       (loop (rest grid) capacity (+ count capacity))]\n      [else\n       (loop\
    \ (rest grid) (- capacity (count-ones (first grid)))\n             (+ count (count-ones\
    \ (first grid))))])))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-2 grid capacity)\n      (define (max-fill-helper-3 grid capacity)\n\
    \        (define (max-fill-helper-4 grid capacity)\n          (define (max-fill-helper-5\
    \ grid capacity)\n            (define (max-fill-helper-6 grid capacity)\n    \
    \          (define (max-fill-helper-7 grid capacity)\n                (define\
    \ (max-fill-helper-8 grid capacity)\n                  (define (max-fill-helper-9\
    \ grid capacity)\n                    (define (max-fill-helper-10 grid capacity)\n\
    \                      (define (max-fill-helper-11 grid capacity)\n          \
    \              (define (max-fill-helper-12 grid capacity)\n                  \
    \        (define (max-fill-helper-13 grid capacity)\n                        \
    \    (define (max-fill-helper-14 grid capacity)\n                            \
    \  (define (max-fill-helper-15 grid capacity)\n                              \
    \  (define (max-fill-helper-16 grid capacity)\n                              \
    \    (define (max-fill-helper-17 grid capacity)\n                            \
    \        (define (max-fill-helper-18 grid capacity)\n                        \
    \              (define (max-fill-helper-19 grid capacity)\n                  \
    \                      (define (max-fill-helper-20 grid capacity)\n          \
    \                                (define (max-fill-helper-21 grid capacity)\n\
    \                                            (define (max-fill-helper-22 grid\
    \ capacity)\n                                              (define (max-fill-helper-23\
    \ grid capacity)\n                                                (define (max-fill-helper-24\
    \ grid capacity)\n                                                  (define (max-fill-helper-25\
    \ grid capacity)\n                                                    (define\
    \ (max-fill-helper-26 grid capacity)\n                                       \
    \               (define (max-fill-helper-27 grid capacity)\n                 \
    \                                       (define (max-fill-helper-28 grid capacity)\n\
    \                                                          (define (max-fill-helper-29\
    \ grid capacity)\n                                                           \
    \ (define (max-fill-helper-30 grid capacity)\n                               \
    \                 ", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [else (max (max-fill-helper (rest grid) capacity)\n               \
    \      (max-fill-helper (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (fill-row row)\n    (define (fill-cell cell)\n\
    \      (cond\n        [(= cell 0) 0]\n        [(= cell capacity) capacity]\n \
    \       [else cell]))\n    (apply + (map fill-cell row)))\n  (apply + (map fill-row\
    \ grid)))\n", "  (define (max-fill-helper grid capacity)\n    (define (fill-row\
    \ row)\n      (cond [(empty? row) 0]\n            [(= (first row) 1) capacity]\n\
    \            [else 0]))\n    (define (fill-grid grid)\n      (cond [(empty? grid)\
    \ 0]\n            [else (+ (fill-row (first grid)) (fill-grid (rest grid)))]))\n\
    \    (define (empty-row row)\n      (cond [(empty? row) empty]\n            [(=\
    \ (first row) 1) (rest row)]\n            [else (cons (first row) (empty-row (rest\
    \ row)))]))\n    (define (empty-grid grid)\n      (cond [(empty? grid) empty]\n\
    \            [else (cons (empty-row (first grid)) (empty-grid (rest grid)))]))\n\
    \    (define (fill-helper grid capacity)\n      (cond [(empty? grid) 0]\n    \
    \        [else (+ (fill-grid grid) (fill-helper (empty-grid grid) capacity))]))\n\
    \    (fill-helper grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n\
    \      (cond [(empty? grid) 0]\n            [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n            [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n            [(= (first (first grid)) 0) (max-fill-helper (rest grid)\
    \ capacity)]\n            [else (+ 1 (max-fill-helper-helper (rest grid) (- capacity\
    \ 1)))]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper grid\
    \ capacity))\n", "  (let loop ((grid grid) (capacity capacity) (count 0))\n  \
    \  (cond\n      [(empty? grid) count]\n      [(empty? (car grid)) (loop (cdr grid)\
    \ capacity count)]\n      [(<= capacity (car grid)) (loop (cdr grid) capacity\
    \ (+ count capacity))]\n      [else (loop (cdr grid) (car grid) (+ count (car\
    \ grid)))])))\n", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond [(empty? grid) 0]\n            [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n            [(>= capacity (first grid))\
    \ (max-fill-helper-helper (rest grid) (- capacity (first grid)))\n           \
    \                             (max-fill-helper (rest grid) capacity)]\n      \
    \      [else (+ 1 (max-fill-helper-helper (rest grid) (- capacity (first grid))))]))\n\
    \    (max-fill-helper-helper grid capacity)))\n  (max-fill-helper grid capacity))\n",
  "  (define (fill-row row)\n    (define (fill-cell cell)\n      (if (zero? cell)\n\
    \          0\n          capacity))\n    (apply + (map fill-cell row)))\n  (apply\
    \ + (map fill-row grid)))\n", "  (define (fill-row row)\n    (define (fill-cell\
    \ cell)\n      (if (zero? cell)\n          0\n          capacity))\n    (apply\
    \ + (map fill-cell row)))\n  (apply + (map fill-row grid)))\n", "  (define (fill-row\
    \ row)\n    (define (fill-cell cell)\n      (if (zero? cell)\n          0\n  \
    \        capacity))\n    (apply + (map fill-cell row)))\n  (apply + (map fill-row\
    \ grid)))\n", "  (define (fill-row row)\n    (define (fill-column column)\n  \
    \    (cond\n        [(= column (length row)) 0]\n        [(= (list-ref row column)\
    \ 1) (+ capacity (fill-column (+ column 1)))]\n        [else (fill-column (+ column\
    \ 1))]))\n    (fill-column 0))\n  (define (fill-grid grid)\n    (cond\n      [(empty?\
    \ grid) 0]\n      [else (+ (fill-row (first grid)) (fill-grid (rest grid)))]))\n\
    \  (fill-grid grid))\n", "  (let ([num-rows (length grid)]\n        [num-cols\
    \ (length (car grid))])\n    (define (max-fill-helper grid capacity)\n      (let\
    \ ([num-rows (length grid)]\n            [num-cols (length (car grid))])\n   \
    \     (define (max-fill-helper-helper grid capacity row col)\n          (cond\n\
    \            [(and (= row num-rows) (= col num-cols)) 0]\n            [(= col\
    \ num-cols) (max-fill-helper-helper grid capacity (+ row 1) 0)]\n            [(=\
    \ row num-rows) 0]\n            [(= (list-ref (list-ref grid row) col) 0) (max-fill-helper-helper\
    \ grid capacity row (+ col 1))]\n            [else (max (max-fill-helper-helper\
    \ grid capacity row (+ col 1))\n                       (max-fill-helper-helper\
    \ grid capacity (+ row 1) col)\n                       (+ (max-fill-helper-helper\
    \ grid capacity row (+ col 1))\n                          (max-fill-helper-helper\
    \ grid capacity (+ row 1) col)))])))\n        (max-fill-helper-helper grid capacity\
    \ 0 0)))\n    (max-fill-helper grid capacity)))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [else (+ (max-fill-helper\
    \ (rest grid) capacity)\n                   (min capacity (apply + (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (let loop ((grid grid) (capacity capacity)\
    \ (count 0))\n    (cond [(empty? grid) count]\n          [(empty? (car grid))\
    \ (loop (cdr grid) capacity (+ count 1))]\n          [(>= capacity (count-ones\
    \ (car grid)))\n           (loop (cdr grid) capacity (+ count 1))]\n         \
    \ [else (loop (cdr grid) (- capacity (count-ones (car grid)))\n              \
    \       (+ count 1))])))\n", "  (define (max-row row)\n    (apply max row))\n\
    \  (define (max-grid grid)\n    (apply max (map max-row grid)))\n  (define (fill-row\
    \ row capacity)\n    (define (fill-cell cell capacity)\n      (if (zero? cell)\n\
    \          0\n          (if (>= capacity cell)\n              cell\n         \
    \     capacity)))\n    (map (lambda (cell) (fill-cell cell capacity)) row))\n\
    \  (define (fill-grid grid capacity)\n    (map (lambda (row) (fill-row row capacity))\
    \ grid))\n  (define (empty-row row)\n    (map (lambda (cell) (- cell)) row))\n\
    \  (define (empty-grid grid)\n    (map (lambda (row) (empty-row row)) grid))\n\
    \  (define (count-row row)\n    (apply + row))\n  (define (count-grid grid)\n\
    \    (apply + (map count-row grid)))\n  (define (fill-and-empty grid capacity)\n\
    \    (empty-grid (fill-grid grid capacity)))\n  (define (fill-and-empty-until-empty\
    \ grid capacity)\n    (if (zero? (count-grid grid))\n        0\n        (+ 1 (fill-and-empty-until-empty\
    \ (fill-and-empty grid capacity) capacity))))\n  (fill-and-empty-until-empty grid\
    \ (max-grid grid)))\n", "  (define (fill-row row)\n    (let loop ([i 0] [water\
    \ 0])\n      (cond [(= i (length row)) water]\n            [(= (list-ref row i)\
    \ 1) (loop (+ i 1) (+ water capacity))]\n            [else (loop (+ i 1) water)])))\n\
    \  (define (fill-grid grid)\n    (let loop ([i 0] [water 0])\n      (cond [(=\
    \ i (length grid)) water]\n            [else (loop (+ i 1) (+ (fill-row (list-ref\
    \ grid i)) water))])))\n  (fill-grid grid))\n", "  (define (fill-row row)\n  \
    \  (define (fill-wells wells)\n      (cond [(null? wells) 0]\n            [(=\
    \ (car wells) 1) (add1 (fill-wells (cdr wells)))]\n            [else (fill-wells\
    \ (cdr wells))]))\n    (define (fill-buckets buckets)\n      (cond [(null? buckets)\
    \ 0]\n            [(= (car buckets) capacity) (add1 (fill-buckets (cdr buckets)))]\n\
    \            [else (fill-buckets (cdr buckets))]))\n    (add1 (max (fill-wells\
    \ row) (fill-buckets row))))\n  (apply + (map fill-row grid)))\n", "  (define\
    \ (fill-row row)\n    (define (fill-cell cell)\n      (if (zero? cell)\n     \
    \     0\n          capacity))\n    (apply + (map fill-cell row)))\n  (apply +\
    \ (map fill-row grid)))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (define (fill-well well)\n      (if (zero? well)\n\
    \          0\n          capacity))\n    (apply + (map fill-well row)))\n  (apply\
    \ + (map fill-row grid)))\n", "  (define (fill-row row)\n    (define (fill-cell\
    \ cell)\n      (if (zero? cell)\n          0\n          capacity))\n    (apply\
    \ + (map fill-cell row)))\n  (apply + (map fill-row grid)))\n", "  (define (fill-row\
    \ row)\n    (define (fill-cell cell)\n      (if (zero? cell)\n          0\n  \
    \        capacity))\n    (apply + (map fill-cell row)))\n  (apply + (map fill-row\
    \ grid)))\n", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-inner\
    \ grid capacity)\n      (cond [(empty? grid) 0]\n            [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n            [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n            [(= capacity (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n            [(> capacity (first grid)) (max-fill-helper\
    \ (rest grid) (- capacity (first grid)))]\n            [else (max-fill-helper\
    \ (rest grid) capacity)]))\n    (max-fill-helper-inner grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
