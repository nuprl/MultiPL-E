language: rkt
name: HumanEval_60_sum_to_n
results:
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (define\
    \ (sum_to_n_iter i acc)\n    (if (= i n)\n        acc\n        (sum_to_n_iter\
    \ (+ i 1) (+ acc i))))\n  (sum_to_n_iter 1 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiuo_3_cv.rkt:26:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiuo_3_cv.rkt:27:4

    actual:     15

    expected:   21

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiuo_3_cv.rkt:28:4

    actual:     55

    expected:   66

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiuo_3_cv.rkt:29:4

    actual:     435

    expected:   465

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiuo_3_cv.rkt:30:4

    actual:     4950

    expected:   5050

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (define\
    \ (sum_to_n_iter n sum)\n    (if (= n 0)\n        sum\n        (sum_to_n_iter\
    \ (- n 1) (+ sum n))))\n  (sum_to_n_iter n 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (define\
    \ (sum_to_n-iter n sum)\n    (if (= n 0)\n        sum\n        (sum_to_n-iter\
    \ (- n 1) (+ n sum))))\n  (sum_to_n-iter n 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (define\
    \ (sum_to_n-iter n sum)\n    (if (= n 0)\n        sum\n        (sum_to_n-iter\
    \ (- n 1) (+ n sum))))\n  (sum_to_n-iter n 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (define\
    \ (sum_to_n_iter n acc)\n    (if (= n 0)\n        acc\n        (sum_to_n_iter\
    \ (- n 1) (+ acc n))))\n  (sum_to_n_iter n 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (define\
    \ (sum_to_n_iter n sum)\n    (if (= n 0)\n        sum\n        (sum_to_n_iter\
    \ (- n 1) (+ sum n))))\n  (sum_to_n_iter n 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (define\
    \ (sum_to_n_helper n sum)\n    (if (= n 0)\n        sum\n        (sum_to_n_helper\
    \ (- n 1) (+ sum n))))\n  (sum_to_n_helper n 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (define\
    \ (sum_to_n_iter n sum)\n    (if (= n 0)\n        sum\n        (sum_to_n_iter\
    \ (- n 1) (+ sum n))))\n  (sum_to_n_iter n 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (define\
    \ (sum_to_n_iter n sum)\n    (if (= n 0)\n        sum\n        (sum_to_n_iter\
    \ (- n 1) (+ sum n))))\n  (sum_to_n_iter n 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (define\
    \ (sum_to_n_iter n sum)\n    (if (= n 0)\n        sum\n        (sum_to_n_iter\
    \ (- n 1) (+ sum n))))\n  (sum_to_n_iter n 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| sum_to_n is a function that sums numbers from 1 to\
    \ n.\n>>> (sum_to_n 30)\n465\n>>> (sum_to_n 100)\n5050\n>>> (sum_to_n 5)\n15\n\
    >>> (sum_to_n 10)\n55\n>>> (sum_to_n 1)\n1|#\n(define (sum_to_n n)\n  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal? (candidate 11)\
    \ 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate 100)\
    \ 5050)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
