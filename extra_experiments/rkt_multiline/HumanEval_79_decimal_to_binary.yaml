name: HumanEval_79_decimal_to_binary
language: rkt
prompt: "#lang racket\n\n#| You will be given a number in decimal form and your task\
  \ is to convert it to\nbinary format. The function should return a string, with\
  \ each character representing a binary\nnumber. Each character in the string will\
  \ be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning\
  \ and at the end of the string.\nThe extra characters are there to help with the\
  \ format.\nExamples:\n>>> (decimal_to_binary 15)\n\"db1111db\"\n>>> (decimal_to_binary\
  \ 32)\n\"db100000db\"|#\n(define (decimal_to_binary decimal)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n\
  \    (check-equal? (candidate 0) \"db0db\")\n    (check-equal? (candidate 32) \"\
  db100000db\")\n    (check-equal? (candidate 103) \"db1100111db\")\n    (check-equal?\
  \ (candidate 15) \"db1111db\")\n))\n\n(test-humaneval)"
completions: ["  (string-append \"db\" (number->string decimal 2) \"db\"))\n", " \
    \ (string-append \"db\"\n                 (number->string decimal 2)\n       \
    \          \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", " \
    \ (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\"\n                 (number->string decimal\
    \ 2)\n                 \"db\"))\n", "  (define (decimal-to-binary-helper decimal)\n\
    \    (if (= decimal 0)\n        '()\n        (append (decimal-to-binary-helper\
    \ (quotient decimal 2))\n                (list (number->string (remainder decimal\
    \ 2))))))\n  (string-append \"db\"\n                 (apply string-append (decimal-to-binary-helper\
    \ decimal))\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (define (decimal-to-binary-helper\
    \ decimal)\n    (cond\n      [(= decimal 0) '()]\n      [else (cons (remainder\
    \ decimal 2) (decimal-to-binary-helper (quotient decimal 2)))]))\n  (string-append\
    \ \"db\" (list->string (reverse (decimal-to-binary-helper decimal))) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ decimal 2)\n                 \"db\"))\n", "  (string-append \"db\"\n       \
    \          (number->string decimal 2)\n                 \"db\"))\n", "  (string-append\
    \ \"db\"\n                 (number->string decimal 2)\n                 \"db\"\
    ))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\"\n  \
    \               (number->string decimal 2)\n                 \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\"\n                 (number->string decimal\
    \ 2)\n                 \"db\"))\n", "  (define (decimal-to-binary-helper decimal)\n\
    \    (if (zero? decimal)\n        '()\n        (cons (remainder decimal 2)\n \
    \             (decimal-to-binary-helper (quotient decimal 2)))))\n  (string-append\
    \ \"db\"\n                 (apply string-append (reverse (decimal-to-binary-helper\
    \ decimal)))\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string decimal 2)\n        \
    \         \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", " \
    \ (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\"\n                 (number->string decimal\
    \ 2)\n                 \"db\"))\n", "  (string-append \"db\"\n               \
    \  (number->string decimal 2)\n                 \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\"\n                 (number->string decimal\
    \ 2)\n                 \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string decimal 2)\n        \
    \         \"db\"))\n", "  (define (decimal-to-binary-helper decimal)\n    (cond\n\
    \      [(= decimal 0) '()]\n      [else (cons (remainder decimal 2) (decimal-to-binary-helper\
    \ (quotient decimal 2)))]))\n  (string-append \"db\" (list->string (reverse (decimal-to-binary-helper\
    \ decimal))) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\"\n                 (number->string decimal\
    \ 2)\n                 \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\"\n                 (number->string decimal\
    \ 2)\n                 \"db\"))\n", "  (define (decimal-to-binary-helper decimal)\n\
    \    (if (zero? decimal)\n        '()\n        (cons (remainder decimal 2)\n \
    \             (decimal-to-binary-helper (quotient decimal 2)))))\n  (string-append\
    \ \"db\"\n                 (apply string-append (reverse (decimal-to-binary-helper\
    \ decimal)))\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (define (decimal-to-binary-helper decimal)\n    (if (zero? decimal)\n\
    \        '()\n        (cons (remainder decimal 2)\n              (decimal-to-binary-helper\
    \ (quotient decimal 2)))))\n  (string-append \"db\"\n                 (apply string-append\
    \ (reverse (decimal-to-binary-helper decimal)))\n                 \"db\"))\n",
  "  (define (decimal-to-binary-helper decimal)\n    (if (= decimal 0)\n        '()\n\
    \        (cons (remainder decimal 2)\n              (decimal-to-binary-helper\
    \ (quotient decimal 2)))))\n  (string-append \"db\"\n                 (list->string\
    \ (reverse (decimal-to-binary-helper decimal)))\n                 \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string decimal 2)\n        \
    \         \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", " \
    \ (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\"\n                 (number->string decimal 2)\n                 \"db\"\
    ))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\"\n                 (number->string decimal 2)\n                 \"db\"\
    ))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\"\n                 (number->string decimal\
    \ 2)\n                 \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string decimal 2)\n        \
    \         \"db\"))\n", "  (define (decimal-to-binary-helper decimal)\n    (cond\n\
    \      [(= decimal 0) '()]\n      [else (append (decimal-to-binary-helper (quotient\
    \ decimal 2))\n                    (list (number->string (remainder decimal 2))))]))\n\
    \  (string-append \"db\" (apply string-append (decimal-to-binary-helper decimal))\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string decimal 2)\n        \
    \         \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ decimal 2)\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (define (decimal-to-binary-helper decimal)\n    (cond\n\
    \      [(= decimal 0) '()]\n      [else (cons (remainder decimal 2) (decimal-to-binary-helper\
    \ (quotient decimal 2)))]))\n  (string-append \"db\" (list->string (reverse (decimal-to-binary-helper\
    \ decimal))) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\"\n                 (number->string decimal\
    \ 2)\n                 \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string decimal 2)\n        \
    \         \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ decimal 2)\n                 \"db\"))\n", "  (string-append \"db\"\n       \
    \          (number->string (integer->exact-integer (inexact->exact (log2 decimal))))\n\
    \                 \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\"\n                 (number->string decimal\
    \ 2)\n                 \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\"\n                 (number->string decimal 2)\n                 \"db\"\
    ))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (define (decimal-to-binary-helper\
    \ decimal)\n    (cond\n      [(zero? decimal) \"\"]\n      [else (string-append\
    \ (decimal-to-binary-helper (quotient decimal 2))\n                          \
    \ (number->string (remainder decimal 2)))]))\n  (string-append \"db\" (decimal-to-binary-helper\
    \ decimal) \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ decimal 2)\n                 \"db\"))\n", "  (string-append \"db\"\n       \
    \          (number->string decimal 2)\n                 \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\"\n  \
    \               (number->string decimal 2)\n                 \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (define (decimal-to-binary-helper decimal)\n    (cond\n    \
    \  [(= decimal 0) \"\"]\n      [else (string-append (decimal-to-binary-helper\
    \ (quotient decimal 2))\n                         (number->string (remainder decimal\
    \ 2)))]))\n  (string-append \"db\" (decimal-to-binary-helper decimal) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (define (decimal-to-binary-helper\
    \ decimal binary)\n    (cond\n      [(zero? decimal) (string-append binary \"\
    db\")]\n      [else (decimal-to-binary-helper (quotient decimal 2) (string-append\
    \ binary (number->string (remainder decimal 2))))]))\n  (decimal-to-binary-helper\
    \ decimal \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ decimal 2)\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\"\n                 (number->string decimal\
    \ 2)\n                 \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\"\n  \
    \               (number->string decimal 2)\n                 \"db\"))\n", "  (string-append\
    \ \"db\"\n                 (number->string decimal 2)\n                 \"db\"\
    ))\n", "  (string-append \"db\"\n                 (number->string decimal 2)\n\
    \                 \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ decimal 2)\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ decimal 2)\n                 \"db\"))\n```\n\n## [Binary to decimal](https://www.codewars.com/kata/binary-to-decimal)\n\
    \n```racket\n#lang racket\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string decimal 2)\n        \
    \         \"db\"))\n", "  (define (decimal-to-binary-helper decimal)\n    (cond\n\
    \      [(= decimal 0) '()]\n      [else (cons (remainder decimal 2) (decimal-to-binary-helper\
    \ (quotient decimal 2)))]))\n  (string-append \"db\" (list->string (reverse (decimal-to-binary-helper\
    \ decimal))) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string decimal 2)\n        \
    \         \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", " \
    \ (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (define (decimal-to-binary-helper\
    \ decimal)\n    (if (= decimal 0)\n        '()\n        (cons (remainder decimal\
    \ 2)\n              (decimal-to-binary-helper (quotient decimal 2)))))\n  (string-append\
    \ \"db\"\n                 (apply string-append (reverse (decimal-to-binary-helper\
    \ decimal)))\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (define (decimal-to-binary-helper decimal)\n    (if\
    \ (= decimal 0)\n        '()\n        (cons (remainder decimal 2)\n          \
    \    (decimal-to-binary-helper (quotient decimal 2)))))\n  (string-append \"db\"\
    \n                 (apply string-append (reverse (decimal-to-binary-helper decimal)))\n\
    \                 \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ decimal 2)\n                 \"db\"))\n", "  (string-append \"db\"\n       \
    \          (number->string decimal 2)\n                 \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ decimal 2)\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string decimal 2)\n        \
    \         \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (define (decimal-to-binary-helper decimal)\n    (cond [(= decimal\
    \ 0) \"\"]\n          [(= decimal 1) \"1\"]\n          [else (string-append (decimal-to-binary-helper\
    \ (quotient decimal 2))\n                               (number->string (remainder\
    \ decimal 2)))]))\n  (string-append \"db\" (decimal-to-binary-helper decimal)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (define (decimal-to-binary-helper decimal)\n    (if (= decimal 0)\n        '()\n\
    \        (cons (remainder decimal 2)\n              (decimal-to-binary-helper\
    \ (quotient decimal 2)))))\n  (string-append \"db\"\n                 (list->string\
    \ (reverse (decimal-to-binary-helper decimal)))\n                 \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string decimal 2)\n        \
    \         \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\"\n                 (number->string decimal\
    \ 2)\n                 \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string decimal 2)\n        \
    \         \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ (integer->binary decimal))\n                 \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (define (decimal-to-binary-helper\
    \ decimal)\n    (cond\n      [(= decimal 0) '()]\n      [else (append (decimal-to-binary-helper\
    \ (quotient decimal 2))\n                    (list (number->string (remainder\
    \ decimal 2))))]))\n  (string-append \"db\" (apply string-append (decimal-to-binary-helper\
    \ decimal)) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", " \
    \ (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (define (decimal-to-binary-helper decimal)\n    (cond\n      [(= decimal 0) '()]\n\
    \      [else (cons (remainder decimal 2) (decimal-to-binary-helper (quotient decimal\
    \ 2)))]))\n  (string-append \"db\" (list->string (reverse (decimal-to-binary-helper\
    \ decimal))) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\"\n                 (number->string decimal 2)\n                 \"db\"\
    ))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (define (decimal-to-binary-helper\
    \ decimal)\n    (if (= decimal 0)\n        '()\n        (cons (remainder decimal\
    \ 2)\n              (decimal-to-binary-helper (quotient decimal 2)))))\n  (string-append\
    \ \"db\"\n                 (list->string (reverse (decimal-to-binary-helper decimal)))\n\
    \                 \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (define (decimal-to-binary-helper\
    \ decimal)\n    (cond\n      [(zero? decimal) '()]\n      [else (cons (remainder\
    \ decimal 2) (decimal-to-binary-helper (quotient decimal 2)))]))\n  (string-append\
    \ \"db\" (list->string (reverse (decimal-to-binary-helper decimal))) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
