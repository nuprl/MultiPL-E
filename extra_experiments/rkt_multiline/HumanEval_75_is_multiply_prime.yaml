name: HumanEval_75_is_multiply_prime
language: rkt
prompt: "#lang racket\n\n#| Write a function that returns true if the given number\
  \ is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a)\
  \ is less then 100. \nExample:\n>>> (is_multiply_prime 30)\n#t\n30 = 2 * 3 * 5|#\n\
  (define (is_multiply_prime a)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_multiply_prime))\n\
  \    (check-equal? (candidate 5) #f)\n    (check-equal? (candidate 30) #t)\n   \
  \ (check-equal? (candidate 8) #t)\n    (check-equal? (candidate 10) #f)\n    (check-equal?\
  \ (candidate 125) #t)\n    (check-equal? (candidate 105) #t)\n    (check-equal?\
  \ (candidate 126) #f)\n    (check-equal? (candidate 729) #f)\n    (check-equal?\
  \ (candidate 891) #f)\n    (check-equal? (candidate 1001) #t)\n))\n\n(test-humaneval)"
completions: ["  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2)\
    \ #t)\n          ((even? n) #f)\n          (else (is_prime_helper n 3))))\n  (define\
    \ (is_prime_helper n i)\n    (cond ((= i n) #t)\n          ((= (remainder n i)\
    \ 0) #f)\n          (else (is_prime_helper n (+ i 2)))))\n  (define (is_multiply_prime_helper\
    \ a b)\n    (cond ((= a 1) #t)\n          ((= (remainder a b) 0) (is_multiply_prime_helper\
    \ (/ a b) b))\n          ((is_prime b) (is_multiply_prime_helper a (+ b 2)))\n\
    \          (else (is_multiply_prime_helper a (+ b 2)))))\n  (is_multiply_prime_helper\
    \ a 2))\n", "  (define (is_prime n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else (for/and ([i (in-range 3 n 2)])\n\
    \                (not (zero? (modulo n i))))]))\n  (define (prime-factors n)\n\
    \    (cond\n      [(is_prime n) (list n)]\n      [else (append (prime-factors\
    \ (quotient n (first (filter (lambda (x) (is_prime x)) (in-range 2 n)))))\n  \
    \                  (list (first (filter (lambda (x) (is_prime x)) (in-range 2\
    \ n)))))]))\n  (if (= (length (prime-factors a)) 3)\n      #t\n      #f))\n",
  "  (define (is_prime a)\n    (cond\n      [(= a 1) #f]\n      [(= a 2) #t]\n   \
    \   [(= (remainder a 2) 0) #f]\n      [else\n       (define (iter i)\n       \
    \  (cond\n           [(= i (sqrt a)) #t]\n           [(= (remainder a i) 0) #f]\n\
    \           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter i)\n\
    \    (cond\n      [(= i a) #f]\n      [(and (is_prime i) (is_prime (/ a i))) #t]\n\
    \      [else (iter (+ i 1))]))\n  (iter 1))\n", "  (define (is_prime a)\n    (cond\
    \ ((= a 1) #f)\n          ((= a 2) #t)\n          ((even? a) #f)\n          (else\
    \ (is_prime_helper a 3))))\n  (define (is_prime_helper a b)\n    (cond ((= b a)\
    \ #t)\n          ((= (remainder a b) 0) #f)\n          (else (is_prime_helper\
    \ a (+ b 2)))))\n  (define (is_multiply_prime_helper a b)\n    (cond ((= a 1)\
    \ #t)\n          ((= (remainder a b) 0) (and (is_prime b) (is_multiply_prime_helper\
    \ (/ a b) b)))\n          (else (is_multiply_prime_helper a (+ b 2)))))\n  (is_multiply_prime_helper\
    \ a 2))\n", "  (define (is_prime a)\n    (if (= a 1)\n        #f\n        (if\
    \ (= a 2)\n            #t\n            (let loop ((i 2))\n              (if (=\
    \ i a)\n                  #t\n                  (if (= (remainder a i) 0)\n  \
    \                    #f\n                      (loop (+ i 1))))))))\n  (if (=\
    \ a 1)\n      #f\n      (let loop ((i 2))\n        (if (= (remainder a i) 0)\n\
    \            (if (is_prime i)\n                (if (is_prime (/ a i))\n      \
    \              #t\n                    (loop (+ i 1)))\n                (loop\
    \ (+ i 1)))\n            (loop (+ i 1))))))\n", "  (define (is_prime? n)\n   \
    \ (define (is_prime-iter n divisor)\n      (cond ((< n (* divisor divisor)) #t)\n\
    \            ((= (remainder n divisor) 0) #f)\n            (else (is_prime-iter\
    \ n (+ divisor 1)))))\n    (is_prime-iter n 2))\n  (define (is_multiply-prime-iter\
    \ a b)\n    (cond ((= a 1) #t)\n          ((and (is_prime? a) (is_prime? b)) #t)\n\
    \          (else (is_multiply-prime-iter (/ a b) b))))\n  (is_multiply-prime-iter\
    \ a 2))\n", "  (define (is_prime n)\n    (define (is_prime_iter n i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (is_prime_iter\
    \ n (- i 1)))))\n    (is_prime_iter n (- n 1)))\n  (define (is_multiply_prime_iter\
    \ a i)\n    (cond ((= i 1) #f)\n          ((and (is_prime i) (is_prime (/ a i)))\
    \ #t)\n          (else (is_multiply_prime_iter a (- i 1)))))\n  (is_multiply_prime_iter\
    \ a (/ a 2)))\n", "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((=\
    \ n 2) #t)\n          ((even? n) #f)\n          (else\n           (let loop ((i\
    \ 3))\n             (cond ((= i n) #t)\n                   ((= (remainder n i)\
    \ 0) #f)\n                   (else (loop (+ i 2))))))))\n  (define (is_multiply_prime_helper\
    \ a b)\n    (cond ((= a 1) #f)\n          ((= (remainder a b) 0) (and (is_prime\
    \ b) (is_multiply_prime_helper (/ a b) b)))\n          (else (is_multiply_prime_helper\
    \ a (+ b 2)))))\n  (is_multiply_prime_helper a 2))\n", "  (define (is_prime a)\n\
    \    (if (or (= a 1) (= a 0))\n        #f\n        (define (iter i)\n        \
    \  (if (= i 1)\n              #t\n              (if (= (modulo a i) 0)\n     \
    \             #f\n                  (iter (- i 1)))))\n      (iter (- a 1))))\n\
    \  (define (iter i)\n    (if (= i 1)\n        #f\n        (if (and (is_prime i)\
    \ (= (modulo a i) 0))\n            (iter (- i 1))\n            #f)))\n  (iter\
    \ (- a 1)))\n", "  (define (is_prime a)\n    (cond\n      [(= a 1) #f]\n     \
    \ [(= a 2) #t]\n      [(= (remainder a 2) 0) #f]\n      [else\n       (define\
    \ (iter n)\n         (cond\n           [(= n a) #t]\n           [(= (remainder\
    \ a n) 0) #f]\n           [else (iter (+ n 1))]))\n       (iter 3)]))\n  (define\
    \ (iter n)\n    (cond\n      [(= n a) #f]\n      [(and (is_prime n) (is_prime\
    \ (/ a n))) #t]\n      [else (iter (+ n 1))]))\n  (iter 2))\n", "  (cond\n   \
    \ [(= a 0) #f]\n    [(= a 1) #f]\n    [(= a 2) #t]\n    [(= a 3) #t]\n    [(=\
    \ a 5) #t]\n    [(= a 7) #t]\n    [(= a 11) #t]\n    [(= a 13) #t]\n    [(= a\
    \ 17) #t]\n    [(= a 19) #t]\n    [(= a 23) #t]\n    [(= a 29) #t]\n    [(= a\
    \ 31) #t]\n    [(= a 37) #t]\n    [(= a 41) #t]\n    [(= a 43) #t]\n    [(= a\
    \ 47) #t]\n    [(= a 53) #t]\n    [(= a 59) #t]\n    [(= a 61) #t]\n    [(= a\
    \ 67) #t]\n    [(= a 71) #t]\n    [(= a 73) #t]\n    [(= a 79) #t]\n    [(= a\
    \ 83) #t]\n    [(= a 89) #t]\n    [(= a 97) #t]\n    [else #f]))\n", "  (define\
    \ (is_prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (iter i)\n    (cond ((= i a) #f)\n          ((and (is_prime? i) (is_prime? (/\
    \ a i))) #t)\n          (else (iter (+ i 1)))))\n  (iter 2))\n", "  (define (is_prime\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ i)\n    (cond ((= i a) #f)\n          ((and (is_prime i) (is_prime (- a i)))\
    \ #t)\n          (else (iter (+ i 1)))))\n  (iter 2))\n", "  (cond\n    [(= a\
    \ 1) #f]\n    [(= a 2) #t]\n    [(= a 3) #t]\n    [(= a 4) #f]\n    [(= a 5) #t]\n\
    \    [(= a 6) #f]\n    [(= a 7) #t]\n    [(= a 8) #f]\n    [(= a 9) #f]\n    [(=\
    \ a 10) #f]\n    [(= a 11) #t]\n    [(= a 12) #f]\n    [(= a 13) #t]\n    [(=\
    \ a 14) #f]\n    [(= a 15) #f]\n    [(= a 16) #f]\n    [(= a 17) #t]\n    [(=\
    \ a 18) #f]\n    [(= a 19) #t]\n    [(= a 20) #f]\n    [(= a 21) #f]\n    [(=\
    \ a 22) #f]\n    [(= a 23) #t]\n    [(= a 24) #f]\n    [(= a 25) #f]\n    [(=\
    \ a 26) #f]\n    [(= a 27) #f]\n    [(= a 28) #f]\n    [(= a 29) #t]\n    [(=\
    \ a 30) #t]\n    [(= a 31) #t]\n    [(= a 32) #f]\n    [(= a 33) #f]\n    [(=\
    \ a 34) #f]\n    [(= a 35) #f]\n    [(= a 36) #f]\n    [(= a 37) #t]\n    [(=\
    \ a 38) #f]\n    [(= a 39) #f]\n    [(= a 40) #f]\n    [(= a 41) #t]\n    [(=\
    \ a 42) #f]\n    [(= a 43) #t]\n    [(= a 44) #f]\n    [(= a 45) #f]\n    [(=\
    \ a 46) #f]\n    [(= a 47) #t]\n    [(= a 48) #f]\n    [(= a 49) #f]\n    [(=\
    \ a 50) #f]\n    [(= a 51) #", "  (define (is_prime a)\n    (define (divisors\
    \ a)\n      (for/list ([i (in-range 1 (+ 1 (quotient a 2)))])\n        (if (zero?\
    \ (modulo a i)) i)))\n    (if (null? (divisors a)) #t #f))\n  (define (prime_factors\
    \ a)\n    (for/list ([i (in-range 1 a)])\n      (if (and (is_prime i) (zero? (modulo\
    \ a i))) i)))\n  (if (= (length (prime_factors a)) 3) #t #f))\n", "  (cond\n \
    \   [(= a 1) #f]\n    [(= a 2) #t]\n    [(= a 3) #t]\n    [(= a 4) #f]\n    [(=\
    \ a 5) #t]\n    [(= a 6) #f]\n    [(= a 7) #t]\n    [(= a 8) #f]\n    [(= a 9)\
    \ #f]\n    [(= a 10) #f]\n    [(= a 11) #t]\n    [(= a 12) #f]\n    [(= a 13)\
    \ #t]\n    [(= a 14) #f]\n    [(= a 15) #f]\n    [(= a 16) #f]\n    [(= a 17)\
    \ #t]\n    [(= a 18) #f]\n    [(= a 19) #t]\n    [(= a 20) #f]\n    [(= a 21)\
    \ #f]\n    [(= a 22) #f]\n    [(= a 23) #t]\n    [(= a 24) #f]\n    [(= a 25)\
    \ #f]\n    [(= a 26) #f]\n    [(= a 27) #f]\n    [(= a 28) #f]\n    [(= a 29)\
    \ #t]\n    [(= a 30) #t]\n    [(= a 31) #t]\n    [(= a 32) #f]\n    [(= a 33)\
    \ #f]\n    [(= a 34) #f]\n    [(= a 35) #f]\n    [(= a 36) #f]\n    [(= a 37)\
    \ #t]\n    [(= a 38) #f]\n    [(= a 39) #f]\n    [(= a 40) #f]\n    [(= a 41)\
    \ #t]\n    [(= a 42) #f]\n    [(= a 43) #t]\n    [(= a 44) #f]\n    [(= a 45)\
    \ #f]\n    [(= a 46) #f]\n    [(= a 47) #t]\n    [(= a 48) #f]\n    [(= a 49)\
    \ #f]\n    [(= a 50) #f]\n    [(= a 51) #", "  (define (is_prime n)\n    (cond\n\
    \      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n \
    \      (define (divisible? a b)\n         (= (remainder a b) 0))\n       (define\
    \ (find-divisor n test-divisor)\n         (cond\n           [(> (square test-divisor)\
    \ n) n]\n           [(divisible? n test-divisor) test-divisor]\n           [else\
    \ (find-divisor n (+ test-divisor 1))]))\n       (= n (find-divisor n 2))]))\n\
    \  (define (is_multiply_prime? a)\n    (cond\n      [(= a 1) #f]\n      [(= a\
    \ 2) #t]\n      [(is_prime a) #t]\n      [else\n       (define (find-divisor n\
    \ test-divisor)\n         (cond\n           [(> (square test-divisor) n) n]\n\
    \           [(divisible? n test-divisor) test-divisor]\n           [else (find-divisor\
    \ n (+ test-divisor 1))]))\n       (define (divisors n)\n         (cond\n    \
    \       [(= n 1) (list 1)]\n           [(= n 2) (list 1 2)]\n           [(is_prime\
    \ n) (list 1 n)]\n           [else\n            (define (divisors-iter n test-divisor)\n\
    \              (cond\n                [(= n 1) (list 1)]\n                [(=\
    \ n 2) (list 1 2)]\n                [(is_prime n) (list 1 n)]\n              \
    \  [(divisible? n test-divisor)\n                 (cons test-divisor\n       \
    \                (divisors-iter (/ n test-divisor) test-divisor))]\n         \
    \       [else (divisors-iter n (+ test-divisor 1))]))\n            (divisors-iter\
    \ n 2)]))\n       (define (is_multiply_prime? a)\n         (cond\n           [(=\
    \ a 1) #f]", "  (define (is_prime n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else (is_prime_helper n 3)]))\n  (define\
    \ (is_prime_helper n i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n\
    \ i) 0) #f]\n      [else (is_prime_helper n (+ i 2))]))\n  (define (is_multiply_prime_helper\
    \ a b)\n    (cond\n      [(= a 1) #f]\n      [(= (remainder a b) 0) (and (is_prime\
    \ b) (is_multiply_prime_helper (/ a b) b))]\n      [else (is_multiply_prime_helper\
    \ a (+ b 2))]))\n  (is_multiply_prime_helper a 2))\n", "  (define (is_prime n)\n\
    \    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n   \
    \   [else\n       (define (iter i)\n         (cond\n           [(> i (/ n 2))\
    \ #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n\
    \       (iter 3)]))\n  (define (iter i)\n    (cond\n      [(> i (/ a 2)) #f]\n\
    \      [(and (is_prime i) (is_prime (/ a i))) #t]\n      [else (iter (+ i 1))]))\n\
    \  (iter 3))\n", "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((=\
    \ n 2) #t)\n          ((= n 3) #t)\n          ((= n 4) #f)\n          ((= n 5)\
    \ #t)\n          ((= n 6) #f)\n          ((= n 7) #t)\n          ((= n 8) #f)\n\
    \          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #t)\n  \
    \        ((= n 12) #f)\n          ((= n 13) #t)\n          ((= n 14) #f)\n   \
    \       ((= n 15) #f)\n          ((= n 16) #f)\n          ((= n 17) #t)\n    \
    \      ((= n 18) #f)\n          ((= n 19) #t)\n          ((= n 20) #f)\n     \
    \     ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n 23) #t)\n      \
    \    ((= n 24) #f)\n          ((= n 25) #f)\n          ((= n 26) #f)\n       \
    \   ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #t)\n        \
    \  ((= n 30) #f)\n          ((= n 31) #t)\n          ((= n 32) #f)\n         \
    \ ((= n 33) #f)\n          ((= n 34) #f)\n          ((= n 35) #f)\n          ((=\
    \ n 36) #f)\n          ((= n 37) #t)\n          ((= n 38) #f)\n          ((= n\
    \ 39) #f)\n          ((= n 40) #f)\n          ((= n 41) #t)\n          ((= n 42)\
    \ #f)\n          ((= n 43) #t)\n          ((= n 44) #f)\n          ((= n 45) #f)\n\
    \          ((= n 46) #f)\n          ((= n 47) #t)\n          ((= n 48) #f)\n \
    \         ((= n 49) #f)\n          ((= n 50) #f)", "  (if (and (prime? a) (prime?\
    \ (/ a 2)) (prime? (/ a 3)))\n      #t\n      #f))\n", "  (define (is_prime a)\n\
    \    (define (is_prime_helper a b)\n      (if (= a b)\n          #t\n        \
    \  (if (= (remainder a b) 0)\n              #f\n              (is_prime_helper\
    \ a (+ b 1)))))\n    (is_prime_helper a 2))\n  (define (is_multiply_prime_helper\
    \ a b)\n    (if (= a 1)\n        #f\n        (if (is_prime b)\n            (if\
    \ (= (remainder a b) 0)\n                (if (= (is_multiply_prime_helper (/ a\
    \ b) 2) #f)\n                    #f\n                    #t)\n               \
    \ (is_multiply_prime_helper a (+ b 1)))\n            (is_multiply_prime_helper\
    \ a (+ b 1)))))\n  (is_multiply_prime_helper a 2))\n", "  (define (is_prime a)\n\
    \    (define (is_prime-iter a b)\n      (cond ((= b 1) #t)\n            ((= (modulo\
    \ a b) 0) #f)\n            (else (is_prime-iter a (- b 1)))))\n    (is-prime-iter\
    \ a (- a 1)))\n  (define (is_multiply-prime-iter a b)\n    (cond ((= a 1) #t)\n\
    \          ((and (is_prime a) (is_prime b)) #t)\n          (else (is_multiply-prime-iter\
    \ (- a 1) (- b 1)))))\n  (is_multiply-prime-iter a a))\n", "  (define (is_prime\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n\
    \      [else\n       (define (iter i)\n         (cond\n           [(> i (/ n 2))\
    \ #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n\
    \       (iter 3)]))\n  (define (iter i)\n    (cond\n      [(> i (/ a 2)) #f]\n\
    \      [(and (is_prime i) (is_prime (/ a i))) #t]\n      [else (iter (+ i 1))]))\n\
    \  (iter 2))\n", "  (define (is_prime a)\n    (define (is_divisible a b)\n   \
    \   (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((is_divisible n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor a 2) a))\n  (define (is_multiply_prime_helper a b)\n    (cond\
    \ ((= a 1) #t)\n          ((is_prime a) (is_multiply_prime_helper (/ a b) b))\n\
    \          (else #f)))\n  (is_multiply_prime_helper a 3))\n", "  (define (is_prime?\
    \ n)\n    (define (is_prime?-iter n i)\n      (cond ((= i 1) #t)\n           \
    \ ((= (modulo n i) 0) #f)\n            (else (is_prime?-iter n (- i 1)))))\n \
    \   (is_prime?-iter n (- n 1)))\n  (define (is_multiply-prime? a b c)\n    (and\
    \ (is_prime? a) (is_prime? b) (is_prime? c)))\n  (define (is_multiply-prime?-iter\
    \ a b c)\n    (cond ((= a 1) #f)\n          ((= b 1) (is_multiply-prime?-iter\
    \ (- a 1) c (- c 1)))\n          ((= c 1) (is_multiply-prime?-iter (- a 1) (-\
    \ b 1) c))\n          ((= (* a b c) a) #t)\n          (else (is_multiply-prime?-iter\
    \ a (- b 1) (- c 1)))))\n  (is_multiply-prime?-iter a a a))\n", "  (define (is_prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter\
    \ i)\n    (cond\n      [(= i a) #f]\n      [(and (is_prime? i) (is_prime? (/ a\
    \ i))) #t]\n      [else (iter (+ i 1))]))\n  (iter 2))\n", "  (and (prime? a)\n\
    \       (or (and (prime? (/ a 2)) (prime? (/ a 3)))\n           (and (prime? (/\
    \ a 2)) (prime? (/ a 5)))\n           (and (prime? (/ a 3)) (prime? (/ a 5))))))\n",
  "  (and (prime? a)\n       (prime? (/ a 2))\n       (prime? (/ a 3))))\n", "  (define\
    \ (is_prime n)\n    (define (is_prime-iter n div)\n      (cond ((= div 1) #t)\n\
    \            ((= (modulo n div) 0) #f)\n            (else (is_prime-iter n (-\
    \ div 1)))))\n    (is_prime-iter n (- n 1)))\n  (define (is_multiply-prime-iter\
    \ a div)\n    (cond ((= div 1) #f)\n          ((and (is_prime div) (is_prime (/\
    \ a div))) #t)\n          (else (is_multiply-prime-iter a (- div 1)))))\n  (is_multiply-prime-iter\
    \ a (/ a 2)))\n", "  (define (is_prime a)\n    (cond ((= a 1) #f)\n          ((=\
    \ a 2) #t)\n          ((even? a) #f)\n          (else (define (is_divisible? a\
    \ b)\n                 (if (= b 1)\n                     #f\n                \
    \     (if (= (remainder a b) 0)\n                         #t\n               \
    \          (is_divisible? a (- b 1)))))\n               (is_divisible? a (- a\
    \ 1)))))\n  (define (is_multiply_prime? a b)\n    (if (= b 1)\n        #f\n  \
    \      (if (is_prime b)\n            (if (= (remainder a b) 0)\n             \
    \   (is_multiply_prime? (/ a b) b)\n                (is_multiply_prime? a (- b\
    \ 1)))\n            (is_multiply_prime? a (- b 1)))))\n  (is_multiply_prime? a\
    \ (/ a 2)))\n", "  (cond\n    [(= a 0) #f]\n    [(= a 1) #f]\n    [(= a 2) #t]\n\
    \    [(= a 3) #t]\n    [(= a 5) #t]\n    [(= a 7) #t]\n    [(= a 11) #t]\n   \
    \ [(= a 13) #t]\n    [(= a 17) #t]\n    [(= a 19) #t]\n    [(= a 23) #t]\n   \
    \ [(= a 29) #t]\n    [(= a 31) #t]\n    [(= a 37) #t]\n    [(= a 41) #t]\n   \
    \ [(= a 43) #t]\n    [(= a 47) #t]\n    [(= a 53) #t]\n    [(= a 59) #t]\n   \
    \ [(= a 61) #t]\n    [(= a 67) #t]\n    [(= a 71) #t]\n    [(= a 73) #t]\n   \
    \ [(= a 79) #t]\n    [(= a 83) #t]\n    [(= a 89) #t]\n    [(= a 97) #t]\n   \
    \ [else #f]))\n", "  (define (is_prime a)\n    (define (helper a b)\n      (if\
    \ (= b 1)\n          #t\n          (if (= (modulo a b) 0)\n              #f\n\
    \              (helper a (- b 1)))))\n    (helper a (- a 1)))\n  (define (helper\
    \ a b)\n    (if (= b 1)\n        #f\n        (if (and (is_prime b) (is_prime (-\
    \ a b)))\n            #t\n            (helper a (- b 1)))))\n  (helper a (- a\
    \ 1)))\n", "  (define (is_prime? n)\n    (define (iter i)\n      (cond [(= i 1)\
    \ #t]\n            [(= (modulo n i) 0) #f]\n            [else (iter (- i 1))]))\n\
    \    (iter (- n 1)))\n  (define (iter i)\n    (cond [(= i 1) #f]\n          [(and\
    \ (is_prime? i) (is_prime? (/ a i))) #t]\n          [else (iter (- i 1))]))\n\
    \  (iter (/ a 2)))\n", "  (and (prime? a)\n       (prime? (/ a 2))\n       (prime?\
    \ (/ a 3))))\n", "  (define (is_prime? n)\n    (define (iter i)\n      (cond [(=\
    \ i 1) #t]\n            [(= (modulo n i) 0) #f]\n            [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond [(= i 1) #f]\n  \
    \        [(and (is_prime? i) (is_prime? (/ a i))) #t]\n          [else (iter (-\
    \ i 1))]))\n  (iter (/ a 2)))\n", "  (define (is_prime? n)\n    (cond\n      [(=\
    \ n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n\
    \       (define (iter i)\n         (cond\n           [(= i n) #t]\n          \
    \ [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter\
    \ 3)]))\n  (define (iter i)\n    (cond\n      [(= i a) #f]\n      [(and (is_prime?\
    \ i) (is_prime? (/ a i))) #t]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
  "  (define (is_prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (iter i)\n    (cond ((= i a) #f)\n          ((and (is_prime?\
    \ i)\n                (is_prime? (/ a i)))\n           #t)\n          (else (iter\
    \ (+ i 1)))))\n  (iter 2))\n", "  (define (is_prime n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i a) #f)\n\
    \          ((and (is_prime i) (is_prime (/ a i))) #t)\n          (else (iter (+\
    \ i 1)))))\n  (iter 2))\n", "  (define (is_prime n)\n    (define (is_prime_iter\
    \ n i)\n      (if (= i 1)\n          #t\n          (if (= (modulo n i) 0)\n  \
    \            #f\n              (is_prime_iter n (- i 1)))))\n    (is_prime_iter\
    \ n (- n 1)))\n  (define (is_multiply_prime_iter a i)\n    (if (= i 1)\n     \
    \   #f\n        (if (and (is_prime i) (is_prime (/ a i)))\n            #t\n  \
    \          (is_multiply_prime_iter a (- i 1)))))\n  (is_multiply_prime_iter a\
    \ (/ a 2)))\n", "  (define (is_prime n)\n    (define (iter i)\n      (cond ((=\
    \ i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i\
    \ 1)))))\n    (iter (- n 1)))\n  (define (is_multiply_prime-iter i)\n    (cond\
    \ ((= i 1) #f)\n          ((and (is_prime i) (is_prime (/ a i))) #t)\n       \
    \   (else (is_multiply_prime-iter (- i 1)))))\n  (is_multiply_prime-iter (/ a\
    \ 2)))\n", "  (define (is_prime n)\n    (define (is_prime-iter n i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (is_prime-iter\
    \ n (+ i 1)))))\n    (is-prime-iter n 2))\n  (define (is_multiply-prime-iter a\
    \ i)\n    (cond ((= (modulo a i) 0)\n           (and (is_prime i)\n          \
    \      (is_multiply-prime-iter (/ a i) i)))\n          ((= i a) #t)\n        \
    \  (else (is_multiply-prime-iter a (+ i 1)))))\n  (is_multiply-prime-iter a 2))\n",
  "  (define (is_prime n)\n    (define (is_prime-iter n div)\n      (if (= div 1)\n\
    \          #t\n          (if (= (remainder n div) 0)\n              #f\n     \
    \         (is_prime-iter n (- div 1)))))\n    (is_prime-iter n (- n 1)))\n  (define\
    \ (is_multiply-prime-iter a b)\n    (if (= b 1)\n        #f\n        (if (is_prime\
    \ b)\n            (if (= (remainder a b) 0)\n                (if (is_multiply-prime-iter\
    \ (/ a b) b)\n                    #t\n                    (is_multiply-prime-iter\
    \ a (- b 1)))\n                (is_multiply-prime-iter a (- b 1)))\n         \
    \   (is_multiply-prime-iter a (- b 1)))))\n  (is_multiply-prime-iter a a))\n",
  "  (cond\n    [(= a 0) #f]\n    [(= a 1) #f]\n    [(= a 2) #t]\n    [(= a 3) #t]\n\
    \    [(= a 4) #f]\n    [(= a 5) #t]\n    [(= a 6) #f]\n    [(= a 7) #t]\n    [(=\
    \ a 8) #f]\n    [(= a 9) #f]\n    [(= a 10) #f]\n    [(= a 11) #t]\n    [(= a\
    \ 12) #f]\n    [(= a 13) #t]\n    [(= a 14) #f]\n    [(= a 15) #f]\n    [(= a\
    \ 16) #f]\n    [(= a 17) #t]\n    [(= a 18) #f]\n    [(= a 19) #t]\n    [(= a\
    \ 20) #f]\n    [(= a 21) #f]\n    [(= a 22) #f]\n    [(= a 23) #t]\n    [(= a\
    \ 24) #f]\n    [(= a 25) #f]\n    [(= a 26) #f]\n    [(= a 27) #f]\n    [(= a\
    \ 28) #f]\n    [(= a 29) #t]\n    [(= a 30) #t]\n    [(= a 31) #t]\n    [(= a\
    \ 32) #f]\n    [(= a 33) #f]\n    [(= a 34) #f]\n    [(= a 35) #f]\n    [(= a\
    \ 36) #f]\n    [(= a 37) #t]\n    [(= a 38) #f]\n    [(= a 39) #f]\n    [(= a\
    \ 40) #f]\n    [(= a 41) #t]\n    [(= a 42) #f]\n    [(= a 43) #t]\n    [(= a\
    \ 44) #f]\n    [(= a 45) #f]\n    [(= a 46) #f]\n    [(= a 47) #t]\n    [(= a\
    \ 48) #f]\n    [(= a 49) #f]\n    [(= a 50) #", "  (define (is_prime? n)\n   \
    \ (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i)\
    \ 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (iter\
    \ i)\n    (cond\n      [(= i 1) #f]\n      [(and (is_prime? i) (is_prime? (/ a\
    \ i))) #t]\n      [else (iter (- i 1))]))\n  (iter (/ a 2)))\n", "  (define (is_prime\
    \ n)\n    (define (helper d)\n      (cond ((= d 1) #t)\n            ((= (modulo\
    \ n d) 0) #f)\n            (else (helper (- d 1)))))\n    (helper (- n 1)))\n\
    \  (define (helper2 a b)\n    (cond ((= a 1) #f)\n          ((and (is_prime a)\
    \ (is_prime b) (is_prime (/ a b))) #t)\n          (else (helper2 (- a 1) b))))\n\
    \  (helper2 (- a 1) 2))\n", "  (define (is_prime n)\n    (define (is_prime-iter\
    \ n i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is_prime-iter n (+ i 1)))))\n    (is-prime-iter n 2))\n  (define\
    \ (is_multiply-prime-iter a i)\n    (cond ((= i a) #f)\n          ((and (is_prime\
    \ i) (is_prime (/ a i))) #t)\n          (else (is_multiply-prime-iter a (+ i 1)))))\n\
    \  (is_multiply-prime-iter a 2))\n", "  (define (is_prime? a)\n    (define (iter\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo a i) 0) #f)\n        \
    \    (else (iter (- i 1)))))\n    (iter (- a 1)))\n  (define (iter i)\n    (cond\
    \ ((= i a) #f)\n          ((and (is_prime? i) (is_prime? (- a i))) #t)\n     \
    \     (else (iter (+ i 1)))))\n  (iter 1))\n", "  (define (is_prime n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond\
    \ ((= i a) #f)\n          ((and (is_prime i) (is_prime (/ a i))) #t)\n       \
    \   (else (iter (+ i 1)))))\n  (iter 2))\n", "  (define (is_prime? n)\n    (define\
    \ (prime? n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0)\
    \ #f]\n        [else (prime? n (- i 1))]))\n    (prime? n (- n 1)))\n  (define\
    \ (prime_factors n)\n    (define (prime_factors n i)\n      (cond\n        [(=\
    \ i n) (list n)]\n        [(= (modulo n i) 0) (cons i (prime_factors (/ n i) i))]\n\
    \        [else (prime_factors n (+ i 1))]))\n    (prime_factors n 2))\n  (define\
    \ (is_multiply_prime? n)\n    (cond\n      [(= (length (prime_factors n)) 3) #t]\n\
    \      [else #f]))\n  (is_multiply_prime? a))\n", "  (define (is_prime n)\n  \
    \  (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n\
    \ i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (iter\
    \ i)\n    (cond\n      [(= i 1) #f]\n      [(and (is_prime i) (is_prime (/ a i)))\
    \ #t]\n      [else (iter (- i 1))]))\n  (iter (/ a 2)))\n", "  (define (is_prime?\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n\
    \      [else (define (iter i)\n              (cond\n                [(= i n) #t]\n\
    \                [(= (remainder n i) 0) #f]\n                [else (iter (+ i\
    \ 1))]))\n            (iter 3)]))\n  (define (iter i)\n    (cond\n      [(= i\
    \ a) #f]\n      [(and (is_prime? i) (is_prime? (/ a i))) #t]\n      [else (iter\
    \ (+ i 1))]))\n  (iter 2))\n", "  (define (is_prime a)\n    (define (iter b)\n\
    \      (if (= b 1)\n          #t\n          (if (= (modulo a b) 0)\n         \
    \     #f\n              (iter (- b 1)))))\n    (iter (- a 1)))\n  (define (iter\
    \ b)\n    (if (= b 1)\n        #f\n        (if (and (is_prime b) (= (modulo a\
    \ b) 0))\n            (if (is_multiply_prime (/ a b))\n                #t\n  \
    \              #f)\n            (iter (- b 1)))))\n  (iter (- a 1)))\n", "  (define\
    \ (is_prime a)\n    (define (is_divisible a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((is_divisible n test-divisor) test-divisor)\n          \
    \  (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor a 2) a))\n\
    \  (define (is_multiply_prime-iter a b)\n    (cond ((= b a) #f)\n          ((is_prime\
    \ b) (if (is_prime (/ a b)) #t (is_multiply_prime-iter a (+ b 1))))\n        \
    \  (else (is_multiply_prime-iter a (+ b 1)))))\n  (is_multiply_prime-iter a 2))\n",
  "  (define (is_prime a)\n    (cond\n      [(= a 1) #f]\n      [(= a 2) #t]\n   \
    \   [(= (remainder a 2) 0) #f]\n      [else (is_prime_helper a 3)]))\n  (define\
    \ (is_prime_helper a b)\n    (cond\n      [(= b (/ a 2)) #t]\n      [(= (remainder\
    \ a b) 0) #f]\n      [else (is_prime_helper a (+ b 2))]))\n  (define (is_multiply_prime_helper\
    \ a b)\n    (cond\n      [(= b (/ a 2)) #f]\n      [(and (is_prime b) (is_prime\
    \ (/ a b)) (is_prime (- a (* b (/ a b))))) #t]\n      [else (is_multiply_prime_helper\
    \ a (+ b 2))]))\n  (is_multiply_prime_helper a 2))\n", "  (define (is_prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ i)\n    (cond ((= i a) #f)\n          ((and (is_prime? i) (is_prime? (/ a i)))\
    \ #t)\n          (else (iter (+ i 1)))))\n  (iter 2))\n", "  (define (is_prime?\
    \ n)\n    (define (is_prime_iter? n i)\n      (cond\n        [(= i 1) #t]\n  \
    \      [(= (modulo n i) 0) #f]\n        [else (is_prime_iter? n (- i 1))]))\n\
    \    (is_prime_iter? n (- n 1)))\n  (define (is_multiply_prime_iter a b)\n   \
    \ (cond\n      [(= b 1) #t]\n      [(and (is_prime? b) (is_prime? (/ a b))) (is_multiply_prime_iter\
    \ (/ a b) (- b 1))]\n      [else (is_multiply_prime_iter a (- b 1))]))\n  (is_multiply_prime_iter\
    \ a (/ a 2)))\n", "  (define (is_prime a)\n    (define (helper a b)\n      (if\
    \ (= b 1)\n          #t\n          (if (= (modulo a b) 0)\n              #f\n\
    \              (helper a (- b 1)))))\n    (helper a (- a 1)))\n  (define (helper\
    \ a b)\n    (if (= b 1)\n        #f\n        (if (and (is_prime b) (is_prime (-\
    \ a b)))\n            #t\n            (helper a (- b 1)))))\n  (helper a (- a\
    \ 1)))\n", "  (define (is_prime a)\n    (cond\n      [(= a 1) #f]\n      [(= a\
    \ 2) #t]\n      [(= (remainder a 2) 0) #f]\n      [else (is_prime_helper a 3)]))\n\
    \  (define (is_prime_helper a b)\n    (cond\n      [(= a b) #t]\n      [(= (remainder\
    \ a b) 0) #f]\n      [else (is_prime_helper a (+ b 2))]))\n  (define (is_multiply_prime_helper\
    \ a b)\n    (cond\n      [(= a 1) #t]\n      [(= (remainder a b) 0) (is_multiply_prime_helper\
    \ (/ a b) b)]\n      [else (is_multiply_prime_helper a (+ b 2))]))\n  (is_multiply_prime_helper\
    \ a 2))\n", "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i 1) #f)\n          ((and\
    \ (is_prime i) (is_prime (/ a i))) #t)\n          (else (iter (- i 1)))))\n  (iter\
    \ (/ a 2)))\n", "  (define (is_prime a)\n    (define (is_prime_helper a b)\n \
    \     (if (= b 1)\n          #t\n          (if (= (modulo a b) 0)\n          \
    \    #f\n              (is_prime_helper a (- b 1)))))\n    (is_prime_helper a\
    \ (- a 1)))\n  (define (is_multiply_prime_helper a b)\n    (if (= b 1)\n     \
    \   #f\n        (if (and (is_prime b) (= (modulo a b) 0))\n            (is_multiply_prime_helper\
    \ (/ a b) b)\n            (is_multiply_prime_helper a (- b 1)))))\n  (is_multiply_prime_helper\
    \ a (- a 1)))\n", "  (define (is_prime n)\n    (cond\n      [(= n 1) #f]\n   \
    \   [(= n 2) #t]\n      [(even? n) #f]\n      [else (is_prime_helper n 3)]))\n\
    \  (define (is_prime_helper n i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder\
    \ n i) 0) #f]\n      [else (is_prime_helper n (+ i 2))]))\n  (define (is_multiply_prime_helper\
    \ a b)\n    (cond\n      [(= a 1) #f]\n      [(= (remainder a b) 0) (and (is_prime\
    \ b) (is_multiply_prime_helper (/ a b) b))]\n      [else (is_multiply_prime_helper\
    \ a (+ b 2))]))\n  (is_multiply_prime_helper a 2))\n", "  (define (is_prime? n)\n\
    \    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n   \
    \   [else\n       (define (iter i)\n         (cond\n           [(= i n) #t]\n\
    \           [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n \
    \      (iter 3)]))\n  (define (iter i)\n    (cond\n      [(= i a) #f]\n      [(and\
    \ (is_prime? i) (= (remainder a i) 0))\n       (if (is_prime? (/ a i)) #t #f)]\n\
    \      [else (iter (+ i 1))]))\n  (iter 1))\n", "  (define (is_prime a)\n    (define\
    \ (is_divisible a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((is_divisible\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor a 2) a))\n  (define (is_multiply_prime_helper a\
    \ b)\n    (cond ((= a 1) #t)\n          ((is_prime a) (is_multiply_prime_helper\
    \ (/ a b) b))\n          (else #f)))\n  (is_multiply_prime_helper a 2))\n", " \
    \ (cond\n    [(= a 3) #t]\n    [(= a 5) #t]\n    [(= a 7) #t]\n    [(= a 11) #t]\n\
    \    [(= a 13) #t]\n    [(= a 17) #t]\n    [(= a 19) #t]\n    [(= a 23) #t]\n\
    \    [(= a 29) #t]\n    [(= a 31) #t]\n    [(= a 37) #t]\n    [(= a 41) #t]\n\
    \    [(= a 43) #t]\n    [(= a 47) #t]\n    [(= a 53) #t]\n    [(= a 59) #t]\n\
    \    [(= a 61) #t]\n    [(= a 67) #t]\n    [(= a 71) #t]\n    [(= a 73) #t]\n\
    \    [(= a 79) #t]\n    [(= a 83) #t]\n    [(= a 89) #t]\n    [(= a 97) #t]\n\
    \    [(= a 2) #f]\n    [(= a 4) #f]\n    [(= a 6) #f]\n    [(= a 8) #f]\n    [(=\
    \ a 9) #f]\n    [(= a 10) #f]\n    [(= a 12) #f]\n    [(= a 14) #f]\n    [(= a\
    \ 15) #f]\n    [(= a 16) #f]\n    [(= a 18) #f]\n    [(= a 20) #f]\n    [(= a\
    \ 21) #f]\n    [(= a 22) #f]\n    [(= a 24) #f]\n    [(= a 25) #f]\n    [(= a\
    \ 26) #f]\n    [(= a 27) #f]\n    [(= a 28) #f]\n    [(= a 32) #f]\n    [(= a\
    \ 33) #f]\n    [(= a 34) #f]\n    [(= a 35) #f]\n    [(= a 36) #f]\n    [(= a\
    \ 38) #f]\n    [(= a 39) #f]\n    [(= a 40) #", "  (define (is_prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter\
    \ i)\n    (cond ((= i 1) #f)\n          ((and (is_prime? i) (is_prime? (/ a i)))\
    \ #t)\n          (else (iter (- i 1)))))\n  (iter (/ a 2)))\n", "  (define (is_prime\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n\
    \          (else (let loop ((i 3))\n                  (cond ((= i n) #t)\n   \
    \                     ((= (remainder n i) 0) #f)\n                        (else\
    \ (loop (+ i 2))))))))\n  (cond ((= a 1) #f)\n        ((= a 2) #t)\n        ((even?\
    \ a) #f)\n        (else (let loop ((i 3))\n                (cond ((= i a) #f)\n\
    \                      ((= (remainder a i) 0)\n                       (and (is_prime\
    \ i) (is_prime (/ a i))))\n                      (else (loop (+ i 2))))))))\n",
  "  (define (is_prime a)\n    (define (is_prime-iter a b)\n      (cond ((= b 1) #t)\n\
    \            ((= (modulo a b) 0) #f)\n            (else (is_prime-iter a (- b\
    \ 1)))))\n    (is-prime-iter a (- a 1)))\n  (define (is_multiply-prime-iter a\
    \ b)\n    (cond ((= b 1) #f)\n          ((= (modulo a b) 0) (and (is_prime b)\
    \ (is_multiply-prime-iter (/ a b) b)))\n          (else (is_multiply-prime-iter\
    \ a (- b 1)))))\n  (is_multiply-prime-iter a (/ a 2)))\n", "  (define (is_prime\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ i)\n    (cond ((= i a) #f)\n          ((and (is_prime i) (is_prime (- a i)))\
    \ #t)\n          (else (iter (+ i 1)))))\n  (iter 2))\n", "  (define (is_prime\
    \ a)\n    (cond ((= a 1) #f)\n          ((= a 2) #t)\n          ((= (remainder\
    \ a 2) 0) #f)\n          (else (is_prime_helper a 3))))\n  (define (is_prime_helper\
    \ a b)\n    (cond ((= a b) #t)\n          ((= (remainder a b) 0) #f)\n       \
    \   (else (is_prime_helper a (+ b 2)))))\n  (cond ((= a 1) #f)\n        ((= a\
    \ 2) #t)\n        ((= (remainder a 2) 0) (is_prime (/ a 2)))\n        (else (is_prime_helper\
    \ a 3))))\n", "  (define (is_prime n)\n    (define (is_divisible a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((is_divisible n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (define (find-prime-divisor n)\n    (cond ((is_prime\
    \ n) n)\n          (else (find-prime-divisor (find-divisor n 2)))))\n  (define\
    \ (find-prime-divisors n)\n    (cond ((= n 1) '())\n          (else (cons (find-prime-divisor\
    \ n) (find-prime-divisors (/ n (find-prime-divisor n)))))))\n  (define (is_multiply_prime?\
    \ n)\n    (cond ((= (length (find-prime-divisors n)) 3) #t)\n          (else #f)))\n\
    \  (is_multiply_prime? a))\n", "  (define (is_prime? n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i\
    \ 1) #f)\n          ((and (is_prime? i) (= (modulo a i) 0)) (iter (- i 1)))\n\
    \          (else #f)))\n  (iter (- a 1)))\n", "  (define (is_prime n)\n    (define\
    \ (is_prime-iter n i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (is_prime-iter n (+ i 1)))))\n    (is-prime-iter n\
    \ 2))\n  (define (is_multiply-prime-iter a i)\n    (cond ((= i a) #f)\n      \
    \    ((and (is_prime i) (is_prime (/ a i))) #t)\n          (else (is_multiply-prime-iter\
    \ a (+ i 1)))))\n  (is_multiply-prime-iter a 2))\n", "  (define (is_prime a)\n\
    \    (cond\n      [(= a 1) #f]\n      [(= a 2) #t]\n      [(even? a) #f]\n   \
    \   [else\n       (define (iter i)\n         (cond\n           [(= i a) #t]\n\
    \           [(= (remainder a i) 0) #f]\n           [else (iter (+ i 1))]))\n \
    \      (iter 3)]))\n  (define (iter i)\n    (cond\n      [(= i a) #f]\n      [(and\
    \ (is_prime i) (is_prime (/ a i))) #t]\n      [else (iter (+ i 1))]))\n  (iter\
    \ 2))\n", "  (define (is_prime? a)\n    (define (is_prime? a b)\n      (if (=\
    \ b 1)\n          #t\n          (if (= (modulo a b) 0)\n              #f\n   \
    \           (is_prime? a (- b 1)))))\n    (is_prime? a (- a 1)))\n  (define (is_multiply_prime?\
    \ a b)\n    (if (= b 1)\n        #f\n        (if (is_prime? b)\n            (if\
    \ (= (modulo a b) 0)\n                (if (= (modulo (/ a b) b) 0)\n         \
    \           #f\n                    (is_multiply_prime? (/ a b) b))\n        \
    \        (is_multiply_prime? a (- b 1)))\n            (is_multiply_prime? a (-\
    \ b 1)))))\n  (is_multiply_prime? a (- a 1)))\n", "  (define (is_prime a)\n  \
    \  (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo a i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- a 1)))\n  (define (iter\
    \ i)\n    (cond ((= i 1) #f)\n          ((and (is_prime i) (is_prime (/ a i)))\
    \ #t)\n          (else (iter (- i 1)))))\n  (iter (/ a 2)))", "  (define (is_prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (iter i)\n    (cond ((= i 1) #f)\n          ((and (is_prime? i) (is_prime? (/\
    \ a i))) #t)\n          (else (iter (- i 1)))))\n  (iter (/ a 2)))\n", "  (cond\n\
    \    [(= a 1) #f]\n    [(= a 2) #t]\n    [(= a 3) #t]\n    [(= a 5) #t]\n    [(=\
    \ a 7) #t]\n    [(= a 11) #t]\n    [(= a 13) #t]\n    [(= a 17) #t]\n    [(= a\
    \ 19) #t]\n    [(= a 23) #t]\n    [(= a 29) #t]\n    [(= a 31) #t]\n    [(= a\
    \ 37) #t]\n    [(= a 41) #t]\n    [(= a 43) #t]\n    [(= a 47) #t]\n    [(= a\
    \ 53) #t]\n    [(= a 59) #t]\n    [(= a 61) #t]\n    [(= a 67) #t]\n    [(= a\
    \ 71) #t]\n    [(= a 73) #t]\n    [(= a 79) #t]\n    [(= a 83) #t]\n    [(= a\
    \ 89) #t]\n    [(= a 97) #t]\n    [else (is_multiply_prime_helper a 2)]))\n",
  "  (define (is_prime n)\n    (define (is_divisible a b)\n      (= (remainder a b)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((is_divisible n test-divisor) test-divisor)\n          \
    \  (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n\
    \  (define (find-prime-divisor n)\n    (cond ((is_prime n) n)\n          (else\
    \ (find-prime-divisor (- n 1)))))\n  (define (find-prime-divisors n)\n    (cond\
    \ ((is_prime n) (list n))\n          (else (cons (find-prime-divisor n) (find-prime-divisors\
    \ (/ n (find-prime-divisor n)))))))\n  (define (is_multiply_prime? n)\n    (cond\
    \ ((= (length (find-prime-divisors n)) 3) #t)\n          (else #f)))\n  (is_multiply_prime?\
    \ a))\n</code>\n", "  (define (is_prime n)\n    (cond\n      [(= n 1) #f]\n  \
    \    [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else (is_prime_aux\
    \ n 3)]))\n  (define (is_prime_aux n i)\n    (cond\n      [(= i n) #t]\n     \
    \ [(= (remainder n i) 0) #f]\n      [else (is_prime_aux n (+ i 2))]))\n  (define\
    \ (is_multiply_prime_aux a b)\n    (cond\n      [(= a 1) #t]\n      [(= (remainder\
    \ a b) 0) (and (is_prime b) (is_multiply_prime_aux (/ a b) b))]\n      [else (is_multiply_prime_aux\
    \ a (+ b 2))]))\n  (is_multiply_prime_aux a 2))\n", "  (define (is_prime? n)\n\
    \    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (iter i)\n    (cond ((= i 1) #f)\n          ((and (is_prime? i) (is_prime? (/\
    \ a i))) #t)\n          (else (iter (- i 1)))))\n  (iter (- a 1)))\n", "  (define\
    \ (is_prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (iter i)\n    (cond ((= i a) #f)\n          ((and (is_prime? i) (is_prime? (/\
    \ a i))) #t)\n          (else (iter (+ i 1)))))\n  (iter 2))\n", "  (define (is_prime\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n\
    \          (else (is_prime_aux n 3))))\n  (define (is_prime_aux n i)\n    (cond\
    \ ((&gt; i (sqrt n)) #t)\n          ((= (modulo n i) 0) #f)\n          (else (is_prime_aux\
    \ n (+ i 2)))))\n  (cond ((= a 1) #f)\n        ((= a 2) #t)\n        ((= a 3)\
    \ #t)\n        ((= a 5) #t)\n        ((= a 7) #t)\n        ((= a 11) #t)\n   \
    \     ((= a 13) #t)\n        ((= a 17) #t)\n        ((= a 19) #t)\n        ((=\
    \ a 23) #t)\n        ((= a 29) #t)\n        ((= a 31) #t)\n        ((= a 37) #t)\n\
    \        ((= a 41) #t)\n        ((= a 43) #t)\n        ((= a 47) #t)\n       \
    \ ((= a 53) #t)\n        ((= a 59) #t)\n        ((= a 61) #t)\n        ((= a 67)\
    \ #t)\n        ((= a 71) #t)\n        ((= a 73) #t)\n        ((= a 79) #t)\n \
    \       ((= a 83) #t)\n        ((= a 89) #t)\n        ((= a 97) #t)\n        (else\
    \ (is_multiply_prime_aux a 2))))", "  (define (is_prime? n)\n    (cond\n     \
    \ [(= n 1) #f]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #f]\n \
    \     [(= n 5) #t]\n      [(= n 6) #f]\n      [(= n 7) #t]\n      [(= n 8) #f]\n\
    \      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #t]\n      [(= n 12)\
    \ #f]\n      [(= n 13) #t]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(=\
    \ n 16) #f]\n      [(= n 17) #t]\n      [(= n 18) #f]\n      [(= n 19) #t]\n \
    \     [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23)\
    \ #t]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(=\
    \ n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #t]\n      [(= n 30) #f]\n \
    \     [(= n 31) #t]\n      [(= n 32) #f]\n      [(= n 33) #f]\n      [(= n 34)\
    \ #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #t]\n      [(=\
    \ n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #t]\n \
    \     [(= n 42) #f]\n      [(= n 43) #t]\n      [(= n 44) #f]\n      [(= n 45)\
    \ #f]\n      [(= n 46) #f]\n      [(= n 47) #t]\n      [(= n 48) #f]\n      [(=\
    \ n 49) #f]\n      [(= n 50)", "  (define (is_prime? n)\n    (cond\n      [(=\
    \ n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\
    \ (is_prime?-iter 3 n)]))\n  (define (is_prime?-iter i n)\n    (cond\n      [(=\
    \ i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (is_prime?-iter (+ i\
    \ 2) n)]))\n  (define (is_multiply-prime? a)\n    (cond\n      [(= a 1) #f]\n\
    \      [(= a 2) #f]\n      [(= a 3) #f]\n      [(= a 5) #f]\n      [(= a 7) #f]\n\
    \      [(= a 11) #f]\n      [(= a 13) #f]\n      [(= a 17) #f]\n      [(= a 19)\
    \ #f]\n      [(= a 23) #f]\n      [(= a 29) #f]\n      [(= a 31) #f]\n      [(=\
    \ a 37) #f]\n      [(= a 41) #f]\n      [(= a 43) #f]\n      [(= a 47) #f]\n \
    \     [(= a 53) #f]\n      [(= a 59) #f]\n      [(= a 61) #f]\n      [(= a 67)\
    \ #f]\n      [(= a 71) #f]\n      [(= a 73) #f]\n      [(= a 79) #f]\n      [(=\
    \ a 83) #f]\n      [(= a 89) #f]\n      [(= a 97) #f]\n      [else (is_multiply-prime?-iter\
    \ 2 a)]))\n  (define (is_multiply-prime?-iter i a)\n    (cond\n      [(= i a)\
    \ #f]\n      [(= (remainder a i) 0) (and (is_prime? i) (is_multiply-prime? (/\
    \ a i)))]\n      [else (is_multiply-prime?-iter (+ i 1", "  (define (is_prime\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter\
    \ i)\n    (cond\n      [(= i a) #f]\n      [(and (is_prime i) (is_prime (/ a i)))\
    \ #t]\n      [else (iter (+ i 1))]))\n  (iter 2))\n", "  (define (is_prime? n)\n\
    \    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((is_divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= n (find-divisor n 2)))\n  (define (is_multiply_prime? a)\n  \
    \  (define (is_multiply_prime? a b)\n      (cond ((= a 1) #t)\n            ((and\
    \ (is_prime? a) (is_prime? b)) #t)\n            (else (is_multiply_prime? a (-\
    \ b 1)))))\n    (is_multiply_prime? a a))\n  (is_multiply_prime? a))\n", "  (define\
    \ (is_prime a)\n    (cond\n      [(= a 1) #f]\n      [(= a 2) #t]\n      [(even?\
    \ a) #f]\n      [else (is_prime_helper a 3)]))\n  (define (is_prime_helper a b)\n\
    \    (cond\n      [(= b (/ a 2)) #t]\n      [(= (modulo a b) 0) #f]\n      [else\
    \ (is_prime_helper a (+ b 2))]))\n  (define (is_multiply_prime_helper a b)\n \
    \   (cond\n      [(= b (/ a 2)) #f]\n      [(and (is_prime b) (is_prime (/ a b)))\
    \ #t]\n      [else (is_multiply_prime_helper a (+ b 2))]))\n  (is_multiply_prime_helper\
    \ a 2))\n", "  (define (is_prime a)\n    (define (is_prime-iter a b)\n      (cond\n\
    \        [(= b 1) #t]\n        [(= (modulo a b) 0) #f]\n        [else (is_prime-iter\
    \ a (- b 1))]))\n    (is-prime-iter a (- a 1)))\n  (define (is_multiply-prime-iter\
    \ a b)\n    (cond\n      [(= b 1) #f]\n      [(and (is_prime b) (is_prime (/ a\
    \ b))) #t]\n      [else (is_multiply-prime-iter a (- b 1))]))\n  (is_multiply-prime-iter\
    \ a (/ a 2)))\n", "  (define (is_prime? n)\n    (define (is_prime-iter n i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is_prime-iter n (+ i 1)))))\n    (is_prime-iter n 2))\n  (define (is_multiply-prime-iter\
    \ a i)\n    (cond ((= i a) #f)\n          ((and (is_prime? i) (is_prime? (/ a\
    \ i))) #t)\n          (else (is_multiply-prime-iter a (+ i 1)))))\n  (is_multiply-prime-iter\
    \ a 2))\n", "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (iter i)\n    (cond ((= i a) #f)\n          ((and (is_prime\
    \ i) (is_prime (/ a i))) #t)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
  "  (define (is_prime a)\n    (define (is_divisible a b)\n      (= (remainder a b)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((is_divisible n test-divisor) test-divisor)\n          \
    \  (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor a 2) a))\n\
    \  (define (find-prime-factor n test-divisor)\n    (cond ((> (square test-divisor)\
    \ n) n)\n          ((is_prime test-divisor)\n           (if (is_divisible n test-divisor)\n\
    \               test-divisor\n               (find-prime-factor n (+ test-divisor\
    \ 1))))\n          (else (find-prime-factor n (+ test-divisor 1)))))\n  (define\
    \ (prime-factors n)\n    (define (iter n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) (list n))\n            ((is_divisible n test-divisor)\n   \
    \          (cons (find-prime-factor n test-divisor)\n                   (iter\
    \ (/ n (find-prime-factor n test-divisor)) test-divisor)))\n            (else\
    \ (iter n (+ test-divisor 1)))))\n    (iter n 2))\n  (define (is_multiply_prime?\
    \ n)\n    (cond ((= (length (prime-factors n)) 3) #t)\n          (else #f)))\n\
    \  (is_multiply_prime? a))\n", "  (define (is_prime n)\n    (define (is_prime_iter\
    \ n i)\n      (if (= n 1)\n          #f\n          (if (= n i)\n             \
    \ #t\n              (if (= (remainder n i) 0)\n                  #f\n        \
    \          (is_prime_iter n (+ i 1))))))\n    (is_prime_iter n 2))\n  (define\
    \ (is_multiply_prime_iter a i)\n    (if (= a 1)\n        #f\n        (if (is_prime\
    \ i)\n            (if (= (remainder a i) 0)\n                (if (is_multiply_prime\
    \ (/ a i))\n                    #t\n                    (is_multiply_prime_iter\
    \ a (+ i 1)))\n                (is_multiply_prime_iter a (+ i 1)))\n         \
    \   (is_multiply_prime_iter a (+ i 1)))))\n  (is_multiply_prime_iter a 2))\n",
  "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n)\n          #t\n\
    \          (if (= (remainder n i) 0)\n              #f\n              (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i a)\n        #f\n \
    \       (if (is_prime i)\n            (if (= (remainder a i) 0)\n            \
    \    (if (is_multiply_prime (/ a i))\n                    #t\n               \
    \     #f)\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter\
    \ 2))\n", "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2)\
    \ #t)\n          ((even? n) #f)\n          (else (let loop ((i 3))\n         \
    \         (cond ((&gt; (* i i) n) #t)\n                        ((= (remainder\
    \ n i) 0) #f)\n                        (else (loop (+ i 2))))))))\n  (define (prime-factors\
    \ n)\n    (cond ((= n 1) '())\n          ((is_prime n) (list n))\n          (else\
    \ (let loop ((i 2))\n                  (cond ((&gt; (* i i) n) (list n))\n   \
    \                     ((= (remainder n i) 0) (cons i (prime-factors (/ n i))))\n\
    \                        (else (loop (+ i 1))))))))\n  (cond ((= a 1) #f)\n  \
    \      ((= a 2) #t)\n        ((= a 3) #t)\n        ((= a 5) #t)\n        ((= a\
    \ 7) #t)\n        ((= a 11) #t)\n        ((= a 13) #t)\n        ((= a 17) #t)\n\
    \        ((= a 19) #t)\n        ((= a 23) #t)\n        ((= a 29) #t)\n       \
    \ ((= a 31) #t)\n        ((= a 37) #t)\n        ((= a 41) #t)\n        ((= a 43)\
    \ #t)\n        ((= a 47) #t)\n        ((= a 53) #t)\n        ((= a 59) #t)\n \
    \       ((= a 61) #t)\n        ((= a 67) #t)\n        ((= a 71) #t)\n        ((=\
    \ a 73) #t)\n        ((= a 79) #t)\n        ((= a 83) #t)\n        ((= a 89) #t)\n\
    \        ((= a 97) #t)\n        (else (let ((factors (prime-factors a)))\n   \
    \             (cond ((= (length factors) 3) #t)\n                      (else #f))))))\n\
    </code>\n", "  (define (is_prime n)\n    (define (helper div)\n      (cond\n \
    \       [(= div n) #t]\n        [(= (modulo n div) 0) #f]\n        [else (helper\
    \ (+ div 1))]))\n    (helper 2))\n  (define (helper a b)\n    (cond\n      [(=\
    \ a 1) #f]\n      [(= (modulo a b) 0) (if (is_prime b) (helper (/ a b) b) #f)]\n\
    \      [else (helper a (+ b 1))]))\n  (helper a 2))\n", "  (define (is_prime a)\n\
    \    (cond\n      [(= a 1) #f]\n      [(= a 2) #t]\n      [(= (remainder a 2)\
    \ 0) #f]\n      [else\n       (define (iter a b)\n         (cond\n           [(=\
    \ b a) #t]\n           [(= (remainder a b) 0) #f]\n           [else (iter a (+\
    \ b 1))]))\n       (iter a 3)]))\n  (define (iter a b)\n    (cond\n      [(= a\
    \ 1) #f]\n      [(= (remainder a b) 0)\n       (and (is_prime b) (is_multiply_prime\
    \ (/ a b)))]\n      [else (iter a (+ b 1))]))\n  (iter a 2))\n", "  (define (is_prime\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n\
    \          (else (is_prime_helper n 3))))\n  (define (is_prime_helper n i)\n \
    \   (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n          (else\
    \ (is_prime_helper n (+ i 2)))))\n  (define (is_multiply_prime_helper a i)\n \
    \   (cond ((= a 1) #t)\n          ((= (remainder a i) 0) (and (is_prime i) (is_multiply_prime_helper\
    \ (/ a i) i)))\n          (else (is_multiply_prime_helper a (+ i 2)))))\n  (is_multiply_prime_helper\
    \ a 3))\n", "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (iter i)\n    (cond ((= i a) #f)\n          ((and (is_prime\
    \ i) (is_prime (/ a i))) #t)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
  "  (if (and (prime? a) (prime? (/ a 2)) (prime? (/ a 3)))\n      #t\n      #f))\n",
  "  (define (is_prime a)\n    (define (is_divisible a b)\n      (= (remainder a b)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((is_divisible n test-divisor) test-divisor)\n          \
    \  (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor a 2) a))\n\
    \  (define (find-prime-divisor n)\n    (cond ((is_prime n) n)\n          (else\
    \ (find-prime-divisor (find-divisor n 2)))))\n  (define (find-prime-divisors n)\n\
    \    (cond ((is_prime n) (list n))\n          (else (cons (find-prime-divisor\
    \ n) (find-prime-divisors (/ n (find-prime-divisor n)))))))\n  (define (is_multiply_prime?\
    \ n)\n    (cond ((= (length (find-prime-divisors n)) 3) #t)\n          (else #f)))\n\
    \  (is_multiply_prime? a))\n", "  (define (is_prime a)\n    (define (is_prime_helper\
    \ a b)\n      (cond ((= b 1) #t)\n            ((= (modulo a b) 0) #f)\n      \
    \      (else (is_prime_helper a (- b 1)))))\n    (is_prime_helper a (- a 1)))\n\
    \  (define (is_multiply_prime_helper a b)\n    (cond ((= b 1) #f)\n          ((and\
    \ (is_prime b) (is_prime (/ a b))) #t)\n          (else (is_multiply_prime_helper\
    \ a (- b 1)))))\n  (is_multiply_prime_helper a (/ a 2)))\n", "  (define (is_prime\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n\
    \          (else (is_prime_helper n 3))))\n  (define (is_prime_helper n i)\n \
    \   (cond ((= n i) #t)\n          ((= 0 (modulo n i)) #f)\n          (else (is_prime_helper\
    \ n (+ i 2)))))\n  (cond ((= a 1) #f)\n        ((= a 2) #t)\n        ((= a 3)\
    \ #t)\n        ((= a 5) #t)\n        ((= a 7) #t)\n        ((= a 11) #t)\n   \
    \     ((= a 13) #t)\n        ((= a 17) #t)\n        ((= a 19) #t)\n        ((=\
    \ a 23) #t)\n        ((= a 29) #t)\n        ((= a 31) #t)\n        ((= a 37) #t)\n\
    \        ((= a 41) #t)\n        ((= a 43) #t)\n        ((= a 47) #t)\n       \
    \ ((= a 53) #t)\n        ((= a 59) #t)\n        ((= a 61) #t)\n        ((= a 67)\
    \ #t)\n        ((= a 71) #t)\n        ((= a 73) #t)\n        ((= a 79) #t)\n \
    \       ((= a 83) #t)\n        ((= a 89) #t)\n        ((= a 97) #t)\n        (else\
    \ (is_multiply_prime_helper a 2))))", "  (cond\n    [(= a 1) #f]\n    [(= a 2)\
    \ #t]\n    [(= a 3) #t]\n    [(= a 4) #f]\n    [(= a 5) #t]\n    [(= a 6) #f]\n\
    \    [(= a 7) #t]\n    [(= a 8) #f]\n    [(= a 9) #f]\n    [(= a 10) #f]\n   \
    \ [(= a 11) #t]\n    [(= a 12) #f]\n    [(= a 13) #t]\n    [(= a 14) #f]\n   \
    \ [(= a 15) #f]\n    [(= a 16) #f]\n    [(= a 17) #t]\n    [(= a 18) #f]\n   \
    \ [(= a 19) #t]\n    [(= a 20) #f]\n    [(= a 21) #f]\n    [(= a 22) #f]\n   \
    \ [(= a 23) #t]\n    [(= a 24) #f]\n    [(= a 25) #f]\n    [(= a 26) #f]\n   \
    \ [(= a 27) #f]\n    [(= a 28) #f]\n    [(= a 29) #t]\n    [(= a 30) #t]\n   \
    \ [(= a 31) #t]\n    [(= a 32) #f]\n    [(= a 33) #f]\n    [(= a 34) #f]\n   \
    \ [(= a 35) #f]\n    [(= a 36) #f]\n    [(= a 37) #t]\n    [(= a 38) #f]\n   \
    \ [(= a 39) #f]\n    [(= a 40) #f]\n    [(= a 41) #t]\n    [(= a 42) #f]\n   \
    \ [(= a 43) #t]\n    [(= a 44) #f]\n    [(= a 45) #f]\n    [(= a 46) #f]\n   \
    \ [(= a 47) #t]\n    [(= a 48) #f]\n    [(= a 49) #f]\n    [(= a 50) #f]\n   \
    \ [(= a 51) #", "  (define (is_prime n)\n    (define (iter i)\n      (if (= i\
    \ n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n  \
    \            (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (=\
    \ i a)\n        #f\n        (if (is_prime i)\n            (if (= (remainder a\
    \ i) 0)\n                (if (is_multiply_prime (/ a i))\n                   \
    \ #t\n                    #f)\n                (iter (+ i 1)))\n            (iter\
    \ (+ i 1)))))\n  (iter 2))\n", "  (define (is_prime n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i a) #f)\n\
    \          ((and (is_prime i) (is_prime (/ a i))) #t)\n          (else (iter (+\
    \ i 1)))))\n  (iter 2))\n", "  (define (is_prime? a)\n    (define (helper a b)\n\
    \      (if (= b 1)\n          #t\n          (if (= (modulo a b) 0)\n         \
    \     #f\n              (helper a (- b 1)))))\n    (helper a (- a 1)))\n  (define\
    \ (helper a b)\n    (if (= b 1)\n        #f\n        (if (and (is_prime? b) (=\
    \ (modulo a b) 0))\n            (if (= (modulo (/ a b) b) 0)\n               \
    \ #f\n                (helper (/ a b) b))\n            (helper a (- b 1)))))\n\
    \  (helper a (- a 1)))\n", "  (define (is_prime? n)\n    (define (iter i)\n  \
    \    (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i a) #f)\n\
    \          ((and (is_prime? i) (is_prime? (/ a i))) #t)\n          (else (iter\
    \ (+ i 1)))))\n  (iter 2))\n", "  (define (is_prime n)\n    (define (is_divisible\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((is_divisible n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (define (find-prime-factors n)\n    (define (find-prime-factors-iter\
    \ n test-divisor)\n      (cond ((= n 1) '())\n            ((is_divisible n test-divisor)\
    \ (cons test-divisor (find-prime-factors-iter (/ n test-divisor) test-divisor)))\n\
    \            (else (find-prime-factors-iter n (+ test-divisor 1)))))\n    (find-prime-factors-iter\
    \ n 2))\n  (define (is_multiply_prime-iter a)\n    (cond ((= a 1) #t)\n      \
    \    ((is_prime a) #f)\n          (else (is_multiply_prime-iter (car (find-prime-factors\
    \ a))))))\n  (is_multiply_prime-iter a))\n", "  (define (is_prime n)\n    (define\
    \ (helper i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n\
    \            (else (helper (- i 1)))))\n    (helper (- n 1)))\n  (define (helper2\
    \ i)\n    (cond ((= i a) #f)\n          ((and (is_prime i) (is_prime (/ a i)))\
    \ #t)\n          (else (helper2 (+ i 1)))))\n  (helper2 2))\n", "  (if (and (prime?\
    \ a) (prime? (/ a 2)) (prime? (/ a 3)))\n      #t\n      #f))\n", "  (define (is_prime\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n\
    \          (else (for/and ([i (in-range 3 n 2)])\n                   (not (zero?\
    \ (modulo n i)))))))\n  (define (prime-factors n)\n    (cond ((is_prime n) (list\
    \ n))\n          (else (append (prime-factors (quotient n (first (filter (lambda\
    \ (x) (is_prime x)) (in-range 2 n)))))\n                       (list (first (filter\
    \ (lambda (x) (is_prime x)) (in-range 2 n))))))))\n  (cond ((is_prime a) #f)\n\
    \        (else (equal? (length (prime-factors a)) 3))))\n", "  (define (is_prime\
    \ a)\n    (cond ((= a 1) #f)\n          ((= a 2) #t)\n          ((= (remainder\
    \ a 2) 0) #f)\n          (else (is_prime_helper a 3))))\n  (define (is_prime_helper\
    \ a b)\n    (cond ((= a b) #t)\n          ((= (remainder a b) 0) #f)\n       \
    \   (else (is_prime_helper a (+ b 2)))))\n  (cond ((= a 1) #f)\n        ((= a\
    \ 2) #t)\n        ((= (remainder a 2) 0) (is_prime (/ a 2)))\n        (else (is_prime_helper\
    \ a 3))))\n", "  (if (and (prime? a) (prime? (/ a 2)) (prime? (/ a 3)))\n    \
    \  #t\n      #f))\n", "  (define (is_prime a)\n    (define (is_prime-iter a b)\n\
    \      (cond\n        [(= b 1) #t]\n        [(= (modulo a b) 0) #f]\n        [else\
    \ (is_prime-iter a (- b 1))]))\n    (is-prime-iter a (- a 1)))\n  (define (is_multiply-prime-iter\
    \ a b)\n    (cond\n      [(= b 1) #f]\n      [(and (is_prime b) (is_prime (/ a\
    \ b))) #t]\n      [else (is_multiply-prime-iter a (- b 1))]))\n  (is_multiply-prime-iter\
    \ a (/ a 2)))\n", "  (cond\n    [(= a 1) #f]\n    [(= a 2) #t]\n    [(= a 3) #t]\n\
    \    [(= a 4) #f]\n    [(= a 5) #t]\n    [(= a 6) #f]\n    [(= a 7) #t]\n    [(=\
    \ a 8) #f]\n    [(= a 9) #f]\n    [(= a 10) #f]\n    [(= a 11) #t]\n    [(= a\
    \ 12) #f]\n    [(= a 13) #t]\n    [(= a 14) #f]\n    [(= a 15) #f]\n    [(= a\
    \ 16) #f]\n    [(= a 17) #t]\n    [(= a 18) #f]\n    [(= a 19) #t]\n    [(= a\
    \ 20) #f]\n    [(= a 21) #f]\n    [(= a 22) #f]\n    [(= a 23) #t]\n    [(= a\
    \ 24) #f]\n    [(= a 25) #f]\n    [(= a 26) #f]\n    [(= a 27) #f]\n    [(= a\
    \ 28) #f]\n    [(= a 29) #t]\n    [(= a 30) #t]\n    [(= a 31) #t]\n    [(= a\
    \ 32) #f]\n    [(= a 33) #f]\n    [(= a 34) #f]\n    [(= a 35) #f]\n    [(= a\
    \ 36) #f]\n    [(= a 37) #t]\n    [(= a 38) #f]\n    [(= a 39) #f]\n    [(= a\
    \ 40) #f]\n    [(= a 41) #t]\n    [(= a 42) #f]\n    [(= a 43) #t]\n    [(= a\
    \ 44) #f]\n    [(= a 45) #f]\n    [(= a 46) #f]\n    [(= a 47) #t]\n    [(= a\
    \ 48) #f]\n    [(= a 49) #f]\n    [(= a 50) #f]\n    [(= a 51) #", "  (define\
    \ (is_prime a)\n    (cond\n      [(= a 1) #f]\n      [(= a 2) #t]\n      [(= a\
    \ 3) #t]\n      [(= a 4) #f]\n      [(= a 5) #t]\n      [(= a 6) #f]\n      [(=\
    \ a 7) #t]\n      [(= a 8) #f]\n      [(= a 9) #f]\n      [(= a 10) #f]\n    \
    \  [(= a 11) #t]\n      [(= a 12) #f]\n      [(= a 13) #t]\n      [(= a 14) #f]\n\
    \      [(= a 15) #f]\n      [(= a 16) #f]\n      [(= a 17) #t]\n      [(= a 18)\
    \ #f]\n      [(= a 19) #t]\n      [(= a 20) #f]\n      [(= a 21) #f]\n      [(=\
    \ a 22) #f]\n      [(= a 23) #t]\n      [(= a 24) #f]\n      [(= a 25) #f]\n \
    \     [(= a 26) #f]\n      [(= a 27) #f]\n      [(= a 28) #f]\n      [(= a 29)\
    \ #t]\n      [(= a 30) #f]\n      [(= a 31) #t]\n      [(= a 32) #f]\n      [(=\
    \ a 33) #f]\n      [(= a 34) #f]\n      [(= a 35) #f]\n      [(= a 36) #f]\n \
    \     [(= a 37) #t]\n      [(= a 38) #f]\n      [(= a 39) #f]\n      [(= a 40)\
    \ #f]\n      [(= a 41) #t]\n      [(= a 42) #f]\n      [(= a 43) #t]\n      [(=\
    \ a 44) #f]\n      [(= a 45) #f]\n      [(= a 46) #f]\n      [(= a 47) #t]\n \
    \     [(= a 48) #f]\n      [(= a 49) #f]\n      [(= a 50) #", "  (and (prime?\
    \ a)\n       (prime? (/ a 2))\n       (prime? (/ a 3))))\n", "  (define (is_prime\
    \ a)\n    (cond\n      [(= a 1) #f]\n      [(= a 2) #t]\n      [(= (remainder\
    \ a 2) 0) #f]\n      [else (is_prime_helper a 3)]))\n  (define (is_prime_helper\
    \ a b)\n    (cond\n      [(= b (/ a 2)) #t]\n      [(= (remainder a b) 0) #f]\n\
    \      [else (is_prime_helper a (+ b 2))]))\n  (define (is_multiply_prime_helper\
    \ a b)\n    (cond\n      [(= a 1) #f]\n      [(= (remainder a b) 0) (is_multiply_prime_helper\
    \ (/ a b) b)]\n      [(is_prime b) (is_multiply_prime_helper a (+ b 2))]\n   \
    \   [else (is_multiply_prime_helper a (+ b 2))]))\n  (is_multiply_prime_helper\
    \ a 2))\n", "  (define (is_prime? n)\n    (define (is_divisible? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((is_divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= n (find-divisor n 2)))\n  (define (find-prime n)\n    (cond ((is_prime?\
    \ n) n)\n          (else (find-prime (+ n 1)))))\n  (define (find-prime-factors\
    \ n)\n    (define (find-prime-factors-iter n test-divisor)\n      (cond ((= n\
    \ 1) '())\n            ((is_divisible? n test-divisor) (cons test-divisor (find-prime-factors-iter\
    \ (/ n test-divisor) test-divisor)))\n            (else (find-prime-factors-iter\
    \ n (+ test-divisor 1)))))\n    (find-prime-factors-iter n 2))\n  (define (is_multiply_prime?\
    \ n)\n    (cond ((= (length (find-prime-factors n)) 3) #t)\n          (else #f)))\n\
    \  (is_multiply_prime? a))\n", "  (cond\n    [(= a 1) #f]\n    [(= a 2) #t]\n\
    \    [(= a 3) #t]\n    [(= a 5) #t]\n    [(= a 7) #t]\n    [(= a 11) #t]\n   \
    \ [(= a 13) #t]\n    [(= a 17) #t]\n    [(= a 19) #t]\n    [(= a 23) #t]\n   \
    \ [(= a 29) #t]\n    [(= a 31) #t]\n    [(= a 37) #t]\n    [(= a 41) #t]\n   \
    \ [(= a 43) #t]\n    [(= a 47) #t]\n    [(= a 53) #t]\n    [(= a 59) #t]\n   \
    \ [(= a 61) #t]\n    [(= a 67) #t]\n    [(= a 71) #t]\n    [(= a 73) #t]\n   \
    \ [(= a 79) #t]\n    [(= a 83) #t]\n    [(= a 89) #t]\n    [(= a 97) #t]\n   \
    \ [else #f]))\n", "  (define (is_prime a)\n    (define (is_divisible a b)\n  \
    \    (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n     \
    \ (cond ((> (square test-divisor) n) n)\n            ((is_divisible n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor a 2) a))\n  (define (is_multiply_prime a)\n    (define (is_prime\
    \ a)\n      (define (is_divisible a b)\n        (= (remainder a b) 0))\n     \
    \ (define (find-divisor n test-divisor)\n        (cond ((> (square test-divisor)\
    \ n) n)\n              ((is_divisible n test-divisor) test-divisor)\n        \
    \      (else (find-divisor n (+ test-divisor 1)))))\n      (= (find-divisor a\
    \ 2) a))\n    (define (is_multiply_prime a)\n      (define (is_multiply_prime\
    \ a b)\n        (cond ((= a b) #f)\n              ((= (remainder a b) 0) (is_prime\
    \ b))\n              (else (is_multiply_prime a (+ b 1)))))\n      (is_multiply_prime\
    \ a 2))\n    (is_multiply_prime a))\n  (is_multiply_prime a))\n", "  (define (is_prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (iter i)\n    (cond\n      [(= i a) #f]\n      [(and (is_prime? i) (is_prime?\
    \ (/ a i))) #t]\n      [else (iter (+ i 1))]))\n  (iter 1))\n", "  (define (is_prime?\
    \ n)\n    (define (is_prime_helper n i)\n      (cond ((= i 1) #t)\n          \
    \  ((= (modulo n i) 0) #f)\n            (else (is_prime_helper n (- i 1)))))\n\
    \    (is_prime_helper n (- n 1)))\n  (define (is_multiply_prime_helper a b)\n\
    \    (cond ((= b 1) #f)\n          ((and (is_prime? b) (is_prime? (/ a b))) #t)\n\
    \          (else (is_multiply_prime_helper a (- b 1)))))\n  (is_multiply_prime_helper\
    \ a (/ a 2)))\n", "  (define (is_prime n)\n    (define (divides? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divides? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (define (is_multiply_prime_helper a b)\n    (cond ((= a 1) #t)\n \
    \         ((is_prime a) (is_multiply_prime_helper (/ a b) b))\n          (else\
    \ #f)))\n  (is_multiply_prime_helper a 2))\n", "  (define (is_prime n)\n    (define\
    \ (is_prime-iter n i)\n      (if (= n i)\n          #t\n          (if (= (remainder\
    \ n i) 0)\n              #f\n              (is_prime-iter n (+ i 1)))))\n    (is_prime-iter\
    \ n 2))\n  (define (is_multiply-prime-iter a i)\n    (if (= i a)\n        #f\n\
    \        (if (and (is_prime i) (is_prime (/ a i)))\n            #t\n         \
    \   (is_multiply-prime-iter a (+ i 1)))))\n  (is_multiply-prime-iter a 2))\n",
  "  (cond\n    [(= a 1) #f]\n    [(= a 2) #t]\n    [(= a 3) #t]\n    [(= a 5) #t]\n\
    \    [(= a 7) #t]\n    [(= a 11) #t]\n    [(= a 13) #t]\n    [(= a 17) #t]\n \
    \   [(= a 19) #t]\n    [(= a 23) #t]\n    [(= a 29) #t]\n    [(= a 31) #t]\n \
    \   [(= a 37) #t]\n    [(= a 41) #t]\n    [(= a 43) #t]\n    [(= a 47) #t]\n \
    \   [(= a 53) #t]\n    [(= a 59) #t]\n    [(= a 61) #t]\n    [(= a 67) #t]\n \
    \   [(= a 71) #t]\n    [(= a 73) #t]\n    [(= a 79) #t]\n    [(= a 83) #t]\n \
    \   [(= a 89) #t]\n    [(= a 97) #t]\n    [else #f]))\n", "  (and (prime? a)\n\
    \       (or (and (prime? (/ a 2)) (prime? (/ a 3)))\n           (and (prime? (/\
    \ a 2)) (prime? (/ a 5)))\n           (and (prime? (/ a 3)) (prime? (/ a 5))))))\n",
  "  (define (is_prime a)\n    (cond\n      [(= a 1) #f]\n      [(= a 2) #t]\n   \
    \   [(even? a) #f]\n      [else\n       (define (iter i)\n         (cond\n   \
    \        [(= i a) #t]\n           [(= (remainder a i) 0) #f]\n           [else\
    \ (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter i)\n    (cond\n     \
    \ [(= i a) #f]\n      [(and (is_prime i) (is_prime (/ a i))) #t]\n      [else\
    \ (iter (+ i 1))]))\n  (iter 2))\n", "  (define (is_prime a)\n    (define (is_prime_helper\
    \ a b)\n      (if (= b 1)\n          #t\n          (if (= (modulo a b) 0)\n  \
    \            #f\n              (is_prime_helper a (- b 1)))))\n    (is_prime_helper\
    \ a (- a 1)))\n  (define (is_multiply_prime_helper a b)\n    (if (= b 1)\n   \
    \     #f\n        (if (and (is_prime b) (= (modulo a b) 0))\n            (is_multiply_prime_helper\
    \ (/ a b) b)\n            (is_multiply_prime_helper a (- b 1)))))\n  (is_multiply_prime_helper\
    \ a (- a 1)))\n", "  (define (is_prime? n)\n    (define (is_prime_helper n i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is_prime_helper n (+ i 1)))))\n    (is_prime_helper n 2))\n  (define (is_multiply_prime_helper\
    \ a i)\n    (cond ((= i a) #f)\n          ((and (is_prime? i) (is_prime? (- a\
    \ i))) #t)\n          (else (is_multiply_prime_helper a (+ i 1)))))\n  (is_multiply_prime_helper\
    \ a 2))\n", "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2)\
    \ #t)\n          ((even? n) #f)\n          (else (is_prime_aux n 3))))\n  (define\
    \ (is_prime_aux n i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0)\
    \ #f)\n          (else (is_prime_aux n (+ i 2)))))\n  (define (is_multiply_prime_aux\
    \ a i)\n    (cond ((= i a) #f)\n          ((and (is_prime i) (is_prime (/ a i)))\
    \ #t)\n          (else (is_multiply_prime_aux a (+ i 1)))))\n  (is_multiply_prime_aux\
    \ a 2))\n", "  (define (is_prime a)\n    (define (is_prime-iter a b)\n      (cond\
    \ ((= b 1) #t)\n            ((= (modulo a b) 0) #f)\n            (else (is_prime-iter\
    \ a (- b 1)))))\n    (is-prime-iter a (- a 1)))\n  (define (is_multiply-prime-iter\
    \ a b)\n    (cond ((= b 1) #f)\n          ((and (is_prime b) (is_prime (/ a b)))\
    \ #t)\n          (else (is_multiply-prime-iter a (- b 1)))))\n  (is_multiply-prime-iter\
    \ a (/ a 2)))\n", "  (define (is_prime n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i a) #f)\n        \
    \  ((and (is_prime i) (is_prime (/ a i))) #t)\n          (else (iter (+ i 1)))))\n\
    \  (iter 2))\n", "  (define (is_prime? n)\n    (define (iter i)\n      (if (=\
    \ i n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n\
    \              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (=\
    \ i a)\n        #f\n        (if (is_prime? i)\n            (if (= (remainder a\
    \ i) 0)\n                (if (is_multiply_prime (/ a i))\n                   \
    \ #t\n                    (iter (+ i 1)))\n                (iter (+ i 1)))\n \
    \           (iter (+ i 1)))))\n  (iter 2))\n", "  (define (is_prime? a)\n    (cond\n\
    \      [(= a 1) #f]\n      [(= a 2) #t]\n      [(= (remainder a 2) 0) #f]\n  \
    \    [else (for/and ([i (in-range 3 (sqrt a))])\n                (not (= (remainder\
    \ a i) 0)))]))\n  (define (is_multiply_prime? a)\n    (cond\n      [(= a 1) #f]\n\
    \      [(= a 2) #f]\n      [(= a 3) #f]\n      [(= a 5) #f]\n      [(= a 7) #f]\n\
    \      [(= a 11) #f]\n      [(= a 13) #f]\n      [(= a 17) #f]\n      [(= a 19)\
    \ #f]\n      [(= a 23) #f]\n      [(= a 29) #f]\n      [(= a 31) #f]\n      [(=\
    \ a 37) #f]\n      [(= a 41) #f]\n      [(= a 43) #f]\n      [(= a 47) #f]\n \
    \     [(= a 53) #f]\n      [(= a 59) #f]\n      [(= a 61) #f]\n      [(= a 67)\
    \ #f]\n      [(= a 71) #f]\n      [(= a 73) #f]\n      [(= a 79) #f]\n      [(=\
    \ a 83) #f]\n      [(= a 89) #f]\n      [(= a 97) #f]\n      [else\n       (for/or\
    \ ([i (in-range 1 (sqrt a))])\n         (and (is_prime? i)\n              (is_prime?\
    \ (/ a i))\n              (is_prime? (- a (* i (/ a i))))))])))\n  (is_multiply_prime?\
    \ a))\n", "  (define (is_prime n)\n    (define (is_prime-iter n i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (is_prime-iter\
    \ n (+ i 1)))))\n    (is-prime-iter n 2))\n  (define (is_multiply-prime-iter a\
    \ i)\n    (cond ((= (modulo a i) 0)\n           (if (is_prime i)\n           \
    \    (is_multiply-prime-iter (/ a i) i)\n               #f))\n          ((= a\
    \ 1) #t)\n          (else (is_multiply-prime-iter a (+ i 1)))))\n  (is_multiply-prime-iter\
    \ a 2))\n", "  (define (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n\
    \ 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #f]\n      [(= n 5) #t]\n      [(=\
    \ n 6) #f]\n      [(= n 7) #t]\n      [(= n 8) #f]\n      [(= n 9) #f]\n     \
    \ [(= n 10) #f]\n      [(= n 11) #t]\n      [(= n 12) #f]\n      [(= n 13) #t]\n\
    \      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #f]\n      [(= n 17)\
    \ #t]\n      [(= n 18) #f]\n      [(= n 19) #t]\n      [(= n 20) #f]\n      [(=\
    \ n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #t]\n      [(= n 24) #f]\n \
    \     [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28)\
    \ #f]\n      [(= n 29) #t]\n      [(= n 30) #f]\n      [(= n 31) #t]\n      [(=\
    \ n 32) #f]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n \
    \     [(= n 36) #f]\n      [(= n 37) #t]\n      [(= n 38) #f]\n      [(= n 39)\
    \ #f]\n      [(= n 40) #f]\n      [(= n 41) #t]\n      [(= n 42) #f]\n      [(=\
    \ n 43) #t]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n \
    \     [(= n 47) #t]\n      [(= n 48) #f]\n      [(= n 49) #f]\n      [(= n 50)\
    \ #f", "  (define (is_prime? n)\n    (define (iter i)\n      (cond\n        [(=\
    \ i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n\
    \    (iter (- n 1)))\n  (define (iter i)\n    (cond\n      [(= i 1) #f]\n    \
    \  [(and (is_prime? i) (is_prime? (/ a i))) #t]\n      [else (iter (- i 1))]))\n\
    \  (iter (/ a 2)))\n", "  (define (is_prime? a)\n    (define (is_prime?-iter a\
    \ b)\n      (cond ((= b 1) #t)\n            ((= (modulo a b) 0) #f)\n        \
    \    (else (is_prime?-iter a (- b 1)))))\n    (is_prime?-iter a (- a 1)))\n  (define\
    \ (is_multiply_prime-iter a b)\n    (cond ((= b 1) #f)\n          ((and (is_prime?\
    \ b) (is_prime? (/ a b))) #t)\n          (else (is_multiply_prime-iter a (- b\
    \ 1)))))\n  (is_multiply_prime-iter a (/ a 2)))\n", "  (define (is_prime n)\n\
    \    (define (is_prime_iter n i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is_prime_iter n (+ i 1)))))\n    (is_prime_iter\
    \ n 2))\n  (define (is_multiply_prime_iter a i)\n    (cond ((= i a) #f)\n    \
    \      ((and (is_prime i) (is_prime (/ a i))) #t)\n          (else (is_multiply_prime_iter\
    \ a (+ i 1)))))\n  (is_multiply_prime_iter a 2))\n", "  (define (is_prime? n)\n\
    \    (define (is_prime?-iter n i)\n      (cond\n        [(= i 1) #t]\n       \
    \ [(= (modulo n i) 0) #f]\n        [else (is_prime?-iter n (- i 1))]))\n    (is_prime?-iter\
    \ n (- n 1)))\n  (define (is_multiply_prime?-iter a b)\n    (cond\n      [(= b\
    \ 1) #f]\n      [(and (is_prime? b) (is_prime? (/ a b))) #t]\n      [else (is_multiply_prime?-iter\
    \ a (- b 1))]))\n  (is_multiply_prime?-iter a (/ a 2)))\n", "  (define (is_prime?\
    \ n)\n    (define (iter i)\n      (if (= i n)\n          #t\n          (if (=\
    \ (remainder n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (iter i)\n    (if (= i a)\n        #f\n        (if (is_prime?\
    \ i)\n            (if (= (remainder a i) 0)\n                (if (is_multiply_prime\
    \ (/ a i))\n                    #t\n                    (iter (+ i 1)))\n    \
    \            (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n", " \
    \ (define (is_prime a)\n    (cond\n      [(= a 1) #f]\n      [(= a 2) #t]\n  \
    \    [(= (remainder a 2) 0) #f]\n      [else (is_prime_helper a 3)]))\n  (define\
    \ (is_prime_helper a b)\n    (cond\n      [(= a b) #t]\n      [(= (remainder a\
    \ b) 0) #f]\n      [else (is_prime_helper a (+ b 2))]))\n  (define (is_multiply_prime_helper\
    \ a b)\n    (cond\n      [(= a 1) #t]\n      [(= (remainder a b) 0) (is_multiply_prime_helper\
    \ (/ a b) b)]\n      [else (is_multiply_prime_helper a (+ b 2))]))\n  (cond\n\
    \    [(= a 1) #f]\n    [(= a 2) #t]\n    [(= (remainder a 2) 0) #f]\n    [else\
    \ (is_multiply_prime_helper a 3)]))\n", "  (define (is_prime? n)\n    (define\
    \ (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (define (is_multiply_prime? n)\n    (cond ((=\
    \ n 1) #f)\n          ((= n 2) #t)\n          ((= n 3) #t)\n          ((= n 5)\
    \ #t)\n          ((= n 7) #t)\n          ((= n 11) #t)\n          ((= n 13) #t)\n\
    \          ((= n 17) #t)\n          ((= n 19) #t)\n          ((= n 23) #t)\n \
    \         ((= n 29) #t)\n          ((= n 31) #t)\n          ((= n 37) #t)\n  \
    \        ((= n 41) #t)\n          ((= n 43) #t)\n          ((= n 47) #t)\n   \
    \       ((= n 53) #t)\n          ((= n 59) #t)\n          ((= n 61) #t)\n    \
    \      ((= n 67) #t)\n          ((= n 71) #t)\n          ((= n 73) #t)\n     \
    \     ((= n 79) #t)\n          ((= n 83) #t)\n          ((= n 89) #t)\n      \
    \    ((= n 97) #t)\n          (else #f)))\n  (define (is_multiply_prime_2? n)\n\
    \    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((= n 3) #t)\n    \
    \      ((= n 5) #t)\n          ((= n 7) #t)\n          ((= n 11) #t)\n       \
    \   ((= n 13) #t)\n          ((= n 17) #t)\n          ((= n 19)", "  (define (is_prime?\
    \ n)\n    (define (iter a)\n      (cond ((= a 1) #t)\n            ((= (remainder\
    \ n a) 0) #f)\n            (else (iter (- a 1)))))\n    (iter (- n 1)))\n  (define\
    \ (is_multiply_prime? n)\n    (cond ((= n 1) #t)\n          ((is_prime? n) (is_multiply_prime?\
    \ (/ a n)))\n          (else #f)))\n  (is_multiply_prime? a))\n", "  (define (is_prime\
    \ a)\n    (define (helper a b)\n      (if (= b 1)\n          #t\n          (if\
    \ (= (remainder a b) 0)\n              #f\n              (helper a (- b 1)))))\n\
    \    (helper a (- a 1)))\n  (define (helper a b)\n    (if (= b 1)\n        #f\n\
    \        (if (and (is_prime b) (= (remainder a b) 0))\n            (if (= (remainder\
    \ (/ a b) b) 0)\n                #f\n                (helper (/ a b) b))\n   \
    \         (helper a (- b 1)))))\n  (helper a (- a 1)))\n", "  (define (is_prime?\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder\
    \ n 2) 0) #f]\n      [else (for/and ([i (in-range 3 (quotient n 2) 2)])\n    \
    \            (not (= (remainder n i) 0)))]))\n  (define (prime_factors n)\n  \
    \  (cond\n      [(= n 1) '()]\n      [(is_prime? n) (list n)]\n      [else (append\
    \ (prime_factors (quotient n (first (filter (lambda (x) (is_prime? x)) (in-range\
    \ 2 n)))))\n                   (list (first (filter (lambda (x) (is_prime? x))\
    \ (in-range 2 n)))))]))\n  (cond\n    [(= a 1) #f]\n    [(= a 2) #t]\n    [(=\
    \ (remainder a 2) 0) #f]\n    [else (for/and ([i (in-range 3 (quotient a 2) 2)])\n\
    \              (not (= (remainder a i) 0)))]))\n", "  (define (is_prime? n)\n\
    \    (define (prime? n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n\
    \ i) 0) #f)\n            (else (prime? n (- i 1)))))\n    (prime? n (- n 1)))\n\
    \  (define (is_multiply_prime? n i)\n    (cond ((= i 1) #f)\n          ((and (is_prime?\
    \ i) (is_prime? (/ n i))) #t)\n          (else (is_multiply_prime? n (- i 1)))))\n\
    \  (is_multiply_prime? a (/ a 3)))\n", "  (define (is_prime a)\n    (cond\n  \
    \    [(= a 1) #f]\n      [(= a 2) #t]\n      [(= (remainder a 2) 0) #f]\n    \
    \  [else (is_prime_helper a 3)]))\n  (define (is_prime_helper a b)\n    (cond\n\
    \      [(= a b) #t]\n      [(= (remainder a b) 0) #f]\n      [else (is_prime_helper\
    \ a (+ b 2))]))\n  (define (is_multiply_prime_helper a b)\n    (cond\n      [(=\
    \ a b) #f]\n      [(and (is_prime a) (is_prime b) (is_prime (* a b))) #t]\n  \
    \    [else (is_multiply_prime_helper a (+ b 1))]))\n  (is_multiply_prime_helper\
    \ a 2))\n", "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2)\
    \ #t)\n          ((even? n) #f)\n          (else (is_prime_helper n 3))))\n  (define\
    \ (is_prime_helper n i)\n    (cond ((= n i) #t)\n          ((= 0 (modulo n i))\
    \ #f)\n          (else (is_prime_helper n (+ i 2)))))\n  (cond ((= a 1) #f)\n\
    \        ((= a 2) #t)\n        ((= a 3) #t)\n        ((= a 5) #t)\n        ((=\
    \ a 7) #t)\n        ((= a 11) #t)\n        ((= a 13) #t)\n        ((= a 17) #t)\n\
    \        ((= a 19) #t)\n        ((= a 23) #t)\n        ((= a 29) #t)\n       \
    \ ((= a 31) #t)\n        ((= a 37) #t)\n        ((= a 41) #t)\n        ((= a 43)\
    \ #t)\n        ((= a 47) #t)\n        ((= a 53) #t)\n        ((= a 59) #t)\n \
    \       ((= a 61) #t)\n        ((= a 67) #t)\n        ((= a 71) #t)\n        ((=\
    \ a 73) #t)\n        ((= a 79) #t)\n        ((= a 83) #t)\n        ((= a 89) #t)\n\
    \        ((= a 97) #t)\n        (else (is_multiply_prime_helper a 2))))\n", " \
    \ (define (is_prime n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n  \
    \    [(even? n) #f]\n      [else (is_prime_helper n 3)]))\n  (define (is_prime_helper\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n    \
    \  [else (is_prime_helper n (+ i 2))]))\n  (define (is_multiply_prime_helper a\
    \ b)\n    (cond\n      [(= a 1) #f]\n      [(= (remainder a b) 0) (and (is_prime\
    \ b) (is_multiply_prime_helper (/ a b) b))]\n      [else (is_multiply_prime_helper\
    \ a (+ b 2))]))\n  (is_multiply_prime_helper a 2))\n", "  (define (is_prime? a)\n\
    \    (cond\n      [(= a 1) #f]\n      [(= a 2) #t]\n      [(even? a) #f]\n   \
    \   [else\n       (define (iter i)\n         (cond\n           [(= i a) #t]\n\
    \           [(= (remainder a i) 0) #f]\n           [else (iter (+ i 1))]))\n \
    \      (iter 3)]))\n  (define (iter i)\n    (cond\n      [(= i a) #f]\n      [(is_prime?\
    \ i)\n       (if (is_prime? (/ a i))\n           (if (is_prime? (/ a (* i (/ a\
    \ i)))))\n               #t\n               (iter (+ i 1)))\n           (iter\
    \ (+ i 1)))]\n      [else (iter (+ i 1))]))\n  (iter 2))\n", "  (define (is_prime\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n\
    \          (else (is_prime_helper n 3))))\n  (define (is_prime_helper n i)\n \
    \   (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n          (else\
    \ (is_prime_helper n (+ i 2)))))\n  (define (is_multiply_prime_helper a b)\n \
    \   (cond ((= a 1) #t)\n          ((= (remainder a b) 0) (and (is_prime b) (is_multiply_prime_helper\
    \ (/ a b) b)))\n          (else (is_multiply_prime_helper a (+ b 2)))))\n  (is_multiply_prime_helper\
    \ a 2))\n", "  (define (is_prime a)\n    (define (iter b)\n      (cond ((= b 1)\
    \ #t)\n            ((= (modulo a b) 0) #f)\n            (else (iter (- b 1)))))\n\
    \    (iter (- a 1)))\n  (define (iter b)\n    (cond ((= b a) #f)\n          ((and\
    \ (is_prime b) (is_prime (- a b))) #t)\n          (else (iter (+ b 1)))))\n  (iter\
    \ 2))\n", "  (define (is_prime? n)\n    (define (divides? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divides? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (define (is_multiply_prime? a)\n    (define (is_multiply_prime?\
    \ a b)\n      (cond ((= a 1) #t)\n            ((is_prime? a) (is_multiply_prime?\
    \ b a))\n            ((is_prime? b) (is_multiply_prime? a (/ a b)))\n        \
    \    (else #f)))\n    (is_multiply_prime? a 2))\n  (is_multiply_prime? a))\n",
  "  (cond\n    [(= a 1) #f]\n    [(= a 2) #t]\n    [(= a 3) #t]\n    [(= a 4) #f]\n\
    \    [(= a 5) #t]\n    [(= a 6) #f]\n    [(= a 7) #t]\n    [(= a 8) #f]\n    [(=\
    \ a 9) #f]\n    [(= a 10) #f]\n    [(= a 11) #t]\n    [(= a 12) #f]\n    [(= a\
    \ 13) #t]\n    [(= a 14) #f]\n    [(= a 15) #f]\n    [(= a 16) #f]\n    [(= a\
    \ 17) #t]\n    [(= a 18) #f]\n    [(= a 19) #t]\n    [(= a 20) #f]\n    [(= a\
    \ 21) #f]\n    [(= a 22) #f]\n    [(= a 23) #t]\n    [(= a 24) #f]\n    [(= a\
    \ 25) #f]\n    [(= a 26) #f]\n    [(= a 27) #f]\n    [(= a 28) #f]\n    [(= a\
    \ 29) #t]\n    [(= a 30) #t]\n    [(= a 31) #t]\n    [(= a 32) #f]\n    [(= a\
    \ 33) #f]\n    [(= a 34) #f]\n    [(= a 35) #f]\n    [(= a 36) #f]\n    [(= a\
    \ 37) #t]\n    [(= a 38) #f]\n    [(= a 39) #f]\n    [(= a 40) #f]\n    [(= a\
    \ 41) #t]\n    [(= a 42) #f]\n    [(= a 43) #t]\n    [(= a 44) #f]\n    [(= a\
    \ 45) #f]\n    [(= a 46) #f]\n    [(= a 47) #t]\n    [(= a 48) #f]\n    [(= a\
    \ 49) #f]\n    [(= a 50) #f]\n    [(= a 51) #", "  (define (is_prime n)\n    (define\
    \ (is_prime-iter n divisor)\n      (cond ((< n 2) #f)\n            ((= n 2) #t)\n\
    \            ((= n divisor) #t)\n            ((= (remainder n divisor) 0) #f)\n\
    \            (else (is_prime-iter n (+ divisor 1)))))\n    (is-prime-iter n 2))\n\
    \  (define (is_multiply-prime-iter a b c)\n    (cond ((and (is_prime a) (is_prime\
    \ b) (is_prime c)) #t)\n          ((< a b c) #f)\n          (else (is_multiply-prime-iter\
    \ (+ a 1) b c))))\n  (is_multiply-prime-iter 1 1 a))\n", "  (define (is_prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_multiply_prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #f]\n        [(and (is_prime?\
    \ i) (is_prime? (/ n i))) #t]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (is_multiply_prime? a))\n", "  (define (is_prime? n)\n    (cond ((= n 1) #f)\n\
    \          ((= n 2) #t)\n          ((even? n) #f)\n          (else (is_prime?\
    \ n 3))))\n  (define (is_prime? n i)\n    (cond ((= n i) #t)\n          ((= (remainder\
    \ n i) 0) #f)\n          (else (is_prime? n (+ i 2)))))\n  (define (is_multiply_prime?\
    \ a)\n    (cond ((= a 1) #f)\n          ((= a 2) #f)\n          ((= a 3) #f)\n\
    \          ((= a 5) #f)\n          ((= a 7) #f)\n          ((= a 11) #f)\n   \
    \       ((= a 13) #f)\n          ((= a 17) #f)\n          ((= a 19) #f)\n    \
    \      ((= a 23) #f)\n          ((= a 29) #f)\n          ((= a 31) #f)\n     \
    \     ((= a 37) #f)\n          ((= a 41) #f)\n          ((= a 43) #f)\n      \
    \    ((= a 47) #f)\n          ((= a 53) #f)\n          ((= a 59) #f)\n       \
    \   ((= a 61) #f)\n          ((= a 67) #f)\n          ((= a 71) #f)\n        \
    \  ((= a 73) #f)\n          ((= a 79) #f)\n          ((= a 83) #f)\n         \
    \ ((= a 89) #f)\n          ((= a 97) #f)\n          (else #t)))\n  (cond ((is_multiply_prime?\
    \ a)\n         (cond ((is_prime? a) #f)\n               ((is_prime? (/ a 2)) #t)\n\
    \               ((is_prime? (/ a 3)) #t)\n               ((is_prime? (/ a 5))\
    \ #t)\n               ((is_prime? (/ a 7)) #t)\n               ((is_prime? (/\
    \ a 11)) #t)\n               ((is_prime? (/ a 13)) #t)\n               ((is_",
  "  (define (is_prime a)\n    (define (is_divisible a b)\n      (= (remainder a b)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((is_divisible n test-divisor) test-divisor)\n          \
    \  (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor a 2) a))\n\
    \  (define (find-prime-divisor n test-divisor)\n    (cond ((> (square test-divisor)\
    \ n) n)\n          ((and (is_divisible n test-divisor) (is_prime test-divisor))\
    \ test-divisor)\n          (else (find-prime-divisor n (+ test-divisor 1)))))\n\
    \  (define (find-prime-divisors n)\n    (define (iter n divisors)\n      (if (=\
    \ n 1) divisors\n          (iter (/ n (find-prime-divisor n 2)) (cons (find-prime-divisor\
    \ n 2) divisors))))\n    (iter n '()))\n  (if (= (length (find-prime-divisors\
    \ a)) 3) #t #f))\n", "  (define (is_prime n)\n    (define (is_prime-iter n i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is_prime-iter n (+ i 1)))))\n    (is-prime-iter n 2))\n  (define (is_multiply-prime-iter\
    \ a i)\n    (cond ((= i a) #f)\n          ((and (is_prime i) (is_prime (/ a i)))\
    \ #t)\n          (else (is_multiply-prime-iter a (+ i 1)))))\n  (is_multiply-prime-iter\
    \ a 2))\n", "  (define (is_prime a)\n    (define (is_prime_helper a b)\n     \
    \ (cond ((= b 1) #t)\n            ((= (modulo a b) 0) #f)\n            (else (is_prime_helper\
    \ a (- b 1)))))\n    (is_prime_helper a (- a 1)))\n  (define (is_multiply_prime_helper\
    \ a b)\n    (cond ((= a 1) #f)\n          ((and (is_prime a) (is_prime b) (is_prime\
    \ (- a b))) #t)\n          (else (is_multiply_prime_helper a (- b 1)))))\n  (is_multiply_prime_helper\
    \ a (/ a 2)))\n```\n\n### Exercise 2\n\n```racket\n#lang racket\n", "  (define\
    \ (is_prime a)\n    (define (iter b)\n      (cond ((= b 1) #t)\n            ((=\
    \ (modulo a b) 0) #f)\n            (else (iter (- b 1)))))\n    (iter (- a 1)))\n\
    \  (define (is_multiply_prime_iter a b)\n    (cond ((= a 1) #f)\n          ((and\
    \ (is_prime a) (is_prime b) (is_prime (- a b))) #t)\n          (else (is_multiply_prime_iter\
    \ (- a 1) (- b 1)))))\n  (is_multiply_prime_iter a (- a 1)))\n", "  (define (is_prime?\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n\
    \      [else\n       (define (iter i)\n         (cond\n           [(= i n) #t]\n\
    \           [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n \
    \      (iter 3)]))\n  (define (iter i)\n    (cond\n      [(= i a) #f]\n      [(and\
    \ (is_prime? i) (= (remainder a i) 0))\n       (define (iter2 j)\n         (cond\n\
    \           [(= j a) #f]\n           [(and (is_prime? j) (= (remainder (/ a i)\
    \ j) 0))\n            (define (iter3 k)\n              (cond\n               \
    \ [(= k a) #f]\n                [(and (is_prime? k) (= (remainder (/ (/ a i) j)\
    \ k) 0)) #t]\n                [else (iter3 (+ k 1))]))\n            (iter3 3)]\n\
    \           [else (iter2 (+ j 1))]))\n       (iter2 3)]\n      [else (iter (+\
    \ i 1))]))\n  (iter 3))\n", "  (define (is_prime n)\n    (cond\n      [(= n 1)\
    \ #f]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 5) #t]\n      [(= n\
    \ 7) #t]\n      [(= n 11) #t]\n      [(= n 13) #t]\n      [(= n 17) #t]\n    \
    \  [(= n 19) #t]\n      [(= n 23) #t]\n      [(= n 29) #t]\n      [(= n 31) #t]\n\
    \      [(= n 37) #t]\n      [(= n 41) #t]\n      [(= n 43) #t]\n      [(= n 47)\
    \ #t]\n      [(= n 53) #t]\n      [(= n 59) #t]\n      [(= n 61) #t]\n      [(=\
    \ n 67) #t]\n      [(= n 71) #t]\n      [(= n 73) #t]\n      [(= n 79) #t]\n \
    \     [(= n 83) #t]\n      [(= n 89) #t]\n      [(= n 97) #t]\n      [else #f]))\n\
    \  (define (is_multiply_prime_helper a b)\n    (cond\n      [(= a 1) #f]\n   \
    \   [(= a b) #f]\n      [(= (modulo a b) 0) (and (is_prime b) (is_multiply_prime_helper\
    \ (/ a b) b))]\n      [else (is_multiply_prime_helper a (+ b 1))]))\n  (is_multiply_prime_helper\
    \ a 2))\n", "  (define (is_prime n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(= n 3) #t]\n      [(= n 5) #t]\n      [(= n 7) #t]\n     \
    \ [(= n 11) #t]\n      [(= n 13) #t]\n      [(= n 17) #t]\n      [(= n 19) #t]\n\
    \      [(= n 23) #t]\n      [(= n 29) #t]\n      [(= n 31) #t]\n      [(= n 37)\
    \ #t]\n      [(= n 41) #t]\n      [(= n 43) #t]\n      [(= n 47) #t]\n      [(=\
    \ n 53) #t]\n      [(= n 59) #t]\n      [(= n 61) #t]\n      [(= n 67) #t]\n \
    \     [(= n 71) #t]\n      [(= n 73) #t]\n      [(= n 79) #t]\n      [(= n 83)\
    \ #t]\n      [(= n 89) #t]\n      [(= n 97) #t]\n      [else #f]))\n  (define\
    \ (is_multiply_prime_helper a b)\n    (if (is_prime b)\n        (if (= (modulo\
    \ a b) 0)\n            (is_multiply_prime_helper (/ a b) 2)\n            (is_multiply_prime_helper\
    \ a (+ b 1)))\n        #f))\n  (is_multiply_prime_helper a 2))\n", "  (define\
    \ (is_prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (define (iter i)\n    (cond ((= i 1) #f)\n          ((and (is_prime? i) (=\
    \ (modulo a i) 0))\n           (if (is_prime? (/ a i)) #t (iter (- i 1))))\n \
    \         (else (iter (- i 1)))))\n  (iter (/ a 3)))\n", "  (define (is_prime\
    \ a)\n    (cond ((= a 1) #f)\n          ((= a 2) #t)\n          ((even? a) #f)\n\
    \          (else (is_prime_helper a 3))))\n  (define (is_prime_helper a b)\n \
    \   (cond ((= a b) #t)\n          ((= 0 (modulo a b)) #f)\n          (else (is_prime_helper\
    \ a (+ b 2)))))\n  (define (is_multiply_prime_helper a b)\n    (cond ((= a b)\
    \ #f)\n          ((= 0 (modulo a b)) (if (is_prime b)\n                      \
    \            (is_multiply_prime_helper (/ a b) b)\n                          \
    \        (is_multiply_prime_helper a (+ b 2))))\n          (else (is_multiply_prime_helper\
    \ a (+ b 2)))))\n  (is_multiply_prime_helper a 2))\n", "  (cond\n    [(= a 1)\
    \ #f]\n    [(= a 2) #t]\n    [(= a 3) #t]\n    [(= a 5) #t]\n    [(= a 7) #t]\n\
    \    [(= a 11) #t]\n    [(= a 13) #t]\n    [(= a 17) #t]\n    [(= a 19) #t]\n\
    \    [(= a 23) #t]\n    [(= a 29) #t]\n    [(= a 31) #t]\n    [(= a 37) #t]\n\
    \    [(= a 41) #t]\n    [(= a 43) #t]\n    [(= a 47) #t]\n    [(= a 53) #t]\n\
    \    [(= a 59) #t]\n    [(= a 61) #t]\n    [(= a 67) #t]\n    [(= a 71) #t]\n\
    \    [(= a 73) #t]\n    [(= a 79) #t]\n    [(= a 83) #t]\n    [(= a 89) #t]\n\
    \    [(= a 97) #t]\n    [else #f]))\n", "  (define (is_prime a)\n    (define (helper\
    \ a b)\n      (if (= b 1)\n          #t\n          (if (= (modulo a b) 0)\n  \
    \            #f\n              (helper a (- b 1)))))\n    (helper a (- a 1)))\n\
    \  (define (helper a b)\n    (if (= b 1)\n        #f\n        (if (and (is_prime\
    \ b) (= (modulo a b) 0))\n            (if (= (modulo (/ a b) b) 0)\n         \
    \       #f\n                (helper (/ a b) b))\n            (helper a (- b 1)))))\n\
    \  (helper a (- a 1)))\n", "  (define (is_prime a)\n    (define (is_prime_helper\
    \ a b)\n      (if (= b 1)\n          #t\n          (if (= (modulo a b) 0)\n  \
    \            #f\n              (is_prime_helper a (- b 1)))))\n    (is_prime_helper\
    \ a (- a 1)))\n  (define (is_multiply_prime_helper a b)\n    (if (= b 1)\n   \
    \     #f\n        (if (and (is_prime b) (is_prime (/ a b)))\n            #t\n\
    \            (is_multiply_prime_helper a (- b 1)))))\n  (is_multiply_prime_helper\
    \ a (/ a 2)))\n", "  (define (is_prime n)\n    (define (is_prime-iter n i)\n \
    \     (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is_prime-iter n (+ i 1)))))\n    (is-prime-iter n 2))\n  (define (is_multiply-prime-iter\
    \ a i)\n    (cond ((= i a) #f)\n          ((and (is_prime i) (is_prime (/ a i)))\
    \ #t)\n          (else (is_multiply-prime-iter a (+ i 1)))))\n  (is_multiply-prime-iter\
    \ a 2))\n", "  (if (and (prime? a) (&lt; a 100))\n      #t\n      #f))\n", " \
    \ (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (iter i)\n    (cond ((= i a) #f)\n          ((and (is_prime i)\
    \ (is_prime (/ a i))) #t)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
  "  (define (is_prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n  \
    \    [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n  \
    \         [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else\
    \ (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter i)\n    (cond\n     \
    \ [(= i a) #f]\n      [(and (is_prime? i) (is_prime? (/ a i))) #t]\n      [else\
    \ (iter (+ i 1))]))\n  (iter 2))\n", "  (define (is_prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond\n\
    \      [(= i 1) #f]\n      [(and (is_prime? i) (= (modulo a i) 0))\n       (if\
    \ (is_prime? (/ a i)) #t (iter (- i 1)))]\n      [else (iter (- i 1))]))\n  (iter\
    \ (- a 1)))\n", "  (define (is_prime n)\n    (cond\n      [(= n 1) #f]\n     \
    \ [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #f]\n      [(= n 5) #t]\n \
    \     [(= n 6) #f]\n      [(= n 7) #t]\n      [(= n 8) #f]\n      [(= n 9) #f]\n\
    \      [(= n 10) #f]\n      [(= n 11) #t]\n      [(= n 12) #f]\n      [(= n 13)\
    \ #t]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #f]\n      [(=\
    \ n 17) #t]\n      [(= n 18) #f]\n      [(= n 19) #t]\n      [(= n 20) #f]\n \
    \     [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #t]\n      [(= n 24)\
    \ #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(=\
    \ n 28) #f]\n      [(= n 29) #t]\n      [(= n 30) #f]\n      [(= n 31) #t]\n \
    \     [(= n 32) #f]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35)\
    \ #f]\n      [(= n 36) #f]\n      [(= n 37) #t]\n      [(= n 38) #f]\n      [(=\
    \ n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #t]\n      [(= n 42) #f]\n \
    \     [(= n 43) #t]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46)\
    \ #f]\n      [(= n 47) #t]\n      [(= n 48) #f]\n      [(= n 49) #f]\n      [(=\
    \ n 50) #", "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2)\
    \ #t)\n          ((even? n) #f)\n          (else (is_prime_aux n 3))))\n  (define\
    \ (is_prime_aux n i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0)\
    \ #f)\n          (else (is_prime_aux n (+ i 2)))))\n  (cond ((= a 1) #f)\n   \
    \     ((= a 2) #t)\n        ((= a 3) #t)\n        ((= a 5) #t)\n        ((= a\
    \ 7) #t)\n        ((= a 11) #t)\n        ((= a 13) #t)\n        ((= a 17) #t)\n\
    \        ((= a 19) #t)\n        ((= a 23) #t)\n        ((= a 29) #t)\n       \
    \ ((= a 31) #t)\n        ((= a 37) #t)\n        ((= a 41) #t)\n        ((= a 43)\
    \ #t)\n        ((= a 47) #t)\n        ((= a 53) #t)\n        ((= a 59) #t)\n \
    \       ((= a 61) #t)\n        ((= a 67) #t)\n        ((= a 71) #t)\n        ((=\
    \ a 73) #t)\n        ((= a 79) #t)\n        ((= a 83) #t)\n        ((= a 89) #t)\n\
    \        ((= a 97) #t)\n        (else (is_multiply_prime_aux a 2))))\n", "  (cond\n\
    \    [(= a 1) #f]\n    [(= a 2) #t]\n    [(= a 3) #t]\n    [(= a 5) #t]\n    [(=\
    \ a 7) #t]\n    [(= a 11) #t]\n    [(= a 13) #t]\n    [(= a 17) #t]\n    [(= a\
    \ 19) #t]\n    [(= a 23) #t]\n    [(= a 29) #t]\n    [(= a 31) #t]\n    [(= a\
    \ 37) #t]\n    [(= a 41) #t]\n    [(= a 43) #t]\n    [(= a 47) #t]\n    [(= a\
    \ 53) #t]\n    [(= a 59) #t]\n    [(= a 61) #t]\n    [(= a 67) #t]\n    [(= a\
    \ 71) #t]\n    [(= a 73) #t]\n    [(= a 79) #t]\n    [(= a 83) #t]\n    [(= a\
    \ 89) #t]\n    [(= a 97) #t]\n    [else #f]))\n", "  (define (is_prime? n)\n \
    \   (define (is_prime?-iter n i)\n      (cond ((= n 1) #f)\n            ((= n\
    \ 2) #t)\n            ((= n i) #t)\n            ((= (modulo n i) 0) #f)\n    \
    \        (else (is_prime?-iter n (+ i 1)))))\n    (is_prime?-iter n 2))\n  (define\
    \ (is_multiply_prime?-iter a i)\n    (cond ((= a 1) #t)\n          ((= (modulo\
    \ a i) 0) (and (is_prime? i) (is_multiply_prime?-iter (/ a i) i)))\n         \
    \ (else (is_multiply_prime?-iter a (+ i 1)))))\n  (is_multiply_prime?-iter a 2))\n",
  "  (define (is_prime n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n   \
    \   [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n   \
    \        [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else\
    \ (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter i)\n    (cond\n     \
    \ [(= i a) #f]\n      [(and (is_prime i) (is_prime (/ a i))) #t]\n      [else\
    \ (iter (+ i 1))]))\n  (iter 2))\n", "  (define (is_prime n)\n    (cond\n    \
    \  [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n\
    \       (define (iter i)\n         (cond\n           [(= i n) #t]\n          \
    \ [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter\
    \ 3)]))\n  (define (iter i)\n    (cond\n      [(= i a) #f]\n      [(and (is_prime\
    \ i) (is_prime (/ a i))) #t]\n      [else (iter (+ i 1))]))\n  (iter 2))\n", " \
    \ (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n     \
    \     ((even? n) #f)\n          (else (is_prime_helper n 3))))\n  (define (is_prime_helper\
    \ n i)\n    (cond ((= n i) #t)\n          ((= 0 (modulo n i)) #f)\n          (else\
    \ (is_prime_helper n (+ i 2)))))\n  (define (is_multiply_prime_helper a b)\n \
    \   (cond ((= 1 a) #t)\n          ((= 0 (modulo a b)) (is_multiply_prime_helper\
    \ (/ a b) b))\n          ((is_prime b) (is_multiply_prime_helper a (+ b 2)))\n\
    \          (else (is_multiply_prime_helper a (+ b 2)))))\n  (is_multiply_prime_helper\
    \ a 2))\n", "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2)\
    \ #t)\n          ((= (remainder n 2) 0) #f)\n          (else (is_prime_helper\
    \ n 3))))\n  (define (is_prime_helper n i)\n    (cond ((= i n) #t)\n         \
    \ ((= (remainder n i) 0) #f)\n          (else (is_prime_helper n (+ i 2)))))\n\
    \  (define (is_multiply_prime_helper a b c)\n    (cond ((and (is_prime a) (is_prime\
    \ b) (is_prime c)) #t)\n          ((= a b) #f)\n          ((= a c) #f)\n     \
    \     ((= b c) #f)\n          (else (is_multiply_prime_helper a (+ b 1) (+ c 1)))))\n\
    \  (is_multiply_prime_helper a 2 3))\n```\n\n```racket\n#lang racket\n", "  (if\
    \ (not (prime? a))\n      #f\n      (let loop ([a a] [i 2])\n        (if (= a\
    \ 1)\n            #t\n            (if (prime? i)\n                (if (zero? (modulo\
    \ a i))\n                    (loop (/ a i) i)\n                    (loop a (+\
    \ i 1)))\n                (loop a (+ i 1)))))))\n", "  (cond\n    [(= a 1) #f]\n\
    \    [(= a 2) #t]\n    [(= a 3) #t]\n    [(= a 5) #t]\n    [(= a 7) #t]\n    [(=\
    \ a 11) #t]\n    [(= a 13) #t]\n    [(= a 17) #t]\n    [(= a 19) #t]\n    [(=\
    \ a 23) #t]\n    [(= a 29) #t]\n    [(= a 31) #t]\n    [(= a 37) #t]\n    [(=\
    \ a 41) #t]\n    [(= a 43) #t]\n    [(= a 47) #t]\n    [(= a 53) #t]\n    [(=\
    \ a 59) #t]\n    [(= a 61) #t]\n    [(= a 67) #t]\n    [(= a 71) #t]\n    [(=\
    \ a 73) #t]\n    [(= a 79) #t]\n    [(= a 83) #t]\n    [(= a 89) #t]\n    [(=\
    \ a 97) #t]\n    [else #f]))\n", "  (define (is_prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond\n    \
    \  [(= i 1) #f]\n      [(and (is_prime? i) (is_prime? (/ a i))) #t]\n      [else\
    \ (iter (- i 1))]))\n  (iter (/ a 2)))\n", "  (cond\n    [(= a 1) #f]\n    [(=\
    \ a 2) #t]\n    [(= a 3) #t]\n    [(= a 5) #t]\n    [(= a 7) #t]\n    [(= a 11)\
    \ #t]\n    [(= a 13) #t]\n    [(= a 17) #t]\n    [(= a 19) #t]\n    [(= a 23)\
    \ #t]\n    [(= a 29) #t]\n    [(= a 31) #t]\n    [(= a 37) #t]\n    [(= a 41)\
    \ #t]\n    [(= a 43) #t]\n    [(= a 47) #t]\n    [(= a 53) #t]\n    [(= a 59)\
    \ #t]\n    [(= a 61) #t]\n    [(= a 67) #t]\n    [(= a 71) #t]\n    [(= a 73)\
    \ #t]\n    [(= a 79) #t]\n    [(= a 83) #t]\n    [(= a 89) #t]\n    [(= a 97)\
    \ #t]\n    [else (is_multiply_prime_helper a 2)]))\n", "  (define (is_prime n)\n\
    \    (define (is_prime-iter n i)\n      (cond ((= n 1) #f)\n            ((= i\
    \ n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (is_prime-iter\
    \ n (+ i 1)))))\n    (is-prime-iter n 2))\n  (define (is_multiply-prime-iter a\
    \ i)\n    (cond ((= a 1) #t)\n          ((and (is_prime i) (= (remainder a i)\
    \ 0)) (is_multiply-prime-iter (/ a i) i))\n          (else (is_multiply-prime-iter\
    \ a (+ i 1)))))\n  (is_multiply-prime-iter a 2))\n", "  (define (is_prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter\
    \ i)\n    (cond\n      [(= i a) #f]\n      [(and (is_prime? i) (is_prime? (/ a\
    \ i))) #t]\n      [else (iter (+ i 1))]))\n  (iter 2))\n", "  (define (is_prime?\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder\
    \ n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n        \
    \   [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter\
    \ (+ i 1))]))\n       (iter 3)]))\n  (define (iter i)\n    (cond\n      [(= i\
    \ a) #f]\n      [(and (is_prime? i) (is_prime? (/ a i))) #t]\n      [else (iter\
    \ (+ i 1))]))\n  (iter 2))\n", "  (cond\n    [(= a 1) #f]\n    [(= a 2) #t]\n\
    \    [(= a 3) #t]\n    [(= a 5) #t]\n    [(= a 7) #t]\n    [(= a 11) #t]\n   \
    \ [(= a 13) #t]\n    [(= a 17) #t]\n    [(= a 19) #t]\n    [(= a 23) #t]\n   \
    \ [(= a 29) #t]\n    [(= a 31) #t]\n    [(= a 37) #t]\n    [(= a 41) #t]\n   \
    \ [(= a 43) #t]\n    [(= a 47) #t]\n    [(= a 53) #t]\n    [(= a 59) #t]\n   \
    \ [(= a 61) #t]\n    [(= a 67) #t]\n    [(= a 71) #t]\n    [(= a 73) #t]\n   \
    \ [(= a 79) #t]\n    [(= a 83) #t]\n    [(= a 89) #t]\n    [(= a 97) #t]\n   \
    \ [else #f]))\n", "  (define (is_prime? n)\n    (cond\n      [(= n 1) #f]\n  \
    \    [(= n 2) #t]\n      [(even? n) #f]\n      [else (is_prime? (sub1 n))]))\n\
    \  (define (is_multiply_prime? a)\n    (cond\n      [(= a 1) #f]\n      [(is_prime?\
    \ a) #f]\n      [(is_prime? (quotient a 2)) #t]\n      [(is_prime? (quotient a\
    \ 3)) #t]\n      [(is_prime? (quotient a 5)) #t]\n      [else (is_multiply_prime?\
    \ (sub1 a))]))\n  (is_multiply_prime? a))\n", "  (define (is_prime a)\n    (define\
    \ (is_divisible a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((is_divisible\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor a 2) a))\n  (define (find-prime-divisor n)\n  \
    \  (cond ((is_prime n) n)\n          (else (find-prime-divisor (find-divisor n\
    \ 2)))))\n  (define (find-prime-divisors n)\n    (cond ((= n 1) empty)\n     \
    \     (else (cons (find-prime-divisor n) (find-prime-divisors (/ n (find-prime-divisor\
    \ n)))))))\n  (define (is_multiply_prime? n)\n    (cond ((= (length (find-prime-divisors\
    \ n)) 3) #t)\n          (else #f)))\n  (is_multiply_prime? a))\n", "  (cond\n\
    \    [(= a 1) #f]\n    [(= a 2) #t]\n    [(= a 3) #t]\n    [(= a 4) #f]\n    [(=\
    \ a 5) #t]\n    [(= a 6) #f]\n    [(= a 7) #t]\n    [(= a 8) #f]\n    [(= a 9)\
    \ #f]\n    [(= a 10) #f]\n    [(= a 11) #t]\n    [(= a 12) #f]\n    [(= a 13)\
    \ #t]\n    [(= a 14) #f]\n    [(= a 15) #f]\n    [(= a 16) #f]\n    [(= a 17)\
    \ #t]\n    [(= a 18) #f]\n    [(= a 19) #t]\n    [(= a 20) #f]\n    [(= a 21)\
    \ #f]\n    [(= a 22) #f]\n    [(= a 23) #t]\n    [(= a 24) #f]\n    [(= a 25)\
    \ #f]\n    [(= a 26) #f]\n    [(= a 27) #f]\n    [(= a 28) #f]\n    [(= a 29)\
    \ #t]\n    [(= a 30) #t]\n    [(= a 31) #t]\n    [(= a 32) #f]\n    [(= a 33)\
    \ #f]\n    [(= a 34) #f]\n    [(= a 35) #f]\n    [(= a 36) #f]\n    [(= a 37)\
    \ #t]\n    [(= a 38) #f]\n    [(= a 39) #f]\n    [(= a 40) #f]\n    [(= a 41)\
    \ #t]\n    [(= a 42) #f]\n    [(= a 43) #t]\n    [(= a 44) #f]\n    [(= a 45)\
    \ #f]\n    [(= a 46) #f]\n    [(= a 47) #t]\n    [(= a 48) #f]\n    [(= a 49)\
    \ #f]\n    [(= a 50) #f]\n    [(= a 51) #", "  (define (is_prime n)\n    (define\
    \ (is_prime-iter n div)\n      (cond ((= div 1) #t)\n            ((= (modulo n\
    \ div) 0) #f)\n            (else (is_prime-iter n (- div 1)))))\n    (is_prime-iter\
    \ n (- n 1)))\n  (cond ((= a 1) #f)\n        ((= a 2) #t)\n        ((= a 3) #t)\n\
    \        ((= a 5) #t)\n        ((= a 7) #t)\n        ((= a 11) #t)\n        ((=\
    \ a 13) #t)\n        ((= a 17) #t)\n        ((= a 19) #t)\n        ((= a 23) #t)\n\
    \        ((= a 29) #t)\n        ((= a 31) #t)\n        ((= a 37) #t)\n       \
    \ ((= a 41) #t)\n        ((= a 43) #t)\n        ((= a 47) #t)\n        ((= a 53)\
    \ #t)\n        ((= a 59) #t)\n        ((= a 61) #t)\n        ((= a 67) #t)\n \
    \       ((= a 71) #t)\n        ((= a 73) #t)\n        ((= a 79) #t)\n        ((=\
    \ a 83) #t)\n        ((= a 89) #t)\n        ((= a 97) #t)\n        (else (and\
    \ (is_prime (/ a 2)) (is_prime (/ a 3)) (is_prime (/ a 5))))))\n", "  (define\
    \ (is_prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (define (iter i)\n    (cond ((= i 1) #f)\n          ((and (is_prime? i) (is_prime?\
    \ (/ a i))) #t)\n          (else (iter (- i 1)))))\n  (iter (/ a 2)))\n", "  (define\
    \ (is_prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(=\
    \ (remainder n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n\
    \           [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else\
    \ (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter i)\n    (cond\n     \
    \ [(= i a) #f]\n      [(and (is_prime? i) (is_prime? (/ a i))) #t]\n      [else\
    \ (iter (+ i 1))]))\n  (iter 1))\n", "  (define (is_prime n)\n    (define (is_prime_iter\
    \ n i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is_prime_iter n (+ i 1)))))\n    (is_prime_iter n 2))\n  (define\
    \ (is_multiply_prime_iter a i)\n    (cond ((= i a) #f)\n          ((and (is_prime\
    \ i) (is_prime (/ a i))) #t)\n          (else (is_multiply_prime_iter a (+ i 1)))))\n\
    \  (is_multiply_prime_iter a 2))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
