name: HumanEval_44_change_base
language: rkt
prompt: "#lang racket\n\n#| Change numerical base of input number x to base.\nreturn\
  \ string representation after the conversion.\nbase numbers are less than 10.\n\
  >>> (change_base 8 3)\n\"22\"\n>>> (change_base 8 2)\n\"1000\"\n>>> (change_base\
  \ 7 2)\n\"111\"|#\n(define (change_base x base)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n\
  \    (check-equal? (candidate 8 3) \"22\")\n    (check-equal? (candidate 9 3) \"\
  100\")\n    (check-equal? (candidate 234 2) \"11101010\")\n    (check-equal? (candidate\
  \ 16 2) \"10000\")\n    (check-equal? (candidate 8 2) \"1000\")\n    (check-equal?\
  \ (candidate 7 2) \"111\")\n    (check-equal? (candidate 2 3) \"2\")\n    (check-equal?\
  \ (candidate 3 4) \"3\")\n    (check-equal? (candidate 4 5) \"4\")\n    (check-equal?\
  \ (candidate 5 6) \"5\")\n    (check-equal? (candidate 6 7) \"6\")\n    (check-equal?\
  \ (candidate 7 8) \"7\")\n))\n\n(test-humaneval)"
completions: ["  (define (change-base-iter x base result)\n    (if (= x 0)\n     \
    \   result\n        (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change-base-iter x base \"\"))\n", "  (define (change_base-iter\
    \ x base result)\n    (cond\n      [(zero? x) result]\n      [else (change_base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change-base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (let\
    \ loop ((x x) (acc '()))\n    (if (zero? x)\n        (apply string-append (reverse\
    \ acc))\n        (loop (quotient x base) (cons (number->string (remainder x base))\
    \ acc)))))\n", "  (define (change-base-iter x base result)\n    (cond [(= x 0)\
    \ result]\n          [else (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base)\n    (cond\n      [(= x 0) '()]\n      [else (cons (modulo x base) (change-base-iter\
    \ (quotient x base) base))]))\n  (string-join (map number->string (reverse (change-base-iter\
    \ x base))) \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n\
    \      [(= x 0) result]\n      [else (change-base-iter (quotient x base) base\
    \ (string (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n",
  "  (define (change-base-iter x base result)\n    (cond\n      [(= x 0) result]\n\
    \      [else (change-base-iter (quotient x base) base (string (remainder x base)\
    \ result))]))\n  (change-base-iter x base \"\"))\n", "  (define (change_base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change_base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base)\n    (cond [(= x 0) \"\
    \"]\n          [else (string-append (change-base-iter (quotient x base) base)\n\
    \                               (number->string (remainder x base)))]))\n  (change-base-iter\
    \ x base))\n", "  (define (change-base-iter x base result)\n    (if (= x 0)\n\
    \        result\n        (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change-base-iter x base \"\"))\n", "  (define (change_base-iter\
    \ x base result)\n    (cond [(= x 0) result]\n          [else (change_base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base-iter\
    \ x base \"\"))\n", "  (define (change_base-iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change_base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base)\n    (if (= x 0)\n        \"\"\n        (string-append\
    \ (change-base-iter (quotient x base) base)\n                       (number->string\
    \ (remainder x base)))))\n  (change-base-iter x base))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond ((= x 0) result)\n          ((= x 1) (string-append\
    \ result \"1\"))\n          (else (change-base-iter (quotient x base) base (string-append\
    \ result (number->string (remainder x base)))))))\n  (change-base-iter x base\
    \ \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [(= x 1) \"1\"]\n    [else (string-append\
    \ (change_base (quotient x base) base)\n                         (number->string\
    \ (remainder x base)))]))\n", "  (define (change_base-iter x base result)\n  \
    \  (cond\n      [(= x 0) result]\n      [else (change_base-iter (quotient x base)\
    \ base (string (remainder x base) result))]))\n  (change_base-iter x base \"\"\
    ))\n", "  (define (change-base-iter x base acc)\n    (cond\n      [(= x 0) acc]\n\
    \      [else (change-base-iter (quotient x base) base (string (remainder x base)\
    \ acc))]))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change-base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change-base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change-base-iter x base \"\"))\n", "  (define (change-base-iter x base result)\n\
    \    (cond\n      [(= x 0) result]\n      [else (change-base-iter (quotient x\
    \ base) base (string (remainder x base) result))]))\n  (change-base-iter x base\
    \ \"\"))\n", "  (define (change_base_iter x base result)\n    (cond\n      [(=\
    \ x 0) result]\n      [else (change_base_iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change_base_iter x base \"\"))\n", "  (define (change_base_iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base_iter\
    \ x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [(= x 1) \"1\"]\n    [else\
    \ (change_base (quotient x base) base) (number->string (remainder x base))]))\n",
  "  (define (change-base-iter x base result)\n    (if (= x 0)\n        result\n \
    \       (change-base-iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change-base-iter x base \"\"))\n", "  (define (change-base-iter x base result)\n\
    \    (cond\n      [(= x 0) result]\n      [else (change-base-iter (quotient x\
    \ base) base (string (remainder x base) result))]))\n  (change-base-iter x base\
    \ \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [(= x 1) \"1\"]\n    [else (change_base\
    \ (quotient x base) base) (number->string (remainder x base))]))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [(= x 1) \"1\"]\n    [else (change_base (quotient x base)\
    \ base) (number->string (remainder x base))]))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond [(= x 0) result]\n          [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change_base-iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change_base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define\
    \ (change_base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change_base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change_base-iter x base \"\"))\n", "  (define (change-base-iter x base result)\n\
    \    (cond\n      [(= x 0) result]\n      [else (change-base-iter (/ x base) base\
    \ (string (modulo x base) result))]))\n  (change-base-iter x base \"\"))\n", " \
    \ (define (change-base-iter x base)\n    (cond\n      [(= x 0) '()]\n      [else\
    \ (cons (remainder x base) (change-base-iter (quotient x base) base))]))\n  (string-join\
    \ (map number->string (reverse (change-base-iter x base))) \"\"))\n", "  (define\
    \ (change_base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change_base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change_base-iter x base \"\"))\n", "  (define (change-base-iter x base result)\n\
    \    (if (= x 0)\n        result\n        (change-base-iter (quotient x base)\
    \ base (string (remainder x base) result))))\n  (change-base-iter x base \"\"\
    ))\n", "  (define (change_base-iter x base result)\n    (cond\n      [(= x 0)\
    \ result]\n      [else (change_base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond [(= x 0) result]\n          [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base acc)\n    (if (= x 0)\n\
    \        acc\n        (change-base-iter (quotient x base) base (string (remainder\
    \ x base) acc))))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change_base-iter x base result)\n    (if (= x\
    \ 0)\n        result\n        (change_base-iter (quotient x base) base (string\
    \ (remainder x base) result))))\n  (change_base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change-base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change-base-iter x base \"\"))\n", "  (define (change_base-iter x base result)\n\
    \    (cond ((= x 0) result)\n          ((= (remainder x base) 0) (change_base-iter\
    \ (/ x base) base (string-append \"0\" result)))\n          (else (change_base-iter\
    \ (/ x base) base (string-append \"1\" result)))))\n  (change_base-iter x base\
    \ \"\"))\n", "  (define (change-base-iter x base)\n    (cond ((= x 0) \"\")\n\
    \          (else (string (remainder x base))\n                (change-base-iter\
    \ (quotient x base) base))))\n  (change-base-iter x base))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond [(= x 0) result]\n          [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change-base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base)\n    (cond\n      [(= x 0) '()]\n      [else (cons\
    \ (modulo x base) (change-base-iter (quotient x base) base))]))\n  (string-join\
    \ (reverse (map number->string (change-base-iter x base))) \"\"))\n", "  (define\
    \ (change_base-iter x base acc)\n    (cond [(= x 0) acc]\n          [else (change_base-iter\
    \ (quotient x base) base (string (remainder x base) acc))]))\n  (change_base-iter\
    \ x base \"\"))\n", "  (define (change_base-iter x base result)\n    (cond ((=\
    \ x 0) result)\n          ((= x 1) (string-append result \"1\"))\n          (else\
    \ (change_base-iter (quotient x base) base (string-append result (number->string\
    \ (remainder x base)))))))\n  (change_base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n \
    \     [(= x 0) (string-reverse result)]\n      [else (change-base-iter (quotient\
    \ x base) base (string (remainder x base) result))]))\n  (change-base-iter x base\
    \ \"\"))\n", "  (define (change_base-iter x base)\n    (cond [(= x 0) \"\"]\n\
    \          [else (change_base-iter (quotient x base) base)\n                (number->string\
    \ (remainder x base))]))\n  (change_base-iter x base))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base)\n    (if (= x 0)\n  \
    \      \"\"\n        (string-append (change-base-iter (quotient x base) base)\n\
    \                       (number->string (remainder x base)))))\n  (change-base-iter\
    \ x base))\n", "  (define (change-base-iter x base result)\n    (if (= x 0)\n\
    \        result\n        (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change_base-iter x base)\n    (if (= x 0)\n  \
    \      \"\"\n        (string-append (change_base-iter (quotient x base) base)\n\
    \                       (number->string (remainder x base)))))\n  (change_base-iter\
    \ x base))\n", "  (define (change-base-iter x base result)\n    (cond\n      [(=\
    \ x 0) result]\n      [else (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define (change_base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change_base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base)\n    (cond\n      [(=\
    \ x 0) '()]\n      [else (cons (modulo x base) (change-base-iter (quotient x base)\
    \ base))]))\n  (string-join (map number->string (reverse (change-base-iter x base)))\
    \ \"\"))\n", "  (define (change_base-iter x base result)\n    (cond\n      [(=\
    \ x 0) result]\n      [else (change_base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define (change_base-iter\
    \ x base result)\n    (cond [(= x 0) result]\n          [else (change_base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change-base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change-base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change-base-iter x base \"\"))\n", "  (define (change-base-iter x base result)\n\
    \    (if (= x 0)\n        result\n        (change-base-iter (quotient x base)\
    \ base (string (remainder x base) result))))\n  (change-base-iter x base \"\"\
    ))\n", "  (cond\n    [(= x 0) \"\"]\n    [(= x 1) \"1\"]\n    [else (string-append\
    \ (change_base (quotient x base) base)\n                         (number->string\
    \ (remainder x base)))]))\n", "  (define (change-base-iter x base)\n    (cond\n\
    \      [(= x 0) '()]\n      [else (cons (remainder x base) (change-base-iter (quotient\
    \ x base) base))]))\n  (string-join (map number->string (reverse (change-base-iter\
    \ x base))) \"\"))\n", "  (define (change-base-iter x base)\n    (cond\n     \
    \ [(= x 0) '()]\n      [else (cons (modulo x base) (change-base-iter (quotient\
    \ x base) base))]))\n  (string-join (map number->string (reverse (change-base-iter\
    \ x base))) \"\"))\n", "  (define (change-helper x base)\n    (cond\n      [(=\
    \ x 0) '()]\n      [else (cons (modulo x base) (change-helper (quotient x base)\
    \ base))]))\n  (string-join (reverse (map number->string (change-helper x base)))\
    \ \"\"))\n", "  (define (change-base-iter x base result)\n    (if (= x 0)\n  \
    \      result\n        (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base)\n    (cond\n      [(= x 0) '()]\n      [else (cons (modulo x base) (change-base-iter\
    \ (quotient x base) base))]))\n  (string-join (map number->string (reverse (change-base-iter\
    \ x base))) \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n\
    \      [(= x 0) result]\n      [else (change-base-iter (quotient x base) base\
    \ (string (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n",
  "  (define (change-base-iter x base result)\n    (cond\n      [(= x 0) result]\n\
    \      [else (change-base-iter (quotient x base) base (string (remainder x base)\
    \ result))]))\n  (change-base-iter x base \"\"))\n", "  (cond [(= x 0) \"\"]\n\
    \        [else (string-append (change_base (quotient x base) base)\n         \
    \                    (number->string (remainder x base)))]))\n", "  (define (change-base-iter\
    \ x base)\n    (cond ((= x 0) \"\")\n          (else (string (remainder x base))\n\
    \                (change-base-iter (quotient x base) base))))\n  (change-base-iter\
    \ x base))\n", "  (define (change-base-iter x base result)\n    (cond\n      [(=\
    \ x 0) result]\n      [else (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change-base-iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change-base-iter x base\
    \ \"\"))\n", "  (define (change_base-iter x base result)\n    (cond\n      [(=\
    \ x 0) result]\n      [else (change_base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define (change_base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change_base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change-base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define\
    \ (change_base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change_base-iter (quotient x base) base\n                              (string\
    \ (remainder x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define\
    \ (change-base x base)\n    (cond\n      [(= x 0) \"\"]\n      [else (change-base\
    \ (quotient x base) base) (number->string (remainder x base))]))\n  (change-base\
    \ x base))\n", "  (define (change-base-iter x base result)\n    (if (= x 0)\n\
    \        result\n        (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base)\n    (cond\n      [(= x 0) '()]\n      [else (cons (remainder x base)\
    \ (change-base-iter (quotient x base) base))]))\n  (apply string (reverse (change-base-iter\
    \ x base))))\n", "  (define (change-base-iter x base result)\n    (cond\n    \
    \  [(= x 0) result]\n      [else (change-base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change-base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change-base-iter x base \"\"))\n", "  (define (change_base-iter x base result)\n\
    \    (cond ((= x 0) result)\n          ((= (remainder x base) 0) (change_base-iter\
    \ (/ x base) base (string-append \"0\" result)))\n          (else (change_base-iter\
    \ (/ x base) base (string-append \"1\" result)))))\n  (change_base-iter x base\
    \ \"\"))\n", "  (define (change-base-iter x base acc)\n    (cond [(= x 0) acc]\n\
    \          [else (change-base-iter (quotient x base) base (string (remainder x\
    \ base) acc))]))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond [(= x 0) result]\n          [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base)\n    (cond\n      [(zero?\
    \ x) '()]\n      [else (cons (remainder x base) (change-base-iter (quotient x\
    \ base) base))]))\n  (string-join (map number->string (reverse (change-base-iter\
    \ x base))) \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\
    \ ((= x 0) result)\n          ((= (remainder x base) 0) (change-base-iter (/ x\
    \ base) base (string-append result \"0\")))\n          (else (change-base-iter\
    \ (/ x base) base (string-append result \"1\")))))\n  (change-base-iter x base\
    \ \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n      [(=\
    \ x 0) result]\n      [else (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change_base-iter x base result)\n    (cond [(=\
    \ x 0) result]\n          [else (change_base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define\
    \ (change_base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change_base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change_base-iter x base \"\"))\n", "  (define (change-base-iter x base)\n\
    \    (cond\n      [(zero? x) \"\"]\n      [else (append (change-base-iter (quotient\
    \ x base) base)\n                    (number->string (remainder x base)))]))\n\
    \  (change-base-iter x base))\n", "  (define (change-base-iter x base result)\n\
    \    (cond [(= x 0) result]\n          [else (change-base-iter (quotient x base)\
    \ base (string (remainder x base) result))]))\n  (change-base-iter x base \"\"\
    ))\n", "  (define (change-base-iter x base result)\n    (cond\n      [(= x 0)\
    \ result]\n      [else (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond [(= x 0) result]\n          [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base)\n    (cond\n      [(=\
    \ x 0) \"\"]\n      [else (change-base-iter (quotient x base) base) (number->string\
    \ (remainder x base))]))\n  (change-base-iter x base))\n", "  (cond\n    [(= x\
    \ 0) \"\"]\n    [(= x 1) \"1\"]\n    [else (string-append (change_base (quotient\
    \ x base) base)\n                         (number->string (remainder x base)))]))\n",
  "  (define (change-base-iter x base result)\n    (if (= x 0)\n        result\n \
    \       (change-base-iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change-base-iter x base \"\"))\n", "  (define (change_base-iter x base result)\n\
    \    (cond\n      [(= x 0) result]\n      [else (change_base-iter (quotient x\
    \ base) base (string (remainder x base) result))]))\n  (change_base-iter x base\
    \ \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n      [(=\
    \ x 0) result]\n      [else (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond [(= x 0) result]\n          [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base result)\n    (cond [(=\
    \ x 0) result]\n          [else (change_base_iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base_iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base)\n    (cond\n      [(= x 0) '()]\n      [else (cons\
    \ (remainder x base) (change-base-iter (quotient x base) base))]))\n  (string-join\
    \ (reverse (map number->string (change-base-iter x base))) \"\"))\n", "  (define\
    \ (change-base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change-base-iter (/ x base) base (string (modulo x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change_base-iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change_base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base acc)\n    (if (= x 0)\n        acc\n        (change-base-iter\
    \ (quotient x base) base (string (remainder x base) acc))))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (if (= x\
    \ 0)\n        result\n        (change-base-iter (quotient x base) base (string\
    \ (remainder x base) result))))\n  (change-base-iter x base \"\"))\n", "  (define\
    \ (change_base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change_base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change_base-iter x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [(= x\
    \ 1) \"1\"]\n    [else (change_base (quotient x base) base) (number->string (remainder\
    \ x base))]))\n", "  (define (change-base-iter x base result)\n    (cond\n   \
    \   [(= x 0) result]\n      [else (change-base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change-base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change-base-iter x base \"\"))\n", "  (define (change-base x base)\n    (if\
    \ (zero? x)\n        \"\"\n        (string-append (change-base (quotient x base)\
    \ base)\n                       (number->string (remainder x base)))))\n  (change-base\
    \ x base))\n", "  (define (change_base_iter x base acc)\n    (cond\n      [(=\
    \ x 0) acc]\n      [else (change_base_iter (quotient x base) base (string (remainder\
    \ x base) acc))]))\n  (change_base_iter x base \"\"))\n", "  (define (change-base\
    \ x base)\n    (if (zero? x)\n        \"\"\n        (string-append (change-base\
    \ (quotient x base) base)\n                       (number->string (remainder x\
    \ base)))))\n  (change-base x base))\n", "  (define (change-base-iter x base)\n\
    \    (cond\n      [(= x 0) '()]\n      [else (cons (remainder x base) (change-base-iter\
    \ (quotient x base) base))]))\n  (string-join (map number->string (reverse (change-base-iter\
    \ x base))) \"\"))\n", "  (define (change_base-iter x base)\n    (cond\n     \
    \ [(= x 0) '()]\n      [else (cons (modulo x base) (change_base-iter (quotient\
    \ x base) base))]))\n  (string-join (map number->string (reverse (change-base-iter\
    \ x base))) \"\"))\n", "  (define (change_base-iter x base result)\n    (cond\n\
    \      [(zero? x) (reverse result)]\n      [else (change_base-iter (quotient x\
    \ base) base (cons (remainder x base) result))]))\n  (number->string (apply string-append\
    \ (change_base-iter x base '()))))\n", "  (define (change-base-iter x base result)\n\
    \    (cond\n      [(= x 0) result]\n      [else (change-base-iter (quotient x\
    \ base) base (string (remainder x base) result))]))\n  (change-base-iter x base\
    \ \"\"))\n", "  (cond [(= x 0) \"\"]\n        [else (string-append (change_base\
    \ (quotient x base) base)\n                             (number->string (remainder\
    \ x base)))]))\n", "  (define (change-base-iter x base)\n    (cond\n      [(=\
    \ x 0) '()]\n      [else (cons (remainder x base) (change-base-iter (quotient\
    \ x base) base))]))\n  (string-join (reverse (map number->string (change-base-iter\
    \ x base))) \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n\
    \      [(= x 0) result]\n      [else (change-base-iter (quotient x base) base\
    \ (string (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n",
  "  (define (change-base-iter x base)\n    (cond [(= x 0) '()]\n          [else (cons\
    \ (remainder x base) (change-base-iter (quotient x base) base))]))\n  (string-join\
    \ (reverse (map number->string (change-base-iter x base))) \"\"))\n", "  (define\
    \ (change-base-iter x base res)\n    (cond [(= x 0) res]\n          [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) res))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (cond ((=\
    \ x 0) result)\n          ((= x 1) (string-append result \"1\"))\n          (else\
    \ (change-base-iter (quotient x base) base (string-append result (number->string\
    \ (remainder x base)))))))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change_base-iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change_base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define\
    \ (change_base-iter x base)\n    (cond [(= x 0) \"\"]\n          [else (string-append\
    \ (change_base-iter (quotient x base) base)\n                               (number->string\
    \ (remainder x base)))]))\n  (change_base-iter x base))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base)\n    (cond ((= x 0) '())\n\
    \          (else (cons (modulo x base) (change-base-iter (quotient x base) base)))))\n\
    \  (string-join (map number->string (reverse (change-base-iter x base))) \"\"\
    ))\n", "  (define (change-base-iter x base result)\n    (cond\n      [(= x 0)\
    \ result]\n      [else (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change-base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base)\n    (cond [(= x 0) \"\"]\n          [else (string-append\
    \ (change-base-iter (quotient x base) base)\n                               (number->string\
    \ (remainder x base)))]))\n  (change-base-iter x base))\n", "  (define (change-base-iter\
    \ x base)\n    (cond\n      [(= x 0) '()]\n      [else (cons (modulo x base) (change-base-iter\
    \ (quotient x base) base))]))\n  (define (convert-to-string lst)\n    (cond\n\
    \      [(empty? lst) '()]\n      [else (cons (number->string (car lst)) (convert-to-string\
    \ (cdr lst)))]))\n  (apply string-append (reverse (convert-to-string (change-base-iter\
    \ x base)))))\n", "  (define (change-base-iter x base)\n    (if (&lt; x base)\n\
    \        (number-&gt;string x)\n        (string-append (change-base-iter (quotient\
    \ x base) base)\n                       (number-&gt;string (remainder x base)))))\n\
    \  (change-base-iter x base))\n</code>\n", "  (define (change-base-iter x base)\n\
    \    (cond\n      [(= x 0) '()]\n      [else (cons (remainder x base) (change-base-iter\
    \ (quotient x base) base))]))\n  (string-join (reverse (map number->string (change-base-iter\
    \ x base))) \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n\
    \      [(= x 0) (string-append result \"\")]\n      [(= (remainder x base) 0)\
    \ (change-base-iter (/ x base) base (string-append result \"0\"))]\n      [else\
    \ (change-base-iter (/ x base) base (string-append result (number->string (remainder\
    \ x base))))]))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [(= x 1) \"1\"]\n    [else\
    \ (string-append (change_base (quotient x base) base)\n                      \
    \   (number->string (remainder x base)))]))\n", "  (define (change-base-iter x\
    \ base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change_base-iter x base result)\n    (cond [(=\
    \ x 0) result]\n          [else (change_base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change-base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change-base-iter x base \"\"))\n", "  (define (change-base-iter x base result)\n\
    \    (cond\n      [(= x 0) result]\n      [else (change-base-iter (quotient x\
    \ base) base (string (remainder x base) result))]))\n  (change-base-iter x base\
    \ \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n      [(=\
    \ x 0) result]\n      [else (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base)\n    (if (= x 0)\n        \"\"\n        (string-append (change-base-iter\
    \ (quotient x base) base)\n                       (number->string (remainder x\
    \ base)))))\n  (change-base-iter x base))\n", "  (define (change-base-iter x base)\n\
    \    (cond\n      [(zero? x) \"\" ]\n      [else (string-append (change-base-iter\
    \ (quotient x base) base) (number->string (remainder x base)))]))\n  (change-base-iter\
    \ x base))\n", "  (define (change-base-iter x base result)\n    (if (= x 0)\n\
    \        result\n        (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change-base-iter x base \"\"))\n", "  (define (change-helper\
    \ x base result)\n    (if (= x 0)\n        result\n        (change-helper (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change-helper x base\
    \ \"\"))\n", "  (define (change-base-iter x base)\n    (cond ((= x 0) \"\")\n\
    \          (else (string (remainder x base))\n                (change-base-iter\
    \ (quotient x base) base))))\n  (change-base-iter x base))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond [(= x 0) result]\n          [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change-base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base)\n    (cond\n      [(= x 0) '()]\n      [else (cons\
    \ (modulo x base) (change-base-iter (quotient x base) base))]))\n  (string-join\
    \ (map number->string (reverse (change-base-iter x base))) \"\"))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [(= x 1) \"1\"]\n    [else (change_base (quotient x base)\
    \ base) (number->string (remainder x base))]))\n", "  (define (change-base-iter\
    \ x base acc)\n    (if (= x 0)\n        acc\n        (change-base-iter (quotient\
    \ x base) base (string (remainder x base) acc))))\n  (change-base-iter x base\
    \ \"\"))\n", "  (define (change-base-iter x base)\n    (if (= x 0)\n        \"\
    \"\n        (string-append (change-base-iter (quotient x base) base)\n       \
    \                (number->string (remainder x base)))))\n  (change-base-iter x\
    \ base))\n", "  (define (change-base-iter x base result)\n    (cond\n      [(=\
    \ x 0) result]\n      [else (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define (change_base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change_base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n \
    \     [(zero? x) result]\n      [else (change-base-iter (quotient x base) base\
    \ (string (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n",
  "  (define (change_base_iter x base result)\n    (cond [(= x 0) result]\n      \
    \    [else (change_base_iter (quotient x base) base (string (remainder x base)\
    \ result))]))\n  (change_base_iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base)\n    (cond [(= x 0) \"\"]\n          [else (string-append (change-base-iter\
    \ (quotient x base) base)\n                               (number->string (remainder\
    \ x base)))]))\n  (change-base-iter x base))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (if (= x\
    \ 0)\n        result\n        (change-base-iter (quotient x base) base (string\
    \ (remainder x base) result))))\n  (change-base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base)\n    (cond\n      [(= x 0) '()]\n      [else (cons\
    \ (remainder x base) (change-base-iter (quotient x base) base))]))\n  (define\
    \ (convert-to-string lst)\n    (cond\n      [(empty? lst) '()]\n      [else (cons\
    \ (number->string (car lst)) (convert-to-string (cdr lst)))]))\n  (string-join\
    \ (reverse (convert-to-string (change-base-iter x base))) \"\"))\n", "  (define\
    \ (change-base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change-base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change-base-iter x base \"\"))\n", "  (define (change_base-iter x base)\n\
    \    (cond\n      [(= x 0) '()]\n      [else (cons (modulo x base) (change_base-iter\
    \ (quotient x base) base))]))\n  (string-join (reverse (change-base-iter x base))\
    \ \"\"))\n", "  (define (change_base_iter x base)\n    (if (= x 0)\n        \"\
    \"\n        (string-append (change_base_iter (quotient x base) base)\n       \
    \                (number->string (remainder x base)))))\n  (change_base_iter x\
    \ base))\n", "  (define (change_base-iter x base result)\n    (cond\n      [(=\
    \ x 0) result]\n      [else (change_base-iter (quotient x base) base (string (remainder\
    \ x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond [(= x 0) result]\n          [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (cond\n \
    \     [(zero? x) result]\n      [else (change-base-iter (quotient x base) base\
    \ (string (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n",
  "  (define (change-base-iter x base result)\n    (cond\n      [(= x 0) result]\n\
    \      [else (change-base-iter (quotient x base) base (string (remainder x base)\
    \ result))]))\n  (change-base-iter x base \"\"))\n", "  (define (change_base_iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (define (change-base-iter x base result)\n    (cond [(= x 0) result]\n\
    \          [else (change-base-iter (quotient x base) base (string (remainder x\
    \ base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change-base-iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change-base-iter x base\
    \ \"\"))\n", "  (define (change_base-iter x base result)\n    (cond [(= x 0) result]\n\
    \          [else (change_base-iter (quotient x base) base (string (remainder x\
    \ base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change-base-iter x base result)\n    (cond [(=\
    \ x 0) result]\n          [else (change-base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change-base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base)\n    (cond\n      [(= x 0) '()]\n      [else (cons\
    \ (modulo x base) (change-base-iter (quotient x base) base))]))\n  (string-join\
    \ (map number->string (reverse (change-base-iter x base))) \"\"))\n", "  (define\
    \ (change_base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change_base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change_base-iter x base \"\"))\n", "  (define (change-base-iter x base result)\n\
    \    (cond\n      [(= x 0) result]\n      [else (change-base-iter (quotient x\
    \ base) base (string (remainder x base) result))]))\n  (change-base-iter x base\
    \ \"\"))\n", "  (define (change-base-iter x base result)\n    (if (= x 0)\n  \
    \      result\n        (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change_base-iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change_base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base result)\n    (cond ((= x 0) result)\n          ((=\
    \ x 1) (string-append result \"1\"))\n          (else (change-base-iter (quotient\
    \ x base) base (string-append result (number->string (remainder x base)))))))\n\
    \  (change-base-iter x base \"\"))\n", "  (define (change-base-iter x base)\n\
    \    (cond [(= x 0) \"\"]\n          [else (string-append (change-base-iter (quotient\
    \ x base) base)\n                               (number->string (remainder x base)))]))\n\
    \  (change-base-iter x base))\n", "  (define (change-base-iter x base result)\n\
    \    (cond\n      [(= x 0) result]\n      [else (change-base-iter (quotient x\
    \ base) base (string (remainder x base) result))]))\n  (change-base-iter x base\
    \ \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [(= x 1) \"1\"]\n    [else (string-append\
    \ (change_base (quotient x base) base)\n                         (number->string\
    \ (remainder x base)))]))\n", "  (define (change-base-iter x base result)\n  \
    \  (cond\n      [(= x 0) result]\n      [else (change-base-iter (quotient x base)\
    \ base (string (remainder x base) result))]))\n  (change-base-iter x base \"\"\
    ))\n", "  (define (change-base-iter x base)\n    (cond ((= x 0) \"\")\n      \
    \    (else (string (remainder x base))\n                (change-base-iter (quotient\
    \ x base) base))))\n  (change-base-iter x base))\n", "  (define (change_base-iter\
    \ x base result)\n    (cond ((= x 0) result)\n          ((= x 1) (string-append\
    \ result \"1\"))\n          (else (change_base-iter (quotient x base) base (string-append\
    \ result (number->string (remainder x base)))))))\n  (change_base-iter x base\
    \ \"\"))\n", "  (define (change_base-iter x base result)\n    (cond [(= x 0) result]\n\
    \          [else (change_base-iter (quotient x base) base\n                  \
    \                (string (remainder x base) result))]))\n  (change_base-iter x\
    \ base \"\"))\n", "  (define (change_base-iter x base)\n    (if (= x 0)\n    \
    \    \"\"\n        (string-append (change_base-iter (quotient x base) base)\n\
    \                       (number->string (remainder x base)))))\n  (change_base-iter\
    \ x base))\n", "  (define (change-base-iter x base result)\n    (if (= x 0)\n\
    \        result\n        (change-base-iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change-base-iter x base \"\"))\n", "  (define (change-base-iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change-base-iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change-base-iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change_base_iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base_iter x base \"\"))\n", "  (define\
    \ (change-base-iter x base)\n    (cond\n      [(= x 0) '()]\n      [else (cons\
    \ (remainder x base) (change-base-iter (quotient x base) base))]))\n  (string-join\
    \ (reverse (map number->string (change-base-iter x base))) \"\"))\n", "  (define\
    \ (change-base-iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change-base-iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change-base-iter x base \"\"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
