name: HumanEval_24_largest_divisor
language: rkt
prompt: "#lang racket\n\n#| For a given number n, find the largest number that divides\
  \ n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
  \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
  \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
  \ 49) 7)\n))\n\n(test-humaneval)"
completions: ["  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n\
    \        (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter\
    \ n (+ i 1)))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n d)\n    (if (= (remainder n d) 0)\n        (largest-divisor-iter n (- d 1))\n\
    \        d))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (divisor n d)\n\
    \    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n\
    \        (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n\
    \            (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n\
    \        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (divisor n)\n    (cond\n      [(= n 1) 1]\n     \
    \ [(even? n) (divisor (/ n 2))]\n      [else (divisor (+ n 1))]))\n  (divisor\
    \ n))\n", "  (define (largest-divisor-iter n i)\n    (if (= n i)\n        (error\
    \ \"No divisors found\")\n        (if (= (modulo n i) 0)\n            i\n    \
    \        (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter n 2))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n \
    \       (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n",
  "  (define (iter i)\n    (if (= (remainder n i) 0)\n        (if (= i 1)\n      \
    \      1\n            (iter (- i 1)))\n        (iter (- i 1))))\n  (iter (- n\
    \ 1)))\n", "  (define (find-divisor n test-divisor)\n    (if (evenly-divides?\
    \ n test-divisor)\n        test-divisor\n        (find-divisor n (+ test-divisor\
    \ 1))))\n  (find-divisor n 2))\n", "  (define (largest-divisor-iter n i)\n   \
    \ (if (= n i)\n        (error \"No divisors\")\n        (if (= (modulo n i) 0)\n\
    \            i\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n\
    \        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (divisor n d)\n    (if (= (remainder n d) 0)\n  \
    \      d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (iter i)\n    (if\
    \ (= (remainder n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n \
    \       (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (find-divisor n test-divisor)\n    (if (evenly-divisible? n test-divisor)\n\
    \        test-divisor\n        (find-divisor n (+ test-divisor 1))))\n  (find-divisor\
    \ n 2))\n", "  (define (largest-divisor-iter n divisor)\n    (if (zero? (modulo\
    \ n divisor))\n        divisor\n        (largest-divisor-iter n (- divisor 1))))\n\
    \  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n\
    \    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n      \
    \  (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        divisor\n        (largest-divisor-iter\
    \ n (- divisor 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= i n)\n        (error \"No divisor found\")\n        (if (=\
    \ (modulo n i) 0)\n            i\n            (largest-divisor-iter n (+ i 1)))))\n\
    \  (largest-divisor-iter n 2))\n", "  (define (divisor-iter i)\n    (if (= (remainder\
    \ n i) 0)\n        i\n        (divisor-iter (- i 1))))\n  (divisor-iter (- n 1)))\n",
  "  (let loop ((i n))\n    (if (= (modulo n i) 0)\n        i\n        (loop (- i\
    \ 1)))))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n divisor)\n    (if (= (modulo\
    \ n divisor) 0)\n        divisor\n        (largest-divisor-iter n (- divisor 1))))\n\
    \  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n\
    \    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n\
    \  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n\
    \    (if (= n i)\n        1\n        (if (= (modulo n i) 0)\n            i\n \
    \           (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter n 2))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n \
    \       (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n \
    \       (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter (- i 1))))\n\
    \  (iter (- n 1)))\n", "  (define (largest-divisor-iter i)\n    (if (= (remainder\
    \ n i) 0)\n        i\n        (largest-divisor-iter (- i 1))))\n  (largest-divisor-iter\
    \ (/ n 2)))\n", "  (define (largest-divisor-iter n i)\n    (if (= n i)\n     \
    \   n\n        (if (zero? (modulo n i))\n            (largest-divisor-iter n (-\
    \ i 1))\n            (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n  \
    \      (iter (- i 1))))\n  (iter (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        divisor\n        (largest-divisor-iter\
    \ n (- divisor 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        1\n        (if (= (modulo n i) 0)\n         \
    \   i\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter i)\n    (if (= (remainder n i) 0)\n\
    \        i\n        (largest-divisor-iter (- i 1))))\n  (largest-divisor-iter\
    \ (/ n 2)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i)\
    \ 0)\n        i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= n i)\n   \
    \     n\n        (if (zero? (modulo n i))\n            (largest-divisor-iter n\
    \ (- i 1))\n            (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (divisor n i)\n    (if (= (modulo n i) 0)\n        i\n\
    \        (divisor n (+ i 1))))\n  (divisor n 2))\n", "  (define (largest-divisor-iter\
    \ i n)\n    (if (= (remainder n i) 0)\n        (largest-divisor-iter (+ i 1) n)\n\
    \        (- i 1)))\n  (largest-divisor-iter 2 n))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        divisor\n        (largest-divisor-iter\
    \ n (- divisor 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest-divisor-iter\
    \ (- i 1))))\n  (largest-divisor-iter n))\n", "  (define (largest-divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        divisor\n        (largest-divisor-iter\
    \ n (- divisor 1))))\n  (largest-divisor-iter n (- n 1)))\n```\n\n```racket\n\
    #lang racket\n", "  (define (divisor n d)\n    (if (= (remainder n d) 0)\n   \
    \     d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n", "  (define\
    \ (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter (- i 1))))\n\
    \  (iter (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (iter i)\n    (if (= 0 (modulo n i))\n        i\n\
    \        (iter (- i 1))))\n  (iter (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (iter i)\n    (if (=\
    \ (remainder n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n        (if (zero?\
    \ (modulo n i))\n            (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter\
    \ n (- i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        (largest-divisor-iter\
    \ n (- divisor 1))\n        (+ divisor 1)))\n  (largest-divisor-iter n (- n 1)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n \
    \       (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n",
  "  (define (iter i)\n    (if (= (remainder n i) 0)\n        (if (= i 1)\n      \
    \      0\n            i)\n        (iter (- i 1))))\n  (iter (- n 1)))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (divisor i)\n    (if (= (remainder n i) 0)\n        i\n        (divisor (+ i\
    \ 1))))\n  (divisor 2))\n", "  (define (largest-divisor-iter n i)\n    (if (=\
    \ (modulo n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter current-divisor n)\n    (if\
    \ (= (remainder n current-divisor) 0)\n        (largest-divisor-iter (- current-divisor\
    \ 1) n)\n        current-divisor))\n  (largest-divisor-iter (- n 1) n))\n", " \
    \ (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (divisor n d)\n\
    \    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (for/first ([i (in-range 1 n)])\n    (when (zero? (modulo\
    \ n i)) i)))\n", "  (define (largest-divisor-helper n i)\n    (if (= i n)\n  \
    \      n\n        (if (= (modulo n i) 0)\n            (largest-divisor-helper\
    \ n (+ i 1))\n            (largest-divisor-helper n (+ i 1)))))\n  (largest-divisor-helper\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n\
    \        (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter\
    \ n (+ i 1)))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (find-divisor\
    \ n test-divisor)\n    (if (&gt; (square test-divisor) n)\n        n\n       \
    \ (if (divides? test-divisor n)\n            (find-divisor n (+ test-divisor 1))\n\
    \            (find-divisor n (+ test-divisor 1)))))\n  (find-divisor n 2))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n \
    \       (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n \
    \       (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n \
    \       (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        (largest-divisor-iter\
    \ n (- divisor 1))\n        (+ divisor 1)))\n  (largest-divisor-iter n (- n 1)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n \
    \       (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (divisor n i)\n    (if (= (modulo n i) 0)\n        i\n        (divisor n (+\
    \ i 1))))\n  (divisor n 2))\n", "  (define (largest-divisor-iter n i)\n    (if\
    \ (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n\
    \  (largest-divisor-iter n (- n 1)))\n", "  (define (helper n i)\n    (if (= n\
    \ i)\n        n\n        (if (zero? (modulo n i))\n            (helper n (- i\
    \ 1))\n            (helper n (- i 1)))))\n  (helper n (- n 1)))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (zero? (modulo n i))\n        i\n      \
    \  (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n",
  "  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter (sub1\
    \ i))))\n  (iter (sub1 n)))\n", "  (define (iter i)\n    (if (= (remainder n i)\
    \ 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        1\n        (if (= (modulo n i) 0)\n         \
    \   i\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n\
    \        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (iter i)\n    (if (= (remainder n i) 0)\n       \
    \ i\n        (iter (- i 1))))\n  (iter (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ test-divisor)\n    (if (= (remainder n test-divisor) 0)\n        (largest-divisor-iter\
    \ (+ test-divisor 1))\n        (- test-divisor 1)))\n  (largest-divisor-iter 2))\n",
  "  (define (largest-divisor-iter i)\n    (if (= (remainder n i) 0)\n        i\n\
    \        (largest-divisor-iter (- i 1))))\n  (largest-divisor-iter (- n 1)))\n",
  "  (define (largest_divisor-iter n i)\n    (if (= n i)\n        n\n        (if (zero?\
    \ (modulo n i))\n            (largest_divisor-iter n (- i 1))\n            (largest_divisor-iter\
    \ n (- i 1)))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        1\n        (if (= (modulo n i) 0)\n         \
    \   i\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n  \
    \      (iter (- i 1))))\n  (iter (- n 1)))\n", "  (define (iter i)\n    (if (=\
    \ (remainder n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (iter i)\n  \
    \  (if (= (remainder n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (-\
    \ n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n\
    \        (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n\
    \            (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n\
    \        (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n\
    \            (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n", "  (define (divisor n i)\n    (if (= n i)\n        n\n        (if\
    \ (= (modulo n i) 0)\n            i\n            (divisor n (+ i 1)))))\n  (divisor\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n\
    \        (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n\
    \            (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter i)\n    (if (= (remainder n i) 0)\n\
    \        i\n        (largest-divisor-iter (- i 1))))\n  (largest-divisor-iter\
    \ (/ n 2)))\n", "  (define (largest-divisor-iter n i)\n    (if (= n i)\n     \
    \   n\n        (if (zero? (modulo n i))\n            (largest-divisor-iter n (-\
    \ i 1))\n            (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n current-divisor)\n    (if (= (remainder\
    \ n current-divisor) 0)\n        (largest-divisor-iter n (- current-divisor 1))\n\
    \        current-divisor))\n  (largest-divisor-iter n (- n 1)))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter\
    \ n (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest-divisor-iter\
    \ (- i 1))))\n  (largest-divisor-iter (/ n 2)))\n", "  (largest-divisor-iter n\
    \ 2))\n", "  (define (largest-divisor-iter current-divisor n)\n    (if (= (remainder\
    \ n current-divisor) 0)\n        (largest-divisor-iter current-divisor (- n 1))\n\
    \        current-divisor))\n  (largest-divisor-iter n n))\n", "  (define (divisor\
    \ n d)\n    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n\
    \  (divisor n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (=\
    \ (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n\
    \  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter n i)\n   \
    \ (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n\
    \  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter i)\n\
    \    (if (= (remainder n i) 0)\n        i\n        (largest-divisor-iter (- i\
    \ 1))))\n  (largest-divisor-iter (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        1\n        (if (= (modulo n i) 0)\n         \
    \   i\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (zero? (modulo n i))\n\
    \        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n\
    \ divisor) 0)\n        (largest-divisor-iter n (- divisor 1))\n        divisor))\n\
    \  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n\
    \    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n\
    \  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n\
    \    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n\
    \  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n\
    \    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n\
    \  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n\
    \    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n      \
    \  (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (divisor-iter n test-divisor)\n\
    \    (if (= (remainder n test-divisor) 0)\n        test-divisor\n        (divisor-iter\
    \ n (- test-divisor 1))))\n  (divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (find-divisor\
    \ n test-divisor)\n    (if (evenly-divides? n test-divisor)\n        test-divisor\n\
    \        (find-divisor n (+ test-divisor 1))))\n  (find-divisor n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= n i)\n        (error \"No divisors found\"\
    )\n        (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter\
    \ n (+ i 1)))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        divisor\n        (largest-divisor-iter\
    \ n (- divisor 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (iter (- i 1))))\n  (iter\
    \ (- n 1)))\n", "  (define (divisor n d)\n    (if (= (remainder n d) 0)\n    \
    \    d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        0\n        (if (= (modulo n i) 0)\n         \
    \   i\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n\
    \        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n divisor)\n    (if (= (modulo\
    \ n divisor) 0)\n        divisor\n        (largest-divisor-iter n (- divisor 1))))\n\
    \  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter current-divisor\
    \ n)\n    (if (= (remainder n current-divisor) 0)\n        (largest-divisor-iter\
    \ current-divisor (- n 1))\n        (- n 1)))\n  (largest-divisor-iter 2 n))\n",
  "  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor) 0)\n\
    \        divisor\n        (largest-divisor-iter n (- divisor 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= i n)\n   \
    \     (error \"No divisor found\")\n        (if (= (modulo n i) 0)\n         \
    \   i\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n\
    \        (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter\
    \ n (+ i 1)))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (let loop ((i (- n 1)))\n \
    \   (if (zero? (modulo n i))\n        i\n        (loop (- i 1)))))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= n i)\n        (error \"No divisors found\"\
    )\n        (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter\
    \ n (+ i 1)))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        divisor\n        (largest-divisor-iter\
    \ n (- divisor 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest-divisor-iter\
    \ (- i 1))))\n  (largest-divisor-iter n))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (-\
    \ i 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        (error \"No divisors found\")\n        (if (=\
    \ (modulo n i) 0)\n            i\n            (largest-divisor-iter n (+ i 1)))))\n\
    \  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter n i)\n   \
    \ (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (-\
    \ i 1)))\n  (largest-divisor-iter n 2))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
