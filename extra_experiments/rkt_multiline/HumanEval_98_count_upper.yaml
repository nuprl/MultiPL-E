name: HumanEval_98_count_upper
language: rkt
prompt: "#lang racket\n\n#| Given a string s, count the number of uppercase vowels\
  \ in even indices.\nFor example:\n>>> (count_upper \"aBCdEf\")\n1\n>>> (count_upper\
  \ \"abcdefg\")\n0\n>>> (count_upper \"dBBE\")\n0|#\n(define (count_upper s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
  \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\"\
  ) 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"\
  B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\
  \") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
completions: ["  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length\
    \ s)) count]\n      [(and (even? i) (char-upper-case? (string-ref s i)))\n   \
    \    (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n        \
    \  (vowel? (first s))\n          (even? (remainder (string-length s) 2)))\n  \
    \   (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is-vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\\
    i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is-upper? (first s)) (is-vowel?\
    \ (first s)))\n       (+ 1 (count-upper-vowels-in-even-indices (rest s)))]\n \
    \     [else\n       (count-upper-vowels-in-even-indices (rest s))]))\n  (count-upper-vowels-in-even-indices\
    \ (string-&gt;list s)))\n</code>\n", "  (define (is-upper-vowel? c)\n    (and\
    \ (member c '(#\\A #\\E #\\I #\\O #\\U))\n         (char-upcase c)))\n  (define\
    \ (count-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(is-upper-vowel?\
    \ (first s))\n       (+ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels (even-indexes s)))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel? (first s))\n\
    \          (even? (remainder (string-length s) 2)))\n     (+ 1 (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (define (is-upper? c)\n  \
    \  (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count-upper-vowels-even-indices s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(and (is-even? (string-length s))\n            (is-upper? (first\
    \ s))\n            (is-vowel? (first s)))\n       (+ 1 (count-upper-vowels-even-indices\
    \ (rest s)))]\n      [else (count-upper-vowels-even-indices (rest s))]))\n  (count-upper-vowels-even-indices\
    \ s))\n", "  (define (count_upper-helper s i)\n    (cond\n      [(empty? s) 0]\n\
    \      [(and (even? i) (vowel? (string-ref s 0)))\n       (+ 1 (count_upper-helper\
    \ (rest s) (+ i 1)))]\n      [else (count_upper-helper (rest s) (+ i 1))]))\n\
    \  (count_upper-helper s 0))\n", "  (define (is-upper? c)\n    (char-upper-case?\
    \ c))\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels\
    \ s)\n    (for/fold ([count 0]) ([c (in-string s)])\n      (if (and (is-upper?\
    \ c) (is-vowel? c))\n          (add1 count)\n          count)))\n  (count-upper-vowels\
    \ (substring s (is-even? (string-length s)))))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) i]\n      [(and (vowel? (first s)) (char-upper-case?\
    \ (first s)))\n       (count_upper-helper (rest s) (+ i 1))]\n      [else (count_upper-helper\
    \ (rest s) i)]))\n  (count_upper-helper s 0))\n", "  (let loop ([s s] [i 0] [count\
    \ 0])\n    (cond\n      [(empty? s) count]\n      [(and (even? i) (vowel? (string-ref\
    \ s 0)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest\
    \ s) (+ i 1) count)])))\n", "  (define (is-upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u)))\n  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count-even-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(and (is-even?\
    \ (length s)) (is-upper? (first s)) (is-vowel? (first s)))\n       (+ 1 (count-even-upper-vowels\
    \ (rest s)))]\n      [else (count-even-upper-vowels (rest s))]))\n  (count-even-upper-vowels\
    \ (string->list s)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u)))\n  (define (is-upper? c)\n    (and (char? c) (char-upper-case?\
    \ c)))\n  (define (count-vowels-in-even-indices s)\n    (define (count-vowels-in-even-indices-helper\
    \ s i)\n      (cond\n        [(empty? s) i]\n        [(is-vowel? (first s)) (count-vowels-in-even-indices-helper\
    \ (rest s) (+ i 1))]\n        [else (count-vowels-in-even-indices-helper (rest\
    \ s) i)]))\n    (count-vowels-in-even-indices-helper s 0))\n  (count-vowels-in-even-indices\
    \ s))\n", "  (define (is-upper? c)\n    (char-upper-case? c))\n  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n  \
    \  (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(and (is-even? (string-length s))\n \
    \           (is-upper? (string-ref s 0))\n            (is-vowel? (string-ref s\
    \ 0)))\n       (+ 1 (count-upper-vowels-in-even-indices (substring s 1)))]\n \
    \     [else (count-upper-vowels-in-even-indices (substring s 1))]))\n  (count-upper-vowels-in-even-indices\
    \ s))\n", "  (define (count_upper-helper s i)\n    (cond [(empty? s) i]\n    \
    \      [(and (char-upper-case? (first s))\n                (even? (remainder i\
    \ 2)))\n           (count_upper-helper (rest s) (+ i 1))]\n          [else (count_upper-helper\
    \ (rest s) (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (let loop ([s s] [i\
    \ 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (even? i) (member\
    \ (first s) '#(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest s) (+ i 1) (+ count\
    \ 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (let loop ([i 0]\
    \ [count 0])\n    (if (eq? i (string-length s))\n        count\n        (let ([c\
    \ (string-ref s i)])\n          (if (and (char-upper-case? c)\n              \
    \     (member c '#(#\\A #\\E #\\I #\\O #\\U)))\n              (loop (+ i 2) (+\
    \ count 1))\n              (loop (+ i 2) count))))))\n", "  (define (count_upper_helper\
    \ s i)\n    (if (or (eq? i (string-length s))\n            (not (char-vowel? (string-ref\
    \ s i))))\n        0\n        (+ (if (char-upper-case? (string-ref s i)) 1 0)\n\
    \           (count_upper_helper s (+ i 2)))))\n  (count_upper_helper s 0))\n",
  "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n\
    \      [(and (even? i) (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n\
    \       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (define (is-upper? c)\n    (and (char-upper-case? c)\n         (member c '#\\\
    A #\\E #\\I #\\O #\\U)))\n  (define (count-upper-vowels s)\n    (cond [(empty?\
    \ s) 0]\n          [(is-upper? (first s)) (+ 1 (count-upper-vowels (rest s)))]\n\
    \          [else (count-upper-vowels (rest s))]))\n  (count-upper-vowels (even-indexed\
    \ s)))\n", "  (define (count_upper-helper s i)\n    (if (or (equal? i (string-length\
    \ s))\n            (not (vowel? (string-ref s i))))\n        0\n        (+ (if\
    \ (char-upper-case? (string-ref s i)) 1 0)\n           (count_upper-helper s (+\
    \ i 2)))))\n  (count_upper-helper s 0))\n", "  (define (is_upper? c)\n    (and\
    \ (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define\
    \ (count-upper-even-indices s)\n    (cond\n      [(empty? s) 0]\n      [(is_upper?\
    \ (first s))\n       (+ 1 (count-upper-even-indices (rest s)))]\n      [else\n\
    \       (count-upper-even-indices (rest s))]))\n  (count-upper-even-indices (rest\
    \ s)))\n", "  (define (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels\
    \ s)\n    (for/fold ([count 0]) ([c (in-string s)])\n      (if (and (is-upper?\
    \ c) (is-vowel? c))\n          (add1 count)\n          count)))\n  (define (count-even-upper-vowels\
    \ s)\n    (for/fold ([count 0]) ([c (in-string s)])\n      (if (and (is-even?\
    \ c) (is-upper? c) (is-vowel? c))\n          (add1 count)\n          count)))\n\
    \  (count-even-upper-vowels s))\n", "  (define (count_upper_iter s i acc)\n  \
    \  (cond [(empty? s) acc]\n          [(and (vowel? (first s)) (even? i)) (count_upper_iter\
    \ (rest s) (+ i 1) (+ acc 1))]\n          [else (count_upper_iter (rest s) (+\
    \ i 1) acc)]))\n  (count_upper_iter s 0 0))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i (string-length s)) count]\n      [(and (even? i) (char-upper-case?\
    \ (string-ref s i)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+\
    \ i 1) count)])))\n", "  (define (is-upper? c)\n    (char-upper-case? c))\n  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (is-even-upper-vowel? c)\n    (and\
    \ (is-even? c) (is-upper? c) (is-vowel? c)))\n  (count is-even-upper-vowel? (string->list\
    \ s)))\n", "  (define (count_upper-helper s i)\n    (cond\n      [(= i (string-length\
    \ s)) 0]\n      [(and (even? i) (vowel? (string-ref s i))) (+ 1 (count_upper-helper\
    \ s (+ i 1)))]\n      [else (count_upper-helper s (+ i 1))]))\n  (count_upper-helper\
    \ s 0))\n", "  (define (is-upper? c)\n    (char-upper-case? c))\n  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define (count-even-upper-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is-even? (length s)) (is-upper?\
    \ (first s)) (is-vowel? (first s)))\n       (+ 1 (count-even-upper-vowels (rest\
    \ s)))]\n      [else (count-even-upper-vowels (rest s))]))\n  (count-even-upper-vowels\
    \ (string->list s)))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(=\
    \ i (string-length s)) count]\n      [(and (even? i) (member (string-ref s i)\
    \ '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (+ i 1) (+ count 1))]\n      [else\
    \ (loop (+ i 1) count)])))\n", "  (let loop ([i 0] [count 0])\n    (cond\n   \
    \   [(= i (string-length s)) count]\n      [(and (even? i) (vowel? (string-ref\
    \ s i)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (cond [(empty? s) 0]\n        [(and (char-vowel? (string-ref s 0))\n        \
    \      (char-upper-case? (string-ref s 0)))\n         (+ 1 (count_upper (substring\
    \ s 2)))]\n        [else (count_upper (substring s 2))]))\n", "  (let loop ([s\
    \ s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (even?\
    \ i) (vowel? (string-ref s 0)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n\
    \      [else (loop (rest s) (+ i 1) count)])))\n", "  (define (is-upper? c)\n\
    \    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count-upper-vowels-in-even-indices s)\n    (define (count-upper-vowels-in-even-indices-iter\
    \ s i)\n      (cond [(empty? s) 0]\n            [(and (is-even? i) (is-upper?\
    \ (first s)) (is-vowel? (first s)))\n             (+ 1 (count-upper-vowels-in-even-indices-iter\
    \ (rest s) (+ i 1)))]\n            [else (count-upper-vowels-in-even-indices-iter\
    \ (rest s) (+ i 1))]))\n    (count-upper-vowels-in-even-indices-iter s 0))\n \
    \ (count-upper-vowels-in-even-indices s))\n```\n\n### Problem 3\n\n```racket\n\
    #lang racket\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s))\n          (even? (remainder (string-length\
    \ s) 2)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n\
    \      [(and (even? i) (vowel? (string-ref s i)))\n       (loop (+ i 1) (+ count\
    \ 1))]\n      [else (loop (+ i 1) count)])))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(= (remainder i 2) 0)\n      \
    \ (cond\n         [(member (first s) '(#\\A #\\E #\\I #\\O #\\U))\n          (+\
    \ 1 (count_upper-helper (rest s) (+ i 1)))]\n         [else (count_upper-helper\
    \ (rest s) (+ i 1))])]\n      [else (count_upper-helper (rest s) (+ i 1))]))\n\
    \  (count_upper-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel?\
    \ (string-ref s 0))\n          (char-upper-case? (string-ref s 0)))\n     (+ 1\
    \ (count_upper (substring s 2)))]\n    [else (count_upper (substring s 2))]))\n",
  "  (define (is-upper? c)\n    (and (char-upper-case? c)\n         (member c '#\\\
    A #\\E #\\I #\\O #\\U)))\n  (define (count-upper-vowels s)\n    (cond [(empty?\
    \ s) 0]\n          [(is-upper? (first s)) (+ 1 (count-upper-vowels (rest s)))]\n\
    \          [else (count-upper-vowels (rest s))]))\n  (count-upper-vowels (even-indices\
    \ s)))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n\
    \          (or (equal? (first s) #\\A)\n              (equal? (first s) #\\E)\n\
    \              (equal? (first s) #\\I)\n              (equal? (first s) #\\O)\n\
    \              (equal? (first s) #\\U)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (define (count_upper-helper s i)\n\
    \    (cond\n      [(empty? s) i]\n      [(and (char-upper-case? (first s))\n \
    \           (even? (add1 (length s))))\n       (count_upper-helper (rest s) (add1\
    \ i))]\n      [else (count_upper-helper (rest s) i)]))\n  (count_upper-helper\
    \ s 0))\n", "  (define (is-upper? c)\n    (and (char-upper-case? c)\n        \
    \ (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count-upper s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(is-upper? (first s)) (+ 1 (count-upper (rest s)))]\n\
    \      [else (count-upper (rest s))]))\n  (define (even-indices s)\n    (cond\n\
    \      [(empty? s) empty]\n      [(zero? (modulo (length s) 2)) (cons (first s)\
    \ (even-indices (rest s)))]\n      [else (even-indices (rest s))]))\n  (count-upper\
    \ (even-indices s)))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first\
    \ s))\n          (char-upper-case? (first s))\n          (even? (index s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (count-upper-helper s i)\n    (cond [(empty? s) 0]\n          [(and\
    \ (even? i) (char-upper-case? (first s)))\n           (+ 1 (count-upper-helper\
    \ (rest s) (+ i 1)))]\n          [else (count-upper-helper (rest s) (+ i 1))]))\n\
    \  (count-upper-helper s 0))\n", "  (define (is_upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u)))\n  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count_upper_vowels s)\n    (cond [(empty? s) 0]\n          [(and (is_upper?\
    \ (first s)) (is_vowel? (first s)))\n           (+ 1 (count_upper_vowels (rest\
    \ s)))]\n          [else (count_upper_vowels (rest s))]))\n  (count_upper_vowels\
    \ (filter is_even? (string->list s))))\n", "  (define (is-upper? c)\n    (char-upper-case?\
    \ c))\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels\
    \ s)\n    (cond [(empty? s) 0]\n          [(and (is-even? (string-length s))\n\
    \                (is-upper? (first s))\n                (is-vowel? (first s)))\n\
    \           (+ 1 (count-upper-vowels (rest s)))]\n          [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels s))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i (string-length s)) count]\n      [(and (even? i) (member\
    \ (string-ref s i) \"AEIOU\"))\n       (loop (+ i 1) (+ count 1))]\n      [else\
    \ (loop (+ i 1) count)])))\n", "  (define (is-upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is-vowel? c)\n    (or (char=? c #\\a)\
    \ (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define\
    \ (count-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(and (is-upper?\
    \ (first s)) (is-vowel? (first s)))\n       (+ 1 (count-upper-vowels (rest s)))]\n\
    \      [else (count-upper-vowels (rest s))]))\n  (define (even-indices s)\n  \
    \  (cond\n      [(empty? s) empty]\n      [(even? (length s)) (cons (first s)\
    \ (even-indices (rest s)))]\n      [else (even-indices (rest s))]))\n  (count-upper-vowels\
    \ (even-indices s)))\n", "  (define (is-upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is-vowel? c)\n    (or (char=? c #\\a)\
    \ (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define\
    \ (count-upper-vowels s)\n    (cond [(empty? s) 0]\n          [(and (is-upper?\
    \ (first s)) (is-vowel? (first s)))\n           (+ 1 (count-upper-vowels (rest\
    \ s)))]\n          [else (count-upper-vowels (rest s))]))\n  (count-upper-vowels\
    \ (string-&gt;list s)))\n</code>\n", "  (let loop ([i 0] [count 0])\n    (cond\n\
    \      [(= i (string-length s)) count]\n      [(and (even? i) (member (string-ref\
    \ s i) \"AEIOU\"))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i\
    \ 1) count)])))\n", "  (define (is-upper? c)\n    (and (char-upper-case? c)\n\
    \         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-vowels\
    \ s)\n    (cond [(empty? s) 0]\n          [(is-upper? (first s)) (+ 1 (count-upper-vowels\
    \ (rest s)))]\n          [else (count-upper-vowels (rest s))]))\n  (define (even-indices\
    \ s)\n    (cond [(empty? s) empty]\n          [(even? (length s)) (cons (first\
    \ s) (even-indices (rest s)))]\n          [else (even-indices (rest s))]))\n \
    \ (count-upper-vowels (even-indices s)))\n", "  (cond [(empty? s) 0]\n       \
    \ [(and (char-upper-case? (first s))\n              (char-vowel? (first s))\n\
    \              (even? (remainder (string-index s (first s)) 2)))\n         (+\
    \ 1 (count_upper (rest s)))]\n        [else (count_upper (rest s))]))\n", "  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i) (vowel? (string-ref s i)))\n       (loop (+ i 1) (+ count\
    \ 1))]\n      [else (loop (+ i 1) count)])))\n", "  (define (is-upper? c)\n  \
    \  (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n\
    \  (define (count-upper-vowels s i)\n    (cond\n      [(empty? s) i]\n      [(is-upper?\
    \ (first s))\n       (count-upper-vowels (rest s) (+ i 1))]\n      [else (count-upper-vowels\
    \ (rest s) i)]))\n  (count-upper-vowels s 0))\n", "  (define (count-upper-helper\
    \ s i)\n    (if (or (= i (string-length s))\n            (not (vowel? (string-ref\
    \ s i))))\n        0\n        (+ (if (char-upper-case? (string-ref s i)) 1 0)\n\
    \           (count-upper-helper s (+ i 2)))))\n  (count-upper-helper s 0))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (define (is-upper? c)\n    (char-upper-case? c))\n  (define (is-vowel? c)\n \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count-upper-vowels-in-even-indices s)\n    (define (count-upper-vowels-in-even-indices-iter\
    \ s i acc)\n      (cond\n        [(empty? s) acc]\n        [(and (is-even? i)\
    \ (is-upper? (first s)) (is-vowel? (first s)))\n         (count-upper-vowels-in-even-indices-iter\
    \ (rest s) (+ i 1) (+ acc 1))]\n        [else (count-upper-vowels-in-even-indices-iter\
    \ (rest s) (+ i 1) acc)]))\n    (count-upper-vowels-in-even-indices-iter s 0 0))\n\
    \  (count-upper-vowels-in-even-indices s))\n", "  (define (is-upper? c)\n    (and\
    \ (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define\
    \ (count-upper s i)\n    (cond [(empty? s) 0]\n          [(is-upper? (first s))\n\
    \           (if (even? i)\n               (+ 1 (count-upper (rest s) (+ i 1)))\n\
    \               (count-upper (rest s) (+ i 1)))]\n          [else (count-upper\
    \ (rest s) (+ i 1))]))\n  (count-upper s 0))\n", "  (define (is_upper? c)\n  \
    \  (char-upper-case? c))\n  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u)))\n  (define (is_even? i)\n    (= (remainder i 2) 0))\n  (define\
    \ (count-upper-vowels s)\n    (for/fold ([count 0])\n              ([i (in-range\
    \ (string-length s))]\n               [c (in-string s)])\n      (if (and (is_upper?\
    \ c)\n               (is_vowel? c)\n               (is_even? i))\n          (add1\
    \ count)\n          count)))\n  (count-upper-vowels s))\n", "  (define (is-upper?\
    \ c)\n    (char-upper-case? c))\n  (define (is-vowel? c)\n    (member c '(#\\\
    a #\\e #\\i #\\o #\\u)))\n  (define (is-even-index? i)\n    (= (remainder i 2)\
    \ 0))\n  (define (count-upper-vowels-in-even-indices s)\n    (for/fold ([count\
    \ 0])\n              ([i (in-range (string-length s))])\n      (if (and (is-even-index?\
    \ i)\n               (is-upper? (string-ref s i))\n               (is-vowel? (string-ref\
    \ s i)))\n          (add1 count)\n          count)))\n  (count-upper-vowels-in-even-indices\
    \ s))\n", "  (define (count-upper-helper s i)\n    (cond\n      [(empty? s) 0]\n\
    \      [(= (remainder i 2) 0)\n       (if (member (first s) '#(#\\A #\\E #\\I\
    \ #\\O #\\U))\n           (+ 1 (count-upper-helper (rest s) (+ i 1)))\n      \
    \     (count-upper-helper (rest s) (+ i 1)))]\n      [else (count-upper-helper\
    \ (rest s) (+ i 1))]))\n  (count-upper-helper s 0))\n", "  (let loop ([s s] [i\
    \ 0] [count 0])\n    (cond [(empty? s) count]\n          [(and (even? i) (char-upper-case?\
    \ (first s)))\n           (loop (rest s) (+ i 1) (+ count 1))]\n          [else\
    \ (loop (rest s) (+ i 1) count)])))\n", "  (define (is_upper c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel c)\n    (or (char=? c #\\a) (char=?\
    \ c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_upper-helper\
    \ s i)\n    (if (= i (string-length s))\n        0\n        (if (and (is_upper\
    \ (string-ref s i)) (is_vowel (string-ref s i)))\n            (+ 1 (count_upper-helper\
    \ s (+ i 2)))\n            (count_upper-helper s (+ i 2)))))\n  (count_upper-helper\
    \ s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s)\
    \ count]\n      [(and (even? i) (char-upper-case? (first s)))\n       (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (vowel? (first s))\n          (even? (remainder (string-length s) 2)))\n   \
    \  (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define\
    \ (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is-vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels s)\n    (cond [(empty?\
    \ s) 0]\n          [(and (is-upper? (first s)) (is-vowel? (first s)))\n      \
    \     (+ 1 (count-upper-vowels (rest s)))]\n          [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels (rest (evens s))))\n", "  (define (is-upper?\
    \ c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O\
    \ #\\U))))\n  (define (count-upper s)\n    (cond [(empty? s) 0]\n          [(is-upper?\
    \ (first s)) (+ 1 (count-upper (rest s)))]\n          [else (count-upper (rest\
    \ s))]))\n  (define (even-indices s)\n    (cond [(empty? s) empty]\n         \
    \ [(zero? (modulo (length s) 2)) (cons (first s) (even-indices (rest s)))]\n \
    \         [else (even-indices (rest s))]))\n  (count-upper (even-indices s)))\n",
  "  (define (is_upper? c)\n    (char-upper-case? c))\n  (define (is_vowel? c)\n \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count_upper_vowels_in_even_indices s)\n    (cond [(empty?\
    \ s) 0]\n          [(and (is_even? (length s))\n                (is_upper? (first\
    \ s))\n                (is_vowel? (first s)))\n           (+ 1 (count_upper_vowels_in_even_indices\
    \ (rest s)))]\n          [else (count_upper_vowels_in_even_indices (rest s))]))\n\
    \  (count_upper_vowels_in_even_indices s))\n", "  (define (count-upper-helper\
    \ s i)\n    (if (or (equal? i (string-length s))\n            (not (char-vowel?\
    \ (string-ref s i))))\n        0\n        (+ (if (char-upper-case? (string-ref\
    \ s i)) 1 0)\n           (count-upper-helper s (+ i 2)))))\n  (count-upper-helper\
    \ s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s)\
    \ count]\n      [(and (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n\
    \       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i\
    \ 1) count)])))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty?\
    \ s) count]\n      [(and (even? i) (member (first s) '#(#\\A #\\E #\\I #\\O #\\\
    U)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s)\
    \ (+ i 1) count)])))\n", "  (define (is-upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is-vowel? c)\n    (or (char=? c #\\a)\
    \ (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define\
    \ (count-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(and (is-upper?\
    \ (first s)) (is-vowel? (first s)))\n       (+ 1 (count-upper-vowels (rest s)))]\n\
    \      [else (count-upper-vowels (rest s))]))\n  (count-upper-vowels (rest (evens\
    \ s))))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s)) (even?\
    \ (index s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (define (count_upper-helper s i)\n    (cond\n      [(empty? s)\
    \ i]\n      [(and (vowel? (first s)) (even? (remainder i 2)) (char-upper-case?\
    \ (first s)))\n       (count_upper-helper (rest s) (+ i 1))]\n      [else (count_upper-helper\
    \ (rest s) (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (let loop ([s s] [i\
    \ 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (even? i) (vowel?\
    \ (string-ref s 0)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else\
    \ (loop (rest s) (+ i 1) count)])))\n", "  (define (is_upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u)))\n  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count-even-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_even?\
    \ (length s)) (is_upper? (first s)) (is_vowel? (first s)))\n       (+ 1 (count-even-upper-vowels\
    \ (rest s)))]\n      [else (count-even-upper-vowels (rest s))]))\n  (count-even-upper-vowels\
    \ (string->list s)))\n", "  (define (count-upper-helper s i)\n    (cond\n    \
    \  [(empty? s) 0]\n      [(and (even? i) (vowel? (first s)) (upper? (first s)))\n\
    \       (+ 1 (count-upper-helper (rest s) (+ i 1)))]\n      [else (count-upper-helper\
    \ (rest s) (+ i 1))]))\n  (count-upper-helper s 0))\n", "  (define (is-upper-vowel\
    \ c)\n    (and (char-upcase? c)\n         (member c '(#\\A #\\E #\\I #\\O #\\\
    U))))\n  (define (count-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n   \
    \   [(is-upper-vowel (first s))\n       (+ 1 (count-upper-vowels (rest s)))]\n\
    \      [else (count-upper-vowels (rest s))]))\n  (define (even-indices s)\n  \
    \  (cond\n      [(empty? s) empty]\n      [(even? (length s)) (cons (first s)\
    \ (even-indices (rest s)))]\n      [else (even-indices (rest s))]))\n  (count-upper-vowels\
    \ (even-indices s)))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(=\
    \ i (string-length s)) count]\n      [(and (even? i) (member (string-ref s i)\
    \ '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (+ i 1) (+ count 1))]\n      [else\
    \ (loop (+ i 1) count)])))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n\
    \      [(empty? s) count]\n      [(and (even? i) (member (first s) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else\
    \ (loop (rest s) (+ i 1) count)])))\n", "  (let loop ([s s] [i 0] [count 0])\n\
    \    (cond\n      [(empty? s) count]\n      [(and (char-upper-case? (first s))\n\
    \            (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else\
    \ (loop (rest s) (+ i 1) count)])))\n", "  (define (is-upper? c)\n    (char-upper-case?\
    \ c))\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is-even? (length s))\n   \
    \         (is-upper? (first s))\n            (is-vowel? (first s)))\n       (+\
    \ 1 (count-upper-vowels-in-even-indices (rest s)))]\n      [else (count-upper-vowels-in-even-indices\
    \ (rest s))]))\n  (count-upper-vowels-in-even-indices s))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel? (first s))\n\
    \          (even? (remainder (string-length s) 2)))\n     (+ 1 (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (cond [(empty? s) 0]\n   \
    \     [(and (vowel? (string-ref s 0))\n              (char-upper-case? (string-ref\
    \ s 0)))\n         (+ 1 (count_upper (substring s 2)))]\n        [else (count_upper\
    \ (substring s 2))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n  \
    \    [(empty? s) count]\n      [(and (vowel? (first s)) (even? i)) (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n\
    \      [(and (even? i) (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n\
    \       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (define (count_upper-helper s i)\n    (if (or (= i (string-length s))\n     \
    \       (not (char-vowel? (string-ref s i))))\n        0\n        (+ (if (char-upper-case?\
    \ (string-ref s i)) 1 0)\n           (count_upper-helper s (+ i 2)))))\n  (count_upper-helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n\
    \          (vowel? (first s))\n          (even? (remainder (string-length s) 2)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (count-upper-helper s i)\n    (cond\n      [(empty? s) i]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? (remainder i 2)))\n       (count-upper-helper\
    \ (rest s) (+ i 1))]\n      [else (count-upper-helper (rest s) (+ i 1))]))\n \
    \ (count-upper-helper s 0))\n", "  (let loop ([i 0] [acc 0])\n    (cond\n    \
    \  [(= i (string-length s)) acc]\n      [(and (even? i) (char-upper-case? (string-ref\
    \ s i)))\n       (loop (+ i 1) (+ acc 1))]\n      [else (loop (+ i 1) acc)])))\n",
  "  (define (count_upper_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n\
    \      [(and (char-upper-case? (string-ref s i))\n            (vowel? (string-ref\
    \ s i)))\n       (+ 1 (count_upper_helper s (+ i 2)))]\n      [else (count_upper_helper\
    \ s (+ i 2))]))\n  (count_upper_helper s 0))\n", "  (define (is-upper? c)\n  \
    \  (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count-upper-vowels-in-even-indices s)\n    (cond\n    \
    \  [(empty? s) 0]\n      [(and (is-even? (string-length s))\n            (is-upper?\
    \ (string-ref s 0))\n            (is-vowel? (string-ref s 0)))\n       (+ 1 (count-upper-vowels-in-even-indices\
    \ (substring s 1)))]\n      [else (count-upper-vowels-in-even-indices (substring\
    \ s 1))]))\n  (count-upper-vowels-in-even-indices s))\n", "  (define (count-upper-helper\
    \ s i)\n    (cond [(empty? s) 0]\n          [(and (even? i) (vowel? (first s)))\n\
    \           (+ 1 (count-upper-helper (rest s) (+ i 1)))]\n          [else (count-upper-helper\
    \ (rest s) (+ i 1))]))\n  (count-upper-helper s 0))\n", "  (define (is-upper?\
    \ c)\n    (and (char-upper-case? c)\n         (member c '#\\A #\\E #\\I #\\O #\\\
    U)))\n  (define (count-upper-vowels s)\n    (cond [(empty? s) 0]\n          [(is-upper?\
    \ (first s)) (+ 1 (count-upper-vowels (rest s)))]\n          [else (count-upper-vowels\
    \ (rest s))]))\n  (define (even-indices s)\n    (cond [(empty? s) '()]\n     \
    \     [(even? (length s)) (cons (first s) (even-indices (rest s)))]\n        \
    \  [else (even-indices (rest s))]))\n  (count-upper-vowels (even-indices s)))\n",
  "  (define (count_upper-helper s i)\n    (cond\n      [(empty? s) 0]\n      [(and\
    \ (even? i) (vowel? (string-ref s 0)))\n       (+ 1 (count_upper-helper (rest\
    \ s) (+ i 1)))]\n      [else (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper\
    \ s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s)\
    \ count]\n      [(even? i)\n       (cond\n         [(member (first s) '(#\\A #\\\
    E #\\I #\\O #\\U))\n          (loop (rest s) (add1 i) (add1 count))]\n       \
    \  [else (loop (rest s) (add1 i) count)])]\n      [else (loop (rest s) (add1 i)\
    \ count)])))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty?\
    \ s) count]\n      [(and (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\\
    U)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s)\
    \ (+ i 1) count)])))\n", "  (define (is_upper? c)\n    (and (char-upper-case?\
    \ c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-vowels\
    \ s)\n    (cond [(empty? s) 0]\n          [(is_upper? (first s))\n           (+\
    \ 1 (count-upper-vowels (rest s)))]\n          [else (count-upper-vowels (rest\
    \ s))]))\n  (define (even-indices s)\n    (cond [(empty? s) empty]\n         \
    \ [(zero? (modulo (length s) 2))\n           (cons (first s) (even-indices (rest\
    \ s)))]\n          [else (even-indices (rest s))]))\n  (count-upper-vowels (even-indices\
    \ s)))\n", "  (define (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is-vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=?\
    \ c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(and (is-upper? (first s)) (is-vowel?\
    \ (first s)))\n       (+ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels (string-drop s 1)))\n", "  (cond [(empty?\
    \ s) 0]\n        [(and (char-upper-case? (first s))\n              (vowel? (first\
    \ s))\n              (even? (remainder (string-index s (first s)) 2)))\n     \
    \    (+ 1 (count_upper (rest s)))]\n        [else (count_upper (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (vowel? (first s))\n          (even? (remainder (string-length s) 2)))\n   \
    \  (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (even? (index s)) (vowel? (first s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (vowel? (string-ref s 0)))\n       (loop (rest s) (+ i 1) (+ count\
    \ 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (define (is-upper?\
    \ c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-even-upper-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is-upper? (first s)) (is-vowel?\
    \ (first s)))\n       (+ 1 (count-even-upper-vowels (rest s)))]\n      [else (count-even-upper-vowels\
    \ (rest s))]))\n  (count-even-upper-vowels (rest (rest s))))\n", "  (define (is-upper?\
    \ c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n  \
    \  (= (remainder n 2) 0))\n  (define (count-upper-vowels s)\n    (cond\n     \
    \ [(empty? s) 0]\n      [(and (is-even? (length s)) (is-upper? (first s)) (is-vowel?\
    \ (first s)))\n       (+ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels (string->list s)))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(and (even? i) (vowel? (first\
    \ s)) (upper? (first s)))\n       (+ 1 (count_upper-helper (rest s) (+ i 1)))]\n\
    \      [else (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper s\
    \ 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n\
    \      [(and (char-upper-case? (first s))\n            (even? i))\n       (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (define (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (is-even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (for/fold ([count 0]) ([i (in-range (string-length s))])\n      (if\
    \ (and (is-even? i) (is-upper? (string-ref s i)) (is-vowel? (string-ref s i)))\n\
    \          (+ count 1)\n          count)))\n  (count-upper-vowels-in-even-indices\
    \ s))\n", "  (define (count-upper-helper s i)\n    (cond\n      [(empty? s) i]\n\
    \      [(and (char-upper-case? (first s))\n            (even? (remainder i 2)))\n\
    \       (count-upper-helper (rest s) (+ i 1))]\n      [else (count-upper-helper\
    \ (rest s) (+ i 1))]))\n  (count-upper-helper s 0))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (vowel? (first s)) (even? (index s))) (+ 1 (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i 0] [count\
    \ 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case? (first\
    \ s))\n            (even? i))\n       (loop (rest s) (add1 i) (add1 count))]\n\
    \      [else (loop (rest s) (add1 i) count)])))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case? (first\
    \ s))\n            (even? (remainder i 2)))\n       (count_upper-helper (rest\
    \ s) (+ i 1))]\n      [else (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n\
    \          (vowel? (first s))\n          (even? (remainder (string-length s) 2)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (count-upper-helper s i)\n    (if (or (equal? i (string-length s))\n\
    \            (not (char-vowel? (string-ref s i))))\n        0\n        (+ (if\
    \ (char-upper-case? (string-ref s i)) 1 0)\n           (count-upper-helper s (+\
    \ i 2)))))\n  (count-upper-helper s 0))\n", "  (define (count-upper-helper s i)\n\
    \    (if (or (= i (string-length s))\n            (not (char-vowel? (string-ref\
    \ s i))))\n        0\n        (+ (if (char-upper-case? (string-ref s i)) 1 0)\n\
    \           (count-upper-helper s (+ i 2)))))\n  (count-upper-helper s 0))\n",
  "  (let loop ([i 0] [n 0])\n    (cond\n      [(= i (string-length s)) n]\n     \
    \ [(and (even? i) (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n   \
    \    (loop (+ i 1) (+ n 1))]\n      [else (loop (+ i 1) n)])))\n", "  (let loop\
    \ ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n      [(and\
    \ (even? i) (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop\
    \ (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", "  (define (count-upper-helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(and (even? i) (vowel? (first\
    \ s)) (upper? (first s)))\n       (+ 1 (count-upper-helper (rest s) (+ i 1)))]\n\
    \      [else (count-upper-helper (rest s) (+ i 1))]))\n  (count-upper-helper s\
    \ 0))\n", "  (define (is-upper? c)\n    (char-upper-case? c))\n  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n  \
    \  (= (remainder n 2) 0))\n  (define (count-upper-vowels lst)\n    (cond [(empty?\
    \ lst) 0]\n          [(and (is-upper? (first lst))\n                (is-vowel?\
    \ (first lst)))\n           (+ 1 (count-upper-vowels (rest lst)))]\n         \
    \ [else (count-upper-vowels (rest lst))]))\n  (count-upper-vowels (filter is-even?\
    \ (string->list s))))\n", "  (define (count-upper-helper s i count)\n    (cond\n\
    \      [(empty? s) count]\n      [(and (char-upper-case? (first s))\n        \
    \    (even? i))\n       (count-upper-helper (rest s) (+ i 1) (+ count 1))]\n \
    \     [else (count-upper-helper (rest s) (+ i 1) count)]))\n  (count-upper-helper\
    \ s 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (string-ref s 0))\n\
    \          (upper? (string-ref s 0)))\n     (+ 1 (count_upper (substring s 2)))]\n\
    \    [else (count_upper (substring s 2))]))\n", "  (define (is-upper? c)\n   \
    \ (and (char-upper-case? c)\n         (member c '#\\A #\\E #\\I #\\O #\\U)))\n\
    \  (define (count-upper s i)\n    (if (string-empty? s)\n        0\n        (if\
    \ (even? i)\n            (+ (if (is-upper? (string-ref s 0)) 1 0)\n          \
    \     (count-upper (string-drop s 1) (+ i 1)))\n            (count-upper (string-drop\
    \ s 1) (+ i 1)))))\n  (count-upper s 0))\n", "  (define (is-upper? c)\n    (and\
    \ (char-alphabetic? c) (char-upper-case? c)))\n  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-upper-vowels s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(and (is-upper? (first s)) (is-vowel? (first s)))\n\
    \       (+ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels (rest (even-indexed s))))\n", "  (let loop\
    \ ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? i))\n       (loop (rest s) (add1 i) (add1 count))]\n\
    \      [else (loop (rest s) (add1 i) count)])))\n", "  (define (is-upper? c)\n\
    \    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count-upper-vowels-even-indices s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(and (is-even? (length s)) (is-upper? (first s)) (is-vowel? (first\
    \ s)))\n       (+ 1 (count-upper-vowels-even-indices (rest s)))]\n      [else\
    \ (count-upper-vowels-even-indices (rest s))]))\n  (count-upper-vowels-even-indices\
    \ s))\n", "  (define (is_upper? c)\n    (char-upcase c))\n  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even? n)\n  \
    \  (= (remainder n 2) 0))\n  (define (count-upper-vowels s)\n    (cond [(empty?\
    \ s) 0]\n          [(and (is_upper? (first s))\n                (is_vowel? (first\
    \ s)))\n           (+ 1 (count-upper-vowels (rest s)))]\n          [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels (filter is_even? (string->list s))))\n",
  "  (define (count_upper-helper s i)\n    (cond\n      [(empty? s) i]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? (remainder i 2)))\n       (count_upper-helper\
    \ (rest s) (+ i 1))]\n      [else (count_upper-helper (rest s) (+ i 1))]))\n \
    \ (count_upper-helper s 0))\n", "  (define (count_upper-helper s i)\n    (cond\n\
    \      [(empty? s) i]\n      [(and (even? (length s)) (char-upper-case? (first\
    \ s)))\n       (count_upper-helper (rest s) (+ i 1))]\n      [else (count_upper-helper\
    \ (rest s) i)]))\n  (count_upper-helper s 0))\n", "  (define (is-upper? c)\n \
    \   (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count-upper-vowels-in-even-indices s)\n    (if (null? s)\n\
    \        0\n        (if (and (is-even? (string-length s))\n                 (is-upper?\
    \ (string-ref s 0))\n                 (is-vowel? (string-ref s 0)))\n        \
    \    (+ 1 (count-upper-vowels-in-even-indices (substring s 1)))\n            (count-upper-vowels-in-even-indices\
    \ (substring s 1)))))\n  (count-upper-vowels-in-even-indices s))\n", "  (define\
    \ (count-upper-helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n   \
    \   [(and (char-upcase? (string-ref s i))\n            (vowel? (string-ref s i)))\n\
    \       (+ 1 (count-upper-helper s (+ i 2)))]\n      [else (count-upper-helper\
    \ s (+ i 2))]))\n  (count-upper-helper s 0))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i (string-length s)) count]\n      [(and (even? i) (member\
    \ (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (+ i 1) (+ count\
    \ 1))]\n      [else (loop (+ i 1) count)])))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i (string-length s)) count]\n      [(and (even? i) (vowel?\
    \ (string-ref s i)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+\
    \ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (even? (index s))\
    \ (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (define (count_upper_helper s i acc)\n    (cond\n      [(empty?\
    \ s) acc]\n      [(and (vowel? (string-ref s i)) (char-upper-case? (string-ref\
    \ s i)))\n       (count_upper_helper (rest s) (+ i 1) (+ acc 1))]\n      [else\
    \ (count_upper_helper (rest s) (+ i 1) acc)]))\n  (count_upper_helper s 0 0))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (vowel? (first s))\n          (even? (index-of s (first s))))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define (count-upper-helper\
    \ s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(and (char-upper-case?\
    \ (string-ref s i))\n            (vowel? (string-ref s i)))\n       (+ 1 (count-upper-helper\
    \ s (+ i 2)))]\n      [else (count-upper-helper s (+ i 2))]))\n  (count-upper-helper\
    \ s 0))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length\
    \ s)) count]\n      [(and (even? i) (char-upper-case? (string-ref s i)))\n   \
    \    (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", " \
    \ (define (is-upper? c)\n    (and (char-upper-case? c)\n         (member c '#\\\
    a #\\e #\\i #\\o #\\u)))\n  (define (count-upper-vowels s)\n    (cond [(empty?\
    \ s) 0]\n          [(is-upper? (first s)) (+ 1 (count-upper-vowels (rest s)))]\n\
    \          [else (count-upper-vowels (rest s))]))\n  (define (even-indices s)\n\
    \    (cond [(empty? s) empty]\n          [(even? (length s)) (cons (first s) (even-indices\
    \ (rest s)))]\n          [else (even-indices (rest s))]))\n  (count-upper-vowels\
    \ (even-indices s)))\n", "  (define (count_upper-helper s i)\n    (cond\n    \
    \  [(empty? s) i]\n      [(and (char-upper-case? (first s))\n            (even?\
    \ (add1 i)))\n       (count_upper-helper (rest s) (add1 i))]\n      [else (count_upper-helper\
    \ (rest s) i)]))\n  (count_upper-helper s 0))\n", "  (define (is-upper? c)\n \
    \   (char-upper-case? c))\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e\
    \ #\\i #\\o #\\u)))\n  (define (is-even-index? i)\n    (= (remainder i 2) 0))\n\
    \  (define (count-upper-vowels s)\n    (for/fold ([count 0])\n              ([i\
    \ (in-range (string-length s))]\n               [c (in-string s)])\n      (if\
    \ (and (is-even-index? i)\n               (is-upper? c)\n               (is-vowel?\
    \ c))\n          (add1 count)\n          count)))\n  (count-upper-vowels s))\n",
  "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n\
    \      [(and (even? i) (char-upper-case? (string-ref s i)))\n       (loop (+ i\
    \ 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", "  (let loop ([s\
    \ s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case?\
    \ (first s))\n            (char-vowel? (first s))\n            (even? i))\n  \
    \     (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1)\
    \ count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s))\n          (even? (remainder (string-length\
    \ s) 2)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n\
    \      [(and (even? i) (char-upper-case? (string-ref s i)))\n       (loop (+ i\
    \ 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(= (modulo i 2) 0)\n       (cond\n\
    \         [(char-upper-case? (first s)) (+ 1 (count_upper-helper (rest s) (+ i\
    \ 1)))]\n         [else (count_upper-helper (rest s) (+ i 1))])]\n      [else\
    \ (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper s 0))\n", " \
    \ (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n\
    \      [(and (char-alphabetic? (string-ref s i))\n            (char-uppercase?\
    \ (string-ref s i))\n            (even? i))\n       (loop (+ i 1) (+ count 1))]\n\
    \      [else (loop (+ i 1) count)])))\n", "  (define (count_upper-helper s i)\n\
    \    (cond\n      [(empty? s) i]\n      [(and (vowel? (first s)) (even? (remainder\
    \ i 2)) (upper? (first s)))\n       (count_upper-helper (rest s) (+ i 1))]\n \
    \     [else (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper s\
    \ 0))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length\
    \ s)) count]\n      [(and (even? i) (member (string-ref s i) \"AEIOU\"))\n   \
    \    (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n        \
    \  (vowel? (first s))\n          (even? (remainder (string-length s) 2)))\n  \
    \   (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is-vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\\
    i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels s)\n    (if\
    \ (string-empty? s)\n        0\n        (if (and (is-upper? (string-ref s 0))\
    \ (is-vowel? (string-ref s 0)))\n            (+ 1 (count-upper-vowels (substring\
    \ s 2)))\n            (count-upper-vowels (substring s 2)))))\n  (count-upper-vowels\
    \ s))\n", "  (define (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond [(empty? s) 0]\n          [(and (is-even? (string-length s))\n\
    \                (is-upper? (string-ref s 0))\n                (is-vowel? (string-ref\
    \ s 0)))\n           (+ 1 (count-upper-vowels-in-even-indices (substring s 1)))]\n\
    \          [else (count-upper-vowels-in-even-indices (substring s 1))]))\n  (count-upper-vowels-in-even-indices\
    \ s))\n", "  (define (count_upper_helper s i count)\n    (cond\n      [(empty?\
    \ s) count]\n      [(and (char-upper-case? (first s))\n            (even? i))\n\
    \       (count_upper_helper (rest s) (+ i 1) (+ count 1))]\n      [else (count_upper_helper\
    \ (rest s) (+ i 1) count)]))\n  (count_upper_helper s 0 0))\n", "  (let loop ([s\
    \ s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (even?\
    \ i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest s) (+\
    \ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (define\
    \ (is-upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count-upper-even-indices s)\n    (cond\n    \
    \  [(empty? s) 0]\n      [(is-upper? (first s))\n       (+ 1 (count-upper-even-indices\
    \ (rest s)))]\n      [else\n       (count-upper-even-indices (rest s))]))\n  (count-upper-even-indices\
    \ (rest s)))\n", "  (define (count_upper_helper s i acc)\n    (cond\n      [(empty?\
    \ s) acc]\n      [(and (char-vowel? (string-ref s i))\n            (char-upper-case?\
    \ (string-ref s i)))\n       (count_upper_helper (rest s) (+ i 1) (+ acc 1))]\n\
    \      [else (count_upper_helper (rest s) (+ i 1) acc)]))\n  (count_upper_helper\
    \ s 0 0))\n", "  (define (count_upper_helper s i)\n    (cond\n      [(empty? s)\
    \ 0]\n      [(and (even? i) (vowel? (first s)) (upper? (first s)))\n       (+\
    \ 1 (count_upper_helper (rest s) (+ i 1)))]\n      [else (count_upper_helper (rest\
    \ s) (+ i 1))]))\n  (count_upper_helper s 0))\n", "  (define (count-upper-vowels\
    \ s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case? (first\
    \ s))\n            (member (first s) '#(#\\A #\\E #\\I #\\O #\\U)))\n       (count-upper-vowels\
    \ (rest s) (+ i 1))]\n      [else (count-upper-vowels (rest s) i)]))\n  (count-upper-vowels\
    \ s 0))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length\
    \ s)) count]\n      [(and (char-upper-case? (string-ref s i))\n            (even?\
    \ i))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (char-upper-case? (first s))\n            (even? i))\n       (loop (rest\
    \ s) (add1 i) (add1 count))]\n      [else (loop (rest s) (add1 i) count)])))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (even? i) (vowel? (string-ref s 0)))\n       (loop (rest s) (+ i 1) (+\
    \ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (define (is-upper?\
    \ c)\n    (char-upper-case? c))\n  (define (is-vowel? c)\n    (member c '(#\\\
    a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n    (= (remainder n 2) 0))\n\
    \  (define (count-upper-vowels-in-even-indices s)\n    (for/fold ([count 0])\n\
    \              ([i (in-naturals)]\n               [c (in-string s)])\n      (if\
    \ (and (is-even? i)\n               (is-upper? c)\n               (is-vowel? c))\n\
    \          (add1 count)\n          count)))\n  (count-upper-vowels-in-even-indices\
    \ s))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n\
    \      [(and (char-upper-case? (first s))\n            (even? i))\n       (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (vowel? (string-upcase (first s))))\n           (loop (rest s) (+\
    \ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n", " \
    \ (define (count_upper-helper s i)\n    (cond [(empty? s) 0]\n          [(and\
    \ (even? i) (vowel? (first s)))\n           (+ 1 (count_upper-helper (rest s)\
    \ (+ i 1)))]\n          [else (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper\
    \ s 0))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length\
    \ s)) count]\n      [(and (even? i) (char-upper-case? (string-ref s i)))\n   \
    \    (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", " \
    \ (define (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (is-even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond [(empty? s) 0]\n          [(and (is-even? (string-length s))\n\
    \                (is-upper? (string-ref s 0))\n                (is-vowel? (string-ref\
    \ s 0)))\n           (+ 1 (count-upper-vowels-in-even-indices (substring s 1)))]\n\
    \          [else (count-upper-vowels-in-even-indices (substring s 1))]))\n  (count-upper-vowels-in-even-indices\
    \ s))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n\
    \      [(and (char-upper-case? (first s))\n            (even? i))\n       (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (define (count_upper-helper s i)\n    (cond\n      [(empty? s) 0]\n      [(and\
    \ (vowel? (first s)) (even? i)) (+ 1 (count_upper-helper (rest s) (+ i 1)))]\n\
    \      [else (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper s\
    \ 0))\n", "  (define (count_upper_helper s i acc)\n    (cond [(empty? s) acc]\n\
    \          [(and (vowel? (first s))\n                (upper? (first s))\n    \
    \            (even? i))\n           (count_upper_helper (rest s) (+ i 1) (+ acc\
    \ 1))]\n          [else (count_upper_helper (rest s) (+ i 1) acc)]))\n  (count_upper_helper\
    \ s 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (string-ref s 0))\
    \ (even? (string-index s 0)))\n     (+ 1 (count_upper (substring s 1)))]\n   \
    \ [else (count_upper (substring s 1))]))\n", "  (define (count_upper_helper s\
    \ i)\n    (cond\n      [(empty? s) 0]\n      [(and (even? i) (vowel? (first s))\
    \ (upper? (first s)))\n       (+ 1 (count_upper_helper (rest s) (+ i 1)))]\n \
    \     [else (count_upper_helper (rest s) (+ i 1))]))\n  (count_upper_helper s\
    \ 0))\n", "  (define (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is-even? (length s)) (is-upper?\
    \ (first s)) (is-vowel? (first s)))\n       (+ 1 (count-upper-vowels-in-even-indices\
    \ (rest s)))]\n      [else (count-upper-vowels-in-even-indices (rest s))]))\n\
    \  (count-upper-vowels-in-even-indices s))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (vowel? (first s))\n      \
    \    (even? (remainder (string-length s) 2)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n\
    \    (cond\n      [(empty? s) count]\n      [(and (even? i) (char-upper-case?\
    \ (first s)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n\
    \      [(empty? s) count]\n      [(and (char-upper-case? (first s))\n        \
    \    (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n\
    \      [(empty? s) count]\n      [(and (even? i) (member (first s) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else\
    \ (loop (rest s) (+ i 1) count)])))\n", "  (define (count-upper-helper s i)\n\
    \    (cond\n      [(empty? s) i]\n      [(and (even? (length s)) (vowel? (first\
    \ s)))\n       (count-upper-helper (rest s) (+ i 1))]\n      [else (count-upper-helper\
    \ (rest s) i)]))\n  (count-upper-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (vowel? (first s)) (even? (index s)))\n     (+ 1 (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(and (even? i) (vowel? (string-ref\
    \ s 0)) (char-upper-case? (string-ref s 0)))\n       (+ 1 (count_upper-helper\
    \ (rest s) (+ i 1)))]\n      [else (count_upper-helper (rest s) (+ i 1))]))\n\
    \  (count_upper-helper s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n\
    \      [(empty? s) count]\n      [(and (even? i) (vowel? (string-ref s 0)))\n\
    \       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i\
    \ 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (vowel? (first s))\n          (even? (remainder (string-length\
    \ s) 2)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (string-ref s 0)) (even? (string-index\
    \ s 0)))\n     (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length\
    \ s)) count]\n      [(and (even? i) (char-upper-case? (string-ref s i)))\n   \
    \    (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n        \
    \  (vowel? (first s))\n          (even? (remainder (string-length s) 2)))\n  \
    \   (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\\
    A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-vowels s)\n    (cond [(empty?\
    \ s) 0]\n          [(is_upper? (first s))\n           (+ 1 (count-upper-vowels\
    \ (rest s)))]\n          [else (count-upper-vowels (rest s))]))\n  (define (even-indices\
    \ s)\n    (cond [(empty? s) empty]\n          [(even? (length s)) (cons (first\
    \ s) (even-indices (rest s)))]\n          [else (even-indices (rest s))]))\n \
    \ (count-upper-vowels (even-indices s)))\n", "  (define (count_upper-helper s\
    \ i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(and (even? i) (vowel?\
    \ (string-ref s i)))\n       (+ 1 (count_upper-helper s (+ i 1)))]\n      [else\
    \ (count_upper-helper s (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (define\
    \ (is_upper c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count_upper_vowels s)\n    (if (string-empty?\
    \ s)\n        0\n        (let ([c (string-ref s 0)])\n          (+ (if (and (is_upper\
    \ c) (is_vowel c)) 1 0)\n             (count_upper_vowels (string-drop s 2))))))\n\
    \  (count_upper_vowels s))\n", "  (define (count_upper-helper s i)\n    (if (=\
    \ i (string-length s))\n        0\n        (if (and (char-upper-case? (string-ref\
    \ s i))\n                 (member (string-ref s i) \"AEIOU\"))\n            (+\
    \ 1 (count_upper-helper s (+ i 2)))\n            (count_upper-helper s (+ i 2)))))\n\
    \  (count_upper-helper s 0))\n", "  (define (count-upper-helper s i)\n    (cond\n\
    \      [(empty? s) 0]\n      [(= (remainder i 2) 0)\n       (cond\n         [(member\
    \ (first s) '(#\\A #\\E #\\I #\\O #\\U))\n          (+ 1 (count-upper-helper (rest\
    \ s) (+ i 1)))]\n         [else (count-upper-helper (rest s) (+ i 1))])]\n   \
    \   [else (count-upper-helper (rest s) (+ i 1))]))\n  (count-upper-helper s 0))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (vowel? (first s))\n          (even? (remainder (string-length s) 2)))\n   \
    \  (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let\
    \ loop ([i 0] [acc 0])\n    (cond\n      [(= i (string-length s)) acc]\n     \
    \ [(and (even? i) (vowel? (string-ref s i))) (loop (+ i 1) (+ acc 1))]\n     \
    \ [else (loop (+ i 1) acc)])))\n", "  (define (count_upper-helper s i acc)\n \
    \   (cond\n      [(empty? s) acc]\n      [(and (even? i) (vowel? (first s)) (upper?\
    \ (first s)))\n       (count_upper-helper (rest s) (+ i 1) (+ acc 1))]\n     \
    \ [else (count_upper-helper (rest s) (+ i 1) acc)]))\n  (count_upper-helper s\
    \ 0 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n\
    \          [(and (char-upper-case? (first s))\n                (even? i))\n  \
    \         (loop (rest s) (+ i 1) (+ count 1))]\n          [else (loop (rest s)\
    \ (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (vowel? (first s))\n          (even? (remainder (string-length\
    \ s) 2)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (let loop ([s s] [i 0] [n 0])\n    (cond [(empty? s) n]\n          [(even? i)\n\
    \           (if (member (first s) '#(#\\A #\\E #\\I #\\O #\\U))\n            \
    \   (loop (rest s) (add1 i) (add1 n))\n               (loop (rest s) (add1 i)\
    \ n))]\n          [else (loop (rest s) (add1 i) n)])))\n", "  (define (count-upper-helper\
    \ s i acc)\n    (cond\n      [(empty? s) acc]\n      [(and (vowel? (first s))\n\
    \            (upper? (first s))\n            (even? i))\n       (count-upper-helper\
    \ (rest s) (+ i 1) (+ acc 1))]\n      [else (count-upper-helper (rest s) (+ i\
    \ 1) acc)]))\n  (count-upper-helper s 0 0))\n", "  (define (is-upper? c)\n   \
    \ (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count-upper-vowels s)\n    (cond [(empty? s) 0]\n     \
    \     [(and (is-upper? (first s)) (is-vowel? (first s)))\n           (+ 1 (count-upper-vowels\
    \ (rest s)))]\n          [else (count-upper-vowels (rest s))]))\n  (count-upper-vowels\
    \ (filter is-even? (string->list s))))\n", "  (define (count_upper-helper s n)\n\
    \    (cond [(empty? s) n]\n          [(and (char-upper-case? (first s))\n    \
    \            (even? (length s)))\n           (count_upper-helper (rest s) (+ n\
    \ 1))]\n          [else (count_upper-helper (rest s) n)]))\n  (count_upper-helper\
    \ s 0))\n", "  (cond [(empty? s) 0]\n        [(and (char-upper-case? (first s))\n\
    \              (vowel? (first s))\n              (even? (remainder (string-index\
    \ s (first s)) 2)))\n         (+ 1 (count_upper (rest s)))]\n        [else (count_upper\
    \ (rest s))]))\n", "  (define (count_upper-helper s i acc)\n    (cond\n      [(empty?\
    \ s) acc]\n      [(and (vowel? (first s))\n            (even? i)\n           \
    \ (upper? (first s)))\n       (count_upper-helper (rest s) (+ i 1) (+ acc 1))]\n\
    \      [else (count_upper-helper (rest s) (+ i 1) acc)]))\n  (count_upper-helper\
    \ s 0 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
